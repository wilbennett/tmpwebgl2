// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"../src/.fable/fable-library.3.0.0/Util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isIterable = isIterable;
exports.isArrayLike = isArrayLike;
exports.isDisposable = isDisposable;
exports.sameConstructor = sameConstructor;
exports.comparerFromEqualityComparer = comparerFromEqualityComparer;
exports.assertEqual = assertEqual;
exports.assertNotEqual = assertNotEqual;
exports.lazyFromValue = lazyFromValue;
exports.padWithZeros = padWithZeros;
exports.padLeftAndRightWithZeros = padLeftAndRightWithZeros;
exports.dateOffset = dateOffset;
exports.int16ToString = int16ToString;
exports.int32ToString = int32ToString;
exports.stringHash = stringHash;
exports.numberHash = numberHash;
exports.combineHashCodes = combineHashCodes;
exports.physicalHash = physicalHash;
exports.identityHash = identityHash;
exports.dateHash = dateHash;
exports.arrayHash = arrayHash;
exports.structuralHash = structuralHash;
exports.fastStructuralHash = fastStructuralHash;
exports.safeHash = safeHash;
exports.equalArraysWith = equalArraysWith;
exports.equalArrays = equalArrays;
exports.equalsSafe = equalsSafe;
exports.equals = equals;
exports.compareDates = compareDates;
exports.comparePrimitives = comparePrimitives;
exports.compareArraysWith = compareArraysWith;
exports.compareArrays = compareArrays;
exports.compareSafe = compareSafe;
exports.compare = compare;
exports.min = min;
exports.max = max;
exports.clamp = clamp;
exports.createAtom = createAtom;
exports.createObj = createObj;
exports.jsOptions = jsOptions;
exports.round = round;
exports.sign = sign;
exports.randomNext = randomNext;
exports.randomBytes = randomBytes;
exports.unescapeDataString = unescapeDataString;
exports.escapeDataString = escapeDataString;
exports.escapeUriString = escapeUriString;
exports.count = count;
exports.clear = clear;
exports.uncurry = uncurry;
exports.curry = curry;
exports.partialApply = partialApply;
exports.mapCurriedArgs = mapCurriedArgs;
exports.ObjectRef = exports.Lazy = exports.Comparer = void 0;

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// tslint:disable:ban-types
function isIterable(x) {
  return x != null && _typeof(x) === "object" && Symbol.iterator in x;
}

function isArrayLike(x) {
  return Array.isArray(x) || ArrayBuffer.isView(x);
}

function isComparer(x) {
  return typeof x.Compare === "function";
}

function isComparable(x) {
  return typeof x.CompareTo === "function";
}

function isEquatable(x) {
  return typeof x.Equals === "function";
}

function isHashable(x) {
  return typeof x.GetHashCode === "function";
}

function isDisposable(x) {
  return x != null && typeof x.Dispose === "function";
}

function sameConstructor(x, y) {
  return Object.getPrototypeOf(x).constructor === Object.getPrototypeOf(y).constructor;
}

var Comparer = function Comparer(f) {
  _classCallCheck(this, Comparer);

  this.Compare = f || compare;
};

exports.Comparer = Comparer;

function comparerFromEqualityComparer(comparer) {
  // Sometimes IEqualityComparer also implements IComparer
  if (isComparer(comparer)) {
    return new Comparer(comparer.Compare);
  } else {
    return new Comparer(function (x, y) {
      var xhash = comparer.GetHashCode(x);
      var yhash = comparer.GetHashCode(y);

      if (xhash === yhash) {
        return comparer.Equals(x, y) ? 0 : -1;
      } else {
        return xhash < yhash ? -1 : 1;
      }
    });
  }
}

function assertEqual(actual, expected, msg) {
  if (!equals(actual, expected)) {
    throw Object.assign(new Error(msg || "Expected: ".concat(expected, " - Actual: ").concat(actual)), {
      actual: actual,
      expected: expected
    });
  }
}

function assertNotEqual(actual, expected, msg) {
  if (equals(actual, expected)) {
    throw Object.assign(new Error(msg || "Expected: ".concat(expected, " - Actual: ").concat(actual)), {
      actual: actual,
      expected: expected
    });
  }
}

var Lazy = /*#__PURE__*/function () {
  function Lazy(factory) {
    _classCallCheck(this, Lazy);

    this.factory = factory;
    this.isValueCreated = false;
  }

  _createClass(Lazy, [{
    key: "Value",
    get: function get() {
      if (!this.isValueCreated) {
        this.createdValue = this.factory();
        this.isValueCreated = true;
      }

      return this.createdValue;
    }
  }, {
    key: "IsValueCreated",
    get: function get() {
      return this.isValueCreated;
    }
  }]);

  return Lazy;
}();

exports.Lazy = Lazy;

function lazyFromValue(v) {
  return new Lazy(function () {
    return v;
  });
}

function padWithZeros(i, length) {
  var str = i.toString(10);

  while (str.length < length) {
    str = "0" + str;
  }

  return str;
}

function padLeftAndRightWithZeros(i, lengthLeft, lengthRight) {
  var str = i.toString(10);

  while (str.length < lengthLeft) {
    str = "0" + str;
  }

  while (str.length < lengthRight) {
    str = str + "0";
  }

  return str;
}

function dateOffset(date) {
  var date1 = date;
  return typeof date1.offset === "number" ? date1.offset : date.kind === 1
  /* UTC */
  ? 0 : date.getTimezoneOffset() * -60000;
}

function int16ToString(i, radix) {
  i = i < 0 && radix != null && radix !== 10 ? 0xFFFF + i + 1 : i;
  return i.toString(radix);
}

function int32ToString(i, radix) {
  i = i < 0 && radix != null && radix !== 10 ? 0xFFFFFFFF + i + 1 : i;
  return i.toString(radix);
}

var ObjectRef =
/** @class */
function () {
  var ObjectRef = /*#__PURE__*/function () {
    function ObjectRef() {
      _classCallCheck(this, ObjectRef);
    }

    _createClass(ObjectRef, null, [{
      key: "id",
      value: function id(o) {
        if (!ObjectRef.idMap.has(o)) {
          ObjectRef.idMap.set(o, ++ObjectRef.count);
        }

        return ObjectRef.idMap.get(o);
      }
    }]);

    return ObjectRef;
  }();

  ObjectRef.idMap = new WeakMap();
  ObjectRef.count = 0;
  return ObjectRef;
}();

exports.ObjectRef = ObjectRef;

function stringHash(s) {
  var i = 0;
  var h = 5381;
  var len = s.length;

  while (i < len) {
    h = h * 33 ^ s.charCodeAt(i++);
  }

  return h;
}

function numberHash(x) {
  return x * 2654435761 | 0;
} // From https://stackoverflow.com/a/37449594


function combineHashCodes(hashes) {
  if (hashes.length === 0) {
    return 0;
  }

  return hashes.reduce(function (h1, h2) {
    return (h1 << 5) + h1 ^ h2;
  });
}

function physicalHash(x) {
  if (x == null) {
    return 0;
  }

  switch (_typeof(x)) {
    case "boolean":
      return x ? 1 : 0;

    case "number":
      return numberHash(x);

    case "string":
      return stringHash(x);

    default:
      return numberHash(ObjectRef.id(x));
  }
}

function identityHash(x) {
  if (x == null) {
    return 0;
  } else if (isHashable(x)) {
    return x.GetHashCode();
  } else {
    return physicalHash(x);
  }
}

function dateHash(x) {
  return x.getTime();
}

function arrayHash(x) {
  var len = x.length;
  var hashes = new Array(len);

  for (var i = 0; i < len; i++) {
    hashes[i] = structuralHash(x[i]);
  }

  return combineHashCodes(hashes);
}

function structuralHash(x) {
  if (x == null) {
    return 0;
  }

  switch (_typeof(x)) {
    case "boolean":
      return x ? 1 : 0;

    case "number":
      return numberHash(x);

    case "string":
      return stringHash(x);

    default:
      {
        if (isHashable(x)) {
          return x.GetHashCode();
        } else if (isArrayLike(x)) {
          return arrayHash(x);
        } else if (x instanceof Date) {
          return dateHash(x);
        } else if (Object.getPrototypeOf(x).constructor === Object) {
          // TODO: check call-stack to prevent cyclic objects?
          var hashes = Object.values(x).map(function (v) {
            return structuralHash(v);
          });
          return combineHashCodes(hashes);
        } else {
          // Classes don't implement GetHashCode by default, but must use identity hashing
          return numberHash(ObjectRef.id(x)); // return stringHash(String(x));
        }
      }
  }
} // Intended for custom numeric types, like long or decimal


function fastStructuralHash(x) {
  return stringHash(String(x));
} // Intended for declared types that may or may not implement GetHashCode


function safeHash(x) {
  return x == null ? 0 : isHashable(x) ? x.GetHashCode() : numberHash(ObjectRef.id(x));
}

function equalArraysWith(x, y, eq) {
  if (x == null) {
    return y == null;
  }

  if (y == null) {
    return false;
  }

  if (x.length !== y.length) {
    return false;
  }

  for (var i = 0; i < x.length; i++) {
    if (!eq(x[i], y[i])) {
      return false;
    }
  }

  return true;
}

function equalArrays(x, y) {
  return equalArraysWith(x, y, equals);
}

function equalObjects(x, y) {
  var xKeys = Object.keys(x);
  var yKeys = Object.keys(y);

  if (xKeys.length !== yKeys.length) {
    return false;
  }

  xKeys.sort();
  yKeys.sort();

  for (var i = 0; i < xKeys.length; i++) {
    if (xKeys[i] !== yKeys[i] || !equals(x[xKeys[i]], y[yKeys[i]])) {
      return false;
    }
  }

  return true;
}

function equalsSafe(x, y) {
  var _a;

  return (_a = x === null || x === void 0 ? void 0 : x.Equals(y)) !== null && _a !== void 0 ? _a : y == null;
}

function equals(x, y) {
  if (x === y) {
    return true;
  } else if (x == null) {
    return y == null;
  } else if (y == null) {
    return false;
  } else if (_typeof(x) !== "object") {
    return false;
  } else if (isEquatable(x)) {
    return x.Equals(y);
  } else if (isArrayLike(x)) {
    return isArrayLike(y) && equalArrays(x, y);
  } else if (x instanceof Date) {
    return y instanceof Date && compareDates(x, y) === 0;
  } else {
    return Object.getPrototypeOf(x).constructor === Object && equalObjects(x, y);
  }
}

function compareDates(x, y) {
  var xtime;
  var ytime; // DateTimeOffset and DateTime deals with equality differently.

  if ("offset" in x && "offset" in y) {
    xtime = x.getTime();
    ytime = y.getTime();
  } else {
    xtime = x.getTime() + dateOffset(x);
    ytime = y.getTime() + dateOffset(y);
  }

  return xtime === ytime ? 0 : xtime < ytime ? -1 : 1;
}

function comparePrimitives(x, y) {
  return x === y ? 0 : x < y ? -1 : 1;
}

function compareArraysWith(x, y, comp) {
  if (x == null) {
    return y == null ? 0 : 1;
  }

  if (y == null) {
    return -1;
  }

  if (x.length !== y.length) {
    return x.length < y.length ? -1 : 1;
  }

  for (var i = 0, j = 0; i < x.length; i++) {
    j = comp(x[i], y[i]);

    if (j !== 0) {
      return j;
    }
  }

  return 0;
}

function compareArrays(x, y) {
  return compareArraysWith(x, y, compare);
}

function compareObjects(x, y) {
  var xKeys = Object.keys(x);
  var yKeys = Object.keys(y);

  if (xKeys.length !== yKeys.length) {
    return xKeys.length < yKeys.length ? -1 : 1;
  }

  xKeys.sort();
  yKeys.sort();

  for (var i = 0, j = 0; i < xKeys.length; i++) {
    var key = xKeys[i];

    if (key !== yKeys[i]) {
      return key < yKeys[i] ? -1 : 1;
    } else {
      j = compare(x[key], y[key]);

      if (j !== 0) {
        return j;
      }
    }
  }

  return 0;
}

function compareSafe(x, y) {
  var _a;

  return (_a = x === null || x === void 0 ? void 0 : x.CompareTo(y)) !== null && _a !== void 0 ? _a : y == null ? 0 : -1;
}

function compare(x, y) {
  if (x === y) {
    return 0;
  } else if (x == null) {
    return y == null ? 0 : -1;
  } else if (y == null) {
    return 1;
  } else if (_typeof(x) !== "object") {
    return x < y ? -1 : 1;
  } else if (isComparable(x)) {
    return x.CompareTo(y);
  } else if (isArrayLike(x)) {
    return isArrayLike(y) ? compareArrays(x, y) : -1;
  } else if (x instanceof Date) {
    return y instanceof Date ? compareDates(x, y) : -1;
  } else {
    return Object.getPrototypeOf(x).constructor === Object ? compareObjects(x, y) : -1;
  }
}

function min(comparer, x, y) {
  return comparer(x, y) < 0 ? x : y;
}

function max(comparer, x, y) {
  return comparer(x, y) > 0 ? x : y;
}

function clamp(comparer, value, min, max) {
  return comparer(value, min) < 0 ? min : comparer(value, max) > 0 ? max : value;
}

function createAtom(value) {
  var atom = value;
  return function (value, isSetter) {
    if (!isSetter) {
      return atom;
    } else {
      atom = value;
      return void 0;
    }
  };
}

function createObj(fields) {
  var obj = {};

  var _iterator = _createForOfIteratorHelper(fields),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var kv = _step.value;
      obj[kv[0]] = kv[1];
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return obj;
}

function jsOptions(mutator) {
  var opts = {};
  mutator(opts);
  return opts;
}

function round(value) {
  var digits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var m = Math.pow(10, digits);
  var n = +(digits ? value * m : value).toFixed(8);
  var i = Math.floor(n);
  var f = n - i;
  var e = 1e-8;
  var r = f > 0.5 - e && f < 0.5 + e ? i % 2 === 0 ? i : i + 1 : Math.round(n);
  return digits ? r / m : r;
}

function sign(x) {
  return x > 0 ? 1 : x < 0 ? -1 : 0;
}

function randomNext(min, max) {
  return Math.floor(Math.random() * (max - min)) + min;
}

function randomBytes(buffer) {
  if (buffer == null) {
    throw new Error("Buffer cannot be null");
  }

  for (var i = 0; i < buffer.length; i += 6) {
    // Pick random 48-bit number. Fill buffer in 2 24-bit chunks to avoid bitwise truncation.
    var r = Math.floor(Math.random() * 281474976710656); // Low 24 bits = chunk 1.

    var rhi = Math.floor(r / 16777216); // High 24 bits shifted via division = chunk 2.

    for (var j = 0; j < 6 && i + j < buffer.length; j++) {
      if (j === 3) {
        r = rhi;
      }

      buffer[i + j] = r & 255;
      r >>>= 8;
    }
  }
}

function unescapeDataString(s) {
  // https://stackoverflow.com/a/4458580/524236
  return decodeURIComponent(s.replace(/\+/g, "%20"));
}

function escapeDataString(s) {
  return encodeURIComponent(s).replace(/!/g, "%21").replace(/'/g, "%27").replace(/\(/g, "%28").replace(/\)/g, "%29").replace(/\*/g, "%2A");
}

function escapeUriString(s) {
  return encodeURI(s);
} // ICollection.Clear and Count members can be called on Arrays
// or Dictionaries so we need a runtime check (see #1120)


function count(col) {
  if (isArrayLike(col)) {
    return col.length;
  } else {
    var _count = 0;

    var _iterator2 = _createForOfIteratorHelper(col),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var _ = _step2.value;
        _count++;
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    return _count;
  }
}

function clear(col) {
  if (isArrayLike(col)) {
    col.splice(0);
  } else {
    col.clear();
  }
}

var CURRIED_KEY = "__CURRIED__";

function uncurry(arity, f) {
  // f may be a function option with None value
  if (f == null) {
    return undefined;
  } // The function is already uncurried


  if (f.length > 1) {
    // if (CURRIED_KEY in f) { // This doesn't always work
    return f;
  }

  var uncurriedFn;

  switch (arity) {
    case 2:
      uncurriedFn = function uncurriedFn(a1, a2) {
        return f(a1)(a2);
      };

      break;

    case 3:
      uncurriedFn = function uncurriedFn(a1, a2, a3) {
        return f(a1)(a2)(a3);
      };

      break;

    case 4:
      uncurriedFn = function uncurriedFn(a1, a2, a3, a4) {
        return f(a1)(a2)(a3)(a4);
      };

      break;

    case 5:
      uncurriedFn = function uncurriedFn(a1, a2, a3, a4, a5) {
        return f(a1)(a2)(a3)(a4)(a5);
      };

      break;

    case 6:
      uncurriedFn = function uncurriedFn(a1, a2, a3, a4, a5, a6) {
        return f(a1)(a2)(a3)(a4)(a5)(a6);
      };

      break;

    case 7:
      uncurriedFn = function uncurriedFn(a1, a2, a3, a4, a5, a6, a7) {
        return f(a1)(a2)(a3)(a4)(a5)(a6)(a7);
      };

      break;

    case 8:
      uncurriedFn = function uncurriedFn(a1, a2, a3, a4, a5, a6, a7, a8) {
        return f(a1)(a2)(a3)(a4)(a5)(a6)(a7)(a8);
      };

      break;

    default:
      throw new Error("Uncurrying to more than 8-arity is not supported: " + arity);
  }

  uncurriedFn[CURRIED_KEY] = f;
  return uncurriedFn;
}

function curry(arity, f) {
  if (f == null) {
    return undefined;
  }

  if (CURRIED_KEY in f) {
    return f[CURRIED_KEY];
  }

  switch (arity) {
    case 2:
      return function (a1) {
        return function (a2) {
          return f(a1, a2);
        };
      };

    case 3:
      return function (a1) {
        return function (a2) {
          return function (a3) {
            return f(a1, a2, a3);
          };
        };
      };

    case 4:
      return function (a1) {
        return function (a2) {
          return function (a3) {
            return function (a4) {
              return f(a1, a2, a3, a4);
            };
          };
        };
      };

    case 5:
      return function (a1) {
        return function (a2) {
          return function (a3) {
            return function (a4) {
              return function (a5) {
                return f(a1, a2, a3, a4, a5);
              };
            };
          };
        };
      };

    case 6:
      return function (a1) {
        return function (a2) {
          return function (a3) {
            return function (a4) {
              return function (a5) {
                return function (a6) {
                  return f(a1, a2, a3, a4, a5, a6);
                };
              };
            };
          };
        };
      };

    case 7:
      return function (a1) {
        return function (a2) {
          return function (a3) {
            return function (a4) {
              return function (a5) {
                return function (a6) {
                  return function (a7) {
                    return f(a1, a2, a3, a4, a5, a6, a7);
                  };
                };
              };
            };
          };
        };
      };

    case 8:
      return function (a1) {
        return function (a2) {
          return function (a3) {
            return function (a4) {
              return function (a5) {
                return function (a6) {
                  return function (a7) {
                    return function (a8) {
                      return f(a1, a2, a3, a4, a5, a6, a7, a8);
                    };
                  };
                };
              };
            };
          };
        };
      };

    default:
      throw new Error("Currying to more than 8-arity is not supported: " + arity);
  }
}

function partialApply(arity, f, args) {
  if (f == null) {
    return undefined;
  } else if (CURRIED_KEY in f) {
    f = f[CURRIED_KEY];

    for (var i = 0; i < args.length; i++) {
      f = f(args[i]);
    }

    return f;
  } else {
    switch (arity) {
      case 1:
        // Wrap arguments to make sure .concat doesn't destruct arrays. Example
        // [1,2].concat([3,4],5)   --> [1,2,3,4,5]    // fails
        // [1,2].concat([[3,4],5]) --> [1,2,[3,4],5]  // ok
        return function (a1) {
          return f.apply(undefined, args.concat([a1]));
        };

      case 2:
        return function (a1) {
          return function (a2) {
            return f.apply(undefined, args.concat([a1, a2]));
          };
        };

      case 3:
        return function (a1) {
          return function (a2) {
            return function (a3) {
              return f.apply(undefined, args.concat([a1, a2, a3]));
            };
          };
        };

      case 4:
        return function (a1) {
          return function (a2) {
            return function (a3) {
              return function (a4) {
                return f.apply(undefined, args.concat([a1, a2, a3, a4]));
              };
            };
          };
        };

      case 5:
        return function (a1) {
          return function (a2) {
            return function (a3) {
              return function (a4) {
                return function (a5) {
                  return f.apply(undefined, args.concat([a1, a2, a3, a4, a5]));
                };
              };
            };
          };
        };

      case 6:
        return function (a1) {
          return function (a2) {
            return function (a3) {
              return function (a4) {
                return function (a5) {
                  return function (a6) {
                    return f.apply(undefined, args.concat([a1, a2, a3, a4, a5, a6]));
                  };
                };
              };
            };
          };
        };

      case 7:
        return function (a1) {
          return function (a2) {
            return function (a3) {
              return function (a4) {
                return function (a5) {
                  return function (a6) {
                    return function (a7) {
                      return f.apply(undefined, args.concat([a1, a2, a3, a4, a5, a6, a7]));
                    };
                  };
                };
              };
            };
          };
        };

      case 8:
        return function (a1) {
          return function (a2) {
            return function (a3) {
              return function (a4) {
                return function (a5) {
                  return function (a6) {
                    return function (a7) {
                      return function (a8) {
                        return f.apply(undefined, args.concat([a1, a2, a3, a4, a5, a6, a7, a8]));
                      };
                    };
                  };
                };
              };
            };
          };
        };

      default:
        throw new Error("Partially applying to more than 8-arity is not supported: " + arity);
    }
  }
}

function mapCurriedArgs(fn, mappings) {
  function mapArg(fn, arg, mappings, idx) {
    var mapping = mappings[idx];

    if (mapping !== 0) {
      var expectedArity = mapping[0];
      var actualArity = mapping[1];

      if (expectedArity > 1) {
        arg = curry(expectedArity, arg);
      }

      if (actualArity > 1) {
        arg = uncurry(actualArity, arg);
      }
    }

    var res = fn(arg);

    if (idx + 1 === mappings.length) {
      return res;
    } else {
      return function (arg) {
        return mapArg(res, arg, mappings, idx + 1);
      };
    }
  }

  return function (arg) {
    return mapArg(fn, arg, mappings, 0);
  };
}
},{}],"../src/.fable/fable-library.3.0.0/Types.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.seqToString = seqToString;
exports.toString = _toString;
exports.isException = isException;
exports.Attribute = exports.MatchFailureException = exports.FSharpException = exports.Exception = exports.FSharpRef = exports.Record = exports.Union = exports.List = void 0;

var _Util = require("./Util.js");

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function seqToString(self) {
  var count = 0;
  var str = "[";

  var _iterator = _createForOfIteratorHelper(self),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var x = _step.value;

      if (count === 0) {
        str += _toString(x);
      } else if (count === 100) {
        str += "; ...";
        break;
      } else {
        str += "; " + _toString(x);
      }

      count++;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return str + "]";
}

function _toString(x) {
  var callStack = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

  if (x != null && _typeof(x) === "object") {
    if (typeof x.toString === "function") {
      return x.toString();
    } else if (Symbol.iterator in x) {
      return seqToString(x);
    } else {
      // TODO: Date?
      var cons = Object.getPrototypeOf(x).constructor;
      return cons === Object && callStack < 10 // Same format as recordToString
      ? "{ " + Object.entries(x).map(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            k = _ref2[0],
            v = _ref2[1];

        return k + " = " + _toString(v, callStack + 1);
      }).join("\n  ") + " }" : cons.name;
    }
  }

  return String(x);
}

function compareList(self, other) {
  if (self === other) {
    return 0;
  } else {
    if (other == null) {
      return -1;
    }

    while (self.tail != null) {
      if (other.tail == null) {
        return 1;
      }

      var res = (0, _Util.compare)(self.head, other.head);

      if (res !== 0) {
        return res;
      }

      self = self.tail;
      other = other.tail;
    }

    return other.tail == null ? 0 : -1;
  }
}

var List = /*#__PURE__*/function () {
  function List(head, tail) {
    _classCallCheck(this, List);

    this.head = head;
    this.tail = tail;
  }

  _createClass(List, [{
    key: Symbol.iterator,
    value: function value() {
      var cur = this;
      return {
        next: function next() {
          var value = cur === null || cur === void 0 ? void 0 : cur.head;
          var done = (cur === null || cur === void 0 ? void 0 : cur.tail) == null;
          cur = cur === null || cur === void 0 ? void 0 : cur.tail;
          return {
            done: done,
            value: value
          };
        }
      };
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return Array.from(this);
    }
  }, {
    key: "toString",
    value: function toString() {
      return seqToString(this);
    }
  }, {
    key: "GetHashCode",
    value: function GetHashCode() {
      return (0, _Util.combineHashCodes)(Array.from(this).map(_Util.structuralHash));
    }
  }, {
    key: "Equals",
    value: function Equals(other) {
      return compareList(this, other) === 0;
    }
  }, {
    key: "CompareTo",
    value: function CompareTo(other) {
      return compareList(this, other);
    }
  }]);

  return List;
}();

exports.List = List;

var Union = /*#__PURE__*/function () {
  function Union() {
    _classCallCheck(this, Union);
  }

  _createClass(Union, [{
    key: "toJSON",
    value: function toJSON() {
      return this.fields.length === 0 ? this.name : [this.name].concat(this.fields);
    }
  }, {
    key: "toString",
    value: function toString() {
      if (this.fields.length === 0) {
        return this.name;
      } else {
        var fields = "";
        var withParens = true;

        if (this.fields.length === 1) {
          var field = _toString(this.fields[0]);

          withParens = field.indexOf(" ") >= 0;
          fields = field;
        } else {
          fields = this.fields.map(function (x) {
            return _toString(x);
          }).join(", ");
        }

        return this.name + (withParens ? " (" : " ") + fields + (withParens ? ")" : "");
      }
    }
  }, {
    key: "GetHashCode",
    value: function GetHashCode() {
      var hashes = this.fields.map(function (x) {
        return (0, _Util.structuralHash)(x);
      });
      hashes.splice(0, 0, (0, _Util.numberHash)(this.tag));
      return (0, _Util.combineHashCodes)(hashes);
    }
  }, {
    key: "Equals",
    value: function Equals(other) {
      if (this === other) {
        return true;
      } else if (!(0, _Util.sameConstructor)(this, other)) {
        return false;
      } else if (this.tag === other.tag) {
        return (0, _Util.equalArrays)(this.fields, other.fields);
      } else {
        return false;
      }
    }
  }, {
    key: "CompareTo",
    value: function CompareTo(other) {
      if (this === other) {
        return 0;
      } else if (!(0, _Util.sameConstructor)(this, other)) {
        return -1;
      } else if (this.tag === other.tag) {
        return (0, _Util.compareArrays)(this.fields, other.fields);
      } else {
        return this.tag < other.tag ? -1 : 1;
      }
    }
  }, {
    key: "name",
    get: function get() {
      return this.cases()[this.tag];
    }
  }]);

  return Union;
}();

exports.Union = Union;

function recordToJSON(self) {
  var o = {};
  var keys = Object.keys(self);

  for (var i = 0; i < keys.length; i++) {
    o[keys[i]] = self[keys[i]];
  }

  return o;
}

function recordToString(self) {
  return "{ " + Object.entries(self).map(function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 2),
        k = _ref4[0],
        v = _ref4[1];

    return k + " = " + _toString(v);
  }).join("\n  ") + " }";
}

function recordGetHashCode(self) {
  var hashes = Object.values(self).map(function (v) {
    return (0, _Util.structuralHash)(v);
  });
  return (0, _Util.combineHashCodes)(hashes);
}

function recordEquals(self, other) {
  if (self === other) {
    return true;
  } else if (!(0, _Util.sameConstructor)(self, other)) {
    return false;
  } else {
    var thisNames = Object.keys(self);

    for (var i = 0; i < thisNames.length; i++) {
      if (!(0, _Util.equals)(self[thisNames[i]], other[thisNames[i]])) {
        return false;
      }
    }

    return true;
  }
}

function recordCompareTo(self, other) {
  if (self === other) {
    return 0;
  } else if (!(0, _Util.sameConstructor)(self, other)) {
    return -1;
  } else {
    var thisNames = Object.keys(self);

    for (var i = 0; i < thisNames.length; i++) {
      var result = (0, _Util.compare)(self[thisNames[i]], other[thisNames[i]]);

      if (result !== 0) {
        return result;
      }
    }

    return 0;
  }
}

var Record = /*#__PURE__*/function () {
  function Record() {
    _classCallCheck(this, Record);
  }

  _createClass(Record, [{
    key: "toJSON",
    value: function toJSON() {
      return recordToJSON(this);
    }
  }, {
    key: "toString",
    value: function toString() {
      return recordToString(this);
    }
  }, {
    key: "GetHashCode",
    value: function GetHashCode() {
      return recordGetHashCode(this);
    }
  }, {
    key: "Equals",
    value: function Equals(other) {
      return recordEquals(this, other);
    }
  }, {
    key: "CompareTo",
    value: function CompareTo(other) {
      return recordCompareTo(this, other);
    }
  }]);

  return Record;
}();

exports.Record = Record;

var FSharpRef = /*#__PURE__*/function () {
  function FSharpRef(contentsOrGetter, setter) {
    _classCallCheck(this, FSharpRef);

    if (typeof setter === "function") {
      this.getter = contentsOrGetter;
      this.setter = setter;
    } else {
      this.getter = function () {
        return contentsOrGetter;
      };

      this.setter = function (v) {
        contentsOrGetter = v;
      };
    }
  }

  _createClass(FSharpRef, [{
    key: "contents",
    get: function get() {
      return this.getter();
    },
    set: function set(v) {
      this.setter(v);
    }
  }]);

  return FSharpRef;
}(); // EXCEPTIONS
// Exception is intentionally not derived from Error, for performance reasons (see #2160)


exports.FSharpRef = FSharpRef;

var Exception = function Exception(message) {
  _classCallCheck(this, Exception);

  this.message = message;
};

exports.Exception = Exception;

function isException(x) {
  return x instanceof Exception || x instanceof Error;
}

var FSharpException = /*#__PURE__*/function (_Exception) {
  _inherits(FSharpException, _Exception);

  var _super = _createSuper(FSharpException);

  function FSharpException() {
    _classCallCheck(this, FSharpException);

    return _super.apply(this, arguments);
  }

  _createClass(FSharpException, [{
    key: "toJSON",
    value: function toJSON() {
      return recordToJSON(this);
    }
  }, {
    key: "toString",
    value: function toString() {
      return recordToString(this);
    }
  }, {
    key: "GetHashCode",
    value: function GetHashCode() {
      return recordGetHashCode(this);
    }
  }, {
    key: "Equals",
    value: function Equals(other) {
      return recordEquals(this, other);
    }
  }, {
    key: "CompareTo",
    value: function CompareTo(other) {
      return recordCompareTo(this, other);
    }
  }]);

  return FSharpException;
}(Exception);

exports.FSharpException = FSharpException;

var MatchFailureException = /*#__PURE__*/function (_FSharpException) {
  _inherits(MatchFailureException, _FSharpException);

  var _super2 = _createSuper(MatchFailureException);

  function MatchFailureException(arg1, arg2, arg3) {
    var _this;

    _classCallCheck(this, MatchFailureException);

    _this = _super2.call(this);
    _this.arg1 = arg1;
    _this.arg2 = arg2 | 0;
    _this.arg3 = arg3 | 0;
    _this.message = "The match cases were incomplete";
    return _this;
  }

  return MatchFailureException;
}(FSharpException);

exports.MatchFailureException = MatchFailureException;

var Attribute = function Attribute() {
  _classCallCheck(this, Attribute);
};

exports.Attribute = Attribute;
},{"./Util.js":"../src/.fable/fable-library.3.0.0/Util.js"}],"../src/.fable/fable-library.3.0.0/Reflection.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getGenerics = getGenerics;
exports.getHashCode = getHashCode;
exports.equals = equals;
exports.class_type = class_type;
exports.record_type = record_type;
exports.anonRecord_type = anonRecord_type;
exports.union_type = union_type;
exports.tuple_type = tuple_type;
exports.delegate_type = delegate_type;
exports.lambda_type = lambda_type;
exports.option_type = option_type;
exports.list_type = list_type;
exports.array_type = array_type;
exports.enum_type = enum_type;
exports.name = name;
exports.fullName = fullName;
exports.namespace = namespace;
exports.isArray = isArray;
exports.getElementType = getElementType;
exports.isGenericType = isGenericType;
exports.isEnum = isEnum;
exports.isSubclassOf = isSubclassOf;
exports.getGenericTypeDefinition = getGenericTypeDefinition;
exports.getEnumUnderlyingType = getEnumUnderlyingType;
exports.getEnumValues = getEnumValues;
exports.getEnumNames = getEnumNames;
exports.parseEnum = parseEnum;
exports.tryParseEnum = tryParseEnum;
exports.getEnumName = getEnumName;
exports.isEnumDefined = isEnumDefined;
exports.getUnionCases = getUnionCases;
exports.getRecordElements = getRecordElements;
exports.getTupleElements = getTupleElements;
exports.getFunctionElements = getFunctionElements;
exports.isUnion = isUnion;
exports.isRecord = isRecord;
exports.isTuple = isTuple;
exports.isFunction = isFunction;
exports.getUnionFields = getUnionFields;
exports.getUnionCaseFields = getUnionCaseFields;
exports.getRecordFields = getRecordFields;
exports.getRecordField = getRecordField;
exports.getTupleFields = getTupleFields;
exports.getTupleField = getTupleField;
exports.makeUnion = makeUnion;
exports.makeRecord = makeRecord;
exports.makeTuple = makeTuple;
exports.makeGenericType = makeGenericType;
exports.createInstance = createInstance;
exports.getValue = getValue;
exports.getCaseTag = getCaseTag;
exports.getCaseName = getCaseName;
exports.getCaseFields = getCaseFields;
exports.decimal_type = exports.float64_type = exports.float32_type = exports.uint32_type = exports.int32_type = exports.uint16_type = exports.int16_type = exports.uint8_type = exports.int8_type = exports.bool_type = exports.string_type = exports.char_type = exports.unit_type = exports.obj_type = exports.TypeInfo = exports.CaseInfo = void 0;

var _Types = require("./Types.js");

var _Util = require("./Util.js");

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CaseInfo = function CaseInfo(declaringType, tag, name, fields) {
  _classCallCheck(this, CaseInfo);

  this.declaringType = declaringType;
  this.tag = tag;
  this.name = name;
  this.fields = fields;
};

exports.CaseInfo = CaseInfo;

var TypeInfo = /*#__PURE__*/function () {
  function TypeInfo(fullname, generics, construct, parent, fields, cases, enumCases) {
    _classCallCheck(this, TypeInfo);

    this.fullname = fullname;
    this.generics = generics;
    this.construct = construct;
    this.parent = parent;
    this.fields = fields;
    this.cases = cases;
    this.enumCases = enumCases;
  }

  _createClass(TypeInfo, [{
    key: "toString",
    value: function toString() {
      return fullName(this);
    }
  }, {
    key: "GetHashCode",
    value: function GetHashCode() {
      return getHashCode(this);
    }
  }, {
    key: "Equals",
    value: function Equals(other) {
      return equals(this, other);
    }
  }]);

  return TypeInfo;
}();

exports.TypeInfo = TypeInfo;

function getGenerics(t) {
  return t.generics != null ? t.generics : [];
}

function getHashCode(t) {
  var fullnameHash = (0, _Util.stringHash)(t.fullname);
  var genHashes = getGenerics(t).map(getHashCode);
  return (0, _Util.combineHashCodes)([fullnameHash].concat(_toConsumableArray(genHashes)));
}

function equals(t1, t2) {
  if (t1.fullname === "") {
    // Anonymous records
    return t2.fullname === "" && (0, _Util.equalArraysWith)(getRecordElements(t1), getRecordElements(t2), function (_ref, _ref2) {
      var _ref3 = _slicedToArray(_ref, 2),
          k1 = _ref3[0],
          v1 = _ref3[1];

      var _ref4 = _slicedToArray(_ref2, 2),
          k2 = _ref4[0],
          v2 = _ref4[1];

      return k1 === k2 && equals(v1, v2);
    });
  } else {
    return t1.fullname === t2.fullname && (0, _Util.equalArraysWith)(getGenerics(t1), getGenerics(t2), equals);
  }
}

function class_type(fullname, generics, construct, parent) {
  return new TypeInfo(fullname, generics, construct, parent);
}

function record_type(fullname, generics, construct, fields) {
  return new TypeInfo(fullname, generics, construct, undefined, fields);
}

function anonRecord_type() {
  for (var _len = arguments.length, fields = new Array(_len), _key = 0; _key < _len; _key++) {
    fields[_key] = arguments[_key];
  }

  return new TypeInfo("", undefined, undefined, undefined, function () {
    return fields;
  });
}

function union_type(fullname, generics, construct, cases) {
  var t = new TypeInfo(fullname, generics, construct, undefined, undefined, function () {
    var caseNames = construct.prototype.cases();
    return cases().map(function (fields, i) {
      return new CaseInfo(t, i, caseNames[i], fields);
    });
  });
  return t;
}

function tuple_type() {
  for (var _len2 = arguments.length, generics = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    generics[_key2] = arguments[_key2];
  }

  return new TypeInfo("System.Tuple`" + generics.length, generics);
}

function delegate_type() {
  for (var _len3 = arguments.length, generics = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    generics[_key3] = arguments[_key3];
  }

  return new TypeInfo("System.Func`" + generics.length, generics);
}

function lambda_type(argType, returnType) {
  return new TypeInfo("Microsoft.FSharp.Core.FSharpFunc`2", [argType, returnType]);
}

function option_type(generic) {
  return new TypeInfo("Microsoft.FSharp.Core.FSharpOption`1", [generic]);
}

function list_type(generic) {
  return new TypeInfo("Microsoft.FSharp.Collections.FSharpList`1", [generic]);
}

function array_type(generic) {
  return new TypeInfo(generic.fullname + "[]", [generic]);
}

function enum_type(fullname, underlyingType, enumCases) {
  return new TypeInfo(fullname, [underlyingType], undefined, undefined, undefined, undefined, enumCases);
}

var obj_type = new TypeInfo("System.Object");
exports.obj_type = obj_type;
var unit_type = new TypeInfo("Microsoft.FSharp.Core.Unit");
exports.unit_type = unit_type;
var char_type = new TypeInfo("System.Char");
exports.char_type = char_type;
var string_type = new TypeInfo("System.String");
exports.string_type = string_type;
var bool_type = new TypeInfo("System.Boolean");
exports.bool_type = bool_type;
var int8_type = new TypeInfo("System.SByte");
exports.int8_type = int8_type;
var uint8_type = new TypeInfo("System.Byte");
exports.uint8_type = uint8_type;
var int16_type = new TypeInfo("System.Int16");
exports.int16_type = int16_type;
var uint16_type = new TypeInfo("System.UInt16");
exports.uint16_type = uint16_type;
var int32_type = new TypeInfo("System.Int32");
exports.int32_type = int32_type;
var uint32_type = new TypeInfo("System.UInt32");
exports.uint32_type = uint32_type;
var float32_type = new TypeInfo("System.Single");
exports.float32_type = float32_type;
var float64_type = new TypeInfo("System.Double");
exports.float64_type = float64_type;
var decimal_type = new TypeInfo("System.Decimal");
exports.decimal_type = decimal_type;

function name(info) {
  if (Array.isArray(info)) {
    return info[0];
  } else if (info instanceof CaseInfo) {
    return info.name;
  } else {
    var i = info.fullname.lastIndexOf(".");
    return i === -1 ? info.fullname : info.fullname.substr(i + 1);
  }
}

function fullName(t) {
  var gen = t.generics != null && !isArray(t) ? t.generics : [];

  if (gen.length > 0) {
    return t.fullname + "[" + gen.map(function (x) {
      return fullName(x);
    }).join(",") + "]";
  } else {
    return t.fullname;
  }
}

function namespace(t) {
  var i = t.fullname.lastIndexOf(".");
  return i === -1 ? "" : t.fullname.substr(0, i);
}

function isArray(t) {
  return t.fullname.endsWith("[]");
}

function getElementType(t) {
  var _a;

  return isArray(t) ? (_a = t.generics) === null || _a === void 0 ? void 0 : _a[0] : undefined;
}

function isGenericType(t) {
  return t.generics != null && t.generics.length > 0;
}

function isEnum(t) {
  return t.enumCases != null && t.enumCases.length > 0;
}

function isSubclassOf(t1, t2) {
  var _a, _b;

  return (_b = (_a = t1.parent) === null || _a === void 0 ? void 0 : _a.Equals(t2)) !== null && _b !== void 0 ? _b : false;
}
/**
 * This doesn't replace types for fields (records) or cases (unions)
 * but it should be enough for type comparison purposes
 */


function getGenericTypeDefinition(t) {
  return t.generics == null ? t : new TypeInfo(t.fullname, t.generics.map(function () {
    return obj_type;
  }));
}

function getEnumUnderlyingType(t) {
  var _a;

  return (_a = t.generics) === null || _a === void 0 ? void 0 : _a[0];
}

function getEnumValues(t) {
  if (isEnum(t) && t.enumCases != null) {
    return t.enumCases.map(function (kv) {
      return kv[1];
    });
  } else {
    throw new Error("".concat(t.fullname, " is not an enum type"));
  }
}

function getEnumNames(t) {
  if (isEnum(t) && t.enumCases != null) {
    return t.enumCases.map(function (kv) {
      return kv[0];
    });
  } else {
    throw new Error("".concat(t.fullname, " is not an enum type"));
  }
}

function getEnumCase(t, v) {
  if (t.enumCases != null) {
    if (typeof v === "string") {
      var _iterator = _createForOfIteratorHelper(t.enumCases),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var kv = _step.value;

          if (kv[0] === v) {
            return kv;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      throw new Error("'".concat(v, "' was not found in ").concat(t.fullname));
    } else {
      var _iterator2 = _createForOfIteratorHelper(t.enumCases),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _kv = _step2.value;

          if (_kv[1] === v) {
            return _kv;
          }
        } // .NET returns the number even if it doesn't match any of the cases

      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return ["", v];
    }
  } else {
    throw new Error("".concat(t.fullname, " is not an enum type"));
  }
}

function parseEnum(t, str) {
  // TODO: better int parsing here, parseInt ceils floats: "4.8" -> 4
  var value = parseInt(str, 10);
  return getEnumCase(t, isNaN(value) ? str : value)[1];
}

function tryParseEnum(t, str, defValue) {
  try {
    defValue.contents = parseEnum(t, str);
    return true;
  } catch (_a) {
    return false;
  }
}

function getEnumName(t, v) {
  return getEnumCase(t, v)[0];
}

function isEnumDefined(t, v) {
  try {
    var kv = getEnumCase(t, v);
    return kv[0] != null && kv[0] !== "";
  } catch (_a) {// supress error
  }

  return false;
} // FSharpType


function getUnionCases(t) {
  if (t.cases != null) {
    return t.cases();
  } else {
    throw new Error("".concat(t.fullname, " is not an F# union type"));
  }
}

function getRecordElements(t) {
  if (t.fields != null) {
    return t.fields();
  } else {
    throw new Error("".concat(t.fullname, " is not an F# record type"));
  }
}

function getTupleElements(t) {
  if (isTuple(t) && t.generics != null) {
    return t.generics;
  } else {
    throw new Error("".concat(t.fullname, " is not a tuple type"));
  }
}

function getFunctionElements(t) {
  if (isFunction(t) && t.generics != null) {
    var gen = t.generics;
    return [gen[0], gen[1]];
  } else {
    throw new Error("".concat(t.fullname, " is not an F# function type"));
  }
}

function isUnion(t) {
  return t instanceof TypeInfo ? t.cases != null : t instanceof _Types.Union;
}

function isRecord(t) {
  return t instanceof TypeInfo ? t.fields != null : t instanceof _Types.Record;
}

function isTuple(t) {
  return t.fullname.startsWith("System.Tuple") && !isArray(t);
} // In .NET this is false for delegates


function isFunction(t) {
  return t.fullname === "Microsoft.FSharp.Core.FSharpFunc`2";
} // FSharpValue


function getUnionFields(v, t) {
  var cases = getUnionCases(t);
  var case_ = cases[v.tag];

  if (case_ == null) {
    throw new Error("Cannot find case ".concat(v.name, " in union type"));
  }

  return [case_, v.fields];
}

function getUnionCaseFields(uci) {
  return uci.fields == null ? [] : uci.fields;
} // This is used as replacement of `FSharpValue.GetRecordFields`
// For `FSharpTypes.GetRecordFields` see `getRecordElements`
// Object.keys returns keys in the order they were added to the object


function getRecordFields(v) {
  return Object.keys(v).map(function (k) {
    return v[k];
  });
}

function getRecordField(v, field) {
  return v[field[0]];
}

function getTupleFields(v) {
  return v;
}

function getTupleField(v, i) {
  return v[i];
}

function makeUnion(uci, values) {
  var expectedLength = (uci.fields || []).length;

  if (values.length !== expectedLength) {
    throw new Error("Expected an array of length ".concat(expectedLength, " but got ").concat(values.length));
  }

  return uci.declaringType.construct != null ? _construct(uci.declaringType.construct, [uci.tag].concat(_toConsumableArray(values))) : {};
}

function makeRecord(t, values) {
  var fields = getRecordElements(t);

  if (fields.length !== values.length) {
    throw new Error("Expected an array of length ".concat(fields.length, " but got ").concat(values.length));
  }

  return t.construct != null ? _construct(t.construct, _toConsumableArray(values)) : fields.reduce(function (obj, _ref5, i) {
    var _ref6 = _slicedToArray(_ref5, 2),
        key = _ref6[0],
        _t = _ref6[1];

    obj[key] = values[i];
    return obj;
  }, {});
}

function makeTuple(values, _t) {
  return values;
}

function makeGenericType(t, generics) {
  return new TypeInfo(t.fullname, generics, t.construct, t.parent, t.fields, t.cases);
}

function createInstance(t, consArgs) {
  // TODO: Check if consArgs length is same as t.construct?
  // (Arg types can still be different)
  if (typeof t.construct === "function") {
    return _construct(t.construct, _toConsumableArray(consArgs !== null && consArgs !== void 0 ? consArgs : []));
  } else {
    throw new Error("Cannot access constructor of ".concat(t.fullname));
  }
}

function getValue(propertyInfo, v) {
  return v[propertyInfo[0]];
} // Fable.Core.Reflection


function assertUnion(x) {
  if (!(x instanceof _Types.Union)) {
    throw new Error("Value is not an F# union type");
  }
}

function getCaseTag(x) {
  assertUnion(x);
  return x.tag;
}

function getCaseName(x) {
  assertUnion(x);
  return x.cases()[x.tag];
}

function getCaseFields(x) {
  assertUnion(x);
  return x.fields;
}
},{"./Types.js":"../src/.fable/fable-library.3.0.0/Types.js","./Util.js":"../src/.fable/fable-library.3.0.0/Util.js"}],"../src/.fable/fable-library.3.0.0/Option.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.some = some;
exports.value = value;
exports.ofNullable = ofNullable;
exports.toNullable = toNullable;
exports.flatten = flatten;
exports.toArray = toArray;
exports.defaultArg = defaultArg;
exports.defaultArgWith = defaultArgWith;
exports.filter = filter;
exports.map = map;
exports.map2 = map2;
exports.map3 = map3;
exports.bind = bind;
exports.tryOp = tryOp;
exports.Some = void 0;

var _Util = require("./Util.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Using a class here for better compatibility with TS files importing Some
var Some = /*#__PURE__*/function () {
  function Some(value) {
    _classCallCheck(this, Some);

    this.value = value;
  }

  _createClass(Some, [{
    key: "toJSON",
    value: function toJSON() {
      return this.value;
    } // Don't add "Some" for consistency with erased options

  }, {
    key: "toString",
    value: function toString() {
      return String(this.value);
    }
  }, {
    key: "GetHashCode",
    value: function GetHashCode() {
      return (0, _Util.structuralHash)(this.value);
    }
  }, {
    key: "Equals",
    value: function Equals(other) {
      if (other == null) {
        return false;
      } else {
        return (0, _Util.equals)(this.value, other instanceof Some ? other.value : other);
      }
    }
  }, {
    key: "CompareTo",
    value: function CompareTo(other) {
      if (other == null) {
        return 1;
      } else {
        return (0, _Util.compare)(this.value, other instanceof Some ? other.value : other);
      }
    }
  }]);

  return Some;
}();

exports.Some = Some;

function some(x) {
  return x == null || x instanceof Some ? new Some(x) : x;
}

function value(x) {
  if (x == null) {
    throw new Error("Option has no value");
  } else {
    return x instanceof Some ? x.value : x;
  }
}

function ofNullable(x) {
  // This will fail with unit probably, an alternative would be:
  // return x === null ? undefined : (x === undefined ? new Some(x) : x);
  return x == null ? undefined : x;
}

function toNullable(x) {
  return x == null ? null : value(x);
}

function flatten(x) {
  return x == null ? undefined : value(x);
}

function toArray(opt) {
  return opt == null ? [] : [value(opt)];
}

function defaultArg(opt, defaultValue) {
  return opt != null ? value(opt) : defaultValue;
}

function defaultArgWith(opt, defThunk) {
  return opt != null ? value(opt) : defThunk();
}

function filter(predicate, opt) {
  return opt != null ? predicate(value(opt)) ? opt : undefined : opt;
}

function map(mapping, opt) {
  return opt != null ? some(mapping(value(opt))) : undefined;
}

function map2(mapping, opt1, opt2) {
  return opt1 != null && opt2 != null ? mapping(value(opt1), value(opt2)) : undefined;
}

function map3(mapping, opt1, opt2, opt3) {
  return opt1 != null && opt2 != null && opt3 != null ? mapping(value(opt1), value(opt2), value(opt3)) : undefined;
}

function bind(binder, opt) {
  return opt != null ? binder(value(opt)) : undefined;
}

function tryOp(op, arg) {
  try {
    return some(op(arg));
  } catch (_a) {
    return undefined;
  }
}
},{"./Util.js":"../src/.fable/fable-library.3.0.0/Util.js"}],"../src/.fable/fable-library.3.0.0/lib/big.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Big = void 0;

var _Util = require("../Util.js");

// https://github.com/MikeMcl/big.js/blob/01b3ce3a6b0ba7b42442ea48ec4ffc88d1669ec4/big.mjs

/* tslint:disable */
// The shared prototype object.
var P = {
  GetHashCode: function GetHashCode() {
    return (0, _Util.combineHashCodes)([this.s, this.e].concat(this.c));
  },
  Equals: function Equals(x) {
    return !this.cmp(x);
  },
  CompareTo: function CompareTo(x) {
    return this.cmp(x);
  }
};
/*
 *  big.js v5.2.2
 *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.
 *  Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>
 *  https://github.com/MikeMcl/big.js/LICENCE
 */

/************************************** EDITABLE DEFAULTS *****************************************/
// The default values below must be integers within the stated ranges.

/*
 * The maximum number of decimal places (DP) of the results of operations involving division:
 * div and sqrt, and pow with negative exponents.
 */

var DP = 28,
    // 0 to MAX_DP

/*
 * The rounding mode (RM) used when rounding to the above decimal places.
 *
 *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)
 *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)
 *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)
 *  3  Away from zero.                                  (ROUND_UP)
 */
RM = 1,
    // 0, 1, 2 or 3
// The maximum value of DP and Big.DP.
MAX_DP = 1E6,
    // 0 to 1000000
// The maximum magnitude of the exponent argument to the pow method.
MAX_POWER = 1E6,
    // 1 to 1000000

/*
 * The negative exponent (NE) at and beneath which toString returns exponential notation.
 * (JavaScript numbers: -7)
 * -1000000 is the minimum recommended exponent value of a Big.
 */
NE = -29,
    // 0 to -1000000

/*
 * The positive exponent (PE) at and above which toString returns exponential notation.
 * (JavaScript numbers: 21)
 * 1000000 is the maximum recommended exponent value of a Big.
 * (This limit is not enforced or checked.)
 */
PE = 29,
    // 0 to 1000000

/**************************************************************************************************/
// Error messages.
NAME = '[big.js] ',
    INVALID = NAME + 'Invalid ',
    INVALID_DP = INVALID + 'decimal places',
    INVALID_RM = INVALID + 'rounding mode',
    DIV_BY_ZERO = NAME + 'Division by zero',
    UNDEFINED = void 0,
    NUMERIC = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;
/*
 * Create and return a Big constructor.
 *
 */

function _Big_() {
  /*
   * The Big constructor and exported function.
   * Create and return a new instance of a Big number object.
   *
   * n {number|string|Big} A numeric value.
   */
  function Big(n) {
    var x = this; // Enable constructor usage without new.

    if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n); // Duplicate.

    if (n instanceof Big) {
      x.s = n.s;
      x.e = n.e;
      x.c = n.c.slice();
      normalize(x);
    } else {
      parse(x, n);
    }
    /*
     * Retain a reference to this Big constructor, and shadow Big.prototype.constructor which
     * points to Object.
     */


    x.constructor = Big;
  }

  Big.prototype = P;
  Big.DP = DP;
  Big.RM = RM;
  Big.NE = NE;
  Big.PE = PE;
  Big.version = '5.2.2';
  return Big;
}

function normalize(x) {
  x = round(x, DP, 0);

  if (x.c.length > 1 && !x.c[0]) {
    var i = x.c.findIndex(function (x) {
      return x;
    });
    x.c = x.c.slice(i);
    x.e = x.e - i;
  }
}
/*
 * Parse the number or string value passed to a Big constructor.
 *
 * x {Big} A Big number instance.
 * n {number|string} A numeric value.
 */


function parse(x, n) {
  var e, i, nl; // Minus zero?

  if (n === 0 && 1 / n < 0) n = '-0';else if (!NUMERIC.test(n += '')) throw Error(INVALID + 'number'); // Determine sign.

  x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1; // Decimal point?

  if ((e = n.indexOf('.')) > -1) n = n.replace('.', ''); // Exponential form?

  if ((i = n.search(/e/i)) > 0) {
    // Determine exponent.
    if (e < 0) e = i;
    e += +n.slice(i + 1);
    n = n.substring(0, i);
  } else if (e < 0) {
    // Integer.
    e = n.length;
  }

  nl = n.length; // Determine leading zeros before decimal point.

  for (i = 0; i < e && i < nl && n.charAt(i) == '0';) {
    ++i;
  } // older version (ignores decimal point).
  // // Determine leading zeros.
  // for (i = 0; i < nl && n.charAt(i) == '0';) ++i;


  if (i == nl) {
    // Zero.
    x.c = [x.e = 0];
  } else {
    x.e = e - i - 1;
    x.c = []; // Convert string to array of digits without leading zeros

    for (e = 0; i < nl;) {
      x.c[e++] = +n.charAt(i++);
    } // older version (doesn't keep trailing zeroes).
    // // Determine trailing zeros.
    // for (; nl > 0 && n.charAt(--nl) == '0';);
    // // Convert string to array of digits without leading/trailing zeros.
    // for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);

  }

  x = round(x, Big.DP, Big.RM);
  return x;
}
/*
 * Round Big x to a maximum of dp decimal places using rounding mode rm.
 * Called by stringify, P.div, P.round and P.sqrt.
 *
 * x {Big} The Big to round.
 * dp {number} Integer, 0 to MAX_DP inclusive.
 * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)
 * [more] {boolean} Whether the result of division was truncated.
 */


function round(x, dp, rm, more) {
  var xc = x.c,
      i = x.e + dp + 1;

  if (i < xc.length) {
    if (rm === 1) {
      // xc[i] is the digit after the digit that may be rounded up.
      more = xc[i] >= 5;
    } else if (rm === 2) {
      more = xc[i] > 5 || xc[i] == 5 && (more || i < 0 || xc[i + 1] !== UNDEFINED || xc[i - 1] & 1);
    } else if (rm === 3) {
      more = more || !!xc[0];
    } else {
      more = false;
      if (rm !== 0) throw Error(INVALID_RM);
    }

    if (i < 1) {
      xc.length = 1;

      if (more) {
        // 1, 0.1, 0.01, 0.001, 0.0001 etc.
        x.e = -dp;
        xc[0] = 1;
      } else {
        // Zero.
        xc[0] = x.e = 0;
      }
    } else {
      // Remove any digits after the required decimal places.
      xc.length = i--; // Round up?

      if (more) {
        // Rounding up may mean the previous digit has to be rounded up.
        for (; ++xc[i] > 9;) {
          xc[i] = 0;

          if (!i--) {
            ++x.e;
            xc.unshift(1);
          }
        }
      } // Remove trailing zeros.


      for (i = xc.length; !xc[--i];) {
        xc.pop();
      }
    }
  } else if (rm < 0 || rm > 3 || rm !== ~~rm) {
    throw Error(INVALID_RM);
  }

  return x;
}
/*
 * Return a string representing the value of Big x in normal or exponential notation.
 * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.
 *
 * x {Big}
 * id? {number} Caller id.
 *         1 toExponential
 *         2 toFixed
 *         3 toPrecision
 *         4 valueOf
 * n? {number|undefined} Caller's argument.
 * k? {number|undefined}
 */


function stringify(x, id, n, k) {
  var e,
      s,
      Big = x.constructor,
      z = !x.c[0];

  if (n !== UNDEFINED) {
    if (n !== ~~n || n < (id == 3) || n > MAX_DP) {
      throw Error(id == 3 ? INVALID + 'precision' : INVALID_DP);
    }

    x = new Big(x); // The index of the digit that may be rounded up.

    n = k - x.e; // Round?

    if (x.c.length > ++k) round(x, n, Big.RM); // toFixed: recalculate k as x.e may have changed if value rounded up.

    if (id == 2) k = x.e + n + 1; // Append zeros?

    for (; x.c.length < k;) {
      x.c.push(0);
    }
  }

  e = x.e;
  s = x.c.join('');
  n = s.length; // Exponential notation?

  if (id != 2 && (id == 1 || id == 3 && k <= e || e <= Big.NE || e >= Big.PE)) {
    s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e; // Normal notation.
  } else if (e < 0) {
    for (; ++e;) {
      s = '0' + s;
    }

    s = '0.' + s;
  } else if (e > 0) {
    if (++e > n) for (e -= n; e--;) {
      s += '0';
    } else if (e < n) s = s.slice(0, e) + '.' + s.slice(e);
  } else if (n > 1) {
    s = s.charAt(0) + '.' + s.slice(1);
  }

  return x.s < 0 && (!z || id == 4) ? '-' + s : s;
} // Prototype/instance methods

/*
 * Return a new Big whose value is the absolute value of this Big.
 */


P.abs = function () {
  var x = new this.constructor(this);
  x.s = 1;
  return x;
};
/*
 * Return 1 if the value of this Big is greater than the value of Big y,
 *       -1 if the value of this Big is less than the value of Big y, or
 *        0 if they have the same value.
*/


P.cmp = function (y) {
  var isneg,
      Big = this.constructor,
      x = new Big(this),
      y = new Big(y),
      xc = x.c,
      yc = y.c,
      i = x.s,
      j = y.s,
      k = x.e,
      l = y.e; // Either zero?

  if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i; // Signs differ?

  if (i != j) return i;
  isneg = i < 0; // Compare exponents.

  if (k != l) return k > l ^ isneg ? 1 : -1; // Compare digit by digit.

  j = Math.max(xc.length, yc.length);

  for (i = 0; i < j; i++) {
    k = i < xc.length ? xc[i] : 0;
    l = i < yc.length ? yc[i] : 0;
    if (k != l) return k > l ^ isneg ? 1 : -1;
  }

  return 0; // old version (doesn't compare well trailing zeroes, e.g. 1.0 with 1.00)
  // j = (k = xc.length) < (l = yc.length) ? k : l;
  // // Compare digit by digit.
  // for (i = -1; ++i < j;) {
  //   if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;
  // }
  // // Compare lengths.
  // return k == l ? 0 : k > l ^ isneg ? 1 : -1;
};
/*
 * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,
 * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.
 */


P.div = function (y) {
  var Big = this.constructor,
      x = new Big(this),
      y = new Big(y),
      a = x.c,
      // dividend
  b = y.c,
      // divisor
  k = x.s == y.s ? 1 : -1,
      dp = Big.DP;
  if (dp !== ~~dp || dp < 0 || dp > MAX_DP) throw Error(INVALID_DP); // Divisor is zero?

  if (!b[0]) throw Error(DIV_BY_ZERO); // Dividend is 0? Return +-0.

  if (!a[0]) return new Big(k * 0);
  var bl,
      bt,
      n,
      cmp,
      ri,
      bz = b.slice(),
      ai = bl = b.length,
      al = a.length,
      r = a.slice(0, bl),
      // remainder
  rl = r.length,
      q = y,
      // quotient
  qc = q.c = [],
      qi = 0,
      d = dp + (q.e = x.e - y.e) + 1; // number of digits of the result

  q.s = k;
  k = d < 0 ? 0 : d; // Create version of divisor with leading zero.

  bz.unshift(0); // Add zeros to make remainder as long as divisor.

  for (; rl++ < bl;) {
    r.push(0);
  }

  do {
    // n is how many times the divisor goes into current remainder.
    for (n = 0; n < 10; n++) {
      // Compare divisor and remainder.
      if (bl != (rl = r.length)) {
        cmp = bl > rl ? 1 : -1;
      } else {
        for (ri = -1, cmp = 0; ++ri < bl;) {
          if (b[ri] != r[ri]) {
            cmp = b[ri] > r[ri] ? 1 : -1;
            break;
          }
        }
      } // If divisor < remainder, subtract divisor from remainder.


      if (cmp < 0) {
        // Remainder can't be more than 1 digit longer than divisor.
        // Equalise lengths using divisor with extra leading zero?
        for (bt = rl == bl ? b : bz; rl;) {
          if (r[--rl] < bt[rl]) {
            ri = rl;

            for (; ri && !r[--ri];) {
              r[ri] = 9;
            }

            --r[ri];
            r[rl] += 10;
          }

          r[rl] -= bt[rl];
        }

        for (; !r[0];) {
          r.shift();
        }
      } else {
        break;
      }
    } // Add the digit n to the result array.


    qc[qi++] = cmp ? n : ++n; // Update the remainder.

    if (r[0] && cmp) r[rl] = a[ai] || 0;else r = [a[ai]];
  } while ((ai++ < al || r[0] !== UNDEFINED) && k--); // Leading zero? Do not remove if result is simply zero (qi == 1).


  if (!qc[0] && qi != 1) {
    // There can't be more than one zero.
    qc.shift();
    q.e--;
  } // Round?


  if (qi > d) round(q, dp, Big.RM, r[0] !== UNDEFINED);
  return q;
};
/*
 * Return true if the value of this Big is equal to the value of Big y, otherwise return false.
 */


P.eq = function (y) {
  return !this.cmp(y);
};
/*
 * Return true if the value of this Big is greater than the value of Big y, otherwise return
 * false.
 */


P.gt = function (y) {
  return this.cmp(y) > 0;
};
/*
 * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise
 * return false.
 */


P.gte = function (y) {
  return this.cmp(y) > -1;
};
/*
 * Return true if the value of this Big is less than the value of Big y, otherwise return false.
 */


P.lt = function (y) {
  return this.cmp(y) < 0;
};
/*
 * Return true if the value of this Big is less than or equal to the value of Big y, otherwise
 * return false.
 */


P.lte = function (y) {
  return this.cmp(y) < 1;
};
/*
 * Return a new Big whose value is the value of this Big minus the value of Big y.
 */


P.minus = P.sub = function (y) {
  var i,
      j,
      t,
      xlty,
      Big = this.constructor,
      x = new Big(this),
      y = new Big(y),
      a = x.s,
      b = y.s; // Signs differ?

  if (a != b) {
    y.s = -b;
    return x.plus(y);
  }

  var xc = x.c.slice(),
      xe = x.e,
      yc = y.c,
      ye = y.e; // Either zero?

  if (!xc[0] || !yc[0]) {
    // y is non-zero? x is non-zero? Or both are zero.
    return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);
  } // Determine which is the bigger number. Prepend zeros to equalise exponents.


  if (a = xe - ye) {
    if (xlty = a < 0) {
      a = -a;
      t = xc;
    } else {
      ye = xe;
      t = yc;
    }

    t.reverse();

    for (b = a; b--;) {
      t.push(0);
    }

    t.reverse();
  } else {
    // Exponents equal. Check digit by digit.
    j = ((xlty = xc.length < yc.length) ? xc : yc).length;

    for (a = b = 0; b < j; b++) {
      if (xc[b] != yc[b]) {
        xlty = xc[b] < yc[b];
        break;
      }
    }
  } // x < y? Point xc to the array of the bigger number.


  if (xlty) {
    t = xc;
    xc = yc;
    yc = t;
    y.s = -y.s;
  }
  /*
   * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only
   * needs to start at yc.length.
   */


  if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) {
    xc[i++] = 0;
  } // Subtract yc from xc.

  for (b = i; j > a;) {
    if (xc[--j] < yc[j]) {
      for (i = j; i && !xc[--i];) {
        xc[i] = 9;
      }

      --xc[i];
      xc[j] += 10;
    }

    xc[j] -= yc[j];
  } // Remove trailing zeros.


  for (; xc[--b] === 0;) {
    xc.pop();
  } // Remove leading zeros and adjust exponent accordingly.


  for (; xc[0] === 0;) {
    xc.shift();
    --ye;
  }

  if (!xc[0]) {
    // n - n = +0
    y.s = 1; // Result must be zero.

    xc = [ye = 0];
  }

  y.c = xc;
  y.e = ye;
  return y;
};
/*
 * Return a new Big whose value is the value of this Big modulo the value of Big y.
 */


P.mod = function (y) {
  var ygtx,
      Big = this.constructor,
      x = new Big(this),
      y = new Big(y),
      a = x.s,
      b = y.s;
  if (!y.c[0]) throw Error(DIV_BY_ZERO);
  x.s = y.s = 1;
  ygtx = y.cmp(x) == 1;
  x.s = a;
  y.s = b;
  if (ygtx) return new Big(x);
  a = Big.DP;
  b = Big.RM;
  Big.DP = Big.RM = 0;
  x = x.div(y);
  Big.DP = a;
  Big.RM = b;
  return this.minus(x.times(y));
};
/*
 * Return a new Big whose value is the value of this Big plus the value of Big y.
 */


P.plus = P.add = function (y) {
  var t,
      Big = this.constructor,
      x = new Big(this),
      y = new Big(y),
      a = x.s,
      b = y.s; // Signs differ?

  if (a != b) {
    y.s = -b;
    return x.minus(y);
  }

  var xe = x.e,
      xc = x.c,
      ye = y.e,
      yc = y.c; // Either zero? y is non-zero? x is non-zero? Or both are zero.

  if (!xc[0] || !yc[0]) return yc[0] ? y : new Big(xc[0] ? x : a * 0);
  xc = xc.slice(); // Prepend zeros to equalise exponents.
  // Note: reverse faster than unshifts.

  if (a = xe - ye) {
    if (a > 0) {
      ye = xe;
      t = yc;
    } else {
      a = -a;
      t = xc;
    }

    t.reverse();

    for (; a--;) {
      t.push(0);
    }

    t.reverse();
  } // Point xc to the longer array.


  if (xc.length - yc.length < 0) {
    t = yc;
    yc = xc;
    xc = t;
  }

  a = yc.length; // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.

  for (b = 0; a; xc[a] %= 10) {
    b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;
  } // No need to check for zero, as +x + +y != 0 && -x + -y != 0


  if (b) {
    xc.unshift(b);
    ++ye;
  } // Remove trailing zeros.


  for (a = xc.length; xc[--a] === 0;) {
    xc.pop();
  }

  y.c = xc;
  y.e = ye;
  return y;
};
/*
 * Return a Big whose value is the value of this Big raised to the power n.
 * If n is negative, round to a maximum of Big.DP decimal places using rounding
 * mode Big.RM.
 *
 * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.
 */


P.pow = function (n) {
  var Big = this.constructor,
      x = new Big(this),
      y = new Big(1),
      one = new Big(1),
      isneg = n < 0;
  if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) throw Error(INVALID + 'exponent');
  if (isneg) n = -n;

  for (;;) {
    if (n & 1) y = y.times(x);
    n >>= 1;
    if (!n) break;
    x = x.times(x);
  }

  return isneg ? one.div(y) : y;
};
/*
 * Return a new Big whose value is the value of this Big rounded using rounding mode rm
 * to a maximum of dp decimal places, or, if dp is negative, to an integer which is a
 * multiple of 10**-dp.
 * If dp is not specified, round to 0 decimal places.
 * If rm is not specified, use Big.RM.
 *
 * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.
 * rm? 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)
 */


P.round = function (dp, rm) {
  var Big = this.constructor;
  if (dp === UNDEFINED) dp = 0;else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) throw Error(INVALID_DP);
  return round(new Big(this), dp, rm === UNDEFINED ? Big.RM : rm);
};
/*
 * Return a new Big whose value is the square root of the value of this Big, rounded, if
 * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.
 */


P.sqrt = function () {
  var r,
      c,
      t,
      Big = this.constructor,
      x = new Big(this),
      s = x.s,
      e = x.e,
      half = new Big(0.5); // Zero?

  if (!x.c[0]) return new Big(x); // Negative?

  if (s < 0) throw Error(NAME + 'No square root'); // Estimate.

  s = Math.sqrt(x + ''); // Math.sqrt underflow/overflow?
  // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.

  if (s === 0 || s === 1 / 0) {
    c = x.c.join('');
    if (!(c.length + e & 1)) c += '0';
    s = Math.sqrt(c);
    e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);
    r = new Big((s == 1 / 0 ? '1e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);
  } else {
    r = new Big(s);
  }

  e = r.e + (Big.DP += 4); // Newton-Raphson iteration.

  do {
    t = r;
    r = half.times(t.plus(x.div(t)));
  } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));

  return round(r, Big.DP -= 4, Big.RM);
};
/*
 * Return a new Big whose value is the value of this Big times the value of Big y.
 */


P.times = P.mul = function (y) {
  var c,
      Big = this.constructor,
      x = new Big(this),
      y = new Big(y),
      xc = x.c,
      yc = y.c,
      a = xc.length,
      b = yc.length,
      i = x.e,
      j = y.e; // Determine sign of result.

  y.s = x.s == y.s ? 1 : -1; // Return signed 0 if either 0.

  if (!xc[0] || !yc[0]) return new Big(y.s * 0); // Initialise exponent of result as x.e + y.e.

  y.e = i + j; // If array xc has fewer digits than yc, swap xc and yc, and lengths.

  if (a < b) {
    c = xc;
    xc = yc;
    yc = c;
    j = a;
    a = b;
    b = j;
  } // Initialise coefficient array of result with zeros.


  for (c = new Array(j = a + b); j--;) {
    c[j] = 0;
  } // Multiply.
  // i is initially xc.length.


  for (i = b; i--;) {
    b = 0; // a is yc.length.

    for (j = a + i; j > i;) {
      // Current sum of products at this digit position, plus carry.
      b = c[j] + yc[i] * xc[j - i - 1] + b;
      c[j--] = b % 10; // carry

      b = b / 10 | 0;
    }

    c[j] = (c[j] + b) % 10;
  } // Increment result exponent if there is a final carry, otherwise remove leading zero.


  if (b) ++y.e;else c.shift(); // Remove trailing zeros.

  for (i = c.length; !c[--i];) {
    c.pop();
  }

  y.c = c;
  return y;
};
/*
 * Return a string representing the value of this Big in exponential notation to dp fixed decimal
 * places and rounded using Big.RM.
 *
 * dp? {number} Integer, 0 to MAX_DP inclusive.
 */


P.toExponential = function (dp) {
  return stringify(this, 1, dp, dp);
};
/*
 * Return a string representing the value of this Big in normal notation to dp fixed decimal
 * places and rounded using Big.RM.
 *
 * dp? {number} Integer, 0 to MAX_DP inclusive.
 *
 * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
 * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
 */


P.toFixed = function (dp) {
  return stringify(this, 2, dp, this.e + dp);
};
/*
 * Return a string representing the value of this Big rounded to sd significant digits using
 * Big.RM. Use exponential notation if sd is less than the number of digits necessary to represent
 * the integer part of the value in normal notation.
 *
 * sd {number} Integer, 1 to MAX_DP inclusive.
 */


P.toPrecision = function (sd) {
  return stringify(this, 3, sd, sd - 1);
};
/*
 * Return a string representing the value of this Big.
 * Return exponential notation if this Big has a positive exponent equal to or greater than
 * Big.PE, or a negative exponent equal to or less than Big.NE.
 * Omit the sign for negative zero.
 */


P.toString = function () {
  return stringify(this);
};
/*
 * Return a string representing the value of this Big.
 * Return exponential notation if this Big has a positive exponent equal to or greater than
 * Big.PE, or a negative exponent equal to or less than Big.NE.
 * Include the sign for negative zero.
 */


P.valueOf = P.toJSON = function () {
  return stringify(this, 4);
}; // Export


var Big = _Big_();

exports.Big = Big;
var _default = Big;
exports.default = _default;
},{"../Util.js":"../src/.fable/fable-library.3.0.0/Util.js"}],"../src/.fable/fable-library.3.0.0/Decimal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compare = compare;
exports.equals = equals;
exports.abs = abs;
exports.round = round;
exports.truncate = truncate;
exports.ceiling = ceiling;
exports.floor = floor;
exports.pow = pow;
exports.sqrt = sqrt;
exports.op_Addition = op_Addition;
exports.op_Subtraction = op_Subtraction;
exports.op_Multiply = op_Multiply;
exports.op_Division = op_Division;
exports.op_Modulus = op_Modulus;
exports.op_UnaryNegation = op_UnaryNegation;
exports.toString = toString;
exports.tryParse = tryParse;
exports.parse = parse;
exports.toNumber = toNumber;
exports.fromIntArray = fromIntArray;
exports.fromInts = fromInts;
exports.fromParts = fromParts;
exports.getBits = getBits;
exports.makeRangeStepFunction = makeRangeStepFunction;
exports.negate = exports.remainder = exports.divide = exports.multiply = exports.subtract = exports.add = exports.get_MinValue = exports.get_MaxValue = exports.get_MinusOne = exports.get_One = exports.get_Zero = exports.default = void 0;

var _big = _interopRequireDefault(require("./lib/big.js"));

var _Types = require("./Types.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = _big.default;
exports.default = _default;
var get_Zero = new _big.default(0);
exports.get_Zero = get_Zero;
var get_One = new _big.default(1);
exports.get_One = get_One;
var get_MinusOne = new _big.default(-1);
exports.get_MinusOne = get_MinusOne;
var get_MaxValue = new _big.default("79228162514264337593543950335");
exports.get_MaxValue = get_MaxValue;
var get_MinValue = new _big.default("-79228162514264337593543950335");
exports.get_MinValue = get_MinValue;

function compare(x, y) {
  return x.cmp(y);
}

function equals(x, y) {
  return !x.cmp(y);
}

function abs(x) {
  return x.abs();
}

function round(x) {
  var digits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  return x.round(digits, 2
  /* ROUND_HALF_EVEN */
  );
}

function truncate(x) {
  return x.round(0, 0
  /* ROUND_DOWN */
  );
}

function ceiling(x) {
  return x.round(0, x.cmp(0) >= 0 ? 3
  /* ROUND_UP */
  : 0
  /* ROUND_DOWN */
  );
}

function floor(x) {
  return x.round(0, x.cmp(0) >= 0 ? 0
  /* ROUND_DOWN */
  : 3
  /* ROUND_UP */
  );
}

function pow(x, n) {
  return x.pow(n);
}

function sqrt(x) {
  return x.sqrt();
}

function op_Addition(x, y) {
  return x.add(y);
}

function op_Subtraction(x, y) {
  return x.sub(y);
}

function op_Multiply(x, y) {
  return x.mul(y);
}

function op_Division(x, y) {
  return x.div(y);
}

function op_Modulus(x, y) {
  return x.mod(y);
}

function op_UnaryNegation(x) {
  var x2 = new _big.default(x);
  x2.s = -x2.s || 0;
  return x2;
}

var add = op_Addition;
exports.add = add;
var subtract = op_Subtraction;
exports.subtract = subtract;
var multiply = op_Multiply;
exports.multiply = multiply;
var divide = op_Division;
exports.divide = divide;
var remainder = op_Modulus;
exports.remainder = remainder;
var negate = op_UnaryNegation;
exports.negate = negate;

function toString(x) {
  return x.toString();
}

function tryParse(str, defValue) {
  try {
    defValue.contents = new _big.default(str.trim());
    return true;
  } catch (_a) {
    return false;
  }
}

function parse(str) {
  var defValue = new _Types.FSharpRef(get_Zero);

  if (tryParse(str, defValue)) {
    return defValue.contents;
  } else {
    throw new Error("Input string was not in a correct format.");
  }
}

function toNumber(x) {
  return +x;
}

function decimalToHex(dec, bitSize) {
  var hex = new Uint8Array(bitSize / 4 | 0);
  var hexCount = 1;

  for (var d = 0; d < dec.length; d++) {
    var value = dec[d];

    for (var i = 0; i < hexCount; i++) {
      var digit = hex[i] * 10 + value | 0;
      hex[i] = digit & 0xF;
      value = digit >> 4;
    }

    if (value !== 0) {
      hex[hexCount++] = value;
    }
  }

  return hex.slice(0, hexCount); // digits in reverse order
}

function hexToDecimal(hex, bitSize) {
  var dec = new Uint8Array(bitSize * 301 / 1000 + 1 | 0);
  var decCount = 1;

  for (var d = hex.length - 1; d >= 0; d--) {
    var carry = hex[d];

    for (var i = 0; i < decCount; i++) {
      var val = dec[i] * 16 + carry | 0;
      dec[i] = val % 10 | 0;
      carry = val / 10 | 0;
    }

    while (carry > 0) {
      dec[decCount++] = carry % 10 | 0;
      carry = carry / 10 | 0;
    }
  }

  return dec.slice(0, decCount); // digits in reverse order
}

function setInt32Bits(hexDigits, bits, offset) {
  for (var i = 0; i < 8; i++) {
    hexDigits[offset + i] = bits >> i * 4 & 0xF;
  }
}

function getInt32Bits(hexDigits, offset) {
  var bits = 0;

  for (var i = 0; i < 8; i++) {
    bits = bits | hexDigits[offset + i] << i * 4;
  }

  return bits;
}

function fromIntArray(bits) {
  return fromInts(bits[0], bits[1], bits[2], bits[3]);
}

function fromInts(low, mid, high, signExp) {
  var isNegative = signExp < 0;
  var scale = signExp >> 16 & 0x7F;
  return fromParts(low, mid, high, isNegative, scale);
}

function fromParts(low, mid, high, isNegative, scale) {
  var bitSize = 96;
  var hexDigits = new Uint8Array(bitSize / 4);
  setInt32Bits(hexDigits, low, 0);
  setInt32Bits(hexDigits, mid, 8);
  setInt32Bits(hexDigits, high, 16);
  var decDigits = hexToDecimal(hexDigits, bitSize);
  scale = scale & 0x7F;
  var big = new _big.default(0);
  big.c = Array.from(decDigits.reverse());
  big.e = decDigits.length - scale - 1;
  big.s = isNegative ? -1 : 1;
  var d = new _big.default(big);
  return d;
}

function getBits(d) {
  var bitSize = 96;
  var decDigits = Uint8Array.from(d.c);
  var hexDigits = decimalToHex(decDigits, bitSize);
  var low = getInt32Bits(hexDigits, 0);
  var mid = getInt32Bits(hexDigits, 8);
  var high = getInt32Bits(hexDigits, 16);
  var decStr = d.toString();
  var dotPos = decStr.indexOf(".");
  var scale = dotPos < 0 ? 0 : decStr.length - dotPos - 1;
  var signExp = (scale & 0x7F) << 16 | (d.s < 0 ? 0x80000000 : 0);
  return [low, mid, high, signExp];
}

function makeRangeStepFunction(step, last) {
  var stepComparedWithZero = step.cmp(get_Zero);

  if (stepComparedWithZero === 0) {
    throw new Error("The step of a range cannot be zero");
  }

  var stepGreaterThanZero = stepComparedWithZero > 0;
  return function (x) {
    var comparedWithLast = x.cmp(last);

    if (stepGreaterThanZero && comparedWithLast <= 0 || !stepGreaterThanZero && comparedWithLast >= 0) {
      return [x, op_Addition(x, step)];
    } else {
      return undefined;
    }
  };
}
},{"./lib/big.js":"../src/.fable/fable-library.3.0.0/lib/big.js","./Types.js":"../src/.fable/fable-library.3.0.0/Types.js"}],"../src/.fable/fable-library.3.0.0/Int32.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isValid = isValid;
exports.parse = parse;
exports.tryParse = tryParse;
exports.op_UnaryNegation_Int8 = op_UnaryNegation_Int8;
exports.op_UnaryNegation_Int16 = op_UnaryNegation_Int16;
exports.op_UnaryNegation_Int32 = op_UnaryNegation_Int32;
exports.NumberStyles = void 0;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

// export type decimal = Decimal;
var NumberStyles;
exports.NumberStyles = NumberStyles;

(function (NumberStyles) {
  // None = 0x00000000,
  // AllowLeadingWhite = 0x00000001,
  // AllowTrailingWhite = 0x00000002,
  // AllowLeadingSign = 0x00000004,
  // AllowTrailingSign = 0x00000008,
  // AllowParentheses = 0x00000010,
  // AllowDecimalPoint = 0x00000020,
  // AllowThousands = 0x00000040,
  // AllowExponent = 0x00000080,
  // AllowCurrencySymbol = 0x00000100,
  NumberStyles[NumberStyles["AllowHexSpecifier"] = 512] = "AllowHexSpecifier"; // Integer = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign,
  // HexNumber = AllowLeadingWhite | AllowTrailingWhite | AllowHexSpecifier,
  // Number = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |
  //          AllowTrailingSign | AllowDecimalPoint | AllowThousands,
  // Float = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |
  //         AllowDecimalPoint | AllowExponent,
  // Currency = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |
  //            AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol,
  // Any = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |
  //       AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol | AllowExponent,
})(NumberStyles || (exports.NumberStyles = NumberStyles = {}));

function validResponse(regexMatch, radix) {
  var _regexMatch = _slicedToArray(regexMatch, 4),

  /*all*/
  sign = _regexMatch[1],
      prefix = _regexMatch[2],
      digits = _regexMatch[3];

  return {
    sign: sign || "",
    prefix: prefix || "",
    digits: digits,
    radix: radix
  };
}

function getRange(unsigned, bitsize) {
  switch (bitsize) {
    case 8:
      return unsigned ? [0, 255] : [-128, 127];

    case 16:
      return unsigned ? [0, 65535] : [-32768, 32767];

    case 32:
      return unsigned ? [0, 4294967295] : [-2147483648, 2147483647];

    default:
      throw new Error("Invalid bit size.");
  }
}

function getInvalidDigits(radix) {
  switch (radix) {
    case 2:
      return /[^0-1]/;

    case 8:
      return /[^0-7]/;

    case 10:
      return /[^0-9]/;

    case 16:
      return /[^0-9a-fA-F]/;

    default:
      throw new Error("Invalid Base.");
  }
}

function getRadix(prefix, style) {
  if (style & NumberStyles.AllowHexSpecifier) {
    return 16;
  } else {
    switch (prefix) {
      case "0b":
      case "0B":
        return 2;

      case "0o":
      case "0O":
        return 8;

      case "0x":
      case "0X":
        return 16;

      default:
        return 10;
    }
  }
}

function isValid(str, style, radix) {
  var integerRegex = /^\s*([\+\-])?(0[xXoObB])?([0-9a-fA-F]+)\s*$/;
  var res = integerRegex.exec(str.replace(/_/g, ""));

  if (res != null) {
    var _res = _slicedToArray(res, 4),

    /*all*/

    /*sign*/
    prefix = _res[2],
        digits = _res[3];

    radix = radix || getRadix(prefix, style);
    var invalidDigits = getInvalidDigits(radix);

    if (!invalidDigits.test(digits)) {
      return validResponse(res, radix);
    }
  }

  return null;
}

function parse(str, style, unsigned, bitsize, radix) {
  var res = isValid(str, style, radix);

  if (res != null) {
    var v = Number.parseInt(res.sign + res.digits, res.radix);

    if (!Number.isNaN(v)) {
      var _getRange = getRange(true, bitsize),
          _getRange2 = _slicedToArray(_getRange, 2),
          umin = _getRange2[0],
          umax = _getRange2[1];

      if (!unsigned && res.radix !== 10 && v >= umin && v <= umax) {
        v = v << 32 - bitsize >> 32 - bitsize;
      }

      var _getRange3 = getRange(unsigned, bitsize),
          _getRange4 = _slicedToArray(_getRange3, 2),
          min = _getRange4[0],
          max = _getRange4[1];

      if (v >= min && v <= max) {
        return v;
      }
    }
  }

  throw new Error("Input string was not in a correct format.");
}

function tryParse(str, style, unsigned, bitsize, defValue) {
  try {
    defValue.contents = parse(str, style, unsigned, bitsize);
    return true;
  } catch (_a) {
    return false;
  }
}

function op_UnaryNegation_Int8(x) {
  return x === -128 ? x : -x;
}

function op_UnaryNegation_Int16(x) {
  return x === -32768 ? x : -x;
}

function op_UnaryNegation_Int32(x) {
  return x === -2147483648 ? x : -x;
}
},{}],"../src/.fable/fable-library.3.0.0/lib/long.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Long = Long;
exports.isLong = isLong;
exports.fromInt = fromInt;
exports.fromNumber = fromNumber;
exports.fromBits = fromBits;
exports.fromString = fromString;
exports.fromValue = fromValue;
exports.toInt = toInt;
exports.toNumber = toNumber;
exports.toString = toString;
exports.getHighBits = getHighBits;
exports.getHighBitsUnsigned = getHighBitsUnsigned;
exports.getLowBits = getLowBits;
exports.getLowBitsUnsigned = getLowBitsUnsigned;
exports.getNumBitsAbs = getNumBitsAbs;
exports.isZero = isZero;
exports.isNegative = isNegative;
exports.isPositive = isPositive;
exports.isOdd = isOdd;
exports.isEven = isEven;
exports.equals = equals;
exports.notEquals = notEquals;
exports.lessThan = lessThan;
exports.lessThanOrEqual = lessThanOrEqual;
exports.greaterThan = greaterThan;
exports.greaterThanOrEqual = greaterThanOrEqual;
exports.compare = compare;
exports.negate = negate;
exports.add = add;
exports.subtract = subtract;
exports.multiply = multiply;
exports.divide = divide;
exports.modulo = modulo;
exports.not = not;
exports.and = and;
exports.or = or;
exports.xor = xor;
exports.shiftLeft = shiftLeft;
exports.shiftRight = shiftRight;
exports.shiftRightUnsigned = shiftRightUnsigned;
exports.toSigned = toSigned;
exports.toUnsigned = toUnsigned;
exports.toBytes = toBytes;
exports.toBytesLE = toBytesLE;
exports.toBytesBE = toBytesBE;
exports.fromBytes = fromBytes;
exports.fromBytesLE = fromBytesLE;
exports.fromBytesBE = fromBytesBE;
exports.rotateRight = exports.rotateLeft = exports.MIN_VALUE = exports.MAX_UNSIGNED_VALUE = exports.MAX_VALUE = exports.NEG_ONE = exports.UONE = exports.ONE = exports.UZERO = exports.ZERO = exports.default = void 0;
// Adapted from: https://github.com/dcodeIO/long.js/blob/master/src/long.js
// Apache License 2.0: https://github.com/dcodeIO/long.js/blob/master/LICENSE
var _default = Long;
/**
 * wasm optimizations, to do native i64 multiplication and divide
 */

exports.default = _default;
var wasm = null;

try {
  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;
} catch (e) {// no wasm support :(
}
/**
 * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
 *  See the from* functions below for more convenient ways of constructing Longs.
 * @exports Long
 * @class A Long class for representing a 64 bit two's-complement integer value.
 * @param {number} low The low (signed) 32 bits of the long
 * @param {number} high The high (signed) 32 bits of the long
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @constructor
 */


function Long(low, high, unsigned) {
  /**
   * The low 32 bits as a signed value.
   * @type {number}
   */
  this.low = low | 0;
  /**
   * The high 32 bits as a signed value.
   * @type {number}
   */

  this.high = high | 0;
  /**
   * Whether unsigned or not.
   * @type {boolean}
   */

  this.unsigned = !!unsigned;
}

Long.prototype.GetHashCode = function () {
  var h1 = this.unsigned ? 1 : 0;
  h1 = (h1 << 5) + h1 ^ this.high;
  h1 = (h1 << 5) + h1 ^ this.low;
  return h1;
};

Long.prototype.Equals = function (x) {
  return equals(this, x);
};

Long.prototype.CompareTo = function (x) {
  return compare(this, x);
};

Long.prototype.toString = function (radix) {
  return toString(this, radix);
};

Long.prototype.toJSON = function () {
  return toString(this);
}; // The internal representation of a long is the two given signed, 32-bit values.
// We use 32-bit pieces because these are the size of integers on which
// Javascript performs bit-operations.  For operations like addition and
// multiplication, we split each number into 16 bit pieces, which can easily be
// multiplied within Javascript's floating-point representation without overflow
// or change in sign.
//
// In the algorithms below, we frequently reduce the negative case to the
// positive case by negating the input(s) and then post-processing the result.
// Note that we must ALWAYS check specially whether those values are MIN_VALUE
// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
// a positive number, it overflows back into a negative).  Not handling this
// case would often result in infinite recursion.
//
// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
// methods on which they depend.

/**
 * An indicator used to reliably determine if an object is a Long or not.
 * @type {boolean}
 * @const
 * @private
 */


Long.prototype.__isLong__;
Object.defineProperty(Long.prototype, "__isLong__", {
  value: true
});
/**
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 * @inner
 */

function isLong(obj) {
  return (obj && obj["__isLong__"]) === true;
}
/**
 * Tests if the specified object is a Long.
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 */
// Long.isLong = isLong;

/**
 * A cache of the Long representations of small integer values.
 * @type {!Object}
 * @inner
 */


var INT_CACHE = {};
/**
 * A cache of the Long representations of small unsigned integer values.
 * @type {!Object}
 * @inner
 */

var UINT_CACHE = {};
/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */

function fromInt(value, unsigned) {
  var obj, cachedObj, cache;

  if (unsigned) {
    value >>>= 0;

    if (cache = 0 <= value && value < 256) {
      cachedObj = UINT_CACHE[value];
      if (cachedObj) return cachedObj;
    }

    obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);
    if (cache) UINT_CACHE[value] = obj;
    return obj;
  } else {
    value |= 0;

    if (cache = -128 <= value && value < 128) {
      cachedObj = INT_CACHE[value];
      if (cachedObj) return cachedObj;
    }

    obj = fromBits(value, value < 0 ? -1 : 0, false);
    if (cache) INT_CACHE[value] = obj;
    return obj;
  }
}
/**
 * Returns a Long representing the given 32 bit integer value.
 * @function
 * @param {number} value The 32 bit integer in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
// Long.fromInt = fromInt;

/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */


function fromNumber(value, unsigned) {
  if (isNaN(value)) return unsigned ? UZERO : ZERO;

  if (unsigned) {
    if (value < 0) return UZERO;
    if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;
  } else {
    if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;
    if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;
  }

  if (value < 0) return negate(fromNumber(-value, unsigned));
  return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);
}
/**
 * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
 * @function
 * @param {number} value The number in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
// Long.fromNumber = fromNumber;

/**
 * @param {number} lowBits
 * @param {number} highBits
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */


function fromBits(lowBits, highBits, unsigned) {
  return new Long(lowBits, highBits, unsigned);
}
/**
 * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
 *  assumed to use 32 bits.
 * @function
 * @param {number} lowBits The low 32 bits
 * @param {number} highBits The high 32 bits
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
// Long.fromBits = fromBits;

/**
 * @function
 * @param {number} base
 * @param {number} exponent
 * @returns {number}
 * @inner
 */


var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)

/**
 * @param {string} str
 * @param {(boolean|number)=} unsigned
 * @param {number=} radix
 * @returns {!Long}
 * @inner
 */

function fromString(str, unsigned, radix) {
  if (str.length === 0) throw Error('empty string');
  if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity") return ZERO;

  if (typeof unsigned === 'number') {
    // For goog.math.long compatibility
    radix = unsigned, unsigned = false;
  } else {
    unsigned = !!unsigned;
  }

  radix = radix || 10;
  if (radix < 2 || 36 < radix) throw RangeError('radix');
  var p = str.indexOf('-');
  if (p > 0) throw Error('interior hyphen');else if (p === 0) {
    return negate(fromString(str.substring(1), unsigned, radix));
  } // Do several (8) digits each time through the loop, so as to
  // minimize the calls to the very expensive emulated div.

  var radixToPower = fromNumber(pow_dbl(radix, 8));
  var result = ZERO;

  for (var i = 0; i < str.length; i += 8) {
    var size = Math.min(8, str.length - i),
        value = parseInt(str.substring(i, i + size), radix);

    if (size < 8) {
      var power = fromNumber(pow_dbl(radix, size));
      result = add(multiply(result, power), fromNumber(value));
    } else {
      result = multiply(result, radixToPower);
      result = add(result, fromNumber(value));
    }
  }

  result.unsigned = unsigned;
  return result;
}
/**
 * Returns a Long representation of the given string, written using the specified radix.
 * @function
 * @param {string} str The textual representation of the Long
 * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed
 * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
 * @returns {!Long} The corresponding Long value
 */
// Long.fromString = fromString;

/**
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */


function fromValue(val, unsigned) {
  if (typeof val === 'number') return fromNumber(val, unsigned);
  if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:

  return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);
}
/**
 * Converts the specified value to a Long using the appropriate from* function for its type.
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long}
 */
// Long.fromValue = fromValue;
// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
// no runtime penalty for these.

/**
 * @type {number}
 * @const
 * @inner
 */


var TWO_PWR_16_DBL = 1 << 16;
/**
 * @type {number}
 * @const
 * @inner
 */

var TWO_PWR_24_DBL = 1 << 24;
/**
 * @type {number}
 * @const
 * @inner
 */

var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;
/**
 * @type {number}
 * @const
 * @inner
 */

var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;
/**
 * @type {number}
 * @const
 * @inner
 */

var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;
/**
 * @type {!Long}
 * @const
 * @inner
 */

var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);
/**
 * @type {!Long}
 * @inner
 */

var ZERO = fromInt(0);
/**
 * Signed zero.
 * @type {!Long}
 */
// Long.ZERO = ZERO;

/**
 * @type {!Long}
 * @inner
 */

exports.ZERO = ZERO;
var UZERO = fromInt(0, true);
/**
 * Unsigned zero.
 * @type {!Long}
 */
// Long.UZERO = UZERO;

/**
 * @type {!Long}
 * @inner
 */

exports.UZERO = UZERO;
var ONE = fromInt(1);
/**
 * Signed one.
 * @type {!Long}
 */
// Long.ONE = ONE;

/**
 * @type {!Long}
 * @inner
 */

exports.ONE = ONE;
var UONE = fromInt(1, true);
/**
 * Unsigned one.
 * @type {!Long}
 */
// Long.UONE = UONE;

/**
 * @type {!Long}
 * @inner
 */

exports.UONE = UONE;
var NEG_ONE = fromInt(-1);
/**
 * Signed negative one.
 * @type {!Long}
 */
// Long.NEG_ONE = NEG_ONE;

/**
 * @type {!Long}
 * @inner
 */

exports.NEG_ONE = NEG_ONE;
var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);
/**
 * Maximum signed value.
 * @type {!Long}
 */
// Long.MAX_VALUE = MAX_VALUE;

/**
 * @type {!Long}
 * @inner
 */

exports.MAX_VALUE = MAX_VALUE;
var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);
/**
 * Maximum unsigned value.
 * @type {!Long}
 */
// Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;

/**
 * @type {!Long}
 * @inner
 */

exports.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;
var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);
/**
 * Minimum signed value.
 * @type {!Long}
 */
// Long.MIN_VALUE = MIN_VALUE;

/**
 * @alias Long.prototype
 * @inner
 */
// var LongPrototype = Long.prototype;

/**
 * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
 * @this {!Long}
 * @returns {number}
 */

exports.MIN_VALUE = MIN_VALUE;

function toInt($this) {
  return $this.unsigned ? $this.low >>> 0 : $this.low;
}

;
/**
 * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
 * @this {!Long}
 * @returns {number}
 */

function toNumber($this) {
  if ($this.unsigned) return ($this.high >>> 0) * TWO_PWR_32_DBL + ($this.low >>> 0);
  return $this.high * TWO_PWR_32_DBL + ($this.low >>> 0);
}

;
/**
 * Converts the Long to a string written in the specified radix.
 * @this {!Long}
 * @param {number=} radix Radix (2-36), defaults to 10
 * @returns {string}
 * @override
 * @throws {RangeError} If `radix` is out of range
 */

function toString($this, radix) {
  radix = radix || 10;
  if (radix < 2 || 36 < radix) throw RangeError('radix');
  if (isZero($this)) return '0';

  if (isNegative($this)) {
    // Unsigned Longs are never negative
    if (equals($this, MIN_VALUE)) {
      // We need to change the Long value before it can be negated, so we remove
      // the bottom-most digit in this base and then recurse to do the rest.
      var radixLong = fromNumber(radix),
          div = divide($this, radixLong),
          rem1 = subtract(multiply(div, radixLong), $this);
      return toString(div, radix) + toInt(rem1).toString(radix);
    } else return '-' + toString(negate($this), radix);
  } // Do several (6) digits each time through the loop, so as to
  // minimize the calls to the very expensive emulated div.


  var radixToPower = fromNumber(pow_dbl(radix, 6), $this.unsigned),
      rem = $this;
  var result = '';

  while (true) {
    var remDiv = divide(rem, radixToPower),
        intval = toInt(subtract(rem, multiply(remDiv, radixToPower))) >>> 0,
        digits = intval.toString(radix);
    rem = remDiv;
    if (isZero(rem)) return digits + result;else {
      while (digits.length < 6) {
        digits = '0' + digits;
      }

      result = '' + digits + result;
    }
  }
}

;
/**
 * Gets the high 32 bits as a signed integer.
 * @this {!Long}
 * @returns {number} Signed high bits
 */

function getHighBits($this) {
  return $this.high;
}

;
/**
 * Gets the high 32 bits as an unsigned integer.
 * @this {!Long}
 * @returns {number} Unsigned high bits
 */

function getHighBitsUnsigned($this) {
  return $this.high >>> 0;
}

;
/**
 * Gets the low 32 bits as a signed integer.
 * @this {!Long}
 * @returns {number} Signed low bits
 */

function getLowBits($this) {
  return $this.low;
}

;
/**
 * Gets the low 32 bits as an unsigned integer.
 * @this {!Long}
 * @returns {number} Unsigned low bits
 */

function getLowBitsUnsigned($this) {
  return $this.low >>> 0;
}

;
/**
 * Gets the number of bits needed to represent the absolute value of this Long.
 * @this {!Long}
 * @returns {number}
 */

function getNumBitsAbs($this) {
  if (isNegative($this)) // Unsigned Longs are never negative
    return equals($this, MIN_VALUE) ? 64 : getNumBitsAbs(negate($this));
  var val = $this.high != 0 ? $this.high : $this.low;

  for (var bit = 31; bit > 0; bit--) {
    if ((val & 1 << bit) != 0) break;
  }

  return $this.high != 0 ? bit + 33 : bit + 1;
}

;
/**
 * Tests if this Long's value equals zero.
 * @this {!Long}
 * @returns {boolean}
 */

function isZero($this) {
  return $this.high === 0 && $this.low === 0;
}

;
/**
 * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.
 * @returns {boolean}
 */
// LongPrototype.eqz = LongPrototype.isZero;

/**
 * Tests if this Long's value is negative.
 * @this {!Long}
 * @returns {boolean}
 */

function isNegative($this) {
  return !$this.unsigned && $this.high < 0;
}

;
/**
 * Tests if this Long's value is positive.
 * @this {!Long}
 * @returns {boolean}
 */

function isPositive($this) {
  return $this.unsigned || $this.high >= 0;
}

;
/**
 * Tests if this Long's value is odd.
 * @this {!Long}
 * @returns {boolean}
 */

function isOdd($this) {
  return ($this.low & 1) === 1;
}

;
/**
 * Tests if this Long's value is even.
 * @this {!Long}
 * @returns {boolean}
 */

function isEven($this) {
  return ($this.low & 1) === 0;
}

;
/**
 * Tests if this Long's value equals the specified's.
 * @this {!Long}
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */

function equals($this, other) {
  if (!isLong(other)) other = fromValue(other);
  if ($this.unsigned !== other.unsigned && $this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;
  return $this.high === other.high && $this.low === other.low;
}

;
/**
 * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
// LongPrototype.eq = LongPrototype.equals;

/**
 * Tests if this Long's value differs from the specified's.
 * @this {!Long}
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */

function notEquals($this, other) {
  return !equals($this,
  /* validates */
  other);
}

;
/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
// LongPrototype.neq = LongPrototype.notEquals;

/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
// LongPrototype.ne = LongPrototype.notEquals;

/**
 * Tests if this Long's value is less than the specified's.
 * @this {!Long}
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */

function lessThan($this, other) {
  return compare($this,
  /* validates */
  other) < 0;
}

;
/**
 * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
// LongPrototype.lt = LongPrototype.lessThan;

/**
 * Tests if this Long's value is less than or equal the specified's.
 * @this {!Long}
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */

function lessThanOrEqual($this, other) {
  return compare($this,
  /* validates */
  other) <= 0;
}

;
/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
// LongPrototype.lte = LongPrototype.lessThanOrEqual;

/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
// LongPrototype.le = LongPrototype.lessThanOrEqual;

/**
 * Tests if this Long's value is greater than the specified's.
 * @this {!Long}
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */

function greaterThan($this, other) {
  return compare($this,
  /* validates */
  other) > 0;
}

;
/**
 * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
// LongPrototype.gt = LongPrototype.greaterThan;

/**
 * Tests if this Long's value is greater than or equal the specified's.
 * @this {!Long}
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */

function greaterThanOrEqual($this, other) {
  return compare($this,
  /* validates */
  other) >= 0;
}

;
/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
// LongPrototype.gte = LongPrototype.greaterThanOrEqual;

/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
// LongPrototype.ge = LongPrototype.greaterThanOrEqual;

/**
 * Compares this Long's value with the specified's.
 * @this {!Long}
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */

function compare($this, other) {
  if (!isLong(other)) other = fromValue(other);
  if (equals($this, other)) return 0;
  var thisNeg = isNegative($this),
      otherNeg = isNegative(other);
  if (thisNeg && !otherNeg) return -1;
  if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same

  if (!$this.unsigned) return isNegative(subtract($this, other)) ? -1 : 1; // Both are positive if at least one is unsigned

  return other.high >>> 0 > $this.high >>> 0 || other.high === $this.high && other.low >>> 0 > $this.low >>> 0 ? -1 : 1;
}

;
/**
 * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */
// LongPrototype.comp = LongPrototype.compare;

/**
 * Negates this Long's value.
 * @this {!Long}
 * @returns {!Long} Negated Long
 */

function negate($this) {
  if (!$this.unsigned && equals($this, MIN_VALUE)) return MIN_VALUE;
  return add(not($this), ONE);
}

;
/**
 * Negates this Long's value. This is an alias of {@link Long#negate}.
 * @function
 * @returns {!Long} Negated Long
 */
// LongPrototype.neg = LongPrototype.negate;

/**
 * Returns the sum of this and the specified Long.
 * @this {!Long}
 * @param {!Long|number|string} addend Addend
 * @returns {!Long} Sum
 */

function add($this, addend) {
  if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

  var a48 = $this.high >>> 16;
  var a32 = $this.high & 0xFFFF;
  var a16 = $this.low >>> 16;
  var a00 = $this.low & 0xFFFF;
  var b48 = addend.high >>> 16;
  var b32 = addend.high & 0xFFFF;
  var b16 = addend.low >>> 16;
  var b00 = addend.low & 0xFFFF;
  var c48 = 0,
      c32 = 0,
      c16 = 0,
      c00 = 0;
  c00 += a00 + b00;
  c16 += c00 >>> 16;
  c00 &= 0xFFFF;
  c16 += a16 + b16;
  c32 += c16 >>> 16;
  c16 &= 0xFFFF;
  c32 += a32 + b32;
  c48 += c32 >>> 16;
  c32 &= 0xFFFF;
  c48 += a48 + b48;
  c48 &= 0xFFFF;
  return fromBits(c16 << 16 | c00, c48 << 16 | c32, $this.unsigned);
}

;
/**
 * Returns the difference of this and the specified Long.
 * @this {!Long}
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */

function subtract($this, subtrahend) {
  if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);
  return add($this, negate(subtrahend));
}

;
/**
 * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.
 * @function
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */
// LongPrototype.sub = LongPrototype.subtract;

/**
 * Returns the product of this and the specified Long.
 * @this {!Long}
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */

function multiply($this, multiplier) {
  if (isZero($this)) return $this.unsigned ? UZERO : ZERO;
  if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present

  if (wasm) {
    var low = wasm.mul($this.low, $this.high, multiplier.low, multiplier.high);
    return fromBits(low, wasm.get_high(), $this.unsigned);
  }

  if (isZero(multiplier)) return $this.unsigned ? UZERO : ZERO;
  if (equals($this, MIN_VALUE)) return isOdd(multiplier) ? MIN_VALUE : ZERO;
  if (equals(multiplier, MIN_VALUE)) return isOdd($this) ? MIN_VALUE : ZERO;

  if (isNegative($this)) {
    if (isNegative(multiplier)) return multiply(negate($this), negate(multiplier));else return negate(multiply(negate($this), multiplier));
  } else if (isNegative(multiplier)) return negate(multiply($this, negate(multiplier))); // If both longs are small, use float multiplication


  if (lessThan($this, TWO_PWR_24) && lessThan(multiplier, TWO_PWR_24)) return fromNumber(toNumber($this) * toNumber(multiplier), $this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
  // We can skip products that would overflow.

  var a48 = $this.high >>> 16;
  var a32 = $this.high & 0xFFFF;
  var a16 = $this.low >>> 16;
  var a00 = $this.low & 0xFFFF;
  var b48 = multiplier.high >>> 16;
  var b32 = multiplier.high & 0xFFFF;
  var b16 = multiplier.low >>> 16;
  var b00 = multiplier.low & 0xFFFF;
  var c48 = 0,
      c32 = 0,
      c16 = 0,
      c00 = 0;
  c00 += a00 * b00;
  c16 += c00 >>> 16;
  c00 &= 0xFFFF;
  c16 += a16 * b00;
  c32 += c16 >>> 16;
  c16 &= 0xFFFF;
  c16 += a00 * b16;
  c32 += c16 >>> 16;
  c16 &= 0xFFFF;
  c32 += a32 * b00;
  c48 += c32 >>> 16;
  c32 &= 0xFFFF;
  c32 += a16 * b16;
  c48 += c32 >>> 16;
  c32 &= 0xFFFF;
  c32 += a00 * b32;
  c48 += c32 >>> 16;
  c32 &= 0xFFFF;
  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
  c48 &= 0xFFFF;
  return fromBits(c16 << 16 | c00, c48 << 16 | c32, $this.unsigned);
}

;
/**
 * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.
 * @function
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */
// LongPrototype.mul = LongPrototype.multiply;

/**
 * Returns this Long divided by the specified. The result is signed if this Long is signed or
 *  unsigned if this Long is unsigned.
 * @this {!Long}
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */

function divide($this, divisor) {
  if (!isLong(divisor)) divisor = fromValue(divisor);
  if (isZero(divisor)) throw Error('division by zero'); // use wasm support if present

  if (wasm) {
    // guard against signed division overflow: the largest
    // negative number / -1 would be 1 larger than the largest
    // positive number, due to two's complement.
    if (!$this.unsigned && $this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {
      // be consistent with non-wasm code path
      return $this;
    }

    var low = ($this.unsigned ? wasm.div_u : wasm.div_s)($this.low, $this.high, divisor.low, divisor.high);
    return fromBits(low, wasm.get_high(), $this.unsigned);
  }

  if (isZero($this)) return $this.unsigned ? UZERO : ZERO;
  var approx, rem, res;

  if (!$this.unsigned) {
    // This section is only relevant for signed longs and is derived from the
    // closure library as a whole.
    if (equals($this, MIN_VALUE)) {
      if (equals(divisor, ONE) || equals(divisor, NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE
      else if (equals(divisor, MIN_VALUE)) return ONE;else {
          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
          var halfThis = shiftRight($this, 1);
          approx = shiftLeft(divide(halfThis, divisor), 1);

          if (equals(approx, ZERO)) {
            return isNegative(divisor) ? ONE : NEG_ONE;
          } else {
            rem = subtract($this, multiply(divisor, approx));
            res = add(approx, divide(rem, divisor));
            return res;
          }
        }
    } else if (equals(divisor, MIN_VALUE)) return $this.unsigned ? UZERO : ZERO;

    if (isNegative($this)) {
      if (isNegative(divisor)) return divide(negate($this), negate(divisor));
      return negate(divide(negate($this), divisor));
    } else if (isNegative(divisor)) return negate(divide($this, negate(divisor)));

    res = ZERO;
  } else {
    // The algorithm below has not been made for unsigned longs. It's therefore
    // required to take special care of the MSB prior to running it.
    if (!divisor.unsigned) divisor = toUnsigned(divisor);
    if (greaterThan(divisor, $this)) return UZERO;
    if (greaterThan(divisor, shiftRightUnsigned($this, 1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true
      return UONE;
    res = UZERO;
  } // Repeat the following until the remainder is less than other:  find a
  // floating-point that approximates remainder / other *from below*, add this
  // into the result, and subtract it from the remainder.  It is critical that
  // the approximate value is less than or equal to the real value so that the
  // remainder never becomes negative.


  rem = $this;

  while (greaterThanOrEqual(rem, divisor)) {
    // Approximate the result of division. This may be a little greater or
    // smaller than the actual value.
    approx = Math.max(1, Math.floor(toNumber(rem) / toNumber(divisor))); // We will tweak the approximate result by changing it in the 48-th digit or
    // the smallest non-fractional digit, whichever is larger.

    var log2 = Math.ceil(Math.log(approx) / Math.LN2),
        delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),
        // Decrease the approximation until it is smaller than the remainder.  Note
    // that if it is too large, the product overflows and is negative.
    approxRes = fromNumber(approx),
        approxRem = multiply(approxRes, divisor);

    while (isNegative(approxRem) || greaterThan(approxRem, rem)) {
      approx -= delta;
      approxRes = fromNumber(approx, $this.unsigned);
      approxRem = multiply(approxRes, divisor);
    } // We know the answer can't be zero... and actually, zero would cause
    // infinite recursion since we would make no progress.


    if (isZero(approxRes)) approxRes = ONE;
    res = add(res, approxRes);
    rem = subtract(rem, approxRem);
  }

  return res;
}

;
/**
 * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */
// LongPrototype.div = LongPrototype.divide;

/**
 * Returns this Long modulo the specified.
 * @this {!Long}
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */

function modulo($this, divisor) {
  if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present

  if (wasm) {
    var low = ($this.unsigned ? wasm.rem_u : wasm.rem_s)($this.low, $this.high, divisor.low, divisor.high);
    return fromBits(low, wasm.get_high(), $this.unsigned);
  }

  return subtract($this, multiply(divide($this, divisor), divisor));
}

;
/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
// LongPrototype.mod = LongPrototype.modulo;

/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
// LongPrototype.rem = LongPrototype.modulo;

/**
 * Returns the bitwise NOT of this Long.
 * @this {!Long}
 * @returns {!Long}
 */

function not($this) {
  return fromBits(~$this.low, ~$this.high, $this.unsigned);
}

;
/**
 * Returns the bitwise AND of this Long and the specified.
 * @this {!Long}
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */

function and($this, other) {
  if (!isLong(other)) other = fromValue(other);
  return fromBits($this.low & other.low, $this.high & other.high, $this.unsigned);
}

;
/**
 * Returns the bitwise OR of this Long and the specified.
 * @this {!Long}
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */

function or($this, other) {
  if (!isLong(other)) other = fromValue(other);
  return fromBits($this.low | other.low, $this.high | other.high, $this.unsigned);
}

;
/**
 * Returns the bitwise XOR of this Long and the given one.
 * @this {!Long}
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */

function xor($this, other) {
  if (!isLong(other)) other = fromValue(other);
  return fromBits($this.low ^ other.low, $this.high ^ other.high, $this.unsigned);
}

;
/**
 * Returns this Long with bits shifted to the left by the given amount.
 * @this {!Long}
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */

function shiftLeft($this, numBits) {
  if (isLong(numBits)) numBits = toInt(numBits);
  if ((numBits &= 63) === 0) return $this;else if (numBits < 32) return fromBits($this.low << numBits, $this.high << numBits | $this.low >>> 32 - numBits, $this.unsigned);else return fromBits(0, $this.low << numBits - 32, $this.unsigned);
}

;
/**
 * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
// LongPrototype.shl = LongPrototype.shiftLeft;

/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount.
 * @this {!Long}
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */

function shiftRight($this, numBits) {
  if (isLong(numBits)) numBits = toInt(numBits);
  if ((numBits &= 63) === 0) return $this;else if (numBits < 32) return fromBits($this.low >>> numBits | $this.high << 32 - numBits, $this.high >> numBits, $this.unsigned);else return fromBits($this.high >> numBits - 32, $this.high >= 0 ? 0 : -1, $this.unsigned);
}

;
/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
// LongPrototype.shr = LongPrototype.shiftRight;

/**
 * Returns this Long with bits logically shifted to the right by the given amount.
 * @this {!Long}
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */

function shiftRightUnsigned($this, numBits) {
  if (isLong(numBits)) numBits = toInt(numBits);
  numBits &= 63;
  if (numBits === 0) return $this;else {
    var high = $this.high;

    if (numBits < 32) {
      var low = $this.low;
      return fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits, $this.unsigned);
    } else if (numBits === 32) return fromBits(high, 0, $this.unsigned);else return fromBits(high >>> numBits - 32, 0, $this.unsigned);
  }
}

;
/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
// LongPrototype.shru = LongPrototype.shiftRightUnsigned;

/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
// LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;

/**
 * Returns this Long with bits rotated to the left by the given amount.
 * @this {!Long}
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Rotated Long
 */

var rotateLeft = function rotateLeft(numBits) {
  var b;
  if (isLong(numBits)) numBits = numBits.toInt();
  if ((numBits &= 63) === 0) return this;
  if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);

  if (numBits < 32) {
    b = 32 - numBits;
    return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);
  }

  numBits -= 32;
  b = 32 - numBits;
  return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);
};
/**
 * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Rotated Long
 */
// LongPrototype.rotl = LongPrototype.rotateLeft;

/**
 * Returns this Long with bits rotated to the right by the given amount.
 * @this {!Long}
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Rotated Long
 */


exports.rotateLeft = rotateLeft;

var rotateRight = function rotateRight(numBits) {
  var b;
  if (isLong(numBits)) numBits = numBits.toInt();
  if ((numBits &= 63) === 0) return this;
  if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);

  if (numBits < 32) {
    b = 32 - numBits;
    return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);
  }

  numBits -= 32;
  b = 32 - numBits;
  return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);
};
/**
 * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Rotated Long
 */
// LongPrototype.rotr = LongPrototype.rotateRight;

/**
 * Converts this Long to signed.
 * @this {!Long}
 * @returns {!Long} Signed long
 */


exports.rotateRight = rotateRight;

function toSigned($this) {
  if (!$this.unsigned) return $this;
  return fromBits($this.low, $this.high, false);
}

;
/**
 * Converts this Long to unsigned.
 * @this {!Long}
 * @returns {!Long} Unsigned long
 */

function toUnsigned($this) {
  if ($this.unsigned) return $this;
  return fromBits($this.low, $this.high, true);
}

;
/**
 * Converts this Long to its byte representation.
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @this {!Long}
 * @returns {!Array.<number>} Byte representation
 */

function toBytes($this, le) {
  return le ? toBytesLE($this) : toBytesBE($this);
}

;
/**
 * Converts this Long to its little endian byte representation.
 * @this {!Long}
 * @returns {!Array.<number>} Little endian byte representation
 */

function toBytesLE($this) {
  var hi = $this.high,
      lo = $this.low;
  return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];
}

;
/**
 * Converts this Long to its big endian byte representation.
 * @this {!Long}
 * @returns {!Array.<number>} Big endian byte representation
 */

function toBytesBE($this) {
  var hi = $this.high,
      lo = $this.low;
  return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];
}

;
/**
 * Creates a Long from its byte representation.
 * @param {!Array.<number>} bytes Byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {Long} The corresponding Long value
 */

function fromBytes(bytes, unsigned, le) {
  return le ? fromBytesLE(bytes, unsigned) : fromBytesBE(bytes, unsigned);
}

;
/**
 * Creates a Long from its little endian byte representation.
 * @param {!Array.<number>} bytes Little endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */

function fromBytesLE(bytes, unsigned) {
  return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);
}

;
/**
 * Creates a Long from its big endian byte representation.
 * @param {!Array.<number>} bytes Big endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */

function fromBytesBE(bytes, unsigned) {
  return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);
}

;
},{}],"../src/.fable/fable-library.3.0.0/Long.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.abs = abs;
exports.fromInteger = fromInteger;
exports.parse = parse;
exports.tryParse = tryParse;
exports.unixEpochMillisecondsToTicks = unixEpochMillisecondsToTicks;
exports.ticksToUnixEpochMilliseconds = ticksToUnixEpochMilliseconds;
exports.makeRangeStepFunction = makeRangeStepFunction;
exports.getHighBitsUnsigned = exports.getLowBitsUnsigned = exports.getHighBits = exports.getLowBits = exports.toString = exports.toNumber = exports.toBytes = exports.toInt = exports.fromValue = exports.fromString = exports.fromNumber = exports.fromBytes = exports.fromBits = exports.fromInt = exports.compare = exports.equals = exports.op_Inequality = exports.op_Equality = exports.op_GreaterThanOrEqual = exports.op_GreaterThan = exports.op_LessThanOrEqual = exports.op_LessThan = exports.op_LogicalNot = exports.op_ExclusiveOr = exports.op_BitwiseOr = exports.op_BitwiseAnd = exports.op_RightShiftUnsigned = exports.op_RightShift = exports.op_LeftShift = exports.op_UnaryNegation = exports.op_Modulus = exports.op_Division = exports.op_Multiply = exports.op_Subtraction = exports.op_Addition = exports.get_One = exports.get_Zero = exports.default = void 0;

var _Int = require("./Int32.js");

var LongLib = _interopRequireWildcard(require("./lib/long.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var _default = LongLib.Long;
exports.default = _default;
var get_Zero = LongLib.ZERO;
exports.get_Zero = get_Zero;
var get_One = LongLib.ONE;
exports.get_One = get_One;
var op_Addition = LongLib.add;
exports.op_Addition = op_Addition;
var op_Subtraction = LongLib.subtract;
exports.op_Subtraction = op_Subtraction;
var op_Multiply = LongLib.multiply;
exports.op_Multiply = op_Multiply;
var op_Division = LongLib.divide;
exports.op_Division = op_Division;
var op_Modulus = LongLib.modulo;
exports.op_Modulus = op_Modulus;
var op_UnaryNegation = LongLib.negate;
exports.op_UnaryNegation = op_UnaryNegation;
var op_LeftShift = LongLib.shiftLeft;
exports.op_LeftShift = op_LeftShift;
var op_RightShift = LongLib.shiftRight;
exports.op_RightShift = op_RightShift;
var op_RightShiftUnsigned = LongLib.shiftRightUnsigned;
exports.op_RightShiftUnsigned = op_RightShiftUnsigned;
var op_BitwiseAnd = LongLib.and;
exports.op_BitwiseAnd = op_BitwiseAnd;
var op_BitwiseOr = LongLib.or;
exports.op_BitwiseOr = op_BitwiseOr;
var op_ExclusiveOr = LongLib.xor;
exports.op_ExclusiveOr = op_ExclusiveOr;
var op_LogicalNot = LongLib.not;
exports.op_LogicalNot = op_LogicalNot;
var op_LessThan = LongLib.lessThan;
exports.op_LessThan = op_LessThan;
var op_LessThanOrEqual = LongLib.lessThanOrEqual;
exports.op_LessThanOrEqual = op_LessThanOrEqual;
var op_GreaterThan = LongLib.greaterThan;
exports.op_GreaterThan = op_GreaterThan;
var op_GreaterThanOrEqual = LongLib.greaterThanOrEqual;
exports.op_GreaterThanOrEqual = op_GreaterThanOrEqual;
var op_Equality = LongLib.equals;
exports.op_Equality = op_Equality;
var op_Inequality = LongLib.notEquals;
exports.op_Inequality = op_Inequality;
var equals = LongLib.equals;
exports.equals = equals;
var compare = LongLib.compare;
exports.compare = compare;
var fromInt = LongLib.fromInt;
exports.fromInt = fromInt;
var fromBits = LongLib.fromBits;
exports.fromBits = fromBits;
var fromBytes = LongLib.fromBytes;
exports.fromBytes = fromBytes;
var fromNumber = LongLib.fromNumber;
exports.fromNumber = fromNumber;
var fromString = LongLib.fromString;
exports.fromString = fromString;
var fromValue = LongLib.fromValue;
exports.fromValue = fromValue;
var toInt = LongLib.toInt;
exports.toInt = toInt;
var toBytes = LongLib.toBytes;
exports.toBytes = toBytes;
var toNumber = LongLib.toNumber;
exports.toNumber = toNumber;
var toString = LongLib.toString;
exports.toString = toString;
var getLowBits = LongLib.getLowBits;
exports.getLowBits = getLowBits;
var getHighBits = LongLib.getHighBits;
exports.getHighBits = getHighBits;
var getLowBitsUnsigned = LongLib.getLowBitsUnsigned;
exports.getLowBitsUnsigned = getLowBitsUnsigned;
var getHighBitsUnsigned = LongLib.getHighBitsUnsigned;
exports.getHighBitsUnsigned = getHighBitsUnsigned;

function getMaxValue(unsigned, radix, isNegative) {
  switch (radix) {
    case 2:
      return unsigned ? "1111111111111111111111111111111111111111111111111111111111111111" : isNegative ? "1000000000000000000000000000000000000000000000000000000000000000" : "111111111111111111111111111111111111111111111111111111111111111";

    case 8:
      return unsigned ? "1777777777777777777777" : isNegative ? "1000000000000000000000" : "777777777777777777777";

    case 10:
      return unsigned ? "18446744073709551615" : isNegative ? "9223372036854775808" : "9223372036854775807";

    case 16:
      return unsigned ? "FFFFFFFFFFFFFFFF" : isNegative ? "8000000000000000" : "7FFFFFFFFFFFFFFF";

    default:
      throw new Error("Invalid radix.");
  }
}

function abs(x) {
  if (!x.unsigned && LongLib.isNegative(x)) {
    return op_UnaryNegation(x);
  } else {
    return x;
  }
}

function fromInteger(value, unsigned, kind) {
  var x = value;
  var xh = 0;

  switch (kind) {
    case 0:
      x = value << 24 >> 24;
      xh = x;
      break;

    case 4:
      x = value << 24 >>> 24;
      break;

    case 1:
      x = value << 16 >> 16;
      xh = x;
      break;

    case 5:
      x = value << 16 >>> 16;
      break;

    case 2:
      x = value >> 0;
      xh = x;
      break;

    case 6:
      x = value >>> 0;
      break;
  }

  return LongLib.fromBits(x, xh >> 31, unsigned);
}

function parse(str, style, unsigned, _bitsize, radix) {
  var res = (0, _Int.isValid)(str, style, radix);

  if (res != null) {
    var lessOrEqual = function lessOrEqual(x, y) {
      var len = Math.max(x.length, y.length);
      return x.padStart(len, "0") <= y.padStart(len, "0");
    };

    var isNegative = res.sign === "-";
    var maxValue = getMaxValue(unsigned || res.radix !== 10, res.radix, isNegative);

    if (lessOrEqual(res.digits.toUpperCase(), maxValue)) {
      str = isNegative ? res.sign + res.digits : res.digits;
      return LongLib.fromString(str, unsigned, res.radix);
    }
  }

  throw new Error("Input string was not in a correct format.");
}

function tryParse(str, style, unsigned, bitsize, defValue) {
  try {
    defValue.contents = parse(str, style, unsigned, bitsize);
    return true;
  } catch (_a) {
    return false;
  }
}

function unixEpochMillisecondsToTicks(ms, offset) {
  return op_Multiply(op_Addition(op_Addition(LongLib.fromNumber(ms), 62135596800000), offset), 10000);
}

function ticksToUnixEpochMilliseconds(ticks) {
  return LongLib.toNumber(op_Subtraction(op_Division(ticks, 10000), 62135596800000));
}

function makeRangeStepFunction(step, last, unsigned) {
  var stepComparedWithZero = LongLib.compare(step, unsigned ? LongLib.UZERO : LongLib.ZERO);

  if (stepComparedWithZero === 0) {
    throw new Error("The step of a range cannot be zero");
  }

  var stepGreaterThanZero = stepComparedWithZero > 0;
  return function (x) {
    var comparedWithLast = LongLib.compare(x, last);

    if (stepGreaterThanZero && comparedWithLast <= 0 || !stepGreaterThanZero && comparedWithLast >= 0) {
      return [x, op_Addition(x, step)];
    } else {
      return undefined;
    }
  };
}
},{"./Int32.js":"../src/.fable/fable-library.3.0.0/Int32.js","./lib/long.js":"../src/.fable/fable-library.3.0.0/lib/long.js"}],"../src/.fable/fable-library.3.0.0/Seq.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getEnumerator = getEnumerator;
exports.toIterator = toIterator;
exports.ofArray = ofArray;
exports.allPairs = allPairs;
exports.append = append;
exports.average = average;
exports.averageBy = averageBy;
exports.concat = concat;
exports.collect = collect;
exports.choose = choose;
exports.compareWith = compareWith;
exports.delay = delay;
exports.empty = empty;
exports.singleton = singleton;
exports.enumerateFromFunctions = enumerateFromFunctions;
exports.enumerateWhile = enumerateWhile;
exports.enumerateThenFinally = enumerateThenFinally;
exports.enumerateUsing = enumerateUsing;
exports.exactlyOne = exactlyOne;
exports.except = except;
exports.exists = exists;
exports.exists2 = exists2;
exports.forAll = forAll;
exports.forAll2 = forAll2;
exports.contains = contains;
exports.filter = filter;
exports.where = where;
exports.fold = fold;
exports.foldBack = foldBack;
exports.fold2 = fold2;
exports.foldBack2 = foldBack2;
exports.tryHead = tryHead;
exports.head = head;
exports.initialize = initialize;
exports.initializeInfinite = initializeInfinite;
exports.tryItem = tryItem;
exports.item = item;
exports.iterate = iterate;
exports.iterate2 = iterate2;
exports.iterateIndexed = iterateIndexed;
exports.iterateIndexed2 = iterateIndexed2;
exports.isEmpty = isEmpty;
exports.tryLast = tryLast;
exports.last = last;
exports.length = length;
exports.map = map;
exports.mapIndexed = mapIndexed;
exports.indexed = indexed;
exports.map2 = map2;
exports.mapIndexed2 = mapIndexed2;
exports.map3 = map3;
exports.mapFold = mapFold;
exports.mapFoldBack = mapFoldBack;
exports.max = max;
exports.maxBy = maxBy;
exports.min = min;
exports.minBy = minBy;
exports.pairwise = pairwise;
exports.rangeChar = rangeChar;
exports.rangeLong = rangeLong;
exports.rangeDecimal = rangeDecimal;
exports.rangeNumber = rangeNumber;
exports.readOnly = readOnly;
exports.reduce = reduce;
exports.reduceBack = reduceBack;
exports.replicate = replicate;
exports.reverse = reverse;
exports.scan = scan;
exports.scanBack = scanBack;
exports.skip = skip;
exports.skipWhile = skipWhile;
exports.sortWith = sortWith;
exports.sum = sum;
exports.sumBy = sumBy;
exports.tail = tail;
exports.take = take;
exports.truncate = truncate;
exports.takeWhile = takeWhile;
exports.tryFind = tryFind;
exports.find = find;
exports.tryFindBack = tryFindBack;
exports.findBack = findBack;
exports.tryFindIndex = tryFindIndex;
exports.findIndex = findIndex;
exports.tryFindIndexBack = tryFindIndexBack;
exports.findIndexBack = findIndexBack;
exports.tryPick = tryPick;
exports.pick = pick;
exports.unfold = unfold;
exports.zip = zip;
exports.zip3 = zip3;
exports.windowed = windowed;
exports.transpose = transpose;
exports.Enumerator = void 0;

var _Decimal = require("./Decimal.js");

var _Long = require("./Long.js");

var _Option = require("./Option.js");

var _Util = require("./Util.js");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Enumerator = /*#__PURE__*/function () {
  function Enumerator(iter) {
    _classCallCheck(this, Enumerator);

    this.iter = iter;
  }

  _createClass(Enumerator, [{
    key: "System.Collections.Generic.IEnumerator`1.get_Current",
    value: function SystemCollectionsGenericIEnumerator1Get_Current() {
      return this.current;
    }
  }, {
    key: "System.Collections.IEnumerator.get_Current",
    value: function SystemCollectionsIEnumeratorGet_Current() {
      return this.current;
    }
  }, {
    key: "System.Collections.IEnumerator.MoveNext",
    value: function SystemCollectionsIEnumeratorMoveNext() {
      var cur = this.iter.next();
      this.current = cur.value;
      return !cur.done;
    }
  }, {
    key: "System.Collections.IEnumerator.Reset",
    value: function SystemCollectionsIEnumeratorReset() {
      throw new Error("JS iterators cannot be reset");
    }
  }, {
    key: "Dispose",
    value: function Dispose() {
      return;
    }
  }]);

  return Enumerator;
}();

exports.Enumerator = Enumerator;

function getEnumerator(o) {
  return typeof o.GetEnumerator === "function" ? o.GetEnumerator() : new Enumerator(o[Symbol.iterator]());
}

function toIterator(en) {
  var _ref;

  return _ref = {}, _defineProperty(_ref, Symbol.iterator, function () {
    return this;
  }), _defineProperty(_ref, "next", function next() {
    var hasNext = en["System.Collections.IEnumerator.MoveNext"]();
    var current = hasNext ? en["System.Collections.IEnumerator.get_Current"]() : undefined;
    return {
      done: !hasNext,
      value: current
    };
  }), _ref;
} // export function toIterable<T>(en: IEnumerable<T>): Iterable<T> {
//   return {
//     [Symbol.iterator]() {
//       return toIterator(en.GetEnumerator());
//     },
//   };
// }


function __failIfNone(res) {
  if (res == null) {
    throw new Error("Seq did not contain any matching element");
  }

  return (0, _Option.value)(res);
}

var Seq = /*#__PURE__*/function () {
  function Seq(f) {
    _classCallCheck(this, Seq);

    this.f = f;
  }

  _createClass(Seq, [{
    key: Symbol.iterator,
    value: function value() {
      return new Seq(this.f);
    }
  }, {
    key: "next",
    value: function next() {
      var _a;

      this.iter = (_a = this.iter) !== null && _a !== void 0 ? _a : this.f();
      return this.iter.next();
    }
  }, {
    key: "toString",
    value: function toString() {
      return "seq [" + Array.from(this).join("; ") + "]";
    }
  }]);

  return Seq;
}();

function makeSeq(f) {
  return new Seq(f);
}

function isArrayOrBufferView(xs) {
  return Array.isArray(xs) || ArrayBuffer.isView(xs);
}

function ofArray(xs) {
  if (Array.isArray(xs)) {
    return delay(function () {
      return xs;
    });
  } else {
    return delay(function () {
      return unfold(function (i) {
        return i != null && i < xs.length ? [xs[i], i + 1] : undefined;
      }, 0);
    });
  }
}

function allPairs(xs, ys) {
  var firstEl = true;
  var ysCache = [];
  return collect(function (x) {
    if (firstEl) {
      firstEl = false;
      return map(function (y) {
        ysCache.push(y);
        return [x, y];
      }, ys);
    } else {
      return ysCache.map(function (y) {
        return [x, y];
      }); // return map(function (i) {
      //     return [x, ysCache[i]];
      // }, rangeNumber(0, 1, ysCache.length - 1));
    }
  }, xs);
}

function append(xs, ys) {
  return delay(function () {
    var firstDone = false;
    var i = xs[Symbol.iterator]();
    var iters = [i, undefined];
    return unfold(function () {
      var _a, _b;

      var cur;

      if (!firstDone) {
        cur = (_a = iters[0]) === null || _a === void 0 ? void 0 : _a.next();

        if (cur != null && !cur.done) {
          return [cur.value, iters];
        } else {
          firstDone = true;
          iters = [undefined, ys[Symbol.iterator]()];
        }
      }

      cur = (_b = iters[1]) === null || _b === void 0 ? void 0 : _b.next();
      return cur != null && !cur.done ? [cur.value, iters] : undefined;
    }, iters);
  });
}

function average(xs, averager) {
  var count = 0;
  var total = fold(function (acc, x) {
    count++;
    return averager.Add(acc, x);
  }, averager.GetZero(), xs);
  return averager.DivideByInt(total, count);
}

function averageBy(f, xs, averager) {
  var count = 0;
  var total = fold(function (acc, x) {
    count++;
    return averager.Add(acc, f(x));
  }, averager.GetZero(), xs);
  return averager.DivideByInt(total, count);
}

function concat(xs) {
  return delay(function () {
    var iter = xs[Symbol.iterator]();
    var output;
    return unfold(function (innerIter) {
      var hasFinished = false;

      while (!hasFinished) {
        if (innerIter == null) {
          var cur = iter.next();

          if (!cur.done) {
            innerIter = cur.value[Symbol.iterator]();
          } else {
            hasFinished = true;
          }
        } else {
          var _cur = innerIter.next();

          if (!_cur.done) {
            output = _cur.value;
            hasFinished = true;
          } else {
            innerIter = undefined;
          }
        }
      }

      return innerIter != null ? [output, innerIter] : undefined;
    }, undefined);
  });
}

function collect(f, xs) {
  return concat(map(f, xs));
}

function choose(f, xs) {
  return delay(function () {
    return unfold(function (iter) {
      var cur = iter.next();

      while (!cur.done) {
        var y = f(cur.value);

        if (y != null) {
          return [(0, _Option.value)(y), iter];
        }

        cur = iter.next();
      }

      return undefined;
    }, xs[Symbol.iterator]());
  });
}

function compareWith(f, xs, ys) {
  if (xs === ys) {
    return 0;
  }

  var cur1;
  var cur2;
  var c = 0;

  for (var iter1 = xs[Symbol.iterator](), iter2 = ys[Symbol.iterator]();;) {
    cur1 = iter1.next();
    cur2 = iter2.next();

    if (cur1.done || cur2.done) {
      break;
    }

    c = f(cur1.value, cur2.value);

    if (c !== 0) {
      break;
    }
  }

  return c !== 0 ? c : cur1.done && !cur2.done ? -1 : !cur1.done && cur2.done ? 1 : 0;
}

function delay(f) {
  return makeSeq(function () {
    return f()[Symbol.iterator]();
  });
}

function empty() {
  return delay(function () {
    return [];
  });
}

function singleton(y) {
  return delay(function () {
    return [y];
  });
}

function enumerateFromFunctions(factory, moveNext, current) {
  return delay(function () {
    return unfold(function (e) {
      return moveNext(e) ? [current(e), e] : undefined;
    }, factory());
  });
}

function enumerateWhile(cond, xs) {
  return concat(unfold(function () {
    return cond() ? [xs, true] : undefined;
  }, undefined));
}

function enumerateThenFinally(xs, finalFn) {
  return delay(function () {
    var iter;

    try {
      iter = xs[Symbol.iterator]();
    } catch (err) {
      try {
        return empty();
      } finally {
        finalFn();
      }
    }

    return unfold(function (it) {
      try {
        var cur = it.next();
        return !cur.done ? [cur.value, it] : undefined;
      } catch (err) {
        return undefined;
      } finally {
        finalFn();
      }
    }, iter);
  });
}

function enumerateUsing(disp, work) {
  var isDisposed = false;

  var disposeOnce = function disposeOnce() {
    if (!isDisposed) {
      isDisposed = true;
      disp.Dispose();
    }
  };

  try {
    return enumerateThenFinally(work(disp), disposeOnce);
  } catch (err) {
    return void 0;
  } finally {
    disposeOnce();
  }
}

function exactlyOne(xs) {
  var iter = xs[Symbol.iterator]();
  var fst = iter.next();

  if (fst.done) {
    throw new Error("Seq was empty");
  }

  var snd = iter.next();

  if (!snd.done) {
    throw new Error("Seq had multiple items");
  }

  return fst.value;
}

function except(itemsToExclude, source) {
  var exclusionItems = Array.from(itemsToExclude);

  var testIsNotInExclusionItems = function testIsNotInExclusionItems(element) {
    return !exclusionItems.some(function (excludedItem) {
      return (0, _Util.equals)(excludedItem, element);
    });
  };

  return filter(testIsNotInExclusionItems, source);
}

function exists(f, xs) {
  var cur;

  for (var iter = xs[Symbol.iterator]();;) {
    cur = iter.next();

    if (cur.done) {
      break;
    }

    if (f(cur.value)) {
      return true;
    }
  }

  return false;
}

function exists2(f, xs, ys) {
  var cur1;
  var cur2;

  for (var iter1 = xs[Symbol.iterator](), iter2 = ys[Symbol.iterator]();;) {
    cur1 = iter1.next();
    cur2 = iter2.next();

    if (cur1.done || cur2.done) {
      break;
    }

    if (f(cur1.value, cur2.value)) {
      return true;
    }
  }

  return false;
}

function forAll(f, xs) {
  return !exists(function (x) {
    return !f(x);
  }, xs);
}

function forAll2(f, xs, ys) {
  return !exists2(function (x, y) {
    return !f(x, y);
  }, xs, ys);
}

function contains(i, xs) {
  return exists(function (x) {
    return (0, _Util.equals)(x, i);
  }, xs);
}

function filter(f, xs) {
  return delay(function () {
    return unfold(function (iter) {
      var cur = iter.next();

      while (!cur.done) {
        if (f(cur.value)) {
          return [cur.value, iter];
        }

        cur = iter.next();
      }

      return undefined;
    }, xs[Symbol.iterator]());
  });
}

function where(f, xs) {
  return filter(f, xs);
}

function fold(f, acc, xs) {
  if (isArrayOrBufferView(xs)) {
    return xs.reduce(f, acc);
  } else {
    var cur;

    for (var i = 0, iter = xs[Symbol.iterator]();; i++) {
      cur = iter.next();

      if (cur.done) {
        break;
      }

      acc = f(acc, cur.value, i);
    }

    return acc;
  }
}

function foldBack(f, xs, acc) {
  var arr = isArrayOrBufferView(xs) ? xs : Array.from(xs);

  for (var i = arr.length - 1; i >= 0; i--) {
    acc = f(arr[i], acc, i);
  }

  return acc;
}

function fold2(f, acc, xs, ys) {
  var iter1 = xs[Symbol.iterator]();
  var iter2 = ys[Symbol.iterator]();
  var cur1;
  var cur2;

  for (var i = 0;; i++) {
    cur1 = iter1.next();
    cur2 = iter2.next();

    if (cur1.done || cur2.done) {
      break;
    }

    acc = f(acc, cur1.value, cur2.value, i);
  }

  return acc;
}

function foldBack2(f, xs, ys, acc) {
  var ar1 = isArrayOrBufferView(xs) ? xs : Array.from(xs);
  var ar2 = isArrayOrBufferView(ys) ? ys : Array.from(ys);

  for (var i = ar1.length - 1; i >= 0; i--) {
    acc = f(ar1[i], ar2[i], acc, i);
  }

  return acc;
}

function tryHead(xs) {
  var iter = xs[Symbol.iterator]();
  var cur = iter.next();
  return cur.done ? undefined : (0, _Option.some)(cur.value);
}

function head(xs) {
  return __failIfNone(tryHead(xs));
}

function initialize(n, f) {
  return delay(function () {
    return unfold(function (i) {
      return i < n ? [f(i), i + 1] : undefined;
    }, 0);
  });
}

function initializeInfinite(f) {
  return delay(function () {
    return unfold(function (i) {
      return [f(i), i + 1];
    }, 0);
  });
}

function tryItem(i, xs) {
  if (i < 0) {
    return undefined;
  }

  if (isArrayOrBufferView(xs)) {
    return i < xs.length ? (0, _Option.some)(xs[i]) : undefined;
  }

  for (var j = 0, iter = xs[Symbol.iterator]();; j++) {
    var cur = iter.next();

    if (cur.done) {
      break;
    }

    if (j === i) {
      return (0, _Option.some)(cur.value);
    }
  }

  return undefined;
}

function item(i, xs) {
  return __failIfNone(tryItem(i, xs));
}

function iterate(f, xs) {
  fold(function (_, x) {
    return f(x), undefined;
  }, undefined, xs);
}

function iterate2(f, xs, ys) {
  fold2(function (_, x, y) {
    return f(x, y), undefined;
  }, undefined, xs, ys);
}

function iterateIndexed(f, xs) {
  fold(function (_, x, i) {
    return f(i !== null && i !== void 0 ? i : 0, x), undefined;
  }, undefined, xs);
}

function iterateIndexed2(f, xs, ys) {
  fold2(function (_, x, y, i) {
    return f(i !== null && i !== void 0 ? i : 0, x, y), undefined;
  }, undefined, xs, ys);
}

function isEmpty(xs) {
  var i = xs[Symbol.iterator]();
  return i.next().done;
}

function tryLast(xs) {
  return isEmpty(xs) ? undefined : (0, _Option.some)(reduce(function (_, x) {
    return x;
  }, xs));
}

function last(xs) {
  return __failIfNone(tryLast(xs));
}

function length(xs) {
  return isArrayOrBufferView(xs) ? xs.length : fold(function (acc, _x) {
    return acc + 1;
  }, 0, xs);
}

function map(f, xs) {
  return delay(function () {
    return unfold(function (iter) {
      var cur = iter.next();
      return !cur.done ? [f(cur.value), iter] : undefined;
    }, xs[Symbol.iterator]());
  });
}

function mapIndexed(f, xs) {
  return delay(function () {
    var i = 0;
    return unfold(function (iter) {
      var cur = iter.next();
      return !cur.done ? [f(i++, cur.value), iter] : undefined;
    }, xs[Symbol.iterator]());
  });
}

function indexed(xs) {
  return mapIndexed(function (i, x) {
    return [i, x];
  }, xs);
}

function map2(f, xs, ys) {
  return delay(function () {
    var iter1 = xs[Symbol.iterator]();
    var iter2 = ys[Symbol.iterator]();
    return unfold(function () {
      var cur1 = iter1.next();
      var cur2 = iter2.next();
      return !cur1.done && !cur2.done ? [f(cur1.value, cur2.value), undefined] : undefined;
    }, undefined);
  });
}

function mapIndexed2(f, xs, ys) {
  return delay(function () {
    var i = 0;
    var iter1 = xs[Symbol.iterator]();
    var iter2 = ys[Symbol.iterator]();
    return unfold(function () {
      var cur1 = iter1.next();
      var cur2 = iter2.next();
      return !cur1.done && !cur2.done ? [f(i++, cur1.value, cur2.value), undefined] : undefined;
    }, undefined);
  });
}

function map3(f, xs, ys, zs) {
  return delay(function () {
    var iter1 = xs[Symbol.iterator]();
    var iter2 = ys[Symbol.iterator]();
    var iter3 = zs[Symbol.iterator]();
    return unfold(function () {
      var cur1 = iter1.next();
      var cur2 = iter2.next();
      var cur3 = iter3.next();
      return !cur1.done && !cur2.done && !cur3.done ? [f(cur1.value, cur2.value, cur3.value), undefined] : undefined;
    }, undefined);
  });
}

function mapFold(f, acc, xs, transform) {
  var result = [];
  var r;
  var cur;

  for (var i = 0, iter = xs[Symbol.iterator]();; i++) {
    cur = iter.next();

    if (cur.done) {
      break;
    }

    var _f = f(acc, cur.value);

    var _f2 = _slicedToArray(_f, 2);

    r = _f2[0];
    acc = _f2[1];
    result.push(r);
  }

  return transform !== void 0 ? [transform(result), acc] : [result, acc];
}

function mapFoldBack(f, xs, acc, transform) {
  var arr = isArrayOrBufferView(xs) ? xs : Array.from(xs);
  var result = [];
  var r;

  for (var i = arr.length - 1; i >= 0; i--) {
    var _f3 = f(arr[i], acc);

    var _f4 = _slicedToArray(_f3, 2);

    r = _f4[0];
    acc = _f4[1];
    result.push(r);
  }

  return transform !== void 0 ? [transform(result), acc] : [result, acc];
}

function max(xs, comparer) {
  var compareFn = comparer != null ? comparer.Compare : _Util.compare;
  return reduce(function (acc, x) {
    return compareFn(acc, x) === 1 ? acc : x;
  }, xs);
}

function maxBy(f, xs, comparer) {
  var compareFn = comparer != null ? comparer.Compare : _Util.compare;
  return reduce(function (acc, x) {
    return compareFn(f(acc), f(x)) === 1 ? acc : x;
  }, xs);
}

function min(xs, comparer) {
  var compareFn = comparer != null ? comparer.Compare : _Util.compare;
  return reduce(function (acc, x) {
    return compareFn(acc, x) === -1 ? acc : x;
  }, xs);
}

function minBy(f, xs, comparer) {
  var compareFn = comparer != null ? comparer.Compare : _Util.compare;
  return reduce(function (acc, x) {
    return compareFn(f(acc), f(x)) === -1 ? acc : x;
  }, xs);
}

function pairwise(xs) {
  return delay(function () {
    var iter = xs[Symbol.iterator]();
    var cur = iter.next();

    if (cur.done) {
      return empty();
    }

    var hd = cur.value;
    var tl = tail(xs);
    var ys = scan(function (_ref2, next) {
      var _ref3 = _slicedToArray(_ref2, 2),
          _ = _ref3[0],
          last = _ref3[1];

      return [last, next];
    }, [hd, hd], tl);
    return skip(1, ys);
  });
}

function rangeChar(first, last) {
  return delay(function () {
    return unfold(function (x) {
      return x <= last ? [x, String.fromCharCode(x.charCodeAt(0) + 1)] : undefined;
    }, first);
  });
}

function rangeLong(first, step, last, unsigned) {
  var stepFn = (0, _Long.makeRangeStepFunction)(step, last, unsigned);
  return delay(function () {
    return unfold(stepFn, first);
  });
}

function rangeDecimal(first, step, last) {
  var stepFn = (0, _Decimal.makeRangeStepFunction)(step, last);
  return delay(function () {
    return unfold(stepFn, first);
  });
}

function rangeNumber(first, step, last) {
  if (step === 0) {
    throw new Error("Step cannot be 0");
  }

  return delay(function () {
    return unfold(function (x) {
      return step > 0 && x <= last || step < 0 && x >= last ? [x, x + step] : undefined;
    }, first);
  });
}

function readOnly(xs) {
  return map(function (x) {
    return x;
  }, xs);
}

function reduce(f, xs) {
  if (isArrayOrBufferView(xs)) {
    return xs.reduce(f);
  }

  var iter = xs[Symbol.iterator]();
  var cur = iter.next();

  if (cur.done) {
    throw new Error("Seq was empty");
  }

  var acc = cur.value;

  while (true) {
    cur = iter.next();

    if (cur.done) {
      break;
    }

    acc = f(acc, cur.value);
  }

  return acc;
}

function reduceBack(f, xs) {
  var ar = isArrayOrBufferView(xs) ? xs : Array.from(xs);

  if (ar.length === 0) {
    throw new Error("Seq was empty");
  }

  var acc = ar[ar.length - 1];

  for (var i = ar.length - 2; i >= 0; i--) {
    acc = f(ar[i], acc, i);
  }

  return acc;
}

function replicate(n, x) {
  return initialize(n, function () {
    return x;
  });
}

function reverse(xs) {
  var ar = isArrayOrBufferView(xs) ? xs.slice(0) : Array.from(xs);
  return ofArray(ar.reverse());
}

function scan(f, seed, xs) {
  return delay(function () {
    var iter = xs[Symbol.iterator]();
    return unfold(function (acc) {
      if (acc == null) {
        return [seed, seed];
      }

      var cur = iter.next();

      if (!cur.done) {
        acc = f(acc, cur.value);
        return [acc, acc];
      }

      return undefined;
    }, undefined);
  });
}

function scanBack(f, xs, seed) {
  return reverse(scan(function (acc, x) {
    return f(x, acc);
  }, seed, reverse(xs)));
}

function skip(n, xs) {
  return makeSeq(function () {
    var iter = xs[Symbol.iterator]();

    for (var i = 1; i <= n; i++) {
      if (iter.next().done) {
        throw new Error("Seq has not enough elements");
      }
    }

    return iter;
  });
}

function skipWhile(f, xs) {
  return delay(function () {
    var hasPassed = false;
    return filter(function (x) {
      return hasPassed || (hasPassed = !f(x));
    }, xs);
  });
}

function sortWith(f, xs) {
  var ys = Array.from(xs);
  return ofArray(ys.sort(f));
}

function sum(xs, adder) {
  return fold(function (acc, x) {
    return adder.Add(acc, x);
  }, adder.GetZero(), xs);
}

function sumBy(f, xs, adder) {
  return fold(function (acc, x) {
    return adder.Add(acc, f(x));
  }, adder.GetZero(), xs);
}

function tail(xs) {
  return skip(1, xs);
}

function take(n, xs) {
  var truncate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  return delay(function () {
    var iter = xs[Symbol.iterator]();
    return unfold(function (i) {
      if (i < n) {
        var cur = iter.next();

        if (!cur.done) {
          return [cur.value, i + 1];
        }

        if (!truncate) {
          throw new Error("Seq has not enough elements");
        }
      }

      return undefined;
    }, 0);
  });
}

function truncate(n, xs) {
  return take(n, xs, true);
}

function takeWhile(f, xs) {
  return delay(function () {
    var iter = xs[Symbol.iterator]();
    return unfold(function () {
      var cur = iter.next();

      if (!cur.done && f(cur.value)) {
        return [cur.value, undefined];
      }

      return undefined;
    }, 0);
  });
}

function tryFind(f, xs, defaultValue) {
  for (var i = 0, iter = xs[Symbol.iterator]();; i++) {
    var cur = iter.next();

    if (cur.done) {
      break;
    }

    if (f(cur.value, i)) {
      return (0, _Option.some)(cur.value);
    }
  }

  return defaultValue === void 0 ? undefined : (0, _Option.some)(defaultValue);
}

function find(f, xs) {
  return __failIfNone(tryFind(f, xs));
}

function tryFindBack(f, xs, defaultValue) {
  var arr = isArrayOrBufferView(xs) ? xs.slice(0) : Array.from(xs);
  return tryFind(f, arr.reverse(), defaultValue);
}

function findBack(f, xs) {
  return __failIfNone(tryFindBack(f, xs));
}

function tryFindIndex(f, xs) {
  for (var i = 0, iter = xs[Symbol.iterator]();; i++) {
    var cur = iter.next();

    if (cur.done) {
      break;
    }

    if (f(cur.value, i)) {
      return i;
    }
  }

  return undefined;
}

function findIndex(f, xs) {
  return __failIfNone(tryFindIndex(f, xs));
}

function tryFindIndexBack(f, xs) {
  var arr = isArrayOrBufferView(xs) ? xs.slice(0) : Array.from(xs);

  for (var i = arr.length - 1; i >= 0; i--) {
    if (f(arr[i], i)) {
      return i;
    }
  }

  return undefined;
}

function findIndexBack(f, xs) {
  return __failIfNone(tryFindIndexBack(f, xs));
}

function tryPick(f, xs) {
  for (var i = 0, iter = xs[Symbol.iterator]();; i++) {
    var cur = iter.next();

    if (cur.done) {
      break;
    }

    var y = f(cur.value, i);

    if (y != null) {
      return y;
    }
  }

  return undefined;
}

function pick(f, xs) {
  return __failIfNone(tryPick(f, xs));
}

function unfold(f, fst) {
  return makeSeq(function () {
    // Capture a copy of the first value in the closure
    // so the sequence is restarted every time, see #1230
    var acc = fst;
    var iter = {
      next: function next() {
        var res = f(acc);

        if (res != null) {
          var v = (0, _Option.value)(res);

          if (v != null) {
            acc = v[1];
            return {
              done: false,
              value: v[0]
            };
          }
        }

        return {
          done: true,
          value: undefined
        };
      }
    };
    return iter;
  });
}

function zip(xs, ys) {
  return map2(function (x, y) {
    return [x, y];
  }, xs, ys);
}

function zip3(xs, ys, zs) {
  return map3(function (x, y, z) {
    return [x, y, z];
  }, xs, ys, zs);
}

function windowed(windowSize, source) {
  if (windowSize <= 0) {
    throw new Error("windowSize must be positive");
  }

  return makeSeq(function () {
    var window = [];
    var iter = source[Symbol.iterator]();
    var iter2 = {
      next: function next() {
        var cur;

        while (window.length < windowSize) {
          if ((cur = iter.next()).done) {
            return {
              done: true,
              value: undefined
            };
          }

          window.push(cur.value);
        }

        var value = window;
        window = window.slice(1);
        return {
          done: false,
          value: value
        };
      }
    };
    return iter2;
  });
}

function transpose(source) {
  return makeSeq(function () {
    var iters = Array.from(source, function (x) {
      return x[Symbol.iterator]();
    });
    var iter = {
      next: function next() {
        if (iters.length === 0) {
          return {
            done: true,
            value: undefined
          }; // empty sequence
        }

        var results = Array.from(iters, function (iter) {
          return iter.next();
        });

        if (results[0].done) {
          if (!results.every(function (x) {
            return x.done;
          })) {
            throw new Error("Sequences have different lengths");
          }

          return {
            done: true,
            value: undefined
          };
        } else {
          if (!results.every(function (x) {
            return !x.done;
          })) {
            throw new Error("Sequences have different lengths");
          }

          var values = results.map(function (x) {
            return x.value;
          });
          return {
            done: false,
            value: values
          };
        }
      }
    };
    return iter;
  });
}
},{"./Decimal.js":"../src/.fable/fable-library.3.0.0/Decimal.js","./Long.js":"../src/.fable/fable-library.3.0.0/Long.js","./Option.js":"../src/.fable/fable-library.3.0.0/Option.js","./Util.js":"../src/.fable/fable-library.3.0.0/Util.js"}],"../src/.fable/fable-library.3.0.0/MapUtil.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.keyValueList = keyValueList;
exports.containsValue = containsValue;
exports.tryGetValue = tryGetValue;
exports.addToSet = addToSet;
exports.addToDict = addToDict;
exports.getItemFromDict = getItemFromDict;

var _Util = require("./Util.js");

var _Types = require("./Types.js");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var CaseRules = {
  None: 0,
  LowerFirst: 1,
  SnakeCase: 2,
  SnakeCaseAllCaps: 3,
  KebabCase: 4
};

function dashify(str, separator) {
  return str.replace(/[a-z]?[A-Z]/g, function (m) {
    return m.length === 1 ? m.toLowerCase() : m.charAt(0) + separator + m.charAt(1).toLowerCase();
  });
}

function changeCase(str, caseRule) {
  switch (caseRule) {
    case CaseRules.LowerFirst:
      return str.charAt(0).toLowerCase() + str.slice(1);

    case CaseRules.SnakeCase:
      return dashify(str, "_");

    case CaseRules.SnakeCaseAllCaps:
      return dashify(str, "_").toUpperCase();

    case CaseRules.KebabCase:
      return dashify(str, "-");

    case CaseRules.None:
    default:
      return str;
  }
}

function keyValueList(fields) {
  var caseRule = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CaseRules.None;
  var obj = {};
  var definedCaseRule = caseRule;

  function fail(kvPair) {
    throw new Error("Cannot infer key and value of " + String(kvPair));
  }

  function assign(key, caseRule, value) {
    key = changeCase(key, caseRule);
    obj[key] = value;
  }

  var _iterator = _createForOfIteratorHelper(fields),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var kvPair = _step.value;
      var _caseRule = CaseRules.None;

      if (kvPair == null) {
        fail(kvPair);
      } // Deflate unions and use the defined case rule


      if (kvPair instanceof _Types.Union) {
        var name = kvPair.cases()[kvPair.tag];
        kvPair = kvPair.fields.length === 0 ? name : [name].concat(kvPair.fields);
        _caseRule = definedCaseRule;
      }

      if (Array.isArray(kvPair)) {
        switch (kvPair.length) {
          case 0:
            fail(kvPair);
            break;

          case 1:
            assign(kvPair[0], _caseRule, true);
            break;

          case 2:
            var value = kvPair[1];
            assign(kvPair[0], _caseRule, value);
            break;

          default:
            assign(kvPair[0], _caseRule, kvPair.slice(1));
        }
      } else if (typeof kvPair === "string") {
        assign(kvPair, _caseRule, true);
      } else {
        fail(kvPair);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return obj;
} // TODO: Move these methods to Map and Set modules


function containsValue(v, map) {
  var _iterator2 = _createForOfIteratorHelper(map),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var kv = _step2.value;

      if ((0, _Util.equals)(v, kv[1])) {
        return true;
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  return false;
}

function tryGetValue(map, key, defaultValue) {
  if (map.has(key)) {
    defaultValue.contents = map.get(key);
    return true;
  }

  return false;
}

function addToSet(v, set) {
  if (set.has(v)) {
    return false;
  }

  set.add(v);
  return true;
}

function addToDict(dict, k, v) {
  if (dict.has(k)) {
    throw new Error("An item with the same key has already been added. Key: " + k);
  }

  dict.set(k, v);
}

function getItemFromDict(map, key) {
  if (map.has(key)) {
    return map.get(key);
  } else {
    throw new Error("The given key '".concat(key, "' was not present in the dictionary."));
  }
}
},{"./Util.js":"../src/.fable/fable-library.3.0.0/Util.js","./Types.js":"../src/.fable/fable-library.3.0.0/Types.js"}],"../src/.fable/fable-library.3.0.0/Date.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dateOffsetToString = dateOffsetToString;
exports.dateToHalfUTCString = dateToHalfUTCString;
exports.toString = toString;
exports.DateTime = DateTime;
exports.fromTicks = fromTicks;
exports.fromDateTimeOffset = fromDateTimeOffset;
exports.getTicks = getTicks;
exports.minValue = minValue;
exports.maxValue = maxValue;
exports.parseRaw = parseRaw;
exports.parse = parse;
exports.tryParse = tryParse;
exports.create = create;
exports.now = now;
exports.utcNow = utcNow;
exports.today = today;
exports.isLeapYear = isLeapYear;
exports.daysInMonth = daysInMonth;
exports.toUniversalTime = toUniversalTime;
exports.toLocalTime = toLocalTime;
exports.specifyKind = specifyKind;
exports.timeOfDay = timeOfDay;
exports.date = date;
exports.day = day;
exports.hour = hour;
exports.millisecond = millisecond;
exports.minute = minute;
exports.month = month;
exports.second = second;
exports.year = year;
exports.dayOfWeek = dayOfWeek;
exports.dayOfYear = dayOfYear;
exports.add = add;
exports.addDays = addDays;
exports.addHours = addHours;
exports.addMinutes = addMinutes;
exports.addSeconds = addSeconds;
exports.addMilliseconds = addMilliseconds;
exports.addYears = addYears;
exports.addMonths = addMonths;
exports.subtract = subtract;
exports.toLongDateString = toLongDateString;
exports.toShortDateString = toShortDateString;
exports.toLongTimeString = toLongTimeString;
exports.toShortTimeString = toShortTimeString;
exports.equals = equals;
exports.op_Addition = op_Addition;
exports.op_Subtraction = op_Subtraction;
exports.isDaylightSavingTime = isDaylightSavingTime;
exports.default = exports.compareTo = exports.compare = exports.offsetRegex = void 0;

var _Long = require("./Long.js");

var _Util = require("./Util.js");

/**
 * DateTimeOffset functions.
 *
 * Note: Date instances are always DateObjects in local
 * timezone (because JS dates are all kinds of messed up).
 * A local date returns UTC epoc when `.getTime()` is called.
 *
 * Basically; invariant: date.getTime() always return UTC time.
 */
var offsetRegex = /(?:Z|[+-](\d+):?([0-5]?\d)?)\s*$/;
exports.offsetRegex = offsetRegex;

function dateOffsetToString(offset) {
  var isMinus = offset < 0;
  offset = Math.abs(offset);
  var hours = ~~(offset / 3600000);
  var minutes = offset % 3600000 / 60000;
  return (isMinus ? "-" : "+") + (0, _Util.padWithZeros)(hours, 2) + ":" + (0, _Util.padWithZeros)(minutes, 2);
}

function dateToHalfUTCString(date, half) {
  var str = date.toISOString();
  return half === "first" ? str.substring(0, str.indexOf("T")) : str.substring(str.indexOf("T") + 1, str.length - 1);
}

function dateToISOString(d, utc) {
  if (utc) {
    return d.toISOString();
  } else {
    // JS Date is always local
    var printOffset = d.kind == null ? true : d.kind === 2
    /* Local */
    ;
    return (0, _Util.padWithZeros)(d.getFullYear(), 4) + "-" + (0, _Util.padWithZeros)(d.getMonth() + 1, 2) + "-" + (0, _Util.padWithZeros)(d.getDate(), 2) + "T" + (0, _Util.padWithZeros)(d.getHours(), 2) + ":" + (0, _Util.padWithZeros)(d.getMinutes(), 2) + ":" + (0, _Util.padWithZeros)(d.getSeconds(), 2) + "." + (0, _Util.padWithZeros)(d.getMilliseconds(), 3) + (printOffset ? dateOffsetToString(d.getTimezoneOffset() * -60000) : "");
  }
}

function dateToISOStringWithOffset(dateWithOffset, offset) {
  var str = dateWithOffset.toISOString();
  return str.substring(0, str.length - 1) + dateOffsetToString(offset);
}

function dateToStringWithCustomFormat(date, format, utc) {
  return format.replace(/(\w)\1*/g, function (match) {
    var rep = Number.NaN;

    switch (match.substring(0, 1)) {
      case "y":
        var y = utc ? date.getUTCFullYear() : date.getFullYear();
        rep = match.length < 4 ? y % 100 : y;
        break;

      case "M":
        rep = (utc ? date.getUTCMonth() : date.getMonth()) + 1;
        break;

      case "d":
        rep = utc ? date.getUTCDate() : date.getDate();
        break;

      case "H":
        rep = utc ? date.getUTCHours() : date.getHours();
        break;

      case "h":
        var h = utc ? date.getUTCHours() : date.getHours();
        rep = h > 12 ? h % 12 : h;
        break;

      case "m":
        rep = utc ? date.getUTCMinutes() : date.getMinutes();
        break;

      case "s":
        rep = utc ? date.getUTCSeconds() : date.getSeconds();
        break;

      case "f":
        rep = utc ? date.getUTCMilliseconds() : date.getMilliseconds();
        break;
    }

    if (Number.isNaN(rep)) {
      return match;
    } else {
      return rep < 10 && match.length > 1 ? "0" + rep : "" + rep;
    }
  });
}

function dateToStringWithOffset(date, format) {
  var _a, _b, _c;

  var d = new Date(date.getTime() + ((_a = date.offset) !== null && _a !== void 0 ? _a : 0));

  if (typeof format !== "string") {
    return d.toISOString().replace(/\.\d+/, "").replace(/[A-Z]|\.\d+/g, " ") + dateOffsetToString((_b = date.offset) !== null && _b !== void 0 ? _b : 0);
  } else if (format.length === 1) {
    switch (format) {
      case "D":
      case "d":
        return dateToHalfUTCString(d, "first");

      case "T":
      case "t":
        return dateToHalfUTCString(d, "second");

      case "O":
      case "o":
        return dateToISOStringWithOffset(d, (_c = date.offset) !== null && _c !== void 0 ? _c : 0);

      default:
        throw new Error("Unrecognized Date print format");
    }
  } else {
    return dateToStringWithCustomFormat(d, format, true);
  }
}

function dateToStringWithKind(date, format) {
  var utc = date.kind === 1
  /* UTC */
  ;

  if (typeof format !== "string") {
    return utc ? date.toUTCString() : date.toLocaleString();
  } else if (format.length === 1) {
    switch (format) {
      case "D":
      case "d":
        return utc ? dateToHalfUTCString(date, "first") : date.toLocaleDateString();

      case "T":
      case "t":
        return utc ? dateToHalfUTCString(date, "second") : date.toLocaleTimeString();

      case "O":
      case "o":
        return dateToISOString(date, utc);

      default:
        throw new Error("Unrecognized Date print format");
    }
  } else {
    return dateToStringWithCustomFormat(date, format, utc);
  }
}

function toString(date, format, _provider) {
  return date.offset != null ? dateToStringWithOffset(date, format) : dateToStringWithKind(date, format);
}

function DateTime(value, kind) {
  var d = new Date(value);
  d.kind = (kind == null ? 0
  /* Unspecified */
  : kind) | 0;
  return d;
}

function fromTicks(ticks, kind) {
  ticks = (0, _Long.fromValue)(ticks);
  kind = kind != null ? kind : 0
  /* Unspecified */
  ;
  var date = DateTime((0, _Long.ticksToUnixEpochMilliseconds)(ticks), kind); // Ticks are local to offset (in this case, either UTC or Local/Unknown).
  // If kind is anything but UTC, that means that the tick number was not
  // in utc, thus getTime() cannot return UTC, and needs to be shifted.

  if (kind !== 1
  /* UTC */
  ) {
      date = DateTime(date.getTime() - (0, _Util.dateOffset)(date), kind);
    }

  return date;
}

function fromDateTimeOffset(date, kind) {
  var _a;

  switch (kind) {
    case 1
    /* UTC */
    :
      return DateTime(date.getTime(), 1
      /* UTC */
      );

    case 2
    /* Local */
    :
      return DateTime(date.getTime(), 2
      /* Local */
      );

    default:
      var d = DateTime(date.getTime() + ((_a = date.offset) !== null && _a !== void 0 ? _a : 0), kind);
      return DateTime(d.getTime() - (0, _Util.dateOffset)(d), kind);
  }
}

function getTicks(date) {
  return (0, _Long.unixEpochMillisecondsToTicks)(date.getTime(), (0, _Util.dateOffset)(date));
}

function minValue() {
  // This is "0001-01-01T00:00:00.000Z", actual JS min value is -8640000000000000
  return DateTime(-62135596800000, 0
  /* Unspecified */
  );
}

function maxValue() {
  // This is "9999-12-31T23:59:59.999Z", actual JS max value is 8640000000000000
  return DateTime(253402300799999, 0
  /* Unspecified */
  );
}

function parseRaw(input) {
  if (input === null) {
    throw new Error("Value cannot be null when parsing DateTime");
  }

  if (input.trim() === "") {
    throw new Error("An empty string is not recognized as a valid DateTime");
  }

  var date = new Date(input);

  if (isNaN(date.getTime())) {
    // Try to check strings JS Date cannot parse (see #1045, #1422)
    // tslint:disable-next-line:max-line-length
    var m = /^\s*(\d+[^\w\s:]\d+[^\w\s:]\d+)?\s*(\d+:\d+(?::\d+(?:\.\d+)?)?)?\s*([AaPp][Mm])?\s*([+-]\d+(?::\d+)?)?\s*$/.exec(input);

    if (m != null) {
      var baseDate;
      var timeInSeconds = 0;

      if (m[2] != null) {
        var timeParts = m[2].split(":");
        timeInSeconds = parseInt(timeParts[0], 10) * 3600 + parseInt(timeParts[1] || "0", 10) * 60 + parseFloat(timeParts[2] || "0");

        if (m[3] != null && m[3].toUpperCase() === "PM") {
          timeInSeconds += 720;
        }
      }

      if (m[4] != null) {
        // There's an offset, parse as UTC
        if (m[1] != null) {
          baseDate = new Date(m[1] + " UTC");
        } else {
          var d = new Date();
          baseDate = new Date(d.getUTCFullYear() + "/" + (d.getUTCMonth() + 1) + "/" + d.getUTCDate());
        }

        var offsetParts = m[4].substr(1).split(":");
        var offsetInMinutes = parseInt(offsetParts[0], 10) * 60 + parseInt(offsetParts[1] || "0", 10);

        if (m[4][0] === "+") {
          offsetInMinutes *= -1;
        }

        timeInSeconds += offsetInMinutes * 60;
      } else {
        if (m[1] != null) {
          baseDate = new Date(m[1]);
        } else {
          var _d = new Date();

          baseDate = new Date(_d.getFullYear() + "/" + (_d.getMonth() + 1) + "/" + _d.getDate());
        }
      }

      date = new Date(baseDate.getTime() + timeInSeconds * 1000); // correct for daylight savings time

      date = new Date(date.getTime() + (date.getTimezoneOffset() - baseDate.getTimezoneOffset()) * 60000);
    } else {
      throw new Error("The string is not a valid Date.");
    }
  }

  return date;
}

function parse(str) {
  var detectUTC = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var date = parseRaw(str);
  var offset = offsetRegex.exec(str); // .NET always parses DateTime as Local if there's offset info (even "Z")
  // Newtonsoft.Json uses UTC if the offset is "Z"

  var kind = offset != null ? detectUTC && offset[0] === "Z" ? 1
  /* UTC */
  : 2
  /* Local */
  : 0
  /* Unspecified */
  ;
  return DateTime(date.getTime(), kind);
}

function tryParse(v, defValue) {
  try {
    defValue.contents = parse(v);
    return true;
  } catch (_err) {
    return false;
  }
}

function create(year, month, day) {
  var h = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var m = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
  var s = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
  var ms = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
  var kind = arguments.length > 7 ? arguments[7] : undefined;
  var dateValue = kind === 1
  /* UTC */
  ? Date.UTC(year, month - 1, day, h, m, s, ms) : new Date(year, month - 1, day, h, m, s, ms).getTime();

  if (isNaN(dateValue)) {
    throw new Error("The parameters describe an unrepresentable Date.");
  }

  var date = DateTime(dateValue, kind);

  if (year <= 99) {
    date.setFullYear(year, month - 1, day);
  }

  return date;
}

function now() {
  return DateTime(Date.now(), 2
  /* Local */
  );
}

function utcNow() {
  return DateTime(Date.now(), 1
  /* UTC */
  );
}

function today() {
  return date(now());
}

function isLeapYear(year) {
  return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
}

function daysInMonth(year, month) {
  return month === 2 ? isLeapYear(year) ? 29 : 28 : month >= 8 ? month % 2 === 0 ? 31 : 30 : month % 2 === 0 ? 30 : 31;
}

function toUniversalTime(date) {
  return date.kind === 1
  /* UTC */
  ? date : DateTime(date.getTime(), 1
  /* UTC */
  );
}

function toLocalTime(date) {
  return date.kind === 2
  /* Local */
  ? date : DateTime(date.getTime(), 2
  /* Local */
  );
}

function specifyKind(d, kind) {
  return create(year(d), month(d), day(d), hour(d), minute(d), second(d), millisecond(d), kind);
}

function timeOfDay(d) {
  return hour(d) * 3600000 + minute(d) * 60000 + second(d) * 1000 + millisecond(d);
}

function date(d) {
  return create(year(d), month(d), day(d), 0, 0, 0, 0, d.kind);
}

function day(d) {
  return d.kind === 1
  /* UTC */
  ? d.getUTCDate() : d.getDate();
}

function hour(d) {
  return d.kind === 1
  /* UTC */
  ? d.getUTCHours() : d.getHours();
}

function millisecond(d) {
  return d.kind === 1
  /* UTC */
  ? d.getUTCMilliseconds() : d.getMilliseconds();
}

function minute(d) {
  return d.kind === 1
  /* UTC */
  ? d.getUTCMinutes() : d.getMinutes();
}

function month(d) {
  return (d.kind === 1
  /* UTC */
  ? d.getUTCMonth() : d.getMonth()) + 1;
}

function second(d) {
  return d.kind === 1
  /* UTC */
  ? d.getUTCSeconds() : d.getSeconds();
}

function year(d) {
  return d.kind === 1
  /* UTC */
  ? d.getUTCFullYear() : d.getFullYear();
}

function dayOfWeek(d) {
  return d.kind === 1
  /* UTC */
  ? d.getUTCDay() : d.getDay();
}

function dayOfYear(d) {
  var _year = year(d);

  var _month = month(d);

  var _day = day(d);

  for (var i = 1; i < _month; i++) {
    _day += daysInMonth(_year, i);
  }

  return _day;
}

function add(d, ts) {
  var newDate = DateTime(d.getTime() + ts, d.kind);

  if (d.kind === 2
  /* Local */
  ) {
      var oldTzOffset = d.getTimezoneOffset();
      var newTzOffset = newDate.getTimezoneOffset();
      return oldTzOffset !== newTzOffset ? DateTime(newDate.getTime() + (newTzOffset - oldTzOffset) * 60000, d.kind) : newDate;
    } else {
    return newDate;
  }
}

function addDays(d, v) {
  return add(d, v * 86400000);
}

function addHours(d, v) {
  return add(d, v * 3600000);
}

function addMinutes(d, v) {
  return add(d, v * 60000);
}

function addSeconds(d, v) {
  return add(d, v * 1000);
}

function addMilliseconds(d, v) {
  return add(d, v);
}

function addYears(d, v) {
  var newMonth = month(d);
  var newYear = year(d) + v;

  var _daysInMonth = daysInMonth(newYear, newMonth);

  var newDay = Math.min(_daysInMonth, day(d));
  return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);
}

function addMonths(d, v) {
  var newMonth = month(d) + v;
  var newMonth_ = 0;
  var yearOffset = 0;

  if (newMonth > 12) {
    newMonth_ = newMonth % 12;
    yearOffset = Math.floor(newMonth / 12);
    newMonth = newMonth_;
  } else if (newMonth < 1) {
    newMonth_ = 12 + newMonth % 12;
    yearOffset = Math.floor(newMonth / 12) + (newMonth_ === 12 ? -1 : 0);
    newMonth = newMonth_;
  }

  var newYear = year(d) + yearOffset;

  var _daysInMonth = daysInMonth(newYear, newMonth);

  var newDay = Math.min(_daysInMonth, day(d));
  return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);
}

function subtract(d, that) {
  return typeof that === "number" ? add(d, -that) : d.getTime() - that.getTime();
}

function toLongDateString(d) {
  return d.toDateString();
}

function toShortDateString(d) {
  return d.toLocaleDateString();
}

function toLongTimeString(d) {
  return d.toLocaleTimeString();
}

function toShortTimeString(d) {
  return d.toLocaleTimeString().replace(/:\d\d(?!:)/, "");
}

function equals(d1, d2) {
  return d1.getTime() === d2.getTime();
}

var compare = _Util.compareDates;
exports.compare = compare;
var compareTo = _Util.compareDates;
exports.compareTo = compareTo;

function op_Addition(x, y) {
  return add(x, y);
}

function op_Subtraction(x, y) {
  return subtract(x, y);
}

function isDaylightSavingTime(x) {
  var jan = new Date(x.getFullYear(), 0, 1);
  var jul = new Date(x.getFullYear(), 6, 1);
  return isDST(jan.getTimezoneOffset(), jul.getTimezoneOffset(), x.getTimezoneOffset());
}

function isDST(janOffset, julOffset, tOffset) {
  return Math.min(janOffset, julOffset) === tOffset;
}

var _default = DateTime;
exports.default = _default;
},{"./Long.js":"../src/.fable/fable-library.3.0.0/Long.js","./Util.js":"../src/.fable/fable-library.3.0.0/Util.js"}],"../src/.fable/fable-library.3.0.0/RegExp.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.create = create;
exports.escape = escape;
exports.unescape = unescape;
exports.isMatch = isMatch;
exports.match = match;
exports.matches = matches;
exports.options = options;
exports.replace = replace;
exports.split = split;

function create(pattern) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

  // Supported RegexOptions
  // * IgnoreCase:  0x0001
  // * Multiline:   0x0002
  // * Singleline:  0x0010
  // * ECMAScript:  0x0100 (ignored)
  if ((options & ~(1 ^ 2 ^ 16 ^ 256)) !== 0) {
    throw new Error("RegexOptions only supports: IgnoreCase, Multiline, Singleline and ECMAScript");
  }

  var flags = "g";
  flags += options & 1 ? "i" : ""; // 0x0001 RegexOptions.IgnoreCase

  flags += options & 2 ? "m" : "";
  flags += options & 16 ? "s" : "";
  return new RegExp(pattern, flags);
} // From http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex


function escape(str) {
  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
}

function unescape(str) {
  return str.replace(/\\([\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|])/g, "$1");
}

function isMatch(str, pattern) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var reg;
  reg = str instanceof RegExp ? (reg = str, str = pattern, reg.lastIndex = options, reg) : reg = create(pattern, options);
  return reg.test(str);
}

function match(str, pattern) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var reg;
  reg = str instanceof RegExp ? (reg = str, str = pattern, reg.lastIndex = options, reg) : reg = create(pattern, options);
  return reg.exec(str);
}

function matches(str, pattern) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var reg;
  reg = str instanceof RegExp ? (reg = str, str = pattern, reg.lastIndex = options, reg) : reg = create(pattern, options);

  if (!reg.global) {
    throw new Error("Non-global RegExp"); // Prevent infinite loop
  }

  var m = reg.exec(str);
  var matches = [];

  while (m !== null) {
    matches.push(m);
    m = reg.exec(str);
  }

  return matches;
}

function options(reg) {
  var options = 256; // ECMAScript

  options |= reg.ignoreCase ? 1 : 0;
  options |= reg.multiline ? 2 : 0;
  return options;
}

function replace(reg, input, replacement, limit) {
  var offset = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;

  function replacer() {
    var res = arguments[0];

    if (limit) {
      limit--;
      var _match = [];
      var len = arguments.length;

      for (var i = 0; i < len - 2; i++) {
        _match.push(arguments[i]);
      }

      _match.index = arguments[len - 2];
      _match.input = arguments[len - 1];
      res = replacement(_match);
    }

    return res;
  }

  if (typeof reg === "string") {
    var tmp = reg;
    reg = create(input, limit !== null && limit !== void 0 ? limit : 0);
    input = tmp;
    limit = undefined;
  }

  if (typeof replacement === "function") {
    limit = limit == null ? -1 : limit;
    return input.substring(0, offset) + input.substring(offset).replace(reg, replacer);
  } else {
    // $0 doesn't work with JS regex, see #1155
    replacement = replacement.replace(/\$0/g, function (_s) {
      return "$&";
    });

    if (limit != null) {
      var m;
      var sub1 = input.substring(offset);

      var _matches = matches(reg, sub1);

      var sub2 = matches.length > limit ? (m = _matches[limit - 1], sub1.substring(0, m.index + m[0].length)) : sub1;
      return input.substring(0, offset) + sub2.replace(reg, replacement) + input.substring(offset + sub2.length);
    } else {
      return input.replace(reg, replacement);
    }
  }
}

function split(reg, input, limit) {
  var offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

  if (typeof reg === "string") {
    var tmp = reg;
    reg = create(input, limit !== null && limit !== void 0 ? limit : 0);
    input = tmp;
    limit = undefined;
  }

  input = input.substring(offset);
  return input.split(reg, limit);
}
},{}],"../src/.fable/fable-library.3.0.0/String.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compare = compare;
exports.compareOrdinal = compareOrdinal;
exports.compareTo = compareTo;
exports.startsWith = startsWith;
exports.indexOfAny = indexOfAny;
exports.printf = printf;
exports.interpolate = interpolate;
exports.toConsole = toConsole;
exports.toConsoleError = toConsoleError;
exports.toText = toText;
exports.toFail = toFail;
exports.fsFormat = fsFormat;
exports.format = format;
exports.endsWith = endsWith;
exports.initialize = initialize;
exports.insert = insert;
exports.isNullOrEmpty = isNullOrEmpty;
exports.isNullOrWhiteSpace = isNullOrWhiteSpace;
exports.concat = concat;
exports.join = join;
exports.joinWithIndices = joinWithIndices;
exports.toBase64String = toBase64String;
exports.fromBase64String = fromBase64String;
exports.padLeft = padLeft;
exports.padRight = padRight;
exports.remove = remove;
exports.replace = replace;
exports.replicate = replicate;
exports.getCharAtIndex = getCharAtIndex;
exports.split = split;
exports.trim = trim;
exports.trimStart = trimStart;
exports.trimEnd = trimEnd;
exports.filter = filter;
exports.substring = substring;

var _Date = require("./Date.js");

var _Decimal = _interopRequireDefault(require("./Decimal.js"));

var _Long = _interopRequireWildcard(require("./Long.js"));

var _RegExp = require("./RegExp.js");

var _Types = require("./Types.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var fsFormatRegExp = /(^|[^%])%([0+\- ]*)(\d+)?(?:\.(\d+))?(\w)/;
var interpolateRegExp = /(?:(^|[^%])%([0+\- ]*)(\d+)?(?:\.(\d+))?(\w))?%P\(\)/g;
var formatRegExp = /\{(\d+)(,-?\d+)?(?:\:([a-zA-Z])(\d{0,2})|\:(.+?))?\}/g; // These are used for formatting and only take longs and decimals into account (no bigint)

function isNumeric(x) {
  return typeof x === "number" || x instanceof _Long.default || x instanceof _Decimal.default;
}

function isLessThan(x, y) {
  if (x instanceof _Long.default) {
    return _Long.compare(x, y) < 0;
  } else if (x instanceof _Decimal.default) {
    return x.cmp(y) < 0;
  } else {
    return x < y;
  }
}

function multiply(x, y) {
  if (x instanceof _Long.default) {
    return _Long.op_Multiply(x, y);
  } else if (x instanceof _Decimal.default) {
    return x.mul(y);
  } else {
    return x * y;
  }
}

function toFixed(x, dp) {
  if (x instanceof _Long.default) {
    return String(x) + 0 .toFixed(dp).substr(1);
  } else {
    return x.toFixed(dp);
  }
}

function toPrecision(x, sd) {
  if (x instanceof _Long.default) {
    return String(x) + 0 .toPrecision(sd).substr(1);
  } else {
    return x.toPrecision(sd);
  }
}

function toExponential(x, dp) {
  if (x instanceof _Long.default) {
    return String(x) + 0 .toExponential(dp).substr(1);
  } else {
    return x.toExponential(dp);
  }
}

function cmp(x, y, ic) {
  function isIgnoreCase(i) {
    return i === true || i === 1
    /* CurrentCultureIgnoreCase */
    || i === 3
    /* InvariantCultureIgnoreCase */
    || i === 5
    /* OrdinalIgnoreCase */
    ;
  }

  function isOrdinal(i) {
    return i === 4
    /* Ordinal */
    || i === 5
    /* OrdinalIgnoreCase */
    ;
  }

  if (x == null) {
    return y == null ? 0 : -1;
  }

  if (y == null) {
    return 1;
  } // everything is bigger than null


  if (isOrdinal(ic)) {
    if (isIgnoreCase(ic)) {
      x = x.toLowerCase();
      y = y.toLowerCase();
    }

    return x === y ? 0 : x < y ? -1 : 1;
  } else {
    if (isIgnoreCase(ic)) {
      x = x.toLocaleLowerCase();
      y = y.toLocaleLowerCase();
    }

    return x.localeCompare(y);
  }
}

function compare() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  switch (args.length) {
    case 2:
      return cmp(args[0], args[1], false);

    case 3:
      return cmp(args[0], args[1], args[2]);

    case 4:
      return cmp(args[0], args[1], args[2] === true);

    case 5:
      return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), false);

    case 6:
      return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5]);

    case 7:
      return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5] === true);

    default:
      throw new Error("String.compare: Unsupported number of parameters");
  }
}

function compareOrdinal(x, y) {
  return cmp(x, y, 4
  /* Ordinal */
  );
}

function compareTo(x, y) {
  return cmp(x, y, 0
  /* CurrentCulture */
  );
}

function startsWith(str, pattern, ic) {
  if (str.length >= pattern.length) {
    return cmp(str.substr(0, pattern.length), pattern, ic) === 0;
  }

  return false;
}

function indexOfAny(str, anyOf) {
  if (str == null || str === "") {
    return -1;
  }

  var startIndex = (arguments.length <= 2 ? 0 : arguments.length - 2) > 0 ? arguments.length <= 2 ? undefined : arguments[2] : 0;

  if (startIndex < 0) {
    throw new Error("Start index cannot be negative");
  }

  var length = (arguments.length <= 2 ? 0 : arguments.length - 2) > 1 ? arguments.length <= 3 ? undefined : arguments[3] : str.length - startIndex;

  if (length < 0) {
    throw new Error("Length cannot be negative");
  }

  if (length > str.length - startIndex) {
    throw new Error("Invalid startIndex and length");
  }

  str = str.substr(startIndex, length);

  var _iterator = _createForOfIteratorHelper(anyOf),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var c = _step.value;
      var index = str.indexOf(c);

      if (index > -1) {
        return index + startIndex;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return -1;
}

function toHex(x) {
  if (x instanceof _Long.default) {
    return _Long.toString(x.unsigned ? x : _Long.fromBytes(_Long.toBytes(x), true), 16);
  } else {
    return (Number(x) >>> 0).toString(16);
  }
}

function printf(input) {
  return {
    input: input,
    cont: fsFormat(input)
  };
}

function interpolate(input, values) {
  var i = 0;
  return input.replace(interpolateRegExp, function (_, prefix, flags, padLength, precision, format) {
    return formatReplacement(values[i++], prefix, flags, padLength, precision, format);
  });
}

function continuePrint(cont, arg) {
  return typeof arg === "string" ? cont(arg) : arg.cont(cont);
}

function toConsole(arg) {
  // Don't remove the lambda here, see #1357
  return continuePrint(function (x) {
    return console.log(x);
  }, arg);
}

function toConsoleError(arg) {
  return continuePrint(function (x) {
    return console.error(x);
  }, arg);
}

function toText(arg) {
  return continuePrint(function (x) {
    return x;
  }, arg);
}

function toFail(arg) {
  return continuePrint(function (x) {
    throw new Error(x);
  }, arg);
}

function formatReplacement(rep, prefix, flags, padLength, precision, format) {
  var sign = "";
  flags = flags || "";
  format = format || "";

  if (isNumeric(rep)) {
    if (format.toLowerCase() !== "x") {
      if (isLessThan(rep, 0)) {
        rep = multiply(rep, -1);
        sign = "-";
      } else {
        if (flags.indexOf(" ") >= 0) {
          sign = " ";
        } else if (flags.indexOf("+") >= 0) {
          sign = "+";
        }
      }
    }

    precision = precision == null ? null : parseInt(precision, 10);

    switch (format) {
      case "f":
      case "F":
        precision = precision != null ? precision : 6;
        rep = toFixed(rep, precision);
        break;

      case "g":
      case "G":
        rep = precision != null ? toPrecision(rep, precision) : toPrecision(rep);
        break;

      case "e":
      case "E":
        rep = precision != null ? toExponential(rep, precision) : toExponential(rep);
        break;

      case "x":
        rep = toHex(rep);
        break;

      case "X":
        rep = toHex(rep).toUpperCase();
        break;

      default:
        // AOid
        rep = String(rep);
        break;
    }
  } else if (rep instanceof Date) {
    rep = (0, _Date.toString)(rep);
  } else {
    rep = (0, _Types.toString)(rep);
  }

  padLength = parseInt(padLength, 10);

  if (!isNaN(padLength)) {
    var zeroFlag = flags.indexOf("0") >= 0; // Use '0' for left padding

    var minusFlag = flags.indexOf("-") >= 0; // Right padding

    var ch = minusFlag || !zeroFlag ? " " : "0";

    if (ch === "0") {
      rep = padLeft(rep, padLength - sign.length, ch, minusFlag);
      rep = sign + rep;
    } else {
      rep = padLeft(sign + rep, padLength, ch, minusFlag);
    }
  } else {
    rep = sign + rep;
  }

  return prefix ? prefix + rep : rep;
}

function formatOnce(str2, rep) {
  return str2.replace(fsFormatRegExp, function (_, prefix, flags, padLength, precision, format) {
    var once = formatReplacement(rep, prefix, flags, padLength, precision, format);
    return once.replace(/%/g, "%%");
  });
}

function createPrinter(str, cont) {
  return function () {
    // Make a copy as the function may be used several times
    var strCopy = str;

    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    for (var _i = 0, _args = args; _i < _args.length; _i++) {
      var arg = _args[_i];
      strCopy = formatOnce(strCopy, arg);
    }

    return fsFormatRegExp.test(strCopy) ? createPrinter(strCopy, cont) : cont(strCopy.replace(/%%/g, "%"));
  };
}

function fsFormat(str) {
  return function (cont) {
    return fsFormatRegExp.test(str) ? createPrinter(str, cont) : cont(str);
  };
}

function format(str) {
  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    args[_key3 - 1] = arguments[_key3];
  }

  if (_typeof(str) === "object" && args.length > 0) {
    // Called with culture info
    str = args[0];
    args.shift();
  }

  return str.replace(formatRegExp, function (_, idx, padLength, format, precision, pattern) {
    var rep = args[idx];

    if (isNumeric(rep)) {
      precision = precision == null ? null : parseInt(precision, 10);

      switch (format) {
        case "f":
        case "F":
          precision = precision != null ? precision : 2;
          rep = toFixed(rep, precision);
          break;

        case "g":
        case "G":
          rep = precision != null ? toPrecision(rep, precision) : toPrecision(rep);
          break;

        case "e":
        case "E":
          rep = precision != null ? toExponential(rep, precision) : toExponential(rep);
          break;

        case "p":
        case "P":
          precision = precision != null ? precision : 2;
          rep = toFixed(multiply(rep, 100), precision) + " %";
          break;

        case "d":
        case "D":
          rep = precision != null ? padLeft(String(rep), precision, "0") : String(rep);
          break;

        case "x":
        case "X":
          rep = precision != null ? padLeft(toHex(rep), precision, "0") : toHex(rep);

          if (format === "X") {
            rep = rep.toUpperCase();
          }

          break;

        default:
          if (pattern) {
            var sign = "";
            rep = pattern.replace(/(0+)(\.0+)?/, function (_, intPart, decimalPart) {
              if (isLessThan(rep, 0)) {
                rep = multiply(rep, -1);
                sign = "-";
              }

              rep = toFixed(rep, decimalPart != null ? decimalPart.length - 1 : 0);
              return padLeft(rep, (intPart || "").length - sign.length + (decimalPart != null ? decimalPart.length : 0), "0");
            });
            rep = sign + rep;
          }

      }
    } else if (rep instanceof Date) {
      rep = (0, _Date.toString)(rep, pattern || format);
    } else {
      rep = (0, _Types.toString)(rep);
    }

    padLength = parseInt((padLength || " ").substring(1), 10);

    if (!isNaN(padLength)) {
      rep = padLeft(String(rep), Math.abs(padLength), " ", padLength < 0);
    }

    return rep;
  });
}

function endsWith(str, search) {
  var idx = str.lastIndexOf(search);
  return idx >= 0 && idx === str.length - search.length;
}

function initialize(n, f) {
  if (n < 0) {
    throw new Error("String length must be non-negative");
  }

  var xs = new Array(n);

  for (var i = 0; i < n; i++) {
    xs[i] = f(i);
  }

  return xs.join("");
}

function insert(str, startIndex, value) {
  if (startIndex < 0 || startIndex > str.length) {
    throw new Error("startIndex is negative or greater than the length of this instance.");
  }

  return str.substring(0, startIndex) + value + str.substring(startIndex);
}

function isNullOrEmpty(str) {
  return typeof str !== "string" || str.length === 0;
}

function isNullOrWhiteSpace(str) {
  return typeof str !== "string" || /^\s*$/.test(str);
}

function concat() {
  for (var _len4 = arguments.length, xs = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    xs[_key4] = arguments[_key4];
  }

  return xs.map(function (x) {
    return String(x);
  }).join("");
}

function join(delimiter, xs) {
  if (Array.isArray(xs)) {
    return xs.join(delimiter);
  } else {
    return Array.from(xs).join(delimiter);
  }
}

function joinWithIndices(delimiter, xs, startIndex, count) {
  var endIndexPlusOne = startIndex + count;

  if (endIndexPlusOne > xs.length) {
    throw new Error("Index and count must refer to a location within the buffer.");
  }

  return xs.slice(startIndex, endIndexPlusOne).join(delimiter);
}

function notSupported(name) {
  throw new Error("The environment doesn't support '" + name + "', please use a polyfill.");
}

function toBase64String(inArray) {
  var str = "";

  for (var i = 0; i < inArray.length; i++) {
    str += String.fromCharCode(inArray[i]);
  }

  return typeof btoa === "function" ? btoa(str) : notSupported("btoa");
}

function fromBase64String(b64Encoded) {
  var binary = typeof atob === "function" ? atob(b64Encoded) : notSupported("atob");
  var bytes = new Uint8Array(binary.length);

  for (var i = 0; i < binary.length; i++) {
    bytes[i] = binary.charCodeAt(i);
  }

  return bytes;
}

function padLeft(str, len, ch, isRight) {
  ch = ch || " ";
  len = len - str.length;

  for (var i = 0; i < len; i++) {
    str = isRight ? str + ch : ch + str;
  }

  return str;
}

function padRight(str, len, ch) {
  return padLeft(str, len, ch, true);
}

function remove(str, startIndex, count) {
  if (startIndex >= str.length) {
    throw new Error("startIndex must be less than length of string");
  }

  if (typeof count === "number" && startIndex + count > str.length) {
    throw new Error("Index and count must refer to a location within the string.");
  }

  return str.slice(0, startIndex) + (typeof count === "number" ? str.substr(startIndex + count) : "");
}

function replace(str, search, replace) {
  return str.replace(new RegExp((0, _RegExp.escape)(search), "g"), replace);
}

function replicate(n, x) {
  return initialize(n, function () {
    return x;
  });
}

function getCharAtIndex(input, index) {
  if (index < 0 || index >= input.length) {
    throw new Error("Index was outside the bounds of the array.");
  }

  return input[index];
}

function split(str, splitters, count, removeEmpty) {
  count = typeof count === "number" ? count : undefined;
  removeEmpty = typeof removeEmpty === "number" ? removeEmpty : undefined;

  if (count && count < 0) {
    throw new Error("Count cannot be less than zero");
  }

  if (count === 0) {
    return [];
  }

  if (!Array.isArray(splitters)) {
    if (removeEmpty === 0) {
      return str.split(splitters, count);
    }

    var len = arguments.length;
    splitters = Array(len - 1);

    for (var key = 1; key < len; key++) {
      splitters[key - 1] = arguments[key];
    }
  }

  splitters = splitters.map(function (x) {
    return (0, _RegExp.escape)(x);
  });
  splitters = splitters.length > 0 ? splitters : [" "];
  var i = 0;
  var splits = [];
  var reg = new RegExp(splitters.join("|"), "g");

  while (count == null || count > 1) {
    var m = reg.exec(str);

    if (m === null) {
      break;
    }

    if (!removeEmpty || m.index - i > 0) {
      count = count != null ? count - 1 : count;
      splits.push(str.substring(i, m.index));
    }

    i = reg.lastIndex;
  }

  if (!removeEmpty || str.length - i > 0) {
    splits.push(str.substring(i));
  }

  return splits;
}

function trim(str) {
  for (var _len5 = arguments.length, chars = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
    chars[_key5 - 1] = arguments[_key5];
  }

  if (chars.length === 0) {
    return str.trim();
  }

  var pattern = "[" + (0, _RegExp.escape)(chars.join("")) + "]+";
  return str.replace(new RegExp("^" + pattern), "").replace(new RegExp(pattern + "$"), "");
}

function trimStart(str) {
  for (var _len6 = arguments.length, chars = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
    chars[_key6 - 1] = arguments[_key6];
  }

  return chars.length === 0 ? str.trimStart() : str.replace(new RegExp("^[" + (0, _RegExp.escape)(chars.join("")) + "]+"), "");
}

function trimEnd(str) {
  for (var _len7 = arguments.length, chars = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
    chars[_key7 - 1] = arguments[_key7];
  }

  return chars.length === 0 ? str.trimEnd() : str.replace(new RegExp("[" + (0, _RegExp.escape)(chars.join("")) + "]+$"), "");
}

function filter(pred, x) {
  return x.split("").filter(function (c) {
    return pred(c);
  }).join("");
}

function substring(str, startIndex, length) {
  if (startIndex + (length || 0) > str.length) {
    throw new Error("Invalid startIndex and/or length");
  }

  return length != null ? str.substr(startIndex, length) : str.substr(startIndex);
}
},{"./Date.js":"../src/.fable/fable-library.3.0.0/Date.js","./Decimal.js":"../src/.fable/fable-library.3.0.0/Decimal.js","./Long.js":"../src/.fable/fable-library.3.0.0/Long.js","./RegExp.js":"../src/.fable/fable-library.3.0.0/RegExp.js","./Types.js":"../src/.fable/fable-library.3.0.0/Types.js"}],"../src/.fable/fable-library.3.0.0/MutableMap.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Dictionary$reflection = Dictionary$reflection;
exports.Dictionary_$ctor_6623D9B3 = Dictionary_$ctor_6623D9B3;
exports.Dictionary__TryFind_2B595 = Dictionary__TryFind_2B595;
exports.Dictionary__get_Comparer = Dictionary__get_Comparer;
exports.Dictionary__Clear = Dictionary__Clear;
exports.Dictionary__get_Count = Dictionary__get_Count;
exports.Dictionary__get_Item_2B595 = Dictionary__get_Item_2B595;
exports.Dictionary__set_Item_5BDDA1 = Dictionary__set_Item_5BDDA1;
exports.Dictionary__Add_5BDDA1 = Dictionary__Add_5BDDA1;
exports.Dictionary__ContainsKey_2B595 = Dictionary__ContainsKey_2B595;
exports.Dictionary__Remove_2B595 = Dictionary__Remove_2B595;
exports.Dictionary = void 0;

var _Seq = require("./Seq.js");

var _Util = require("./Util.js");

var _Types = require("./Types.js");

var _Reflection = require("./Reflection.js");

var _MapUtil = require("./MapUtil.js");

var _String = require("./String.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Dictionary = /*#__PURE__*/function () {
  function Dictionary(pairs, comparer) {
    _classCallCheck(this, Dictionary);

    var this$ = new _Types.FSharpRef(null);
    this.comparer = comparer;
    this$.contents = this;
    this.hashMap = new Map([]);
    this["init@8-1"] = 1;
    var enumerator = (0, _Seq.getEnumerator)(pairs);

    try {
      while (enumerator["System.Collections.IEnumerator.MoveNext"]()) {
        var pair = enumerator["System.Collections.Generic.IEnumerator`1.get_Current"]();
        Dictionary__Add_5BDDA1(this$.contents, pair[0], pair[1]);
      }
    } finally {
      enumerator.Dispose();
    }
  }

  _createClass(Dictionary, [{
    key: "System.Collections.IEnumerable.GetEnumerator",
    value: function SystemCollectionsIEnumerableGetEnumerator() {
      var this$ = this;
      return (0, _Seq.getEnumerator)(this$);
    }
  }, {
    key: "GetEnumerator",
    value: function GetEnumerator() {
      var this$ = this;
      return (0, _Seq.getEnumerator)((0, _Seq.concat)(this$.hashMap.values()));
    }
  }, {
    key: Symbol.iterator,
    value: function value() {
      return (0, _Seq.toIterator)(this.GetEnumerator());
    }
  }, {
    key: "System.Collections.Generic.ICollection`1.Add2B595",
    value: function SystemCollectionsGenericICollection1Add2B595(item) {
      var this$ = this;
      Dictionary__Add_5BDDA1(this$, item[0], item[1]);
    }
  }, {
    key: "System.Collections.Generic.ICollection`1.Clear",
    value: function SystemCollectionsGenericICollection1Clear() {
      var this$ = this;
      Dictionary__Clear(this$);
    }
  }, {
    key: "System.Collections.Generic.ICollection`1.Contains2B595",
    value: function SystemCollectionsGenericICollection1Contains2B595(item) {
      var this$ = this;
      var matchValue = Dictionary__TryFind_2B595(this$, item[0]);
      var pattern_matching_result;

      if (matchValue != null) {
        if ((0, _Util.equals)(matchValue[1], item[1])) {
          pattern_matching_result = 0;
        } else {
          pattern_matching_result = 1;
        }
      } else {
        pattern_matching_result = 1;
      }

      switch (pattern_matching_result) {
        case 0:
          {
            return true;
          }

        case 1:
          {
            return false;
          }
      }
    }
  }, {
    key: "System.Collections.Generic.ICollection`1.CopyToZ2E171D71",
    value: function SystemCollectionsGenericICollection1CopyToZ2E171D71(array, arrayIndex) {
      var this$ = this;
      (0, _Seq.iterateIndexed)(function (i, e) {
        array[arrayIndex + i] = e;
      }, this$);
    }
  }, {
    key: "System.Collections.Generic.ICollection`1.get_Count",
    value: function SystemCollectionsGenericICollection1Get_Count() {
      var this$ = this;
      return Dictionary__get_Count(this$) | 0;
    }
  }, {
    key: "System.Collections.Generic.ICollection`1.get_IsReadOnly",
    value: function SystemCollectionsGenericICollection1Get_IsReadOnly() {
      return false;
    }
  }, {
    key: "System.Collections.Generic.ICollection`1.Remove2B595",
    value: function SystemCollectionsGenericICollection1Remove2B595(item) {
      var this$ = this;
      var matchValue = Dictionary__TryFind_2B595(this$, item[0]);

      if (matchValue != null) {
        if ((0, _Util.equals)(matchValue[1], item[1])) {
          var value = Dictionary__Remove_2B595(this$, item[0]);
          void value;
        }

        return true;
      } else {
        return false;
      }
    }
  }, {
    key: "clear",
    value: function clear() {
      var this$ = this;
      Dictionary__Clear(this$);
    }
  }, {
    key: "delete",
    value: function _delete(k) {
      var this$ = this;
      return Dictionary__Remove_2B595(this$, k);
    }
  }, {
    key: "entries",
    value: function entries() {
      var this$ = this;
      return (0, _Seq.map)(function (p) {
        return [p[0], p[1]];
      }, this$);
    }
  }, {
    key: "get",
    value: function get(k) {
      var this$ = this;
      return Dictionary__get_Item_2B595(this$, k);
    }
  }, {
    key: "has",
    value: function has(k) {
      var this$ = this;
      return Dictionary__ContainsKey_2B595(this$, k);
    }
  }, {
    key: "keys",
    value: function keys() {
      var this$ = this;
      return (0, _Seq.map)(function (p) {
        return p[0];
      }, this$);
    }
  }, {
    key: "set",
    value: function set(k, v) {
      var this$ = this;
      Dictionary__set_Item_5BDDA1(this$, k, v);
      return this$;
    }
  }, {
    key: "values",
    value: function values() {
      var this$ = this;
      return (0, _Seq.map)(function (p) {
        return p[1];
      }, this$);
    }
  }, {
    key: "forEach",
    value: function forEach(f, thisArg) {
      var this$ = this;
      (0, _Seq.iterate)(function (p) {
        f(p[1], p[0], this$);
      }, this$);
    }
  }, {
    key: Symbol.toStringTag,
    get: function get() {
      return "Dictionary";
    }
  }, {
    key: "size",
    get: function get() {
      var this$ = this;
      return Dictionary__get_Count(this$) | 0;
    }
  }]);

  return Dictionary;
}();

exports.Dictionary = Dictionary;

function Dictionary$reflection(gen0, gen1) {
  return (0, _Reflection.class_type)("Fable.Collections.Dictionary", [gen0, gen1], Dictionary);
}

function Dictionary_$ctor_6623D9B3(pairs, comparer) {
  return new Dictionary(pairs, comparer);
}

function Dictionary__TryFindIndex_2B595(this$, k) {
  var h = this$.comparer.GetHashCode(k) | 0;
  var matchValue;
  var outArg = null;
  matchValue = [(0, _MapUtil.tryGetValue)(this$.hashMap, h, new _Types.FSharpRef(function () {
    return outArg;
  }, function (v) {
    outArg = v;
  })), outArg];

  if (matchValue[0]) {
    return [true, h, matchValue[1].findIndex(function (pair) {
      return this$.comparer.Equals(k, pair[0]);
    })];
  } else {
    return [false, h, -1];
  }
}

function Dictionary__TryFind_2B595(this$, k) {
  var matchValue = Dictionary__TryFindIndex_2B595(this$, k);
  var pattern_matching_result;

  if (matchValue[0]) {
    if (matchValue[2] > -1) {
      pattern_matching_result = 0;
    } else {
      pattern_matching_result = 1;
    }
  } else {
    pattern_matching_result = 1;
  }

  switch (pattern_matching_result) {
    case 0:
      {
        return (0, _MapUtil.getItemFromDict)(this$.hashMap, matchValue[1])[matchValue[2]];
      }

    case 1:
      {
        return void 0;
      }
  }
}

function Dictionary__get_Comparer(this$) {
  return this$.comparer;
}

function Dictionary__Clear(this$) {
  this$.hashMap.clear();
}

function Dictionary__get_Count(this$) {
  return (0, _Seq.sumBy)(function (pairs) {
    return pairs.length;
  }, this$.hashMap.values(), {
    GetZero: function GetZero() {
      return 0;
    },
    Add: function Add(x, y) {
      return x + y;
    }
  });
}

function Dictionary__get_Item_2B595(this$, k) {
  var matchValue = Dictionary__TryFind_2B595(this$, k);

  if (matchValue != null) {
    return matchValue[1];
  } else {
    throw new Error("The item was not found in collection");
  }
}

function Dictionary__set_Item_5BDDA1(this$, k, v) {
  var matchValue = Dictionary__TryFindIndex_2B595(this$, k);
  var pattern_matching_result;

  if (matchValue[0]) {
    if (matchValue[2] > -1) {
      pattern_matching_result = 0;
    } else {
      pattern_matching_result = 1;
    }
  } else {
    pattern_matching_result = 1;
  }

  switch (pattern_matching_result) {
    case 0:
      {
        (0, _MapUtil.getItemFromDict)(this$.hashMap, matchValue[1])[matchValue[2]] = [k, v];
        break;
      }

    case 1:
      {
        if (matchValue[0]) {
          var value = void (0, _MapUtil.getItemFromDict)(this$.hashMap, matchValue[1]).push([k, v]);
          void undefined;
        } else {
          this$.hashMap.set(matchValue[1], [[k, v]]);
        }

        break;
      }
  }
}

function Dictionary__Add_5BDDA1(this$, k, v) {
  var matchValue = Dictionary__TryFindIndex_2B595(this$, k);
  var pattern_matching_result;

  if (matchValue[0]) {
    if (matchValue[2] > -1) {
      pattern_matching_result = 0;
    } else {
      pattern_matching_result = 1;
    }
  } else {
    pattern_matching_result = 1;
  }

  switch (pattern_matching_result) {
    case 0:
      {
        var msg = (0, _String.format)("An item with the same key has already been added. Key: {0}", k);
        throw new Error(msg);
        break;
      }

    case 1:
      {
        if (matchValue[0]) {
          var value = void (0, _MapUtil.getItemFromDict)(this$.hashMap, matchValue[1]).push([k, v]);
          void undefined;
        } else {
          this$.hashMap.set(matchValue[1], [[k, v]]);
        }

        break;
      }
  }
}

function Dictionary__ContainsKey_2B595(this$, k) {
  var matchValue = Dictionary__TryFindIndex_2B595(this$, k);
  var pattern_matching_result;

  if (matchValue[0]) {
    if (matchValue[2] > -1) {
      pattern_matching_result = 0;
    } else {
      pattern_matching_result = 1;
    }
  } else {
    pattern_matching_result = 1;
  }

  switch (pattern_matching_result) {
    case 0:
      {
        return true;
      }

    case 1:
      {
        return false;
      }
  }
}

function Dictionary__Remove_2B595(this$, k) {
  var matchValue = Dictionary__TryFindIndex_2B595(this$, k);
  var pattern_matching_result;

  if (matchValue[0]) {
    if (matchValue[2] > -1) {
      pattern_matching_result = 0;
    } else {
      pattern_matching_result = 1;
    }
  } else {
    pattern_matching_result = 1;
  }

  switch (pattern_matching_result) {
    case 0:
      {
        (0, _MapUtil.getItemFromDict)(this$.hashMap, matchValue[1]).splice(matchValue[2], 1);
        return true;
      }

    case 1:
      {
        return false;
      }
  }
}
},{"./Seq.js":"../src/.fable/fable-library.3.0.0/Seq.js","./Util.js":"../src/.fable/fable-library.3.0.0/Util.js","./Types.js":"../src/.fable/fable-library.3.0.0/Types.js","./Reflection.js":"../src/.fable/fable-library.3.0.0/Reflection.js","./MapUtil.js":"../src/.fable/fable-library.3.0.0/MapUtil.js","./String.js":"../src/.fable/fable-library.3.0.0/String.js"}],"../src/.fable/fable-library.3.0.0/MutableSet.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HashSet$reflection = HashSet$reflection;
exports.HashSet_$ctor_Z6150332D = HashSet_$ctor_Z6150332D;
exports.HashSet__get_Comparer = HashSet__get_Comparer;
exports.HashSet__Clear = HashSet__Clear;
exports.HashSet__get_Count = HashSet__get_Count;
exports.HashSet__Add_2B595 = HashSet__Add_2B595;
exports.HashSet__Contains_2B595 = HashSet__Contains_2B595;
exports.HashSet__Remove_2B595 = HashSet__Remove_2B595;
exports.HashSet = void 0;

var _Seq = require("./Seq.js");

var _Types = require("./Types.js");

var _Reflection = require("./Reflection.js");

var _MapUtil = require("./MapUtil.js");

var _Option = require("./Option.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var HashSet = /*#__PURE__*/function () {
  function HashSet(items, comparer) {
    _classCallCheck(this, HashSet);

    var this$ = new _Types.FSharpRef(null);
    this.comparer = comparer;
    this$.contents = this;
    this.hashMap = new Map([]);
    this["init@8-2"] = 1;
    var enumerator = (0, _Seq.getEnumerator)(items);

    try {
      while (enumerator["System.Collections.IEnumerator.MoveNext"]()) {
        var value = HashSet__Add_2B595(this$.contents, enumerator["System.Collections.Generic.IEnumerator`1.get_Current"]());
        void value;
      }
    } finally {
      enumerator.Dispose();
    }
  }

  _createClass(HashSet, [{
    key: "System.Collections.IEnumerable.GetEnumerator",
    value: function SystemCollectionsIEnumerableGetEnumerator() {
      var this$ = this;
      return (0, _Seq.getEnumerator)(this$);
    }
  }, {
    key: "GetEnumerator",
    value: function GetEnumerator() {
      var this$ = this;
      return (0, _Seq.getEnumerator)((0, _Seq.concat)(this$.hashMap.values()));
    }
  }, {
    key: Symbol.iterator,
    value: function value() {
      return (0, _Seq.toIterator)(this.GetEnumerator());
    }
  }, {
    key: "System.Collections.Generic.ICollection`1.Add2B595",
    value: function SystemCollectionsGenericICollection1Add2B595(item) {
      var this$ = this;
      var value = HashSet__Add_2B595(this$, item);
      void value;
    }
  }, {
    key: "System.Collections.Generic.ICollection`1.Clear",
    value: function SystemCollectionsGenericICollection1Clear() {
      var this$ = this;
      HashSet__Clear(this$);
    }
  }, {
    key: "System.Collections.Generic.ICollection`1.Contains2B595",
    value: function SystemCollectionsGenericICollection1Contains2B595(item) {
      var this$ = this;
      return HashSet__Contains_2B595(this$, item);
    }
  }, {
    key: "System.Collections.Generic.ICollection`1.CopyToZ2E171D71",
    value: function SystemCollectionsGenericICollection1CopyToZ2E171D71(array, arrayIndex) {
      var this$ = this;
      (0, _Seq.iterateIndexed)(function (i, e) {
        array[arrayIndex + i] = e;
      }, this$);
    }
  }, {
    key: "System.Collections.Generic.ICollection`1.get_Count",
    value: function SystemCollectionsGenericICollection1Get_Count() {
      var this$ = this;
      return HashSet__get_Count(this$) | 0;
    }
  }, {
    key: "System.Collections.Generic.ICollection`1.get_IsReadOnly",
    value: function SystemCollectionsGenericICollection1Get_IsReadOnly() {
      return false;
    }
  }, {
    key: "System.Collections.Generic.ICollection`1.Remove2B595",
    value: function SystemCollectionsGenericICollection1Remove2B595(item) {
      var this$ = this;
      return HashSet__Remove_2B595(this$, item);
    }
  }, {
    key: "add",
    value: function add(k) {
      var this$ = this;
      var value = HashSet__Add_2B595(this$, k);
      void value;
      return this$;
    }
  }, {
    key: "clear",
    value: function clear() {
      var this$ = this;
      HashSet__Clear(this$);
    }
  }, {
    key: "delete",
    value: function _delete(k) {
      var this$ = this;
      return HashSet__Remove_2B595(this$, k);
    }
  }, {
    key: "has",
    value: function has(k) {
      var this$ = this;
      return HashSet__Contains_2B595(this$, k);
    }
  }, {
    key: "keys",
    value: function keys() {
      var this$ = this;
      return (0, _Seq.map)(function (x) {
        return x;
      }, this$);
    }
  }, {
    key: "values",
    value: function values() {
      var this$ = this;
      return (0, _Seq.map)(function (x) {
        return x;
      }, this$);
    }
  }, {
    key: "entries",
    value: function entries() {
      var this$ = this;
      return (0, _Seq.map)(function (v) {
        return [v, v];
      }, this$);
    }
  }, {
    key: "forEach",
    value: function forEach(f, thisArg) {
      var this$ = this;
      (0, _Seq.iterate)(function (x) {
        f(x, x, this$);
      }, this$);
    }
  }, {
    key: Symbol.toStringTag,
    get: function get() {
      return "HashSet";
    }
  }, {
    key: "size",
    get: function get() {
      var this$ = this;
      return HashSet__get_Count(this$) | 0;
    }
  }]);

  return HashSet;
}();

exports.HashSet = HashSet;

function HashSet$reflection(gen0) {
  return (0, _Reflection.class_type)("Fable.Collections.HashSet", [gen0], HashSet);
}

function HashSet_$ctor_Z6150332D(items, comparer) {
  return new HashSet(items, comparer);
}

function HashSet__TryFindIndex_2B595(this$, k) {
  var h = this$.comparer.GetHashCode(k) | 0;
  var matchValue;
  var outArg = null;
  matchValue = [(0, _MapUtil.tryGetValue)(this$.hashMap, h, new _Types.FSharpRef(function () {
    return outArg;
  }, function (v) {
    outArg = v;
  })), outArg];

  if (matchValue[0]) {
    return [true, h, matchValue[1].findIndex(function (v_1) {
      return this$.comparer.Equals(k, v_1);
    })];
  } else {
    return [false, h, -1];
  }
}

function HashSet__TryFind_2B595(this$, k) {
  var matchValue = HashSet__TryFindIndex_2B595(this$, k);
  var pattern_matching_result;

  if (matchValue[0]) {
    if (matchValue[2] > -1) {
      pattern_matching_result = 0;
    } else {
      pattern_matching_result = 1;
    }
  } else {
    pattern_matching_result = 1;
  }

  switch (pattern_matching_result) {
    case 0:
      {
        return (0, _Option.some)((0, _MapUtil.getItemFromDict)(this$.hashMap, matchValue[1])[matchValue[2]]);
      }

    case 1:
      {
        return void 0;
      }
  }
}

function HashSet__get_Comparer(this$) {
  return this$.comparer;
}

function HashSet__Clear(this$) {
  this$.hashMap.clear();
}

function HashSet__get_Count(this$) {
  return (0, _Seq.sumBy)(function (pairs) {
    return pairs.length;
  }, this$.hashMap.values(), {
    GetZero: function GetZero() {
      return 0;
    },
    Add: function Add(x, y) {
      return x + y;
    }
  });
}

function HashSet__Add_2B595(this$, k) {
  var matchValue = HashSet__TryFindIndex_2B595(this$, k);
  var pattern_matching_result;

  if (matchValue[0]) {
    if (matchValue[2] > -1) {
      pattern_matching_result = 0;
    } else {
      pattern_matching_result = 1;
    }
  } else {
    pattern_matching_result = 1;
  }

  switch (pattern_matching_result) {
    case 0:
      {
        return false;
      }

    case 1:
      {
        if (matchValue[0]) {
          var value = void (0, _MapUtil.getItemFromDict)(this$.hashMap, matchValue[1]).push(k);
          void undefined;
          return true;
        } else {
          this$.hashMap.set(matchValue[1], [k]);
          return true;
        }
      }
  }
}

function HashSet__Contains_2B595(this$, k) {
  var matchValue = HashSet__TryFindIndex_2B595(this$, k);
  var pattern_matching_result;

  if (matchValue[0]) {
    if (matchValue[2] > -1) {
      pattern_matching_result = 0;
    } else {
      pattern_matching_result = 1;
    }
  } else {
    pattern_matching_result = 1;
  }

  switch (pattern_matching_result) {
    case 0:
      {
        return true;
      }

    case 1:
      {
        return false;
      }
  }
}

function HashSet__Remove_2B595(this$, k) {
  var matchValue = HashSet__TryFindIndex_2B595(this$, k);
  var pattern_matching_result;

  if (matchValue[0]) {
    if (matchValue[2] > -1) {
      pattern_matching_result = 0;
    } else {
      pattern_matching_result = 1;
    }
  } else {
    pattern_matching_result = 1;
  }

  switch (pattern_matching_result) {
    case 0:
      {
        (0, _MapUtil.getItemFromDict)(this$.hashMap, matchValue[1]).splice(matchValue[2], 1);
        return true;
      }

    case 1:
      {
        return false;
      }
  }
}
},{"./Seq.js":"../src/.fable/fable-library.3.0.0/Seq.js","./Types.js":"../src/.fable/fable-library.3.0.0/Types.js","./Reflection.js":"../src/.fable/fable-library.3.0.0/Reflection.js","./MapUtil.js":"../src/.fable/fable-library.3.0.0/MapUtil.js","./Option.js":"../src/.fable/fable-library.3.0.0/Option.js"}],"../src/.fable/fable-library.3.0.0/Array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.append = append;
exports.filter = filter;
exports.fill = fill;
exports.getSubArray = getSubArray;
exports.last = last;
exports.tryLast = tryLast;
exports.mapIndexed = mapIndexed;
exports.map = map;
exports.mapIndexed2 = mapIndexed2;
exports.map2 = map2;
exports.mapIndexed3 = mapIndexed3;
exports.map3 = map3;
exports.mapFold = mapFold;
exports.mapFoldBack = mapFoldBack;
exports.indexed = indexed;
exports.truncate = truncate;
exports.concat = concat;
exports.collect = collect;
exports.countBy = countBy;
exports.distinctBy = distinctBy;
exports.distinct = distinct;
exports.where = where;
exports.contains = contains;
exports.except = except;
exports.groupBy = groupBy;
exports.empty = empty;
exports.singleton = singleton;
exports.initialize = initialize;
exports.pairwise = pairwise;
exports.replicate = replicate;
exports.copy = copy;
exports.reverse = reverse;
exports.scan = scan;
exports.scanBack = scanBack;
exports.skip = skip;
exports.skipWhile = skipWhile;
exports.take = take;
exports.takeWhile = takeWhile;
exports.addInPlace = addInPlace;
exports.addRangeInPlace = addRangeInPlace;
exports.removeInPlace = removeInPlace;
exports.removeAllInPlace = removeAllInPlace;
exports.copyTo = copyTo;
exports.indexOf = indexOf;
exports.partition = partition;
exports.find = find;
exports.tryFind = tryFind;
exports.findIndex = findIndex;
exports.tryFindIndex = tryFindIndex;
exports.pick = pick;
exports.tryPick = tryPick;
exports.findBack = findBack;
exports.tryFindBack = tryFindBack;
exports.findLastIndex = findLastIndex;
exports.findIndexBack = findIndexBack;
exports.tryFindIndexBack = tryFindIndexBack;
exports.choose = choose;
exports.foldIndexed = foldIndexed;
exports.fold = fold;
exports.iterate = iterate;
exports.iterateIndexed = iterateIndexed;
exports.iterate2 = iterate2;
exports.iterateIndexed2 = iterateIndexed2;
exports.isEmpty = isEmpty;
exports.forAll = forAll;
exports.permute = permute;
exports.setSlice = setSlice;
exports.sortInPlaceBy = sortInPlaceBy;
exports.sortInPlace = sortInPlace;
exports.sort = sort;
exports.sortBy = sortBy;
exports.sortDescending = sortDescending;
exports.sortByDescending = sortByDescending;
exports.sortWith = sortWith;
exports.unfold = unfold;
exports.unzip = unzip;
exports.unzip3 = unzip3;
exports.zip = zip;
exports.zip3 = zip3;
exports.chunkBySize = chunkBySize;
exports.splitAt = splitAt;
exports.compareWith = compareWith;
exports.equalsWith = equalsWith;
exports.exactlyOne = exactlyOne;
exports.head = head;
exports.tryHead = tryHead;
exports.tail = tail;
exports.item = item;
exports.tryItem = tryItem;
exports.foldBackIndexed = foldBackIndexed;
exports.foldBack = foldBack;
exports.foldIndexed2 = foldIndexed2;
exports.fold2 = fold2;
exports.foldBackIndexed2 = foldBackIndexed2;
exports.foldBack2 = foldBack2;
exports.reduce = reduce;
exports.reduceBack = reduceBack;
exports.forAll2 = forAll2;
exports.existsOffset = existsOffset;
exports.exists = exists;
exports.existsOffset2 = existsOffset2;
exports.exists2 = exists2;
exports.sum = sum;
exports.sumBy = sumBy;
exports.maxBy = maxBy;
exports.max = max;
exports.minBy = minBy;
exports.min = min;
exports.average = average;
exports.averageBy = averageBy;
exports.windowed = windowed;
exports.splitInto = splitInto;
exports.transpose = transpose;

var _Option = require("./Option.js");

var _Util = require("./Util.js");

var _MutableMap = require("./MutableMap.js");

var _MapUtil = require("./MapUtil.js");

var _Types = require("./Types.js");

var _MutableSet = require("./MutableSet.js");

var _Seq = require("./Seq.js");

function indexNotFound() {
  throw new Error("An index satisfying the predicate was not found in the collection.");
}

function differentLengths() {
  throw new Error("Arrays had different lengths");
}

function append(array1, array2, cons) {
  var len1 = array1.length | 0;
  var len2 = array2.length | 0;
  var newArray = new (cons || Array)(len1 + len2);

  for (var i = 0; i <= len1 - 1; i++) {
    newArray[i] = array1[i];
  }

  for (var i_1 = 0; i_1 <= len2 - 1; i_1++) {
    newArray[i_1 + len1] = array2[i_1];
  }

  return newArray;
}

function filter(predicate, array) {
  return array.filter(predicate);
}

function fill(target, targetIndex, count, value) {
  var start = targetIndex | 0;
  return target.fill(value, start, start + count);
}

function getSubArray(array, start, count) {
  var start_1 = start | 0;
  return array.slice(start_1, start_1 + count);
}

function last(array) {
  if (array.length === 0) {
    throw new Error("The input array was empty\\nParameter name: array");
  }

  return array[array.length - 1];
}

function tryLast(array) {
  if (array.length === 0) {
    return void 0;
  } else {
    return (0, _Option.some)(array[array.length - 1]);
  }
}

function mapIndexed(f, source, cons) {
  var len = source.length | 0;
  var target = new (cons || Array)(len);

  for (var i = 0; i <= len - 1; i++) {
    target[i] = f(i, source[i]);
  }

  return target;
}

function map(f, source, cons) {
  var len = source.length | 0;
  var target = new (cons || Array)(len);

  for (var i = 0; i <= len - 1; i++) {
    target[i] = f(source[i]);
  }

  return target;
}

function mapIndexed2(f, source1, source2, cons) {
  if (source1.length !== source2.length) {
    throw new Error("Arrays had different lengths");
  }

  var result = new (cons || Array)(source1.length);

  for (var i = 0; i <= source1.length - 1; i++) {
    result[i] = f(i, source1[i], source2[i]);
  }

  return result;
}

function map2(f, source1, source2, cons) {
  if (source1.length !== source2.length) {
    throw new Error("Arrays had different lengths");
  }

  var result = new (cons || Array)(source1.length);

  for (var i = 0; i <= source1.length - 1; i++) {
    result[i] = f(source1[i], source2[i]);
  }

  return result;
}

function mapIndexed3(f, source1, source2, source3, cons) {
  if (source1.length !== source2.length ? true : source2.length !== source3.length) {
    throw new Error("Arrays had different lengths");
  }

  var result = new (cons || Array)(source1.length);

  for (var i = 0; i <= source1.length - 1; i++) {
    result[i] = f(i, source1[i], source2[i], source3[i]);
  }

  return result;
}

function map3(f, source1, source2, source3, cons) {
  if (source1.length !== source2.length ? true : source2.length !== source3.length) {
    throw new Error("Arrays had different lengths");
  }

  var result = new (cons || Array)(source1.length);

  for (var i = 0; i <= source1.length - 1; i++) {
    result[i] = f(source1[i], source2[i], source3[i]);
  }

  return result;
}

function mapFold(mapping, state, array, cons) {
  var matchValue = array.length | 0;

  if (matchValue === 0) {
    return [[], state];
  } else {
    var acc = state;
    var res = new (cons || Array)(matchValue);

    for (var i = 0; i <= array.length - 1; i++) {
      var patternInput = mapping(acc, array[i]);
      res[i] = patternInput[0];
      acc = patternInput[1];
    }

    return [res, acc];
  }
}

function mapFoldBack(mapping, array, state, cons) {
  var matchValue = array.length | 0;

  if (matchValue === 0) {
    return [[], state];
  } else {
    var acc = state;
    var res = new (cons || Array)(matchValue);

    for (var i = array.length - 1; i >= 0; i--) {
      var patternInput = mapping(array[i], acc);
      res[i] = patternInput[0];
      acc = patternInput[1];
    }

    return [res, acc];
  }
}

function indexed(source) {
  var len = source.length | 0;
  var target = new Array(len);

  for (var i = 0; i <= len - 1; i++) {
    target[i] = [i, source[i]];
  }

  return target;
}

function truncate(count, array) {
  var count_1 = (0, _Util.max)(_Util.comparePrimitives, 0, count) | 0;
  var start = 0;
  return array.slice(start, start + count_1);
}

function concat(arrays, cons) {
  var arrays_1 = Array.isArray(arrays) ? arrays : Array.from(arrays);
  var matchValue = arrays_1.length | 0;

  switch (matchValue) {
    case 0:
      {
        return new (cons || Array)(0);
      }

    case 1:
      {
        return arrays_1[0];
      }

    default:
      {
        var totalIdx = 0;
        var totalLength = 0;

        for (var idx = 0; idx <= arrays_1.length - 1; idx++) {
          var arr_1 = arrays_1[idx];
          totalLength = totalLength + arr_1.length;
        }

        var result = new (cons || Array)(totalLength);

        for (var idx_1 = 0; idx_1 <= arrays_1.length - 1; idx_1++) {
          var arr_2 = arrays_1[idx_1];

          for (var j = 0; j <= arr_2.length - 1; j++) {
            result[totalIdx] = arr_2[j];
            totalIdx = totalIdx + 1;
          }
        }

        return result;
      }
  }
}

function collect(mapping, array, cons) {
  return concat(map(mapping, array, null), cons);
}

function countBy(projection, array, eq) {
  var dict = new _MutableMap.Dictionary([], eq);
  var keys = [];

  var _loop = function _loop(idx) {
    var key = projection(array[idx]);
    var matchValue = void 0;
    var outArg = 0;
    matchValue = [(0, _MapUtil.tryGetValue)(dict, key, new _Types.FSharpRef(function () {
      return outArg;
    }, function (v) {
      outArg = v;
    })), outArg];

    if (matchValue[0]) {
      dict.set(key, matchValue[1] + 1);
    } else {
      dict.set(key, 1);
      var value_1 = keys.push(key);
      void value_1;
    }
  };

  for (var idx = 0; idx <= array.length - 1; idx++) {
    _loop(idx);
  }

  return map(function (key_1) {
    return [key_1, (0, _MapUtil.getItemFromDict)(dict, key_1)];
  }, keys, null);
}

function distinctBy(projection, array, eq) {
  var hashSet = new _MutableSet.HashSet([], eq);
  return filter(function (arg) {
    return (0, _MapUtil.addToSet)(projection(arg), hashSet);
  }, array);
}

function distinct(array, eq) {
  return distinctBy(function (x) {
    return x;
  }, array, eq);
}

function where(predicate, array) {
  return array.filter(predicate);
}

function contains(value, array, eq) {
  var loop = function loop(i_mut) {
    loop: while (true) {
      var i = i_mut;

      if (i >= array.length) {
        return false;
      } else if (eq.Equals(value, array[i])) {
        return true;
      } else {
        i_mut = i + 1;
        continue loop;
      }

      break;
    }
  };

  return loop(0);
}

function except(itemsToExclude, array, eq) {
  if (array.length === 0) {
    return array;
  } else {
    var cached = new _MutableSet.HashSet(itemsToExclude, eq);
    return array.filter(function (arg00) {
      return (0, _MapUtil.addToSet)(arg00, cached);
    });
  }
}

function groupBy(projection, array, eq) {
  var dict = new _MutableMap.Dictionary([], eq);
  var keys = [];

  var _loop2 = function _loop2(idx) {
    var v = array[idx];
    var key = projection(v);
    var matchValue = void 0;
    var outArg = null;
    matchValue = [(0, _MapUtil.tryGetValue)(dict, key, new _Types.FSharpRef(function () {
      return outArg;
    }, function (v_1) {
      outArg = v_1;
    })), outArg];

    if (matchValue[0]) {
      void matchValue[1].push(v);
    } else {
      (0, _MapUtil.addToDict)(dict, key, [v]);
      var value = keys.push(key);
      void value;
    }
  };

  for (var idx = 0; idx <= array.length - 1; idx++) {
    _loop2(idx);
  }

  return map(function (key_1) {
    return [key_1, Array.from((0, _MapUtil.getItemFromDict)(dict, key_1))];
  }, keys, null);
}

function empty(cons) {
  return new (cons || Array)(0);
}

function singleton(value, cons) {
  var ar = new (cons || Array)(1);
  ar[0] = value;
  return ar;
}

function initialize(count, initializer, cons) {
  if (count < 0) {
    throw new Error("The input must be non-negative\\nParameter name: count");
  }

  var result = new (cons || Array)(count);

  for (var i = 0; i <= count - 1; i++) {
    result[i] = initializer(i);
  }

  return result;
}

function pairwise(array) {
  if (array.length < 2) {
    return [];
  } else {
    var count = array.length - 1 | 0;
    var result = new Array(count);

    for (var i = 0; i <= count - 1; i++) {
      result[i] = [array[i], array[i + 1]];
    }

    return result;
  }
}

function replicate(count, initial, cons) {
  if (count < 0) {
    throw new Error("The input must be non-negative\\nParameter name: count");
  }

  var result = new (cons || Array)(count);

  for (var i = 0; i <= result.length - 1; i++) {
    result[i] = initial;
  }

  return result;
}

function copy(array) {
  return array.slice();
}

function reverse(array) {
  var array_2 = array.slice();
  return array_2.reverse();
}

function scan(folder, state, array, cons) {
  var res = new (cons || Array)(array.length + 1);
  res[0] = state;

  for (var i = 0; i <= array.length - 1; i++) {
    res[i + 1] = folder(res[i], array[i]);
  }

  return res;
}

function scanBack(folder, array, state, cons) {
  var res = new (cons || Array)(array.length + 1);
  res[array.length] = state;

  for (var i = array.length - 1; i >= 0; i--) {
    res[i] = folder(array[i], res[i + 1]);
  }

  return res;
}

function skip(count, array, cons) {
  if (count > array.length) {
    throw new Error("count is greater than array length\\nParameter name: count");
  }

  if (count === array.length) {
    return new (cons || Array)(0);
  } else {
    var count_1 = (count < 0 ? 0 : count) | 0;
    return array.slice(count_1);
  }
}

function skipWhile(predicate, array, cons) {
  var count = 0;

  while (count < array.length ? predicate(array[count]) : false) {
    count = count + 1;
  }

  if (count === array.length) {
    return new (cons || Array)(0);
  } else {
    var count_1 = count | 0;
    return array.slice(count_1);
  }
}

function take(count, array, cons) {
  if (count < 0) {
    throw new Error("The input must be non-negative\\nParameter name: count");
  }

  if (count > array.length) {
    throw new Error("count is greater than array length\\nParameter name: count");
  }

  if (count === 0) {
    return new (cons || Array)(0);
  } else {
    var start = 0;
    return array.slice(start, start + count);
  }
}

function takeWhile(predicate, array, cons) {
  var count = 0;

  while (count < array.length ? predicate(array[count]) : false) {
    count = count + 1;
  }

  if (count === 0) {
    return new (cons || Array)(0);
  } else {
    var start = 0;
    var count_1 = count | 0;
    return array.slice(start, start + count_1);
  }
}

function addInPlace(x, array) {
  var value = array.push(x);
  void value;
}

function addRangeInPlace(range, array) {
  (0, _Seq.iterate)(function (x) {
    var value = array.push(x);
    void value;
  }, range);
}

function removeInPlace(item_1, array) {
  var i = array.indexOf(item_1, 0);

  if (i > -1) {
    var value = array.splice(i, 1);
    void value;
    return true;
  } else {
    return false;
  }
}

function removeAllInPlace(predicate, array) {
  var countRemoveAll = function countRemoveAll(count) {
    var i = array.findIndex(predicate);

    if (i > -1) {
      var value = array.splice(i, 1);
      void value;
      return countRemoveAll(count) + 1 | 0;
    } else {
      return count | 0;
    }
  };

  return countRemoveAll(0) | 0;
}

function copyTo(source, sourceIndex, target, targetIndex, count) {
  var diff = targetIndex - sourceIndex | 0;

  for (var i = sourceIndex; i <= sourceIndex + count - 1; i++) {
    target[i + diff] = source[i];
  }
}

function indexOf(array, item_1, start, count) {
  var start_1 = (0, _Option.defaultArg)(start, 0) | 0;
  var i = array.indexOf(item_1, start_1);

  if (count != null ? i >= start_1 + count : false) {
    return -1;
  } else {
    return i | 0;
  }
}

function partition(f, source, cons) {
  var len = source.length | 0;
  var res1 = new (cons || Array)(len);
  var res2 = new (cons || Array)(len);
  var iTrue = 0;
  var iFalse = 0;

  for (var i = 0; i <= len - 1; i++) {
    if (f(source[i])) {
      res1[iTrue] = source[i];
      iTrue = iTrue + 1;
    } else {
      res2[iFalse] = source[i];
      iFalse = iFalse + 1;
    }
  }

  return [truncate(iTrue, res1), truncate(iFalse, res2)];
}

function find(predicate, array) {
  var matchValue = array.find(predicate);

  if (matchValue == null) {
    return indexNotFound();
  } else {
    return (0, _Option.value)(matchValue);
  }
}

function tryFind(predicate, array) {
  return array.find(predicate);
}

function findIndex(predicate, array) {
  var matchValue = array.findIndex(predicate);

  if (matchValue > -1) {
    return matchValue | 0;
  } else {
    return indexNotFound() | 0;
  }
}

function tryFindIndex(predicate, array) {
  var matchValue = array.findIndex(predicate);

  if (matchValue > -1) {
    return matchValue;
  } else {
    return void 0;
  }
}

function pick(chooser, array) {
  var loop = function loop(i_mut) {
    loop: while (true) {
      var i = i_mut;

      if (i >= array.length) {
        return indexNotFound();
      } else {
        var matchValue = chooser(array[i]);

        if (matchValue != null) {
          return (0, _Option.value)(matchValue);
        } else {
          i_mut = i + 1;
          continue loop;
        }
      }

      break;
    }
  };

  return loop(0);
}

function tryPick(chooser, array) {
  var loop = function loop(i_mut) {
    loop: while (true) {
      var i = i_mut;

      if (i >= array.length) {
        return void 0;
      } else {
        var matchValue = chooser(array[i]);

        if (matchValue == null) {
          i_mut = i + 1;
          continue loop;
        } else {
          return matchValue;
        }
      }

      break;
    }
  };

  return loop(0);
}

function findBack(predicate, array) {
  var loop = function loop(i_mut) {
    loop: while (true) {
      var i = i_mut;

      if (i < 0) {
        return indexNotFound();
      } else if (predicate(array[i])) {
        return array[i];
      } else {
        i_mut = i - 1;
        continue loop;
      }

      break;
    }
  };

  return loop(array.length - 1);
}

function tryFindBack(predicate, array) {
  var loop = function loop(i_mut) {
    loop: while (true) {
      var i = i_mut;

      if (i < 0) {
        return void 0;
      } else if (predicate(array[i])) {
        return (0, _Option.some)(array[i]);
      } else {
        i_mut = i - 1;
        continue loop;
      }

      break;
    }
  };

  return loop(array.length - 1);
}

function findLastIndex(predicate, array) {
  var loop = function loop(i_mut) {
    loop: while (true) {
      var i = i_mut;

      if (i < 0) {
        return -1;
      } else if (predicate(array[i])) {
        return i | 0;
      } else {
        i_mut = i - 1;
        continue loop;
      }

      break;
    }
  };

  return loop(array.length - 1) | 0;
}

function findIndexBack(predicate, array) {
  var loop = function loop(i_mut) {
    loop: while (true) {
      var i = i_mut;

      if (i < 0) {
        return indexNotFound() | 0;
      } else if (predicate(array[i])) {
        return i | 0;
      } else {
        i_mut = i - 1;
        continue loop;
      }

      break;
    }
  };

  return loop(array.length - 1) | 0;
}

function tryFindIndexBack(predicate, array) {
  var loop = function loop(i_mut) {
    loop: while (true) {
      var i = i_mut;

      if (i < 0) {
        return void 0;
      } else if (predicate(array[i])) {
        return i;
      } else {
        i_mut = i - 1;
        continue loop;
      }

      break;
    }
  };

  return loop(array.length - 1);
}

function choose(chooser, array, cons) {
  return map(function (x_1) {
    return (0, _Option.value)(chooser(x_1));
  }, array.filter(function (x) {
    return chooser(x) != null;
  }), cons);
}

function foldIndexed(folder, state, array) {
  return array.reduce(function (delegateArg0, delegateArg1, delegateArg2) {
    return folder(delegateArg2, delegateArg0, delegateArg1);
  }, state);
}

function fold(folder, state, array) {
  return array.reduce(folder, state);
}

function iterate(action, array) {
  for (var i = 0; i <= array.length - 1; i++) {
    action(array[i]);
  }
}

function iterateIndexed(action, array) {
  for (var i = 0; i <= array.length - 1; i++) {
    action(i, array[i]);
  }
}

function iterate2(action, array1, array2) {
  if (array1.length !== array2.length) {
    differentLengths();
  }

  for (var i = 0; i <= array1.length - 1; i++) {
    action(array1[i], array2[i]);
  }
}

function iterateIndexed2(action, array1, array2) {
  if (array1.length !== array2.length) {
    differentLengths();
  }

  for (var i = 0; i <= array1.length - 1; i++) {
    action(i, array1[i], array2[i]);
  }
}

function isEmpty(array) {
  return array.length === 0;
}

function forAll(predicate, array) {
  return array.every(predicate);
}

function permute(f, array) {
  var size = array.length | 0;
  var res = array.slice();
  var checkFlags = new Array(size);
  iterateIndexed(function (i, x) {
    var j = f(i) | 0;

    if (j < 0 ? true : j >= size) {
      throw new Error("Not a valid permutation");
    }

    res[j] = x;
    checkFlags[j] = 1;
  }, array);

  if (!checkFlags.every(function (y) {
    return 1 === y;
  })) {
    throw new Error("Not a valid permutation");
  }

  return res;
}

function setSlice(target, lower, upper, source) {
  var lower_1 = (0, _Option.defaultArg)(lower, 0) | 0;
  var upper_1 = (0, _Option.defaultArg)(upper, 0) | 0;
  var length = (upper_1 > 0 ? upper_1 : target.length - 1) - lower_1 | 0;

  for (var i = 0; i <= length; i++) {
    target[i + lower_1] = source[i];
  }
}

function sortInPlaceBy(projection, xs, comparer) {
  xs.sort(function (x, y) {
    return comparer.Compare(projection(x), projection(y));
  });
}

function sortInPlace(xs, comparer) {
  xs.sort(function (x, y) {
    return comparer.Compare(x, y);
  });
}

function sort(xs, comparer) {
  var xs_1 = xs.slice();
  xs_1.sort(function (x, y) {
    return comparer.Compare(x, y);
  });
  return xs_1;
}

function sortBy(projection, xs, comparer) {
  var xs_1 = xs.slice();
  xs_1.sort(function (x, y) {
    return comparer.Compare(projection(x), projection(y));
  });
  return xs_1;
}

function sortDescending(xs, comparer) {
  var xs_1 = xs.slice();
  xs_1.sort(function (x, y) {
    return comparer.Compare(x, y) * -1;
  });
  return xs_1;
}

function sortByDescending(projection, xs, comparer) {
  var xs_1 = xs.slice();
  xs_1.sort(function (x, y) {
    return comparer.Compare(projection(x), projection(y)) * -1;
  });
  return xs_1;
}

function sortWith(comparer, xs) {
  var comparer_1 = comparer;
  var xs_1 = xs.slice();
  xs_1.sort(comparer_1);
  return xs_1;
}

function unfold(generator, state) {
  var res = [];

  var loop = function loop(state_1_mut) {
    loop: while (true) {
      var state_1 = state_1_mut;
      var matchValue = generator(state_1);

      if (matchValue != null) {
        var x = matchValue[0];
        var s = matchValue[1];
        var value = res.push(x);
        void value;
        state_1_mut = s;
        continue loop;
      }

      break;
    }
  };

  loop(state);
  return res;
}

function unzip(array) {
  var len = array.length | 0;
  var res1 = new Array(len);
  var res2 = new Array(len);
  iterateIndexed(function (i, tupledArg) {
    res1[i] = tupledArg[0];
    res2[i] = tupledArg[1];
  }, array);
  return [res1, res2];
}

function unzip3(array) {
  var len = array.length | 0;
  var res1 = new Array(len);
  var res2 = new Array(len);
  var res3 = new Array(len);
  iterateIndexed(function (i, tupledArg) {
    res1[i] = tupledArg[0];
    res2[i] = tupledArg[1];
    res3[i] = tupledArg[2];
  }, array);
  return [res1, res2, res3];
}

function zip(array1, array2) {
  if (array1.length !== array2.length) {
    differentLengths();
  }

  var result = new Array(array1.length);

  for (var i = 0; i <= array1.length - 1; i++) {
    result[i] = [array1[i], array2[i]];
  }

  return result;
}

function zip3(array1, array2, array3) {
  if (array1.length !== array2.length ? true : array2.length !== array3.length) {
    differentLengths();
  }

  var result = new Array(array1.length);

  for (var i = 0; i <= array1.length - 1; i++) {
    result[i] = [array1[i], array2[i], array3[i]];
  }

  return result;
}

function chunkBySize(chunkSize, array) {
  if (chunkSize < 1) {
    throw new Error("The input must be positive.\\nParameter name: size");
  }

  if (array.length === 0) {
    return [[]];
  } else {
    var result = [];

    for (var x = 0; x <= ~~Math.ceil(array.length / chunkSize) - 1; x++) {
      var slice = void 0;
      var start_1 = x * chunkSize | 0;
      slice = array.slice(start_1, start_1 + chunkSize);
      var value = result.push(slice);
      void value;
    }

    return result;
  }
}

function splitAt(index, array) {
  var start;

  if (index < 0) {
    throw new Error("The input must be non-negative\\nParameter name: index");
  }

  if (index > array.length) {
    throw new Error("The input sequence has an insufficient number of elements.\\nParameter name: index");
  }

  return [(start = 0, array.slice(start, start + index)), array.slice(index)];
}

function compareWith(comparer, array1, array2) {
  if (array1 == null) {
    if (array2 == null) {
      return 0;
    } else {
      return -1;
    }
  } else if (array2 == null) {
    return 1;
  } else {
    var i = 0;
    var result = 0;
    var length1 = array1.length | 0;
    var length2 = array2.length | 0;

    if (length1 > length2) {
      return 1;
    } else if (length1 < length2) {
      return -1;
    } else {
      while (i < length1 ? result === 0 : false) {
        result = comparer(array1[i], array2[i]);
        i = i + 1;
      }

      return result | 0;
    }
  }
}

function equalsWith(comparer, array1, array2) {
  return compareWith(_Util.compare, array1, array2) === 0;
}

function exactlyOne(array) {
  if (array.length === 1) {
    return array[0];
  } else if (array.length === 0) {
    throw new Error("The input sequence was empty\\nParameter name: array");
  } else {
    throw new Error("Input array too long\\nParameter name: array");
  }
}

function head(array) {
  if (array.length === 0) {
    throw new Error("The input array was empty\\nParameter name: array");
  } else {
    return array[0];
  }
}

function tryHead(array) {
  if (array.length === 0) {
    return void 0;
  } else {
    return (0, _Option.some)(array[0]);
  }
}

function tail(array) {
  if (array.length === 0) {
    throw new Error("Not enough elements\\nParameter name: array");
  }

  return array.slice(1);
}

function item(index, array) {
  return array[index];
}

function tryItem(index, array) {
  if (index < 0 ? true : index >= array.length) {
    return void 0;
  } else {
    return (0, _Option.some)(array[index]);
  }
}

function foldBackIndexed(folder, array, state) {
  return array.reduceRight(function (delegateArg0, delegateArg1, delegateArg2) {
    return folder(delegateArg2, delegateArg1, delegateArg0);
  }, state);
}

function foldBack(folder, array, state) {
  return array.reduceRight(function (delegateArg0, delegateArg1) {
    return folder(delegateArg1, delegateArg0);
  }, state);
}

function foldIndexed2(folder, state, array1, array2) {
  var acc = state;

  if (array1.length !== array2.length) {
    throw new Error("Arrays have different lengths");
  }

  for (var i = 0; i <= array1.length - 1; i++) {
    acc = folder(i, acc, array1[i], array2[i]);
  }

  return acc;
}

function fold2(folder, state, array1, array2) {
  return foldIndexed2(function (_arg1, acc, x, y) {
    return folder(acc, x, y);
  }, state, array1, array2);
}

function foldBackIndexed2(folder, array1, array2, state) {
  var acc = state;

  if (array1.length !== array2.length) {
    differentLengths();
  }

  var size = array1.length | 0;

  for (var i = 1; i <= size; i++) {
    acc = folder(i - 1, array1[size - i], array2[size - i], acc);
  }

  return acc;
}

function foldBack2(f, array1, array2, state) {
  return foldBackIndexed2(function (_arg1, x, y, acc) {
    return f(x, y, acc);
  }, array1, array2, state);
}

function reduce(reduction, array) {
  if (array.length === 0) {
    throw new Error("The input array was empty");
  }

  var reduction_1 = reduction;
  return array.reduce(reduction_1);
}

function reduceBack(reduction, array) {
  if (array.length === 0) {
    throw new Error("The input array was empty");
  }

  var reduction_1 = reduction;
  return array.reduceRight(reduction_1);
}

function forAll2(predicate, array1, array2) {
  return fold2(function (acc, x, y) {
    return acc ? predicate(x, y) : false;
  }, true, array1, array2);
}

function existsOffset(predicate_mut, array_mut, index_mut) {
  existsOffset: while (true) {
    var predicate = predicate_mut,
        array = array_mut,
        index = index_mut;

    if (index === array.length) {
      return false;
    } else if (predicate(array[index])) {
      return true;
    } else {
      predicate_mut = predicate;
      array_mut = array;
      index_mut = index + 1;
      continue existsOffset;
    }

    break;
  }
}

function exists(predicate, array) {
  return existsOffset(predicate, array, 0);
}

function existsOffset2(predicate_mut, array1_mut, array2_mut, index_mut) {
  existsOffset2: while (true) {
    var predicate = predicate_mut,
        array1 = array1_mut,
        array2 = array2_mut,
        index = index_mut;

    if (index === array1.length) {
      return false;
    } else if (predicate(array1[index], array2[index])) {
      return true;
    } else {
      predicate_mut = predicate;
      array1_mut = array1;
      array2_mut = array2;
      index_mut = index + 1;
      continue existsOffset2;
    }

    break;
  }
}

function exists2(predicate, array1, array2) {
  if (array1.length !== array2.length) {
    differentLengths();
  }

  return existsOffset2(predicate, array1, array2, 0);
}

function sum(array, adder) {
  var acc = adder.GetZero();

  for (var i = 0; i <= array.length - 1; i++) {
    acc = adder.Add(acc, array[i]);
  }

  return acc;
}

function sumBy(projection, array, adder) {
  var acc = adder.GetZero();

  for (var i = 0; i <= array.length - 1; i++) {
    acc = adder.Add(acc, projection(array[i]));
  }

  return acc;
}

function maxBy(projection, xs, comparer) {
  return reduce(function (x, y) {
    return comparer.Compare(projection(y), projection(x)) > 0 ? y : x;
  }, xs);
}

function max(xs, comparer) {
  return reduce(function (x, y) {
    return comparer.Compare(y, x) > 0 ? y : x;
  }, xs);
}

function minBy(projection, xs, comparer) {
  return reduce(function (x, y) {
    return comparer.Compare(projection(y), projection(x)) > 0 ? x : y;
  }, xs);
}

function min(xs, comparer) {
  return reduce(function (x, y) {
    return comparer.Compare(y, x) > 0 ? x : y;
  }, xs);
}

function average(array, averager) {
  if (array.length === 0) {
    throw new Error("The input array was empty\\nParameter name: array");
  }

  var total = averager.GetZero();

  for (var i = 0; i <= array.length - 1; i++) {
    total = averager.Add(total, array[i]);
  }

  return averager.DivideByInt(total, array.length);
}

function averageBy(projection, array, averager) {
  if (array.length === 0) {
    throw new Error("The input array was empty\\nParameter name: array");
  }

  var total = averager.GetZero();

  for (var i = 0; i <= array.length - 1; i++) {
    total = averager.Add(total, projection(array[i]));
  }

  return averager.DivideByInt(total, array.length);
}

function windowed(windowSize, source) {
  if (windowSize <= 0) {
    throw new Error("windowSize must be positive");
  }

  var res;
  var len = (0, _Util.max)(_Util.comparePrimitives, 0, source.length - windowSize) | 0;
  res = new Array(len);

  for (var i = windowSize; i <= source.length; i++) {
    res[i - windowSize] = source.slice(i - windowSize, i - 1 + 1);
  }

  return res;
}

function splitInto(chunks, array) {
  if (chunks < 1) {
    throw new Error("The input must be positive.\\nParameter name: chunks");
  }

  if (array.length === 0) {
    return [[]];
  } else {
    var result = [];
    var chunks_1 = (0, _Util.min)(_Util.comparePrimitives, chunks, array.length) | 0;
    var minChunkSize = ~~(array.length / chunks_1) | 0;
    var chunksWithExtraItem = array.length % chunks_1 | 0;

    for (var i = 0; i <= chunks_1 - 1; i++) {
      var chunkSize = (i < chunksWithExtraItem ? minChunkSize + 1 : minChunkSize) | 0;
      var slice = void 0;
      var start_1 = i * minChunkSize + (0, _Util.min)(_Util.comparePrimitives, chunksWithExtraItem, i) | 0;
      slice = array.slice(start_1, start_1 + chunkSize);
      var value = result.push(slice);
      void value;
    }

    return result;
  }
}

function transpose(arrays, cons) {
  var arrays_1 = Array.isArray(arrays) ? arrays : Array.from(arrays);
  var len = arrays_1.length | 0;

  if (len === 0) {
    return new Array(0);
  } else {
    var lenInner = arrays_1[0].length | 0;

    if (!forAll(function (a) {
      return a.length === lenInner;
    }, arrays_1)) {
      differentLengths();
    }

    var result = new Array(lenInner);

    for (var i = 0; i <= lenInner - 1; i++) {
      result[i] = new (cons || Array)(len);

      for (var j = 0; j <= len - 1; j++) {
        result[i][j] = arrays_1[j][i];
      }
    }

    return result;
  }
}
},{"./Option.js":"../src/.fable/fable-library.3.0.0/Option.js","./Util.js":"../src/.fable/fable-library.3.0.0/Util.js","./MutableMap.js":"../src/.fable/fable-library.3.0.0/MutableMap.js","./MapUtil.js":"../src/.fable/fable-library.3.0.0/MapUtil.js","./Types.js":"../src/.fable/fable-library.3.0.0/Types.js","./MutableSet.js":"../src/.fable/fable-library.3.0.0/MutableSet.js","./Seq.js":"../src/.fable/fable-library.3.0.0/Seq.js"}],"../src/optionex.fs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.call = call;
exports.run = run;
exports.runWhenNone = runWhenNone;
exports.execute = execute;
exports.executeDefault = executeDefault;
exports.calcDef = calcDef;

var _Option = require("./.fable/fable-library.3.0.0/Option.js");

function call(f, opt) {
  if (opt == null) {} else {
    var x = (0, _Option.value)(opt);
    f(x);
  }
}

function run(f, opt) {
  if (opt == null) {} else {
    var x = (0, _Option.value)(opt);
    f(x);
  }
}

function runWhenNone(f, opt) {
  if (opt == null) {
    f();
  }
}

function execute(f, opt) {
  if (opt == null) {
    return void 0;
  } else {
    var x = (0, _Option.value)(opt);
    return (0, _Option.some)(f(x));
  }
}

function executeDefault(def, f, opt) {
  if (opt == null) {
    return def;
  } else {
    var x = (0, _Option.value)(opt);
    return f(x);
  }
}

function calcDef(f, opt) {
  if (opt == null) {
    return f();
  } else {
    var x = (0, _Option.value)(opt);
    return x;
  }
}
},{"./.fable/fable-library.3.0.0/Option.js":"../src/.fable/fable-library.3.0.0/Option.js"}],"../src/vectors.fs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Vec2$reflection = Vec2$reflection;
exports.Vec2_$ctor_Z33A93963 = Vec2_$ctor_Z33A93963;
exports.Vec2_Create = Vec2_Create;
exports.Vec2_Create_5E38073B = Vec2_Create_5E38073B;
exports.Vec2_Create_7B00E9A0 = Vec2_Create_7B00E9A0;
exports.Vec2__get_Values = Vec2__get_Values;
exports.Vec2__get_IntValues = Vec2__get_IntValues;
exports.Vec2__Clone = Vec2__Clone;
exports.Vec2__Add_62A868F5 = Vec2__Add_62A868F5;
exports.Vec2__AddM_Z66910A61 = Vec2__AddM_Z66910A61;
exports.Vec2__Sub_62A868F5 = Vec2__Sub_62A868F5;
exports.Vec2__Scale_Z7F22D0EF = Vec2__Scale_Z7F22D0EF;
exports.Vec2__Mult_62A868F5 = Vec2__Mult_62A868F5;
exports.Vec2__Div_62A868F5 = Vec2__Div_62A868F5;
exports.Vec2__Negate_Z5A1A3E76 = Vec2__Negate_Z5A1A3E76;
exports.Vec2__Normalize_Z5A1A3E76 = Vec2__Normalize_Z5A1A3E76;
exports.Vec2__Rotate_Z483EFB07 = Vec2__Rotate_Z483EFB07;
exports.Vec2__SetAngle_Z483EFB07 = Vec2__SetAngle_Z483EFB07;
exports.Vec2__Perp_Z5A1A3E76 = Vec2__Perp_Z5A1A3E76;
exports.Vec2__PerpLeft_Z5A1A3E76 = Vec2__PerpLeft_Z5A1A3E76;
exports.Vec2__PerpRight_Z5A1A3E76 = Vec2__PerpRight_Z5A1A3E76;
exports.Vec2__PerpToward_62A868F5 = Vec2__PerpToward_62A868F5;
exports.Vec2__Min_62A868F5 = Vec2__Min_62A868F5;
exports.Vec2__Max_62A868F5 = Vec2__Max_62A868F5;
exports.Vec2__WithXY_7EFBDC2A = Vec2__WithXY_7EFBDC2A;
exports.Vec2__WithX_Z7F22D0EF = Vec2__WithX_Z7F22D0EF;
exports.Vec2__WithY_Z7F22D0EF = Vec2__WithY_Z7F22D0EF;
exports.Vec2_op_UnaryNegation_Z66910A61 = Vec2_op_UnaryNegation_Z66910A61;
exports.Vec2_op_TwiddleMinusDot_Z66910A61 = Vec2_op_TwiddleMinusDot_Z66910A61;
exports.Vec2_op_BangBang_Z66910A61 = Vec2_op_BangBang_Z66910A61;
exports.Vec2_op_BangBangEquals_Z66910A61 = Vec2_op_BangBangEquals_Z66910A61;
exports.Vec2_op_Addition_Z668A51BC = Vec2_op_Addition_Z668A51BC;
exports.Vec2_op_Addition_Z43A9E4FC = Vec2_op_Addition_Z43A9E4FC;
exports.Vec2_op_Addition_5E235CE0 = Vec2_op_Addition_5E235CE0;
exports.Vec2_op_AdditionAssignment_Z668A51BC = Vec2_op_AdditionAssignment_Z668A51BC;
exports.Vec2_op_AdditionAssignment_Z43A9E4FC = Vec2_op_AdditionAssignment_Z43A9E4FC;
exports.Vec2_op_AdditionAssignment_5E235CE0 = Vec2_op_AdditionAssignment_5E235CE0;
exports.Vec2_op_Subtraction_Z668A51BC = Vec2_op_Subtraction_Z668A51BC;
exports.Vec2_op_Subtraction_Z43A9E4FC = Vec2_op_Subtraction_Z43A9E4FC;
exports.Vec2_op_Subtraction_5E235CE0 = Vec2_op_Subtraction_5E235CE0;
exports.Vec2_op_SubtractionAssignment_Z668A51BC = Vec2_op_SubtractionAssignment_Z668A51BC;
exports.Vec2_op_SubtractionAssignment_Z43A9E4FC = Vec2_op_SubtractionAssignment_Z43A9E4FC;
exports.Vec2_op_SubtractionAssignment_5E235CE0 = Vec2_op_SubtractionAssignment_5E235CE0;
exports.Vec2_op_Multiply_Z668A51BC = Vec2_op_Multiply_Z668A51BC;
exports.Vec2_op_Multiply_Z43A9E4FC = Vec2_op_Multiply_Z43A9E4FC;
exports.Vec2_op_MultiplyAssignment_Z668A51BC = Vec2_op_MultiplyAssignment_Z668A51BC;
exports.Vec2_op_MultiplyAssignment_Z43A9E4FC = Vec2_op_MultiplyAssignment_Z43A9E4FC;
exports.Vec2_op_Multiply_5E235CE0 = Vec2_op_Multiply_5E235CE0;
exports.Vec2_op_MultiplyAssignment_5E235CE0 = Vec2_op_MultiplyAssignment_5E235CE0;
exports.Vec2_op_Division_Z668A51BC = Vec2_op_Division_Z668A51BC;
exports.Vec2_op_Division_Z43A9E4FC = Vec2_op_Division_Z43A9E4FC;
exports.Vec2_op_Division_5E235CE0 = Vec2_op_Division_5E235CE0;
exports.Vec2_op_DivisionAssignment_Z668A51BC = Vec2_op_DivisionAssignment_Z668A51BC;
exports.Vec2_op_DivisionAssignment_5E235CE0 = Vec2_op_DivisionAssignment_5E235CE0;
exports.Vec2_op_Modulus_Z668A51BC = Vec2_op_Modulus_Z668A51BC;
exports.Vec2_op_Modulus_Z43A9E4FC = Vec2_op_Modulus_Z43A9E4FC;
exports.Vec2_op_Modulus_5E235CE0 = Vec2_op_Modulus_5E235CE0;
exports.Vec2_op_PercentEquals_5E235CE0 = Vec2_op_PercentEquals_5E235CE0;
exports.Vec2_op_DotMultiply_5E235CE0 = Vec2_op_DotMultiply_5E235CE0;
exports.Vec2_op_PlusMultiply_5E235CE0 = Vec2_op_PlusMultiply_5E235CE0;
exports.Vec2Module_vec2 = Vec2Module_vec2;
exports.Vec3$reflection = Vec3$reflection;
exports.Vec3_$ctor_Z14AF5965 = Vec3_$ctor_Z14AF5965;
exports.Vec3_Create = Vec3_Create;
exports.Vec3_Create_5E38073B = Vec3_Create_5E38073B;
exports.Vec3_Create_8ED0A5D = Vec3_Create_8ED0A5D;
exports.Vec3_Create_39DFA7C2 = Vec3_Create_39DFA7C2;
exports.Vec3__get_Values = Vec3__get_Values;
exports.Vec3__get_IntValues = Vec3__get_IntValues;
exports.Vec3__Clone = Vec3__Clone;
exports.Vec3__CrossM_Z66910A62 = Vec3__CrossM_Z66910A62;
exports.Vec3__Add_62A868B5 = Vec3__Add_62A868B5;
exports.Vec3__AddM_Z66910A62 = Vec3__AddM_Z66910A62;
exports.Vec3__Sub_62A868B5 = Vec3__Sub_62A868B5;
exports.Vec3__Scale_753627B6 = Vec3__Scale_753627B6;
exports.Vec3__Negate_Z5A1A3E15 = Vec3__Negate_Z5A1A3E15;
exports.Vec3__Normalize_Z5A1A3E15 = Vec3__Normalize_Z5A1A3E15;
exports.Vec3__WithXYZ_Z7C946BEA = Vec3__WithXYZ_Z7C946BEA;
exports.Vec3__WithXY_539AC50B = Vec3__WithXY_539AC50B;
exports.Vec3__WithXY_62A86894 = Vec3__WithXY_62A86894;
exports.Vec3__WithXY_62A868B5 = Vec3__WithXY_62A868B5;
exports.Vec3__WithXZ_539AC50B = Vec3__WithXZ_539AC50B;
exports.Vec3__WithXZ_62A86894 = Vec3__WithXZ_62A86894;
exports.Vec3__WithXZ_62A868B5 = Vec3__WithXZ_62A868B5;
exports.Vec3__WithYZ_539AC50B = Vec3__WithYZ_539AC50B;
exports.Vec3__WithYZ_62A86894 = Vec3__WithYZ_62A86894;
exports.Vec3__WithYZ_62A868B5 = Vec3__WithYZ_62A868B5;
exports.Vec3_op_UnaryNegation_Z66910A62 = Vec3_op_UnaryNegation_Z66910A62;
exports.Vec3_op_TwiddleMinusDot_Z66910A62 = Vec3_op_TwiddleMinusDot_Z66910A62;
exports.Vec3_op_BangBang_Z66910A62 = Vec3_op_BangBang_Z66910A62;
exports.Vec3_op_BangBangEquals_Z66910A62 = Vec3_op_BangBangEquals_Z66910A62;
exports.Vec3_op_Addition_5E235CC0 = Vec3_op_Addition_5E235CC0;
exports.Vec3_op_AdditionAssignment_5E235CC0 = Vec3_op_AdditionAssignment_5E235CC0;
exports.Vec3_op_Subtraction_5E235CC0 = Vec3_op_Subtraction_5E235CC0;
exports.Vec3_op_SubtractionAssignment_5E235CC0 = Vec3_op_SubtractionAssignment_5E235CC0;
exports.Vec3_op_Multiply_39DFA7E3 = Vec3_op_Multiply_39DFA7E3;
exports.Vec3_op_Multiply_49BD13C3 = Vec3_op_Multiply_49BD13C3;
exports.Vec3_op_MultiplyAssignment_39DFA7E3 = Vec3_op_MultiplyAssignment_39DFA7E3;
exports.Vec3_op_MultiplyAssignment_49BD13C3 = Vec3_op_MultiplyAssignment_49BD13C3;
exports.Vec3_op_DotMultiply_5E235CC0 = Vec3_op_DotMultiply_5E235CC0;
exports.Vec3_op_PlusMultiply_5E235CC0 = Vec3_op_PlusMultiply_5E235CC0;
exports.Vec3__get_XY = Vec3__get_XY;
exports.Vec3Module_vec3 = Vec3Module_vec3;
exports.Vec4$reflection = Vec4$reflection;
exports.Vec4_$ctor_Z14AF5965 = Vec4_$ctor_Z14AF5965;
exports.Vec4_Create_Z27E3A4C0 = Vec4_Create_Z27E3A4C0;
exports.Vec4_Create_Z16DF143 = Vec4_Create_Z16DF143;
exports.Vec4_Create = Vec4_Create;
exports.Vec4__get_Values = Vec4__get_Values;
exports.Vec4__get_IntValues = Vec4__get_IntValues;
exports.Vec4__Clone = Vec4__Clone;
exports.Vec4__Add_62A869F5 = Vec4__Add_62A869F5;
exports.Vec4__AddM_Z66910A67 = Vec4__AddM_Z66910A67;
exports.Vec4__Sub_62A869F5 = Vec4__Sub_62A869F5;
exports.Vec4__Scale_75362711 = Vec4__Scale_75362711;
exports.Vec4__Negate_Z5A1A3EB4 = Vec4__Negate_Z5A1A3EB4;
exports.Vec4__Normalize_Z5A1A3EB4 = Vec4__Normalize_Z5A1A3EB4;
exports.Vec4Module_vec4 = Vec4Module_vec4;
exports.Vec4 = exports.Vec3 = exports.Vec2 = void 0;

var _Util = require("./.fable/fable-library.3.0.0/Util.js");

var _Array = require("./.fable/fable-library.3.0.0/Array.js");

var _String = require("./.fable/fable-library.3.0.0/String.js");

var _Types = require("./.fable/fable-library.3.0.0/Types.js");

var _Reflection = require("./.fable/fable-library.3.0.0/Reflection.js");

var _optionexFs = require("./optionex.fs.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Vec2 = /*#__PURE__*/function () {
  function Vec2(values) {
    _classCallCheck(this, Vec2);

    this.v = new _Types.FSharpRef(null);
    var v = this.v;
    this.values = values;
    this.v.contents = this;
    this["Values@"] = this.values;
    this["init@5"] = 1;
  }

  _createClass(Vec2, [{
    key: "GetHashCode",
    value: function GetHashCode() {
      var _ = this;

      return (0, _Util.identityHash)(Vec2__get_Values(_.v.contents)) | 0;
    }
  }, {
    key: "Equals",
    value: function Equals(other) {
      var o;

      var _ = this;

      return other instanceof Vec2 ? (o = other, (0, _Array.equalsWith)(_Util.comparePrimitives, Vec2__get_Values(_.v.contents), Vec2__get_Values(o))) : false;
    }
  }, {
    key: "toString",
    value: function toString() {
      var _ = this;

      var arg20 = _.v.contents.values[1];
      var arg10 = _.v.contents.values[0];
      return (0, _String.toText)((0, _String.printf)("[%.2f, %.2f]"))(arg10)(arg20);
    }
  }]);

  return Vec2;
}();

exports.Vec2 = Vec2;

function Vec2$reflection() {
  return (0, _Reflection.class_type)("Wil.Vectors.Vec2", void 0, Vec2);
}

function Vec2_$ctor_Z33A93963(values) {
  return new Vec2(values);
}

function Vec2_Create() {
  return Vec2_$ctor_Z33A93963(new Float64Array([0, 0]));
}

function Vec2_Create_5E38073B(x) {
  return Vec2_$ctor_Z33A93963(new Float64Array([x, x]));
}

function Vec2_Create_7B00E9A0(x, y) {
  return Vec2_$ctor_Z33A93963(new Float64Array([x, y]));
}

function Vec2__get_Values(__) {
  return __["Values@"];
}

function Vec2__get_IntValues(_) {
  return new Int32Array([~~_.values[0], ~~_.values[1]]);
}

function Vec2__Clone(_) {
  return Vec2_$ctor_Z33A93963(new Float64Array([_.v.contents.values[0], _.v.contents.values[1]]));
}

function Vec2__Add_62A868F5(_, other, result) {
  var result_1 = (0, _optionexFs.calcDef)(Vec2_Create, result);
  var __5 = result_1;
  var x = _.v.contents.values[0] + other.values[0];
  var y = _.v.contents.values[1] + other.values[1];
  var __6 = __5.v.contents;
  __6.values[0] = x;
  var __7 = __5.v.contents;
  __7.values[1] = y;
  return __5.v.contents;
}

function Vec2__AddM_Z66910A61(_, other) {
  var value = Vec2__Add_62A868F5(_.v.contents, other, _.v.contents);
  void value;
}

function Vec2__Sub_62A868F5(_, other, result) {
  var result_1 = (0, _optionexFs.calcDef)(Vec2_Create, result);
  var __5 = result_1;
  var x = _.v.contents.values[0] - other.values[0];
  var y = _.v.contents.values[1] - other.values[1];
  var __6 = __5.v.contents;
  __6.values[0] = x;
  var __7 = __5.v.contents;
  __7.values[1] = y;
  return __5.v.contents;
}

function Vec2__Scale_Z7F22D0EF(_, s, result) {
  var result_1 = (0, _optionexFs.calcDef)(Vec2_Create, result);
  var __3 = result_1;
  var x = _.v.contents.values[0] * s;
  var y = _.v.contents.values[1] * s;
  var __4 = __3.v.contents;
  __4.values[0] = x;
  var __5 = __3.v.contents;
  __5.values[1] = y;
  return __3.v.contents;
}

function Vec2__Mult_62A868F5(_, other, result) {
  var result_1 = (0, _optionexFs.calcDef)(Vec2_Create, result);
  var __5 = result_1;
  var x = _.v.contents.values[0] * other.values[0];
  var y = _.v.contents.values[1] * other.values[1];
  var __6 = __5.v.contents;
  __6.values[0] = x;
  var __7 = __5.v.contents;
  __7.values[1] = y;
  return __5.v.contents;
}

function Vec2__Div_62A868F5(_, other, result) {
  var result_1 = (0, _optionexFs.calcDef)(Vec2_Create, result);
  var __5 = result_1;
  var x = _.v.contents.values[0] / other.values[0];
  var y = _.v.contents.values[1] / other.values[1];
  var __6 = __5.v.contents;
  __6.values[0] = x;
  var __7 = __5.v.contents;
  __7.values[1] = y;
  return __5.v.contents;
}

function Vec2__Negate_Z5A1A3E76(_, result) {
  var result_1 = (0, _optionexFs.calcDef)(Vec2_Create, result);
  var __3 = result_1;
  var x = -_.v.contents.values[0];
  var y = -_.v.contents.values[1];
  var __4 = __3.v.contents;
  __4.values[0] = x;
  var __5 = __3.v.contents;
  __5.values[1] = y;
  return __3.v.contents;
}

function Vec2__Normalize_Z5A1A3E76(_, result) {
  var result_1 = (0, _optionexFs.calcDef)(Vec2_Create, result);
  var mag;
  var __1 = _.v.contents;
  mag = Math.sqrt(__1.v.contents.values[0] * __1.v.contents.values[0] + __1.v.contents.values[1] * __1.v.contents.values[1]);

  if (mag < 1E-09) {
    var __6 = result_1;
    var __7 = __6.v.contents;
    __7.values[0] = 0;
    var __8 = __6.v.contents;
    __8.values[1] = 0;
    return __6.v.contents;
  } else {
    var magInv = 1 / mag;
    var __11 = result_1;
    var x_1 = _.v.contents.values[0] * magInv;
    var y_1 = _.v.contents.values[1] * magInv;
    var __12 = __11.v.contents;
    __12.values[0] = x_1;
    var __13 = __11.v.contents;
    __13.values[1] = y_1;
    return __11.v.contents;
  }
}

function Vec2__Rotate_Z483EFB07(_, angle, result) {
  var result_1 = (0, _optionexFs.calcDef)(Vec2_Create, result);
  var angle_1 = angle;
  var sin = Math.sin(angle_1);
  var cos = Math.cos(angle_1);
  var __5 = result_1;
  var x = _.v.contents.values[0] * cos - _.v.contents.values[1] * sin;
  var y = _.v.contents.values[0] * sin + _.v.contents.values[1] * cos;
  var __6 = __5.v.contents;
  __6.values[0] = x;
  var __7 = __5.v.contents;
  __7.values[1] = y;
  return __5.v.contents;
}

function Vec2__SetAngle_Z483EFB07(_, angle, result) {
  var result_1 = (0, _optionexFs.calcDef)(Vec2_Create, result);
  var mag;
  var __1 = _.v.contents;
  mag = Math.sqrt(__1.v.contents.values[0] * __1.v.contents.values[0] + __1.v.contents.values[1] * __1.v.contents.values[1]);
  var angle_1 = angle;
  var sin = Math.sin(angle_1);
  var cos = Math.cos(angle_1);
  var __6 = result_1;
  var x = cos * mag;
  var y = sin * mag;
  var __7 = __6.v.contents;
  __7.values[0] = x;
  var __8 = __6.v.contents;
  __8.values[1] = y;
  return __6.v.contents;
}

function Vec2__Perp_Z5A1A3E76(_, result) {
  var result_1 = (0, _optionexFs.calcDef)(Vec2_Create, result);
  var __3 = result_1;
  var x = -_.v.contents.values[1];
  var y = _.v.contents.values[0];
  var __4 = __3.v.contents;
  __4.values[0] = x;
  var __5 = __3.v.contents;
  __5.values[1] = y;
  return __3.v.contents;
}

function Vec2__PerpLeft_Z5A1A3E76(_, result) {
  var result_1 = (0, _optionexFs.calcDef)(Vec2_Create, result);
  var __3 = result_1;
  var x = -_.v.contents.values[1];
  var y = _.v.contents.values[0];
  var __4 = __3.v.contents;
  __4.values[0] = x;
  var __5 = __3.v.contents;
  __5.values[1] = y;
  return __3.v.contents;
}

function Vec2__PerpRight_Z5A1A3E76(_, result) {
  var result_1 = (0, _optionexFs.calcDef)(Vec2_Create, result);
  var __3 = result_1;
  var x = _.v.contents.values[1];
  var y = -_.v.contents.values[0];
  var __4 = __3.v.contents;
  __4.values[0] = x;
  var __5 = __3.v.contents;
  __5.values[1] = y;
  return __3.v.contents;
}

function Vec2__PerpToward_62A868F5(_, toward, result) {
  var __1, other;

  var result_1 = (0, _optionexFs.calcDef)(Vec2_Create, result);
  var sgn = (0, _Util.sign)((__1 = toward, (other = _.v.contents, __1.v.contents.values[0] * other.values[1] - __1.v.contents.values[1] * other.values[0])));
  var __8 = result_1;
  var x = _.v.contents.values[1] * sgn;
  var y = _.v.contents.values[0] * sgn;
  var __9 = __8.v.contents;
  __9.values[0] = x;
  var __10 = __8.v.contents;
  __10.values[1] = y;
  return __8.v.contents;
}

function Vec2__Min_62A868F5(_, other, result) {
  var result_1 = (0, _optionexFs.calcDef)(Vec2_Create, result);
  var __5 = result_1;
  var x_2 = (0, _Util.min)(_Util.comparePrimitives, _.v.contents.values[0], other.values[0]);
  var y_2 = (0, _Util.min)(_Util.comparePrimitives, _.v.contents.values[1], other.values[1]);
  var __6 = __5.v.contents;
  __6.values[0] = x_2;
  var __7 = __5.v.contents;
  __7.values[1] = y_2;
  return __5.v.contents;
}

function Vec2__Max_62A868F5(_, other, result) {
  var result_1 = (0, _optionexFs.calcDef)(Vec2_Create, result);
  var __5 = result_1;
  var x_2 = (0, _Util.max)(_Util.comparePrimitives, _.v.contents.values[0], other.values[0]);
  var y_2 = (0, _Util.max)(_Util.comparePrimitives, _.v.contents.values[1], other.values[1]);
  var __6 = __5.v.contents;
  __6.values[0] = x_2;
  var __7 = __5.v.contents;
  __7.values[1] = y_2;
  return __5.v.contents;
}

function Vec2__WithXY_7EFBDC2A(_, x, y, result) {
  var result_1 = (0, _optionexFs.calcDef)(Vec2_Create, result);
  var __1 = result_1;
  var __2 = __1.v.contents;
  __2.values[0] = x;
  var __3 = __1.v.contents;
  __3.values[1] = y;
  return __1.v.contents;
}

function Vec2__WithX_Z7F22D0EF(_, x, result) {
  var result_1 = (0, _optionexFs.calcDef)(Vec2_Create, result);
  result_1.values[0] = x;
  return result_1;
}

function Vec2__WithY_Z7F22D0EF(_, y, result) {
  var result_1 = (0, _optionexFs.calcDef)(Vec2_Create, result);
  result_1.values[1] = y;
  return result_1;
}

function Vec2_op_UnaryNegation_Z66910A61(v1) {
  return Vec2__Negate_Z5A1A3E76(v1);
}

function Vec2_op_TwiddleMinusDot_Z66910A61(v1) {
  var _ = v1;
  var value = Vec2__Negate_Z5A1A3E76(_.v.contents, _.v.contents);
  void value;
}

function Vec2_op_BangBang_Z66910A61(v1) {
  return Vec2__Normalize_Z5A1A3E76(v1);
}

function Vec2_op_BangBangEquals_Z66910A61(v1) {
  var _ = v1;
  var value = Vec2__Normalize_Z5A1A3E76(_.v.contents, _.v.contents);
  void value;
}

function Vec2_op_Addition_Z668A51BC(v1, value) {
  return Vec2_Create_7B00E9A0(v1.values[0] + value, v1.values[1] + value);
}

function Vec2_op_Addition_Z43A9E4FC(value, v1) {
  return Vec2_Create_7B00E9A0(v1.values[0] + value, v1.values[1] + value);
}

function Vec2_op_Addition_5E235CE0(v1, v2) {
  return Vec2__Add_62A868F5(v1, v2);
}

function Vec2_op_AdditionAssignment_Z668A51BC(v1, value) {
  var __2 = v1;
  var value_1 = Vec2__WithXY_7EFBDC2A(__2.v.contents, v1.values[0] + value, v1.values[1] + value, __2.v.contents);
  void value_1;
}

function Vec2_op_AdditionAssignment_Z43A9E4FC(value, v1) {
  var __2 = v1;
  var value_1 = Vec2__WithXY_7EFBDC2A(__2.v.contents, v1.values[0] + value, v1.values[1] + value, __2.v.contents);
  void value_1;
}

function Vec2_op_AdditionAssignment_5E235CE0(v1, v2) {
  Vec2__AddM_Z66910A61(v1, v2);
}

function Vec2_op_Subtraction_Z668A51BC(v1, value) {
  return Vec2_Create_7B00E9A0(v1.values[0] - value, v1.values[1] - value);
}

function Vec2_op_Subtraction_Z43A9E4FC(value, v1) {
  return Vec2_Create_7B00E9A0(value - v1.values[0], value - v1.values[1]);
}

function Vec2_op_Subtraction_5E235CE0(v1, v2) {
  return Vec2__Sub_62A868F5(v1, v2);
}

function Vec2_op_SubtractionAssignment_Z668A51BC(v1, value) {
  var __2 = v1;
  var value_1 = Vec2__WithXY_7EFBDC2A(__2.v.contents, v1.values[0] - value, v1.values[1] - value, __2.v.contents);
  void value_1;
}

function Vec2_op_SubtractionAssignment_Z43A9E4FC(value, v1) {
  var __2 = v1;
  var value_1 = Vec2__WithXY_7EFBDC2A(__2.v.contents, value - v1.values[0], value - v1.values[1], __2.v.contents);
  void value_1;
}

function Vec2_op_SubtractionAssignment_5E235CE0(v1, v2) {
  var _ = v1;
  var value = Vec2__Sub_62A868F5(_.v.contents, v2, _.v.contents);
  void value;
}

function Vec2_op_Multiply_Z668A51BC(v1, scale) {
  return Vec2__Scale_Z7F22D0EF(v1, scale);
}

function Vec2_op_Multiply_Z43A9E4FC(scale, v1) {
  return Vec2__Scale_Z7F22D0EF(v1, scale);
}

function Vec2_op_MultiplyAssignment_Z668A51BC(v1, scale) {
  var _ = v1;
  var value = Vec2__Scale_Z7F22D0EF(_.v.contents, scale, _.v.contents);
  void value;
}

function Vec2_op_MultiplyAssignment_Z43A9E4FC(scale, v1) {
  var _ = v1;
  var value = Vec2__Scale_Z7F22D0EF(_.v.contents, scale, _.v.contents);
  void value;
}

function Vec2_op_Multiply_5E235CE0(v1, v2) {
  return Vec2__Mult_62A868F5(v1, v2);
}

function Vec2_op_MultiplyAssignment_5E235CE0(v1, v2) {
  var _ = v1;
  var value = Vec2__Mult_62A868F5(_.v.contents, v2, _.v.contents);
  void value;
}

function Vec2_op_Division_Z668A51BC(v1, divisor) {
  return Vec2__Scale_Z7F22D0EF(v1, 1 / divisor);
}

function Vec2_op_Division_Z43A9E4FC(value, v1) {
  return Vec2_Create_7B00E9A0(value / v1.values[0], value / v1.values[1]);
}

function Vec2_op_Division_5E235CE0(v1, v2) {
  return Vec2__Div_62A868F5(v1, v2);
}

function Vec2_op_DivisionAssignment_Z668A51BC(v1, divisor) {
  var _ = v1;
  var value = Vec2__Scale_Z7F22D0EF(_.v.contents, 1 / divisor, _.v.contents);
  void value;
}

function Vec2_op_DivisionAssignment_5E235CE0(v1, v2) {
  var _ = v1;
  var value = Vec2__Div_62A868F5(_.v.contents, v2, _.v.contents);
  void value;
}

function Vec2_op_Modulus_Z668A51BC(v1, value) {
  return Vec2_Create_7B00E9A0(v1.values[0] % value, v1.values[1] % value);
}

function Vec2_op_Modulus_Z43A9E4FC(value, v1) {
  return Vec2_Create_7B00E9A0(value % v1.values[0], value % v1.values[1]);
}

function Vec2_op_Modulus_5E235CE0(v1, v2) {
  return Vec2_Create_7B00E9A0(v1.values[0] % v2.values[0], v1.values[1] % v2.values[1]);
}

function Vec2_op_PercentEquals_5E235CE0(v1, v2) {
  var __4 = v1;
  var value = Vec2__WithXY_7EFBDC2A(__4.v.contents, v1.values[0] % v2.values[0], v1.values[1] % v2.values[1], __4.v.contents);
  void value;
}

function Vec2_op_DotMultiply_5E235CE0(v1, v2) {
  var _ = v1;
  var other = v2;
  return _.v.contents.values[0] * other.values[0] + _.v.contents.values[1] * other.values[1];
}

function Vec2_op_PlusMultiply_5E235CE0(v1, v2) {
  var _ = v1;
  var other = v2;
  return _.v.contents.values[0] * other.values[1] - _.v.contents.values[1] * other.values[0];
}

function Vec2Module_vec2(x, y) {
  return Vec2_Create_7B00E9A0(x, y);
}

var Vec3 = /*#__PURE__*/function () {
  function Vec3(values) {
    _classCallCheck(this, Vec3);

    this.v = new _Types.FSharpRef(null);
    var v = this.v;
    this.values = values;
    this.v.contents = this;
    this["Values@"] = this.values;
    this["init@252-1"] = 1;
  }

  _createClass(Vec3, [{
    key: "GetHashCode",
    value: function GetHashCode() {
      var _ = this;

      return (0, _Util.identityHash)(Vec3__get_Values(_.v.contents)) | 0;
    }
  }, {
    key: "Equals",
    value: function Equals(other) {
      var o;

      var _ = this;

      return other instanceof Vec3 ? (o = other, (0, _Array.equalsWith)(_Util.comparePrimitives, Vec3__get_Values(_.v.contents), Vec3__get_Values(o))) : false;
    }
  }, {
    key: "toString",
    value: function toString() {
      var _ = this;

      var arg30 = _.v.contents.values[2];
      var arg20 = _.v.contents.values[1];
      var arg10 = _.v.contents.values[0];
      return (0, _String.toText)((0, _String.printf)("[%.2f, %.2f, %.2f]"))(arg10)(arg20)(arg30);
    }
  }]);

  return Vec3;
}();

exports.Vec3 = Vec3;

function Vec3$reflection() {
  return (0, _Reflection.class_type)("Wil.Vectors.Vec3", void 0, Vec3);
}

function Vec3_$ctor_Z14AF5965(values) {
  return new Vec3(values);
}

function Vec3_Create() {
  return Vec3_$ctor_Z14AF5965(new Float64Array([0, 0, 0]));
}

function Vec3_Create_5E38073B(x) {
  return Vec3_$ctor_Z14AF5965(new Float64Array([x, x, x]));
}

function Vec3_Create_8ED0A5D(x, y, z) {
  return Vec3_$ctor_Z14AF5965(new Float64Array([x, y, z]));
}

function Vec3_Create_39DFA7C2(v2, z) {
  return Vec3_$ctor_Z14AF5965(new Float64Array([v2.values[0], v2.values[1], z]));
}

function Vec3__get_Values(__) {
  return __["Values@"];
}

function Vec3__get_IntValues(_) {
  return new Int32Array([~~_.values[0], ~~_.values[1], ~~_.values[2]]);
}

function Vec3__Clone(_) {
  return Vec3_$ctor_Z14AF5965(new Float64Array([_.v.contents.values[0], _.v.contents.values[1], _.v.contents.values[2]]));
}

function Vec3__CrossM_Z66910A62(_, other) {
  var value_3;
  var __1 = _.v.contents;
  var other_1 = other;
  var result_1 = (0, _optionexFs.calcDef)(Vec3_Create, _.v.contents);
  var __14 = result_1;
  var x = __1.v.contents.values[1] * other_1.values[2] - __1.v.contents.values[2] * other_1.values[1];
  var y = __1.v.contents.values[2] * other_1.values[0] - __1.v.contents.values[0] * other_1.values[2];
  var z = __1.v.contents.values[0] * other_1.values[1] - __1.v.contents.values[1] * other_1.values[0];
  var __15 = __14.v.contents;
  __15.values[0] = x;
  var __16 = __14.v.contents;
  __16.values[1] = y;
  var __17 = __14.v.contents;
  __17.values[2] = z;
  value_3 = __14.v.contents;
  void value_3;
}

function Vec3__Add_62A868B5(_, other, result) {
  var result_1 = (0, _optionexFs.calcDef)(Vec3_Create, result);
  var __7 = result_1;
  var x = _.v.contents.values[0] + other.values[0];
  var y = _.v.contents.values[1] + other.values[1];
  var z = _.v.contents.values[2] + other.values[2];
  var __8 = __7.v.contents;
  __8.values[0] = x;
  var __9 = __7.v.contents;
  __9.values[1] = y;
  var __10 = __7.v.contents;
  __10.values[2] = z;
  return __7.v.contents;
}

function Vec3__AddM_Z66910A62(_, other) {
  var value = Vec3__Add_62A868B5(_.v.contents, other, _.v.contents);
  void value;
}

function Vec3__Sub_62A868B5(_, other, result) {
  var result_1 = (0, _optionexFs.calcDef)(Vec3_Create, result);
  var __7 = result_1;
  var x = _.v.contents.values[0] - other.values[0];
  var y = _.v.contents.values[1] - other.values[1];
  var z = _.v.contents.values[2] - other.values[2];
  var __8 = __7.v.contents;
  __8.values[0] = x;
  var __9 = __7.v.contents;
  __9.values[1] = y;
  var __10 = __7.v.contents;
  __10.values[2] = z;
  return __7.v.contents;
}

function Vec3__Scale_753627B6(_, s, result) {
  var result_1 = (0, _optionexFs.calcDef)(Vec3_Create, result);
  var __4 = result_1;
  var x = _.v.contents.values[0] * s;
  var y = _.v.contents.values[1] * s;
  var z = _.v.contents.values[2] * s;
  var __5 = __4.v.contents;
  __5.values[0] = x;
  var __6 = __4.v.contents;
  __6.values[1] = y;
  var __7 = __4.v.contents;
  __7.values[2] = z;
  return __4.v.contents;
}

function Vec3__Negate_Z5A1A3E15(_, result) {
  var result_1 = (0, _optionexFs.calcDef)(Vec3_Create, result);
  var __4 = result_1;
  var x = -_.v.contents.values[0];
  var y = -_.v.contents.values[1];
  var z = -_.v.contents.values[2];
  var __5 = __4.v.contents;
  __5.values[0] = x;
  var __6 = __4.v.contents;
  __6.values[1] = y;
  var __7 = __4.v.contents;
  __7.values[2] = z;
  return __4.v.contents;
}

function Vec3__Normalize_Z5A1A3E15(_, result) {
  var result_1 = (0, _optionexFs.calcDef)(Vec3_Create, result);
  var mag;
  var __1 = _.v.contents;
  mag = Math.sqrt(__1.v.contents.values[0] * __1.v.contents.values[0] + __1.v.contents.values[1] * __1.v.contents.values[1] + __1.v.contents.values[2] * __1.v.contents.values[2]);

  if (mag < 1E-09) {
    var __8 = result_1;
    var __9 = __8.v.contents;
    __9.values[0] = 0;
    var __10 = __8.v.contents;
    __10.values[1] = 0;
    var __11 = __8.v.contents;
    __11.values[2] = 0;
    return __8.v.contents;
  } else {
    var magInv = 1 / mag;
    var __15 = result_1;
    var x_1 = _.v.contents.values[0] * magInv;
    var y_1 = _.v.contents.values[1] * magInv;
    var z_1 = _.v.contents.values[2] * magInv;
    var __16 = __15.v.contents;
    __16.values[0] = x_1;
    var __17 = __15.v.contents;
    __17.values[1] = y_1;
    var __18 = __15.v.contents;
    __18.values[2] = z_1;
    return __15.v.contents;
  }
}

function Vec3__WithXYZ_Z7C946BEA(_, x, y, z, result) {
  var result_1 = (0, _optionexFs.calcDef)(Vec3_Create, result);
  var __1 = result_1;
  var __2 = __1.v.contents;
  __2.values[0] = x;
  var __3 = __1.v.contents;
  __3.values[1] = y;
  var __4 = __1.v.contents;
  __4.values[2] = z;
  return __1.v.contents;
}

function Vec3__WithXY_539AC50B(_, x, y, result) {
  var result_1 = (0, _optionexFs.calcDef)(Vec3_Create, result);
  var __2 = result_1;
  var z = _.v.contents.values[2];
  var __3 = __2.v.contents;
  __3.values[0] = x;
  var __4 = __2.v.contents;
  __4.values[1] = y;
  var __5 = __2.v.contents;
  __5.values[2] = z;
  return __2.v.contents;
}

function Vec3__WithXY_62A86894(_, other, result) {
  var result_1 = (0, _optionexFs.calcDef)(Vec3_Create, result);
  var __4 = result_1;
  var x = other.values[0];
  var y = other.values[1];
  var z = _.v.contents.values[2];
  var __5 = __4.v.contents;
  __5.values[0] = x;
  var __6 = __4.v.contents;
  __6.values[1] = y;
  var __7 = __4.v.contents;
  __7.values[2] = z;
  return __4.v.contents;
}

function Vec3__WithXY_62A868B5(_, other, result) {
  var result_1 = (0, _optionexFs.calcDef)(Vec3_Create, result);
  var __4 = result_1;
  var x = other.values[0];
  var y = other.values[1];
  var z = _.v.contents.values[2];
  var __5 = __4.v.contents;
  __5.values[0] = x;
  var __6 = __4.v.contents;
  __6.values[1] = y;
  var __7 = __4.v.contents;
  __7.values[2] = z;
  return __4.v.contents;
}

function Vec3__WithXZ_539AC50B(_, x, z, result) {
  var result_1 = (0, _optionexFs.calcDef)(Vec3_Create, result);
  var __2 = result_1;
  var y = _.v.contents.values[1];
  var __3 = __2.v.contents;
  __3.values[0] = x;
  var __4 = __2.v.contents;
  __4.values[1] = y;
  var __5 = __2.v.contents;
  __5.values[2] = z;
  return __2.v.contents;
}

function Vec3__WithXZ_62A86894(_, other, result) {
  var result_1 = (0, _optionexFs.calcDef)(Vec3_Create, result);
  var __4 = result_1;
  var x = other.values[0];
  var y = _.v.contents.values[1];
  var z = other.values[1];
  var __5 = __4.v.contents;
  __5.values[0] = x;
  var __6 = __4.v.contents;
  __6.values[1] = y;
  var __7 = __4.v.contents;
  __7.values[2] = z;
  return __4.v.contents;
}

function Vec3__WithXZ_62A868B5(_, other, result) {
  var result_1 = (0, _optionexFs.calcDef)(Vec3_Create, result);
  var __4 = result_1;
  var x = other.values[0];
  var y = _.v.contents.values[1];
  var z = other.values[1];
  var __5 = __4.v.contents;
  __5.values[0] = x;
  var __6 = __4.v.contents;
  __6.values[1] = y;
  var __7 = __4.v.contents;
  __7.values[2] = z;
  return __4.v.contents;
}

function Vec3__WithYZ_539AC50B(_, y, z, result) {
  var result_1 = (0, _optionexFs.calcDef)(Vec3_Create, result);
  var __2 = result_1;
  var x = _.v.contents.values[0];
  var __3 = __2.v.contents;
  __3.values[0] = x;
  var __4 = __2.v.contents;
  __4.values[1] = y;
  var __5 = __2.v.contents;
  __5.values[2] = z;
  return __2.v.contents;
}

function Vec3__WithYZ_62A86894(_, other, result) {
  var result_1 = (0, _optionexFs.calcDef)(Vec3_Create, result);
  var __4 = result_1;
  var x = _.v.contents.values[0];
  var y = other.values[0];
  var z = other.values[1];
  var __5 = __4.v.contents;
  __5.values[0] = x;
  var __6 = __4.v.contents;
  __6.values[1] = y;
  var __7 = __4.v.contents;
  __7.values[2] = z;
  return __4.v.contents;
}

function Vec3__WithYZ_62A868B5(_, other, result) {
  var result_1 = (0, _optionexFs.calcDef)(Vec3_Create, result);
  var __4 = result_1;
  var x = _.v.contents.values[0];
  var y = other.values[0];
  var z = other.values[1];
  var __5 = __4.v.contents;
  __5.values[0] = x;
  var __6 = __4.v.contents;
  __6.values[1] = y;
  var __7 = __4.v.contents;
  __7.values[2] = z;
  return __4.v.contents;
}

function Vec3_op_UnaryNegation_Z66910A62(v1) {
  return Vec3__Negate_Z5A1A3E15(v1);
}

function Vec3_op_TwiddleMinusDot_Z66910A62(v1) {
  var _ = v1;
  var value = Vec3__Negate_Z5A1A3E15(_.v.contents, _.v.contents);
  void value;
}

function Vec3_op_BangBang_Z66910A62(v1) {
  return Vec3__Normalize_Z5A1A3E15(v1);
}

function Vec3_op_BangBangEquals_Z66910A62(v1) {
  var _ = v1;
  var value = Vec3__Normalize_Z5A1A3E15(_.v.contents, _.v.contents);
  void value;
}

function Vec3_op_Addition_5E235CC0(v1, v2) {
  return Vec3__Add_62A868B5(v1, v2);
}

function Vec3_op_AdditionAssignment_5E235CC0(v1, v2) {
  Vec3__AddM_Z66910A62(v1, v2);
}

function Vec3_op_Subtraction_5E235CC0(v1, v2) {
  return Vec3__Sub_62A868B5(v1, v2);
}

function Vec3_op_SubtractionAssignment_5E235CC0(v1, v2) {
  var _ = v1;
  var value = Vec3__Sub_62A868B5(_.v.contents, v2, _.v.contents);
  void value;
}

function Vec3_op_Multiply_39DFA7E3(v1, scale) {
  return Vec3__Scale_753627B6(v1, scale);
}

function Vec3_op_Multiply_49BD13C3(scale, v1) {
  return Vec3__Scale_753627B6(v1, scale);
}

function Vec3_op_MultiplyAssignment_39DFA7E3(v1, scale) {
  var _ = v1;
  var value = Vec3__Scale_753627B6(_.v.contents, scale, _.v.contents);
  void value;
}

function Vec3_op_MultiplyAssignment_49BD13C3(scale, v1) {
  var _ = v1;
  var value = Vec3__Scale_753627B6(_.v.contents, scale, _.v.contents);
  void value;
}

function Vec3_op_DotMultiply_5E235CC0(v1, v2) {
  var _ = v1;
  var other = v2;
  return _.v.contents.values[0] * other.values[0] + _.v.contents.values[1] * other.values[1] + _.v.contents.values[2] * other.values[2];
}

function Vec3_op_PlusMultiply_5E235CC0(v1, v2) {
  var _ = v1;
  var other = v2;
  var result_1 = (0, _optionexFs.calcDef)(Vec3_Create, void 0);
  var __13 = result_1;
  var x = _.v.contents.values[1] * other.values[2] - _.v.contents.values[2] * other.values[1];
  var y = _.v.contents.values[2] * other.values[0] - _.v.contents.values[0] * other.values[2];
  var z = _.v.contents.values[0] * other.values[1] - _.v.contents.values[1] * other.values[0];
  var __14 = __13.v.contents;
  __14.values[0] = x;
  var __15 = __13.v.contents;
  __15.values[1] = y;
  var __16 = __13.v.contents;
  __16.values[2] = z;
  return __13.v.contents;
}

function Vec3__get_XY(_) {
  return Vec2_Create_7B00E9A0(_.v.contents.values[0], _.v.contents.values[1]);
}

function Vec3Module_vec3(x, y, z) {
  return Vec3_Create_8ED0A5D(x, y, z);
}

var Vec4 = /*#__PURE__*/function () {
  function Vec4(values) {
    _classCallCheck(this, Vec4);

    this.v = new _Types.FSharpRef(null);
    var v = this.v;
    this.values = values;
    this.v.contents = this;
    this["Values@"] = this.values;
    this["init@448-2"] = 1;
  }

  _createClass(Vec4, [{
    key: "GetHashCode",
    value: function GetHashCode() {
      var _ = this;

      return (0, _Util.identityHash)(Vec4__get_Values(_.v.contents)) | 0;
    }
  }, {
    key: "Equals",
    value: function Equals(other) {
      var o;

      var _ = this;

      return other instanceof Vec4 ? (o = other, (0, _Array.equalsWith)(_Util.comparePrimitives, Vec4__get_Values(_.v.contents), Vec4__get_Values(o))) : false;
    }
  }]);

  return Vec4;
}();

exports.Vec4 = Vec4;

function Vec4$reflection() {
  return (0, _Reflection.class_type)("Wil.Vectors.Vec4", void 0, Vec4);
}

function Vec4_$ctor_Z14AF5965(values) {
  return new Vec4(values);
}

function Vec4_Create_Z27E3A4C0(x, y, z, w) {
  return Vec4_$ctor_Z14AF5965(new Float64Array([x, y, z, w]));
}

function Vec4_Create_Z16DF143(x) {
  return Vec4_$ctor_Z14AF5965(new Float64Array([x, x, x, x]));
}

function Vec4_Create() {
  return Vec4_$ctor_Z14AF5965(new Float64Array([0, 0, 0, 1]));
}

function Vec4__get_Values(__) {
  return __["Values@"];
}

function Vec4__get_IntValues(_) {
  return new Int32Array([~~_.values[0], ~~_.values[1], ~~_.values[2], ~~_.values[3]]);
}

function Vec4__Clone(_) {
  return Vec4_$ctor_Z14AF5965(new Float64Array([_.v.contents.values[0], _.v.contents.values[1], _.v.contents.values[2], _.v.contents.values[3]]));
}

function Vec4__Add_62A869F5(_, other, result) {
  var result_1 = (0, _optionexFs.calcDef)(Vec4_Create, result);
  var __9 = result_1;
  var x = _.v.contents.values[0] + other.values[0];
  var y = _.v.contents.values[1] + other.values[1];
  var z = _.v.contents.values[2] + other.values[2];
  var w = _.v.contents.values[3] + other.values[3];
  var __10 = __9.v.contents;
  __10.values[0] = x;
  var __11 = __9.v.contents;
  __11.values[1] = y;
  var __12 = __9.v.contents;
  __12.values[2] = z;
  var __13 = __9.v.contents;
  __13.values[3] = w;
  return __9.v.contents;
}

function Vec4__AddM_Z66910A67(_, other) {
  var value = Vec4__Add_62A869F5(_.v.contents, other, _.v.contents);
  void value;
}

function Vec4__Sub_62A869F5(_, other, result) {
  var result_1 = (0, _optionexFs.calcDef)(Vec4_Create, result);
  var __9 = result_1;
  var x = _.v.contents.values[0] - other.values[0];
  var y = _.v.contents.values[1] - other.values[1];
  var z = _.v.contents.values[2] - other.values[2];
  var w = _.v.contents.values[3] - other.values[3];
  var __10 = __9.v.contents;
  __10.values[0] = x;
  var __11 = __9.v.contents;
  __11.values[1] = y;
  var __12 = __9.v.contents;
  __12.values[2] = z;
  var __13 = __9.v.contents;
  __13.values[3] = w;
  return __9.v.contents;
}

function Vec4__Scale_75362711(_, s, result) {
  var result_1 = (0, _optionexFs.calcDef)(Vec4_Create, result);
  var __5 = result_1;
  var x = _.v.contents.values[0] * s;
  var y = _.v.contents.values[1] * s;
  var z = _.v.contents.values[2] * s;
  var w = _.v.contents.values[3];
  var __6 = __5.v.contents;
  __6.values[0] = x;
  var __7 = __5.v.contents;
  __7.values[1] = y;
  var __8 = __5.v.contents;
  __8.values[2] = z;
  var __9 = __5.v.contents;
  __9.values[3] = w;
  return __5.v.contents;
}

function Vec4__Negate_Z5A1A3EB4(_, result) {
  var result_1 = (0, _optionexFs.calcDef)(Vec4_Create, result);
  var __5 = result_1;
  var x = -_.v.contents.values[0];
  var y = -_.v.contents.values[1];
  var z = -_.v.contents.values[2];
  var w = _.v.contents.values[3];
  var __6 = __5.v.contents;
  __6.values[0] = x;
  var __7 = __5.v.contents;
  __7.values[1] = y;
  var __8 = __5.v.contents;
  __8.values[2] = z;
  var __9 = __5.v.contents;
  __9.values[3] = w;
  return __5.v.contents;
}

function Vec4__Normalize_Z5A1A3EB4(_, result) {
  var result_1 = (0, _optionexFs.calcDef)(Vec4_Create, result);
  var mag;
  var __1 = _.v.contents;
  mag = Math.sqrt(__1.v.contents.values[0] * __1.v.contents.values[0] + __1.v.contents.values[1] * __1.v.contents.values[1] + __1.v.contents.values[2] * __1.v.contents.values[2]);

  if (mag < 1E-09) {
    var __8 = result_1;
    var __9 = __8.v.contents;
    __9.values[0] = 0;
    var __10 = __8.v.contents;
    __10.values[1] = 0;
    var __11 = __8.v.contents;
    __11.values[2] = 0;
    var __12 = __8.v.contents;
    __12.values[3] = 0;
    return __8.v.contents;
  } else {
    var magInv = 1 / mag;

    if (_.v.contents.values[3] !== 0 ? _.v.contents.values[3] !== 1 : false) {
      var mult = 1 / _.v.contents.values[3] * magInv;
      var __19 = result_1;
      var x_1 = _.v.contents.values[0] * mult;
      var y_1 = _.v.contents.values[1] * mult;
      var z_1 = _.v.contents.values[2] * mult;
      var __20 = __19.v.contents;
      __20.values[0] = x_1;
      var __21 = __19.v.contents;
      __21.values[1] = y_1;
      var __22 = __19.v.contents;
      __22.values[2] = z_1;
      var __23 = __19.v.contents;
      __23.values[3] = 1;
      return __19.v.contents;
    } else {
      var __28 = result_1;
      var x_2 = _.v.contents.values[0] * magInv;
      var y_2 = _.v.contents.values[1] * magInv;
      var z_2 = _.v.contents.values[2] * magInv;
      var w_2 = _.v.contents.values[3];
      var __29 = __28.v.contents;
      __29.values[0] = x_2;
      var __30 = __28.v.contents;
      __30.values[1] = y_2;
      var __31 = __28.v.contents;
      __31.values[2] = z_2;
      var __32 = __28.v.contents;
      __32.values[3] = w_2;
      return __28.v.contents;
    }
  }
}

function Vec4Module_vec4(x, y, z, w) {
  return Vec4_Create_Z27E3A4C0(x, y, z, w);
}
},{"./.fable/fable-library.3.0.0/Util.js":"../src/.fable/fable-library.3.0.0/Util.js","./.fable/fable-library.3.0.0/Array.js":"../src/.fable/fable-library.3.0.0/Array.js","./.fable/fable-library.3.0.0/String.js":"../src/.fable/fable-library.3.0.0/String.js","./.fable/fable-library.3.0.0/Types.js":"../src/.fable/fable-library.3.0.0/Types.js","./.fable/fable-library.3.0.0/Reflection.js":"../src/.fable/fable-library.3.0.0/Reflection.js","./optionex.fs.js":"../src/optionex.fs.js"}],"../src/.fable/fable-library.3.0.0/Choice.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FSharpResult$2$reflection = FSharpResult$2$reflection;
exports.Result_Map = Result_Map;
exports.Result_MapError = Result_MapError;
exports.Result_Bind = Result_Bind;
exports.FSharpChoice$2$reflection = FSharpChoice$2$reflection;
exports.FSharpChoice$3$reflection = FSharpChoice$3$reflection;
exports.FSharpChoice$4$reflection = FSharpChoice$4$reflection;
exports.FSharpChoice$5$reflection = FSharpChoice$5$reflection;
exports.FSharpChoice$6$reflection = FSharpChoice$6$reflection;
exports.FSharpChoice$7$reflection = FSharpChoice$7$reflection;
exports.Choice_makeChoice1Of2 = Choice_makeChoice1Of2;
exports.Choice_makeChoice2Of2 = Choice_makeChoice2Of2;
exports.Choice_tryValueIfChoice1Of2 = Choice_tryValueIfChoice1Of2;
exports.Choice_tryValueIfChoice2Of2 = Choice_tryValueIfChoice2Of2;
exports.FSharpChoice$7 = exports.FSharpChoice$6 = exports.FSharpChoice$5 = exports.FSharpChoice$4 = exports.FSharpChoice$3 = exports.FSharpChoice$2 = exports.FSharpResult$2 = void 0;

var _Types = require("./Types.js");

var _Reflection = require("./Reflection.js");

var _Option = require("./Option.js");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var FSharpResult$2 = /*#__PURE__*/function (_Union) {
  _inherits(FSharpResult$2, _Union);

  var _super = _createSuper(FSharpResult$2);

  function FSharpResult$2(tag) {
    var _this;

    _classCallCheck(this, FSharpResult$2);

    _this = _super.call(this);
    _this.tag = tag | 0;

    for (var _len = arguments.length, fields = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      fields[_key - 1] = arguments[_key];
    }

    _this.fields = fields;
    return _this;
  }

  _createClass(FSharpResult$2, [{
    key: "cases",
    value: function cases() {
      return ["Ok", "Error"];
    }
  }]);

  return FSharpResult$2;
}(_Types.Union);

exports.FSharpResult$2 = FSharpResult$2;

function FSharpResult$2$reflection(gen0, gen1) {
  return (0, _Reflection.union_type)("FSharp.Core.FSharpResult`2", [gen0, gen1], FSharpResult$2, function () {
    return [[["ResultValue", gen0]], [["ErrorValue", gen1]]];
  });
}

function Result_Map(mapping, result) {
  if (result.tag === 0) {
    return new FSharpResult$2(0, mapping(result.fields[0]));
  } else {
    return new FSharpResult$2(1, result.fields[0]);
  }
}

function Result_MapError(mapping, result) {
  if (result.tag === 0) {
    return new FSharpResult$2(0, result.fields[0]);
  } else {
    return new FSharpResult$2(1, mapping(result.fields[0]));
  }
}

function Result_Bind(binder, result) {
  if (result.tag === 0) {
    return binder(result.fields[0]);
  } else {
    return new FSharpResult$2(1, result.fields[0]);
  }
}

var FSharpChoice$2 = /*#__PURE__*/function (_Union2) {
  _inherits(FSharpChoice$2, _Union2);

  var _super2 = _createSuper(FSharpChoice$2);

  function FSharpChoice$2(tag) {
    var _this2;

    _classCallCheck(this, FSharpChoice$2);

    _this2 = _super2.call(this);
    _this2.tag = tag | 0;

    for (var _len2 = arguments.length, fields = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      fields[_key2 - 1] = arguments[_key2];
    }

    _this2.fields = fields;
    return _this2;
  }

  _createClass(FSharpChoice$2, [{
    key: "cases",
    value: function cases() {
      return ["Choice1Of2", "Choice2Of2"];
    }
  }]);

  return FSharpChoice$2;
}(_Types.Union);

exports.FSharpChoice$2 = FSharpChoice$2;

function FSharpChoice$2$reflection(gen0, gen1) {
  return (0, _Reflection.union_type)("FSharp.Core.FSharpChoice`2", [gen0, gen1], FSharpChoice$2, function () {
    return [[["Item", gen0]], [["Item", gen1]]];
  });
}

var FSharpChoice$3 = /*#__PURE__*/function (_Union3) {
  _inherits(FSharpChoice$3, _Union3);

  var _super3 = _createSuper(FSharpChoice$3);

  function FSharpChoice$3(tag) {
    var _this3;

    _classCallCheck(this, FSharpChoice$3);

    _this3 = _super3.call(this);
    _this3.tag = tag | 0;

    for (var _len3 = arguments.length, fields = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      fields[_key3 - 1] = arguments[_key3];
    }

    _this3.fields = fields;
    return _this3;
  }

  _createClass(FSharpChoice$3, [{
    key: "cases",
    value: function cases() {
      return ["Choice1Of3", "Choice2Of3", "Choice3Of3"];
    }
  }]);

  return FSharpChoice$3;
}(_Types.Union);

exports.FSharpChoice$3 = FSharpChoice$3;

function FSharpChoice$3$reflection(gen0, gen1, gen2) {
  return (0, _Reflection.union_type)("FSharp.Core.FSharpChoice`3", [gen0, gen1, gen2], FSharpChoice$3, function () {
    return [[["Item", gen0]], [["Item", gen1]], [["Item", gen2]]];
  });
}

var FSharpChoice$4 = /*#__PURE__*/function (_Union4) {
  _inherits(FSharpChoice$4, _Union4);

  var _super4 = _createSuper(FSharpChoice$4);

  function FSharpChoice$4(tag) {
    var _this4;

    _classCallCheck(this, FSharpChoice$4);

    _this4 = _super4.call(this);
    _this4.tag = tag | 0;

    for (var _len4 = arguments.length, fields = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
      fields[_key4 - 1] = arguments[_key4];
    }

    _this4.fields = fields;
    return _this4;
  }

  _createClass(FSharpChoice$4, [{
    key: "cases",
    value: function cases() {
      return ["Choice1Of4", "Choice2Of4", "Choice3Of4", "Choice4Of4"];
    }
  }]);

  return FSharpChoice$4;
}(_Types.Union);

exports.FSharpChoice$4 = FSharpChoice$4;

function FSharpChoice$4$reflection(gen0, gen1, gen2, gen3) {
  return (0, _Reflection.union_type)("FSharp.Core.FSharpChoice`4", [gen0, gen1, gen2, gen3], FSharpChoice$4, function () {
    return [[["Item", gen0]], [["Item", gen1]], [["Item", gen2]], [["Item", gen3]]];
  });
}

var FSharpChoice$5 = /*#__PURE__*/function (_Union5) {
  _inherits(FSharpChoice$5, _Union5);

  var _super5 = _createSuper(FSharpChoice$5);

  function FSharpChoice$5(tag) {
    var _this5;

    _classCallCheck(this, FSharpChoice$5);

    _this5 = _super5.call(this);
    _this5.tag = tag | 0;

    for (var _len5 = arguments.length, fields = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
      fields[_key5 - 1] = arguments[_key5];
    }

    _this5.fields = fields;
    return _this5;
  }

  _createClass(FSharpChoice$5, [{
    key: "cases",
    value: function cases() {
      return ["Choice1Of5", "Choice2Of5", "Choice3Of5", "Choice4Of5", "Choice5Of5"];
    }
  }]);

  return FSharpChoice$5;
}(_Types.Union);

exports.FSharpChoice$5 = FSharpChoice$5;

function FSharpChoice$5$reflection(gen0, gen1, gen2, gen3, gen4) {
  return (0, _Reflection.union_type)("FSharp.Core.FSharpChoice`5", [gen0, gen1, gen2, gen3, gen4], FSharpChoice$5, function () {
    return [[["Item", gen0]], [["Item", gen1]], [["Item", gen2]], [["Item", gen3]], [["Item", gen4]]];
  });
}

var FSharpChoice$6 = /*#__PURE__*/function (_Union6) {
  _inherits(FSharpChoice$6, _Union6);

  var _super6 = _createSuper(FSharpChoice$6);

  function FSharpChoice$6(tag) {
    var _this6;

    _classCallCheck(this, FSharpChoice$6);

    _this6 = _super6.call(this);
    _this6.tag = tag | 0;

    for (var _len6 = arguments.length, fields = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
      fields[_key6 - 1] = arguments[_key6];
    }

    _this6.fields = fields;
    return _this6;
  }

  _createClass(FSharpChoice$6, [{
    key: "cases",
    value: function cases() {
      return ["Choice1Of6", "Choice2Of6", "Choice3Of6", "Choice4Of6", "Choice5Of6", "Choice6Of6"];
    }
  }]);

  return FSharpChoice$6;
}(_Types.Union);

exports.FSharpChoice$6 = FSharpChoice$6;

function FSharpChoice$6$reflection(gen0, gen1, gen2, gen3, gen4, gen5) {
  return (0, _Reflection.union_type)("FSharp.Core.FSharpChoice`6", [gen0, gen1, gen2, gen3, gen4, gen5], FSharpChoice$6, function () {
    return [[["Item", gen0]], [["Item", gen1]], [["Item", gen2]], [["Item", gen3]], [["Item", gen4]], [["Item", gen5]]];
  });
}

var FSharpChoice$7 = /*#__PURE__*/function (_Union7) {
  _inherits(FSharpChoice$7, _Union7);

  var _super7 = _createSuper(FSharpChoice$7);

  function FSharpChoice$7(tag) {
    var _this7;

    _classCallCheck(this, FSharpChoice$7);

    _this7 = _super7.call(this);
    _this7.tag = tag | 0;

    for (var _len7 = arguments.length, fields = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
      fields[_key7 - 1] = arguments[_key7];
    }

    _this7.fields = fields;
    return _this7;
  }

  _createClass(FSharpChoice$7, [{
    key: "cases",
    value: function cases() {
      return ["Choice1Of7", "Choice2Of7", "Choice3Of7", "Choice4Of7", "Choice5Of7", "Choice6Of7", "Choice7Of7"];
    }
  }]);

  return FSharpChoice$7;
}(_Types.Union);

exports.FSharpChoice$7 = FSharpChoice$7;

function FSharpChoice$7$reflection(gen0, gen1, gen2, gen3, gen4, gen5, gen6) {
  return (0, _Reflection.union_type)("FSharp.Core.FSharpChoice`7", [gen0, gen1, gen2, gen3, gen4, gen5, gen6], FSharpChoice$7, function () {
    return [[["Item", gen0]], [["Item", gen1]], [["Item", gen2]], [["Item", gen3]], [["Item", gen4]], [["Item", gen5]], [["Item", gen6]]];
  });
}

function Choice_makeChoice1Of2(x) {
  return new FSharpChoice$2(0, x);
}

function Choice_makeChoice2Of2(x) {
  return new FSharpChoice$2(1, x);
}

function Choice_tryValueIfChoice1Of2(x) {
  if (x.tag === 0) {
    return (0, _Option.some)(x.fields[0]);
  } else {
    return void 0;
  }
}

function Choice_tryValueIfChoice2Of2(x) {
  if (x.tag === 1) {
    return (0, _Option.some)(x.fields[0]);
  } else {
    return void 0;
  }
}
},{"./Types.js":"../src/.fable/fable-library.3.0.0/Types.js","./Reflection.js":"../src/.fable/fable-library.3.0.0/Reflection.js","./Option.js":"../src/.fable/fable-library.3.0.0/Option.js"}],"../src/.fable/fable-library.3.0.0/Observable.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.protect = protect;
exports.add = add;
exports.choose = choose;
exports.filter = filter;
exports.map = map;
exports.merge = merge;
exports.pairwise = pairwise;
exports.partition = partition;
exports.scan = scan;
exports.split = split;
exports.subscribe = subscribe;
exports.Observer = void 0;

var _Choice = require("./Choice.js");

var _Option = require("./Option.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Observer = function Observer(onNext, onError, onCompleted) {
  _classCallCheck(this, Observer);

  this.OnNext = onNext;

  this.OnError = onError || function (_e) {
    return;
  };

  this.OnCompleted = onCompleted || function () {
    return;
  };
};

exports.Observer = Observer;

var Observable = function Observable(subscribe) {
  _classCallCheck(this, Observable);

  this.Subscribe = subscribe;
};

function protect(f, succeed, fail) {
  try {
    return succeed(f());
  } catch (e) {
    fail(e);
  }
}

function add(callback, source) {
  source.Subscribe(new Observer(callback));
}

function choose(chooser, source) {
  return new Observable(function (observer) {
    return source.Subscribe(new Observer(function (t) {
      return protect(function () {
        return chooser(t);
      }, function (u) {
        if (u != null) {
          observer.OnNext((0, _Option.value)(u));
        }
      }, observer.OnError);
    }, observer.OnError, observer.OnCompleted));
  });
}

function filter(predicate, source) {
  return choose(function (x) {
    return predicate(x) ? x : null;
  }, source);
}

function map(mapping, source) {
  return new Observable(function (observer) {
    return source.Subscribe(new Observer(function (t) {
      protect(function () {
        return mapping(t);
      }, observer.OnNext, observer.OnError);
    }, observer.OnError, observer.OnCompleted));
  });
}

function merge(source1, source2) {
  return new Observable(function (observer) {
    var stopped = false;
    var completed1 = false;
    var completed2 = false;
    var h1 = source1.Subscribe(new Observer(function (v) {
      if (!stopped) {
        observer.OnNext(v);
      }
    }, function (e) {
      if (!stopped) {
        stopped = true;
        observer.OnError(e);
      }
    }, function () {
      if (!stopped) {
        completed1 = true;

        if (completed2) {
          stopped = true;
          observer.OnCompleted();
        }
      }
    }));
    var h2 = source2.Subscribe(new Observer(function (v) {
      if (!stopped) {
        observer.OnNext(v);
      }
    }, function (e) {
      if (!stopped) {
        stopped = true;
        observer.OnError(e);
      }
    }, function () {
      if (!stopped) {
        completed2 = true;

        if (completed1) {
          stopped = true;
          observer.OnCompleted();
        }
      }
    }));
    return {
      Dispose: function Dispose() {
        h1.Dispose();
        h2.Dispose();
      }
    };
  });
}

function pairwise(source) {
  return new Observable(function (observer) {
    var last;
    return source.Subscribe(new Observer(function (next) {
      if (last != null) {
        observer.OnNext([last, next]);
      }

      last = next;
    }, observer.OnError, observer.OnCompleted));
  });
}

function partition(predicate, source) {
  return [filter(predicate, source), filter(function (x) {
    return !predicate(x);
  }, source)];
}

function scan(collector, state, source) {
  return new Observable(function (observer) {
    return source.Subscribe(new Observer(function (t) {
      protect(function () {
        return collector(state, t);
      }, function (u) {
        state = u;
        observer.OnNext(u);
      }, observer.OnError);
    }, observer.OnError, observer.OnCompleted));
  });
}

function split(splitter, source) {
  return [choose(function (v) {
    return (0, _Choice.Choice_tryValueIfChoice1Of2)(splitter(v));
  }, source), choose(function (v) {
    return (0, _Choice.Choice_tryValueIfChoice2Of2)(splitter(v));
  }, source)];
}

function subscribe(callback, source) {
  return source.Subscribe(new Observer(callback));
}
},{"./Choice.js":"../src/.fable/fable-library.3.0.0/Choice.js","./Option.js":"../src/.fable/fable-library.3.0.0/Option.js"}],"../src/.fable/fable-library.3.0.0/Event.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.add = add;
exports.choose = choose;
exports.filter = filter;
exports.map = map;
exports.merge = merge;
exports.pairwise = pairwise;
exports.partition = partition;
exports.scan = scan;
exports.split = split;
exports.default = exports.Event = void 0;

var _Observable = require("./Observable.js");

var _Option = require("./Option.js");

var _Choice = require("./Choice.js");

var _Seq = require("./Seq.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Event = /*#__PURE__*/function () {
  function Event(_subscriber, delegates) {
    _classCallCheck(this, Event);

    this._subscriber = _subscriber;
    this.delegates = delegates || new Array();
  }

  _createClass(Event, [{
    key: "Add",
    value: function Add(f) {
      this._addHandler(f);
    } // IEvent<T> methods

  }, {
    key: "Trigger",
    value: function Trigger(value) {
      (0, _Seq.iterate)(function (f) {
        return f(value);
      }, this.delegates);
    } // IDelegateEvent<T> methods

  }, {
    key: "AddHandler",
    value: function AddHandler(handler) {
      if (this._dotnetDelegates == null) {
        this._dotnetDelegates = new Map();
      }

      var f = function f(x) {
        return handler(null, x);
      };

      this._dotnetDelegates.set(handler, f);

      this._addHandler(f);
    }
  }, {
    key: "RemoveHandler",
    value: function RemoveHandler(handler) {
      if (this._dotnetDelegates != null) {
        var f = this._dotnetDelegates.get(handler);

        if (f != null) {
          this._dotnetDelegates.delete(handler);

          this._removeHandler(f);
        }
      }
    } // IObservable<T> methods

  }, {
    key: "Subscribe",
    value: function Subscribe(arg) {
      return typeof arg === "function" ? this._subscribeFromCallback(arg) : this._subscribeFromObserver(arg);
    }
  }, {
    key: "_addHandler",
    value: function _addHandler(f) {
      this.delegates.push(f);
    }
  }, {
    key: "_removeHandler",
    value: function _removeHandler(f) {
      var index = this.delegates.indexOf(f);

      if (index > -1) {
        this.delegates.splice(index, 1);
      }
    }
  }, {
    key: "_subscribeFromObserver",
    value: function _subscribeFromObserver(observer) {
      var _this = this;

      if (this._subscriber) {
        return this._subscriber(observer);
      }

      var callback = observer.OnNext;

      this._addHandler(callback);

      return {
        Dispose: function Dispose() {
          _this._removeHandler(callback);
        }
      };
    }
  }, {
    key: "_subscribeFromCallback",
    value: function _subscribeFromCallback(callback) {
      var _this2 = this;

      this._addHandler(callback);

      return {
        Dispose: function Dispose() {
          _this2._removeHandler(callback);
        }
      };
    }
  }, {
    key: "Publish",
    get: function get() {
      return this;
    }
  }]);

  return Event;
}();

exports.Event = Event;

function add(callback, sourceEvent) {
  sourceEvent.Subscribe(new _Observable.Observer(callback));
}

function choose(chooser, sourceEvent) {
  var source = sourceEvent;
  return new Event(function (observer) {
    return source.Subscribe(new _Observable.Observer(function (t) {
      return (0, _Observable.protect)(function () {
        return chooser(t);
      }, function (u) {
        if (u != null) {
          observer.OnNext((0, _Option.value)(u));
        }
      }, observer.OnError);
    }, observer.OnError, observer.OnCompleted));
  }, source.delegates);
}

function filter(predicate, sourceEvent) {
  return choose(function (x) {
    return predicate(x) ? (0, _Option.some)(x) : undefined;
  }, sourceEvent);
}

function map(mapping, sourceEvent) {
  var source = sourceEvent;
  return new Event(function (observer) {
    return source.Subscribe(new _Observable.Observer(function (t) {
      return (0, _Observable.protect)(function () {
        return mapping(t);
      }, observer.OnNext, observer.OnError);
    }, observer.OnError, observer.OnCompleted));
  }, source.delegates);
}

function merge(event1, event2) {
  var source1 = event1;
  var source2 = event2;
  return new Event(function (observer) {
    var stopped = false;
    var completed1 = false;
    var completed2 = false;
    var h1 = source1.Subscribe(new _Observable.Observer(function (v) {
      if (!stopped) {
        observer.OnNext(v);
      }
    }, function (e) {
      if (!stopped) {
        stopped = true;
        observer.OnError(e);
      }
    }, function () {
      if (!stopped) {
        completed1 = true;

        if (completed2) {
          stopped = true;
          observer.OnCompleted();
        }
      }
    }));
    var h2 = source2.Subscribe(new _Observable.Observer(function (v) {
      if (!stopped) {
        observer.OnNext(v);
      }
    }, function (e) {
      if (!stopped) {
        stopped = true;
        observer.OnError(e);
      }
    }, function () {
      if (!stopped) {
        completed2 = true;

        if (completed1) {
          stopped = true;
          observer.OnCompleted();
        }
      }
    }));
    return {
      Dispose: function Dispose() {
        h1.Dispose();
        h2.Dispose();
      }
    };
  }, source1.delegates.concat(source2.delegates));
}

function pairwise(sourceEvent) {
  var source = sourceEvent;
  return new Event(function (observer) {
    var last;
    return source.Subscribe(new _Observable.Observer(function (next) {
      if (last != null) {
        observer.OnNext([last, next]);
      }

      last = next;
    }, observer.OnError, observer.OnCompleted));
  }, source.delegates);
}

function partition(predicate, sourceEvent) {
  return [filter(predicate, sourceEvent), filter(function (x) {
    return !predicate(x);
  }, sourceEvent)];
}

function scan(collector, state, sourceEvent) {
  var source = sourceEvent;
  return new Event(function (observer) {
    return source.Subscribe(new _Observable.Observer(function (t) {
      (0, _Observable.protect)(function () {
        return collector(state, t);
      }, function (u) {
        state = u;
        observer.OnNext(u);
      }, observer.OnError);
    }, observer.OnError, observer.OnCompleted));
  }, source.delegates);
}

function split(splitter, sourceEvent) {
  return [choose(function (v) {
    return (0, _Choice.Choice_tryValueIfChoice1Of2)(splitter(v));
  }, sourceEvent), choose(function (v) {
    return (0, _Choice.Choice_tryValueIfChoice2Of2)(splitter(v));
  }, sourceEvent)];
}

var _default = Event;
exports.default = _default;
},{"./Observable.js":"../src/.fable/fable-library.3.0.0/Observable.js","./Option.js":"../src/.fable/fable-library.3.0.0/Option.js","./Choice.js":"../src/.fable/fable-library.3.0.0/Choice.js","./Seq.js":"../src/.fable/fable-library.3.0.0/Seq.js"}],"../src/.fable/fable-library.3.0.0/List.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.empty = empty;
exports.singleton = singleton;
exports.cons = cons;
exports.head = head;
exports.tryHead = tryHead;
exports.tail = tail;
exports.last = last;
exports.tryLast = tryLast;
exports.compareWith = compareWith;
exports.foldIndexedAux = foldIndexedAux;
exports.foldIndexed = foldIndexed;
exports.fold = fold;
exports.reverse = reverse;
exports.foldBack = foldBack;
exports.toSeq = toSeq;
exports.ofSeq = ofSeq;
exports.concat = concat;
exports.foldIndexed2Aux = foldIndexed2Aux;
exports.foldIndexed2 = foldIndexed2;
exports.fold2 = fold2;
exports.foldBack2 = foldBack2;
exports.unfold = unfold;
exports.foldIndexed3Aux = foldIndexed3Aux;
exports.foldIndexed3 = foldIndexed3;
exports.fold3 = fold3;
exports.scan = scan;
exports.scanBack = scanBack;
exports.length = length;
exports.append = append;
exports.collect = collect;
exports.map = map;
exports.mapIndexed = mapIndexed;
exports.indexed = indexed;
exports.map2 = map2;
exports.mapIndexed2 = mapIndexed2;
exports.map3 = map3;
exports.mapIndexed3 = mapIndexed3;
exports.mapFold = mapFold;
exports.mapFoldBack = mapFoldBack;
exports.iterate = iterate;
exports.iterate2 = iterate2;
exports.iterateIndexed = iterateIndexed;
exports.iterateIndexed2 = iterateIndexed2;
exports.ofArrayWithTail = ofArrayWithTail;
exports.ofArray = ofArray;
exports.isEmpty = isEmpty;
exports.tryPickIndexedAux = tryPickIndexedAux;
exports.tryPickIndexed = tryPickIndexed;
exports.tryPick = tryPick;
exports.pick = pick;
exports.tryFindIndexed = tryFindIndexed;
exports.tryFind = tryFind;
exports.findIndexed = findIndexed;
exports.find = find;
exports.findBack = findBack;
exports.tryFindBack = tryFindBack;
exports.tryFindIndex = tryFindIndex;
exports.tryFindIndexBack = tryFindIndexBack;
exports.findIndex = findIndex;
exports.findIndexBack = findIndexBack;
exports.item = item;
exports.tryItem = tryItem;
exports.filter = filter;
exports.partition = partition;
exports.choose = choose;
exports.contains = contains;
exports.except = except;
exports.initialize = initialize;
exports.replicate = replicate;
exports.reduce = reduce;
exports.reduceBack = reduceBack;
exports.forAll = forAll;
exports.forAll2 = forAll2;
exports.exists = exists;
exports.exists2 = exists2;
exports.unzip = unzip;
exports.unzip3 = unzip3;
exports.zip = zip;
exports.zip3 = zip3;
exports.sort = sort;
exports.sortBy = sortBy;
exports.sortDescending = sortDescending;
exports.sortByDescending = sortByDescending;
exports.sortWith = sortWith;
exports.sum = sum;
exports.sumBy = sumBy;
exports.maxBy = maxBy;
exports.max = max;
exports.minBy = minBy;
exports.min = min;
exports.average = average;
exports.averageBy = averageBy;
exports.permute = permute;
exports.chunkBySize = chunkBySize;
exports.skip = skip;
exports.skipWhile = skipWhile;
exports.takeSplitAux = takeSplitAux;
exports.take = take;
exports.takeWhile = takeWhile;
exports.truncate = truncate;
exports.splitAt = splitAt;
exports.outOfRange = outOfRange;
exports.getSlice = getSlice;
exports.distinctBy = distinctBy;
exports.distinct = distinct;
exports.exactlyOne = exactlyOne;
exports.groupBy = groupBy;
exports.countBy = countBy;
exports.where = where;
exports.pairwise = pairwise;
exports.windowed = windowed;
exports.splitInto = splitInto;
exports.transpose = transpose;

var _Types = require("./Types.js");

var _Option = require("./Option.js");

var _Seq = require("./Seq.js");

var _Util = require("./Util.js");

var _Array = require("./Array.js");

var _MutableSet = require("./MutableSet.js");

var _MapUtil = require("./MapUtil.js");

var _MutableMap = require("./MutableMap.js");

function empty() {
  return new _Types.List();
}

function singleton(x) {
  return new _Types.List(x, empty());
}

function cons(x, xs) {
  return new _Types.List(x, xs);
}

function head(_arg1) {
  if (_arg1.tail != null) {
    return _arg1.head;
  } else {
    throw new Error("List was empty");
  }
}

function tryHead(_arg1) {
  if (_arg1.tail != null) {
    return (0, _Option.some)(_arg1.head);
  } else {
    return void 0;
  }
}

function tail(_arg1) {
  if (_arg1.tail != null) {
    return _arg1.tail;
  } else {
    throw new Error("List was empty");
  }
}

function last(_arg1_mut) {
  last: while (true) {
    var _arg1 = _arg1_mut;

    if (_arg1.tail != null) {
      if (_arg1.tail.tail == null) {
        return _arg1.head;
      } else {
        _arg1_mut = _arg1.tail;
        continue last;
      }
    } else {
      throw new Error("List was empty");
    }

    break;
  }
}

function tryLast(_arg1_mut) {
  tryLast: while (true) {
    var _arg1 = _arg1_mut;

    if (_arg1.tail != null) {
      if (_arg1.tail.tail == null) {
        return (0, _Option.some)(_arg1.head);
      } else {
        _arg1_mut = _arg1.tail;
        continue tryLast;
      }
    } else {
      return void 0;
    }

    break;
  }
}

function compareWith(comparer, xs, ys) {
  if (xs === ys) {
    return 0;
  } else {
    var loop = function loop(xs_1_mut, ys_1_mut) {
      loop: while (true) {
        var xs_1 = xs_1_mut,
            ys_1 = ys_1_mut;
        var matchValue = [xs_1, ys_1];

        if (matchValue[0].tail != null) {
          if (matchValue[1].tail != null) {
            var matchValue_1 = comparer(matchValue[0].head, matchValue[1].head) | 0;

            if (matchValue_1 === 0) {
              xs_1_mut = matchValue[0].tail;
              ys_1_mut = matchValue[1].tail;
              continue loop;
            } else {
              return matchValue_1 | 0;
            }
          } else {
            return 1;
          }
        } else if (matchValue[1].tail == null) {
          return 0;
        } else {
          return -1;
        }

        break;
      }
    };

    return loop(xs, ys) | 0;
  }
}

function foldIndexedAux(f_mut, i_mut, acc_mut, _arg1_mut) {
  foldIndexedAux: while (true) {
    var f = f_mut,
        i = i_mut,
        acc = acc_mut,
        _arg1 = _arg1_mut;

    if (_arg1.tail != null) {
      f_mut = f;
      i_mut = i + 1;
      acc_mut = f(i, acc, _arg1.head);
      _arg1_mut = _arg1.tail;
      continue foldIndexedAux;
    } else {
      return acc;
    }

    break;
  }
}

function foldIndexed(f, state, xs) {
  return foldIndexedAux(f, 0, state, xs);
}

function fold(f_mut, state_mut, xs_mut) {
  fold: while (true) {
    var f = f_mut,
        state = state_mut,
        xs = xs_mut;

    if (xs.tail != null) {
      f_mut = f;
      state_mut = f(state, xs.head);
      xs_mut = xs.tail;
      continue fold;
    } else {
      return state;
    }

    break;
  }
}

function reverse(xs) {
  return fold(function (acc, x) {
    return new _Types.List(x, acc);
  }, new _Types.List(), xs);
}

function foldBack(f, xs, state) {
  return fold(function (acc, x) {
    return f(x, acc);
  }, state, reverse(xs));
}

function toSeq(xs) {
  return (0, _Seq.map)(function (x) {
    return x;
  }, xs);
}

function ofSeq(xs) {
  return reverse((0, _Seq.fold)(function (acc, x) {
    return new _Types.List(x, acc);
  }, new _Types.List(), xs));
}

function concat(lists) {
  return reverse((0, _Seq.fold)(function (state, xs) {
    return fold(function (acc, x) {
      return new _Types.List(x, acc);
    }, state, xs);
  }, new _Types.List(), lists));
}

function foldIndexed2Aux(f_mut, i_mut, acc_mut, bs_mut, cs_mut) {
  foldIndexed2Aux: while (true) {
    var f = f_mut,
        i = i_mut,
        acc = acc_mut,
        bs = bs_mut,
        cs = cs_mut;
    var matchValue = [bs, cs];
    var pattern_matching_result = void 0,
        x = void 0,
        xs = void 0,
        y = void 0,
        ys = void 0;

    if (matchValue[0].tail != null) {
      if (matchValue[1].tail != null) {
        pattern_matching_result = 1;
        x = matchValue[0].head;
        xs = matchValue[0].tail;
        y = matchValue[1].head;
        ys = matchValue[1].tail;
      } else {
        pattern_matching_result = 2;
      }
    } else if (matchValue[1].tail == null) {
      pattern_matching_result = 0;
    } else {
      pattern_matching_result = 2;
    }

    switch (pattern_matching_result) {
      case 0:
        {
          return acc;
        }

      case 1:
        {
          f_mut = f;
          i_mut = i + 1;
          acc_mut = f(i, acc, x, y);
          bs_mut = xs;
          cs_mut = ys;
          continue foldIndexed2Aux;
        }

      case 2:
        {
          throw new Error("Lists had different lengths");
        }
    }

    break;
  }
}

function foldIndexed2(f, state, xs, ys) {
  return foldIndexed2Aux(f, 0, state, xs, ys);
}

function fold2(f, state, xs, ys) {
  return (0, _Seq.fold2)(f, state, xs, ys);
}

function foldBack2(f, xs, ys, state) {
  return (0, _Seq.foldBack2)(f, xs, ys, state);
}

function unfold(f, state) {
  var unfoldInner = function unfoldInner(acc_mut, state_1_mut) {
    unfoldInner: while (true) {
      var acc = acc_mut,
          state_1 = state_1_mut;
      var matchValue = f(state_1);

      if (matchValue != null) {
        acc_mut = new _Types.List(matchValue[0], acc);
        state_1_mut = matchValue[1];
        continue unfoldInner;
      } else {
        return reverse(acc);
      }

      break;
    }
  };

  return unfoldInner(new _Types.List(), state);
}

function foldIndexed3Aux(f_mut, i_mut, acc_mut, bs_mut, cs_mut, ds_mut) {
  foldIndexed3Aux: while (true) {
    var f = f_mut,
        i = i_mut,
        acc = acc_mut,
        bs = bs_mut,
        cs = cs_mut,
        ds = ds_mut;
    var matchValue = [bs, cs, ds];
    var pattern_matching_result = void 0,
        x = void 0,
        xs = void 0,
        y = void 0,
        ys = void 0,
        z = void 0,
        zs = void 0;

    if (matchValue[0].tail != null) {
      if (matchValue[1].tail != null) {
        if (matchValue[2].tail != null) {
          pattern_matching_result = 1;
          x = matchValue[0].head;
          xs = matchValue[0].tail;
          y = matchValue[1].head;
          ys = matchValue[1].tail;
          z = matchValue[2].head;
          zs = matchValue[2].tail;
        } else {
          pattern_matching_result = 2;
        }
      } else {
        pattern_matching_result = 2;
      }
    } else if (matchValue[1].tail == null) {
      if (matchValue[2].tail == null) {
        pattern_matching_result = 0;
      } else {
        pattern_matching_result = 2;
      }
    } else {
      pattern_matching_result = 2;
    }

    switch (pattern_matching_result) {
      case 0:
        {
          return acc;
        }

      case 1:
        {
          f_mut = f;
          i_mut = i + 1;
          acc_mut = f(i, acc, x, y, z);
          bs_mut = xs;
          cs_mut = ys;
          ds_mut = zs;
          continue foldIndexed3Aux;
        }

      case 2:
        {
          throw new Error("Lists had different lengths");
        }
    }

    break;
  }
}

function foldIndexed3(f, seed, xs, ys, zs) {
  return foldIndexed3Aux(f, 0, seed, xs, ys, zs);
}

function fold3(f, state, xs, ys, zs) {
  return foldIndexed3(function (_arg1, acc, x, y, z) {
    return f(acc, x, y, z);
  }, state, xs, ys, zs);
}

function scan(f, state, xs) {
  return ofSeq((0, _Seq.scan)(f, state, xs));
}

function scanBack(f, xs, state) {
  return ofSeq((0, _Seq.scanBack)(f, xs, state));
}

function length(xs) {
  return fold(function (acc, _arg1) {
    return acc + 1;
  }, 0, xs);
}

function append(xs, ys) {
  return fold(function (acc, x) {
    return new _Types.List(x, acc);
  }, ys, reverse(xs));
}

function collect(f, xs) {
  return ofSeq((0, _Seq.collect)(f, xs));
}

function map(f, xs) {
  return reverse(fold(function (acc, x) {
    return new _Types.List(f(x), acc);
  }, new _Types.List(), xs));
}

function mapIndexed(f, xs) {
  return reverse(foldIndexed(function (i, acc, x) {
    return new _Types.List(f(i, x), acc);
  }, new _Types.List(), xs));
}

function indexed(xs) {
  return mapIndexed(function (i, x) {
    return [i, x];
  }, xs);
}

function map2(f, xs, ys) {
  return reverse(fold2(function (acc, x, y) {
    return new _Types.List(f(x, y), acc);
  }, new _Types.List(), xs, ys));
}

function mapIndexed2(f, xs, ys) {
  return reverse(foldIndexed2(function (i, acc, x, y) {
    return new _Types.List(f(i, x, y), acc);
  }, new _Types.List(), xs, ys));
}

function map3(f, xs, ys, zs) {
  return reverse(fold3(function (acc, x, y, z) {
    return new _Types.List(f(x, y, z), acc);
  }, new _Types.List(), xs, ys, zs));
}

function mapIndexed3(f, xs, ys, zs) {
  return reverse(foldIndexed3(function (i, acc, x, y, z) {
    return new _Types.List(f(i, x, y, z), acc);
  }, new _Types.List(), xs, ys, zs));
}

function mapFold(f, s, xs) {
  var patternInput_1 = fold(function (tupledArg, x) {
    var patternInput = f(tupledArg[1], x);
    return [new _Types.List(patternInput[0], tupledArg[0]), patternInput[1]];
  }, [new _Types.List(), s], xs);
  return [reverse(patternInput_1[0]), patternInput_1[1]];
}

function mapFoldBack(f, xs, s) {
  return mapFold(function (s_1, v) {
    return f(v, s_1);
  }, s, reverse(xs));
}

function iterate(f, xs) {
  fold(function (unitVar0, x) {
    f(x);
  }, void 0, xs);
}

function iterate2(f, xs, ys) {
  fold2(function (unitVar0, x, y) {
    f(x, y);
  }, void 0, xs, ys);
}

function iterateIndexed(f, xs) {
  foldIndexed(function (i, unitVar1, x) {
    f(i, x);
  }, void 0, xs);
}

function iterateIndexed2(f, xs, ys) {
  foldIndexed2(function (i, unitVar1, x, y) {
    f(i, x, y);
  }, void 0, xs, ys);
}

function ofArrayWithTail(xs, tail_1) {
  var res = tail_1;

  for (var i = (0, _Util.count)(xs) - 1; i >= 0; i--) {
    res = new _Types.List(xs[i], res);
  }

  return res;
}

function ofArray(xs) {
  return ofArrayWithTail(xs, new _Types.List());
}

function isEmpty(_arg1) {
  if (_arg1.tail == null) {
    return true;
  } else {
    return false;
  }
}

function tryPickIndexedAux(f_mut, i_mut, _arg1_mut) {
  tryPickIndexedAux: while (true) {
    var f = f_mut,
        i = i_mut,
        _arg1 = _arg1_mut;

    if (_arg1.tail != null) {
      var result = f(i, _arg1.head);

      if (result == null) {
        f_mut = f;
        i_mut = i + 1;
        _arg1_mut = _arg1.tail;
        continue tryPickIndexedAux;
      } else {
        return result;
      }
    } else {
      return void 0;
    }

    break;
  }
}

function tryPickIndexed(f, xs) {
  return tryPickIndexedAux(f, 0, xs);
}

function tryPick(f, xs) {
  return tryPickIndexed(function (_arg1, x) {
    return f(x);
  }, xs);
}

function pick(f, xs) {
  var matchValue = tryPick(f, xs);

  if (matchValue != null) {
    return (0, _Option.value)(matchValue);
  } else {
    throw new Error("List did not contain any matching elements");
  }
}

function tryFindIndexed(f, xs) {
  return tryPickIndexed(function (i, x) {
    return f(i, x) ? (0, _Option.some)(x) : void 0;
  }, xs);
}

function tryFind(f, xs) {
  return tryPickIndexed(function (_arg1, x) {
    return f(x) ? (0, _Option.some)(x) : void 0;
  }, xs);
}

function findIndexed(f, xs) {
  var matchValue = tryFindIndexed(f, xs);

  if (matchValue != null) {
    return (0, _Option.value)(matchValue);
  } else {
    throw new Error("List did not contain any matching elements");
  }
}

function find(f, xs) {
  return findIndexed(function (_arg1, x) {
    return f(x);
  }, xs);
}

function findBack(f, xs) {
  return find(f, reverse(xs));
}

function tryFindBack(f, xs) {
  return tryFind(f, reverse(xs));
}

function tryFindIndex(f, xs) {
  return tryPickIndexed(function (i, x) {
    return f(x) ? i : void 0;
  }, xs);
}

function tryFindIndexBack(f, xs) {
  return (0, _Array.tryFindIndexBack)(f, Array.from(xs));
}

function findIndex(f, xs) {
  var matchValue = tryFindIndex(f, xs);

  if (matchValue != null) {
    return matchValue | 0;
  } else {
    throw new Error("List did not contain any matching elements");
  }
}

function findIndexBack(f, xs) {
  return (0, _Array.findIndexBack)(f, Array.from(xs));
}

function item(n, xs) {
  return findIndexed(function (i, _arg1) {
    return n === i;
  }, xs);
}

function tryItem(n, xs) {
  return tryFindIndexed(function (i, _arg1) {
    return n === i;
  }, xs);
}

function filter(f, xs) {
  return reverse(fold(function (acc, x) {
    return f(x) ? new _Types.List(x, acc) : acc;
  }, new _Types.List(), xs));
}

function partition(f, xs) {
  return fold((0, _Util.uncurry)(2, function (tupledArg) {
    var lacc = tupledArg[0];
    var racc = tupledArg[1];
    return function (x) {
      return f(x) ? [new _Types.List(x, lacc), racc] : [lacc, new _Types.List(x, racc)];
    };
  }), [new _Types.List(), new _Types.List()], reverse(xs));
}

function choose(f, xs) {
  return reverse(fold(function (acc, x) {
    var matchValue = f(x);
    return matchValue == null ? acc : new _Types.List((0, _Option.value)(matchValue), acc);
  }, new _Types.List(), xs));
}

function contains(value, list, eq) {
  var loop = function loop(xs_mut) {
    loop: while (true) {
      var xs = xs_mut;

      if (xs.tail != null) {
        if (eq.Equals(value, xs.head)) {
          return true;
        } else {
          xs_mut = xs.tail;
          continue loop;
        }
      } else {
        return false;
      }

      break;
    }
  };

  return loop(list);
}

function except(itemsToExclude, array, eq) {
  if (isEmpty(array)) {
    return array;
  } else {
    var cached = new _MutableSet.HashSet(itemsToExclude, eq);
    return filter(function (arg00) {
      return (0, _MapUtil.addToSet)(arg00, cached);
    }, array);
  }
}

function initialize(n, f) {
  var xs = new _Types.List();

  for (var i = 0; i <= n - 1; i++) {
    xs = new _Types.List(f(i), xs);
  }

  return reverse(xs);
}

function replicate(n, x) {
  return initialize(n, function (_arg1) {
    return x;
  });
}

function reduce(f, _arg1) {
  if (_arg1.tail != null) {
    return fold(f, _arg1.head, _arg1.tail);
  } else {
    throw new Error("List was empty");
  }
}

function reduceBack(f, _arg1) {
  if (_arg1.tail != null) {
    return foldBack(f, _arg1.tail, _arg1.head);
  } else {
    throw new Error("List was empty");
  }
}

function forAll(f, xs) {
  return fold(function (acc, x) {
    return acc ? f(x) : false;
  }, true, xs);
}

function forAll2(f, xs, ys) {
  return fold2(function (acc, x, y) {
    return acc ? f(x, y) : false;
  }, true, xs, ys);
}

function exists(f_mut, _arg1_mut) {
  exists: while (true) {
    var f = f_mut,
        _arg1 = _arg1_mut;

    if (_arg1.tail != null) {
      if (f(_arg1.head)) {
        return true;
      } else {
        f_mut = f;
        _arg1_mut = _arg1.tail;
        continue exists;
      }
    } else {
      return false;
    }

    break;
  }
}

function exists2(f_mut, bs_mut, cs_mut) {
  exists2: while (true) {
    var f = f_mut,
        bs = bs_mut,
        cs = cs_mut;
    var matchValue = [bs, cs];
    var pattern_matching_result = void 0,
        x = void 0,
        xs = void 0,
        y = void 0,
        ys = void 0;

    if (matchValue[0].tail != null) {
      if (matchValue[1].tail != null) {
        pattern_matching_result = 1;
        x = matchValue[0].head;
        xs = matchValue[0].tail;
        y = matchValue[1].head;
        ys = matchValue[1].tail;
      } else {
        pattern_matching_result = 2;
      }
    } else if (matchValue[1].tail == null) {
      pattern_matching_result = 0;
    } else {
      pattern_matching_result = 2;
    }

    switch (pattern_matching_result) {
      case 0:
        {
          return false;
        }

      case 1:
        {
          if (f(x, y)) {
            return true;
          } else {
            f_mut = f;
            bs_mut = xs;
            cs_mut = ys;
            continue exists2;
          }
        }

      case 2:
        {
          throw new Error("Lists had different lengths");
        }
    }

    break;
  }
}

function unzip(xs) {
  return foldBack(function (tupledArg, tupledArg_1) {
    return [new _Types.List(tupledArg[0], tupledArg_1[0]), new _Types.List(tupledArg[1], tupledArg_1[1])];
  }, xs, [new _Types.List(), new _Types.List()]);
}

function unzip3(xs) {
  return foldBack(function (tupledArg, tupledArg_1) {
    return [new _Types.List(tupledArg[0], tupledArg_1[0]), new _Types.List(tupledArg[1], tupledArg_1[1]), new _Types.List(tupledArg[2], tupledArg_1[2])];
  }, xs, [new _Types.List(), new _Types.List(), new _Types.List()]);
}

function zip(xs, ys) {
  return map2(function (x, y) {
    return [x, y];
  }, xs, ys);
}

function zip3(xs, ys, zs) {
  return map3(function (x, y, z) {
    return [x, y, z];
  }, xs, ys, zs);
}

function sort(xs, comparer) {
  var xs_1;
  return ofArray((xs_1 = Array.from(xs), (xs_1.sort(function (x, y) {
    return comparer.Compare(x, y);
  }), xs_1)));
}

function sortBy(projection, xs, comparer) {
  var xs_1;
  return ofArray((xs_1 = Array.from(xs), (xs_1.sort(function (x, y) {
    return comparer.Compare(projection(x), projection(y));
  }), xs_1)));
}

function sortDescending(xs, comparer) {
  var xs_1;
  return ofArray((xs_1 = Array.from(xs), (xs_1.sort(function (x, y) {
    return comparer.Compare(x, y) * -1;
  }), xs_1)));
}

function sortByDescending(projection, xs, comparer) {
  var xs_1;
  return ofArray((xs_1 = Array.from(xs), (xs_1.sort(function (x, y) {
    return comparer.Compare(projection(x), projection(y)) * -1;
  }), xs_1)));
}

function sortWith(comparer, xs) {
  var comparer_1, xs_1;
  return ofArray((comparer_1 = comparer, (xs_1 = Array.from(xs), (xs_1.sort(comparer_1), xs_1))));
}

function sum(xs, adder) {
  return fold(function (acc, x) {
    return adder.Add(acc, x);
  }, adder.GetZero(), xs);
}

function sumBy(f, xs, adder) {
  return fold(function (acc, x) {
    return adder.Add(acc, f(x));
  }, adder.GetZero(), xs);
}

function maxBy(projection, xs, comparer) {
  return reduce(function (x, y) {
    return comparer.Compare(projection(y), projection(x)) > 0 ? y : x;
  }, xs);
}

function max(li, comparer) {
  return reduce(function (x, y) {
    return comparer.Compare(y, x) > 0 ? y : x;
  }, li);
}

function minBy(projection, xs, comparer) {
  return reduce(function (x, y) {
    return comparer.Compare(projection(y), projection(x)) > 0 ? x : y;
  }, xs);
}

function min(xs, comparer) {
  return reduce(function (x, y) {
    return comparer.Compare(y, x) > 0 ? x : y;
  }, xs);
}

function average(xs, averager) {
  return averager.DivideByInt(fold(function (acc, x) {
    return averager.Add(acc, x);
  }, averager.GetZero(), xs), length(xs));
}

function averageBy(f, xs, averager) {
  return averager.DivideByInt(fold(function (acc, x) {
    return averager.Add(acc, f(x));
  }, averager.GetZero(), xs), length(xs));
}

function permute(f, xs) {
  return ofArray((0, _Array.permute)(f, Array.from(xs)));
}

function chunkBySize(chunkSize, xs) {
  return map(ofArray, ofArray((0, _Array.chunkBySize)(chunkSize, Array.from(xs))));
}

function skip(i, xs) {
  var skipInner = function skipInner(i_1_mut, xs_1_mut) {
    skipInner: while (true) {
      var i_1 = i_1_mut,
          xs_1 = xs_1_mut;
      var matchValue = [i_1, xs_1];

      if (matchValue[0] === 0) {
        return xs_1;
      } else if (matchValue[1].tail != null) {
        i_1_mut = i_1 - 1;
        xs_1_mut = matchValue[1].tail;
        continue skipInner;
      } else {
        throw new Error("The input sequence has an insufficient number of elements.");
      }

      break;
    }
  };

  var matchValue_1 = [i, xs];

  if (matchValue_1[0] < 0) {
    throw new Error("The input must be non-negative.");
  } else {
    var pattern_matching_result, i_4, xs_4;

    if (matchValue_1[0] === 0) {
      pattern_matching_result = 0;
    } else if (matchValue_1[0] === 1) {
      if (matchValue_1[1].tail != null) {
        pattern_matching_result = 1;
      } else {
        pattern_matching_result = 2;
        i_4 = matchValue_1[0];
        xs_4 = matchValue_1[1];
      }
    } else {
      pattern_matching_result = 2;
      i_4 = matchValue_1[0];
      xs_4 = matchValue_1[1];
    }

    switch (pattern_matching_result) {
      case 0:
        {
          return xs;
        }

      case 1:
        {
          return matchValue_1[1].tail;
        }

      case 2:
        {
          return skipInner(i_4, xs_4);
        }
    }
  }
}

function skipWhile(predicate_mut, xs_mut) {
  skipWhile: while (true) {
    var predicate = predicate_mut,
        xs = xs_mut;
    var pattern_matching_result = void 0,
        h_1 = void 0,
        t_1 = void 0;

    if (xs.tail != null) {
      if (predicate(xs.head)) {
        pattern_matching_result = 0;
        h_1 = xs.head;
        t_1 = xs.tail;
      } else {
        pattern_matching_result = 1;
      }
    } else {
      pattern_matching_result = 1;
    }

    switch (pattern_matching_result) {
      case 0:
        {
          predicate_mut = predicate;
          xs_mut = t_1;
          continue skipWhile;
        }

      case 1:
        {
          return xs;
        }
    }

    break;
  }
}

function takeSplitAux(error_mut, i_mut, acc_mut, xs_mut) {
  takeSplitAux: while (true) {
    var error = error_mut,
        i = i_mut,
        acc = acc_mut,
        xs = xs_mut;
    var matchValue = [i, xs];

    if (matchValue[0] === 0) {
      return [reverse(acc), xs];
    } else if (matchValue[1].tail != null) {
      error_mut = error;
      i_mut = i - 1;
      acc_mut = new _Types.List(matchValue[1].head, acc);
      xs_mut = matchValue[1].tail;
      continue takeSplitAux;
    } else if (error) {
      throw new Error("The input sequence has an insufficient number of elements.");
    } else {
      return [reverse(acc), xs];
    }

    break;
  }
}

function take(i, xs) {
  var matchValue = [i, xs];

  if (matchValue[0] < 0) {
    throw new Error("The input must be non-negative.");
  } else {
    var pattern_matching_result, i_3, xs_1;

    if (matchValue[0] === 0) {
      pattern_matching_result = 0;
    } else if (matchValue[0] === 1) {
      if (matchValue[1].tail != null) {
        pattern_matching_result = 1;
      } else {
        pattern_matching_result = 2;
        i_3 = matchValue[0];
        xs_1 = matchValue[1];
      }
    } else {
      pattern_matching_result = 2;
      i_3 = matchValue[0];
      xs_1 = matchValue[1];
    }

    switch (pattern_matching_result) {
      case 0:
        {
          return new _Types.List();
        }

      case 1:
        {
          return new _Types.List(matchValue[1].head, new _Types.List());
        }

      case 2:
        {
          return takeSplitAux(true, i_3, new _Types.List(), xs_1)[0];
        }
    }
  }
}

function takeWhile(predicate, xs) {
  if (xs.tail != null) {
    if (xs.tail.tail == null) {
      if (predicate(xs.head)) {
        return xs;
      } else {
        return xs.tail;
      }
    } else if (!predicate(xs.head)) {
      return new _Types.List();
    } else {
      return new _Types.List(xs.head, takeWhile(predicate, xs.tail));
    }
  } else {
    return xs;
  }
}

function truncate(i, xs) {
  var matchValue = [i, xs];

  if (matchValue[0] < 0) {
    throw new Error("The input must be non-negative.");
  } else {
    var pattern_matching_result, i_3, xs_1;

    if (matchValue[0] === 0) {
      pattern_matching_result = 0;
    } else if (matchValue[0] === 1) {
      if (matchValue[1].tail != null) {
        pattern_matching_result = 1;
      } else {
        pattern_matching_result = 2;
        i_3 = matchValue[0];
        xs_1 = matchValue[1];
      }
    } else {
      pattern_matching_result = 2;
      i_3 = matchValue[0];
      xs_1 = matchValue[1];
    }

    switch (pattern_matching_result) {
      case 0:
        {
          return new _Types.List();
        }

      case 1:
        {
          return new _Types.List(matchValue[1].head, new _Types.List());
        }

      case 2:
        {
          return takeSplitAux(false, i_3, new _Types.List(), xs_1)[0];
        }
    }
  }
}

function splitAt(i, xs) {
  var matchValue = [i, xs];

  if (matchValue[0] < 0) {
    throw new Error("The input must be non-negative.");
  } else {
    var pattern_matching_result, i_3, xs_2;

    if (matchValue[0] === 0) {
      pattern_matching_result = 0;
    } else if (matchValue[0] === 1) {
      if (matchValue[1].tail != null) {
        pattern_matching_result = 1;
      } else {
        pattern_matching_result = 2;
        i_3 = matchValue[0];
        xs_2 = matchValue[1];
      }
    } else {
      pattern_matching_result = 2;
      i_3 = matchValue[0];
      xs_2 = matchValue[1];
    }

    switch (pattern_matching_result) {
      case 0:
        {
          return [new _Types.List(), xs];
        }

      case 1:
        {
          return [new _Types.List(matchValue[1].head, new _Types.List()), matchValue[1].tail];
        }

      case 2:
        {
          return takeSplitAux(true, i_3, new _Types.List(), xs_2);
        }
    }
  }
}

function outOfRange() {
  throw new Error("Index out of range");
}

function getSlice(lower, upper, xs) {
  var lower_1 = (0, _Option.defaultArg)(lower, 0) | 0;
  var hasUpper = upper != null;

  if (lower_1 < 0) {
    return outOfRange();
  } else if (hasUpper ? upper < lower_1 : false) {
    return new _Types.List();
  } else {
    var lastIndex = -1;
    var res = foldIndexed(function (i, acc, x) {
      lastIndex = i;

      if (lower_1 <= i ? !hasUpper ? true : i <= upper : false) {
        return new _Types.List(x, acc);
      } else {
        return acc;
      }
    }, new _Types.List(), xs);

    if (lower_1 > lastIndex + 1 ? true : hasUpper ? upper > lastIndex : false) {
      outOfRange();
    }

    return reverse(res);
  }
}

function distinctBy(projection, xs, eq) {
  var hashSet = new _MutableSet.HashSet([], eq);
  return filter(function (arg) {
    return (0, _MapUtil.addToSet)(projection(arg), hashSet);
  }, xs);
}

function distinct(xs, eq) {
  return distinctBy(function (x) {
    return x;
  }, xs, eq);
}

function exactlyOne(xs) {
  if (xs.tail != null) {
    if (xs.tail.tail != null) {
      throw new Error("Input list too long\\nParameter name: list");
    } else {
      return xs.head;
    }
  } else {
    throw new Error("The input sequence was empty\\nParameter name: list");
  }
}

function groupBy(projection, xs, eq) {
  var dict = new _MutableMap.Dictionary([], eq);
  var keys = new _Types.List();
  iterate(function (v) {
    var key = projection(v);
    var matchValue;
    var outArg = null;
    matchValue = [(0, _MapUtil.tryGetValue)(dict, key, new _Types.FSharpRef(function () {
      return outArg;
    }, function (v_1) {
      outArg = v_1;
    })), outArg];

    if (matchValue[0]) {
      dict.set(key, new _Types.List(v, matchValue[1]));
    } else {
      (0, _MapUtil.addToDict)(dict, key, new _Types.List(v, new _Types.List()));
      keys = new _Types.List(key, keys);
    }
  }, xs);
  var result = new _Types.List();
  iterate(function (key_1) {
    result = new _Types.List([key_1, reverse((0, _MapUtil.getItemFromDict)(dict, key_1))], result);
  }, keys);
  return result;
}

function countBy(projection, xs, eq) {
  var dict = new _MutableMap.Dictionary([], eq);
  var keys = new _Types.List();
  iterate(function (v) {
    var key = projection(v);
    var matchValue;
    var outArg = 0;
    matchValue = [(0, _MapUtil.tryGetValue)(dict, key, new _Types.FSharpRef(function () {
      return outArg;
    }, function (v_1) {
      outArg = v_1;
    })), outArg];

    if (matchValue[0]) {
      dict.set(key, matchValue[1] + 1);
    } else {
      dict.set(key, 1);
      keys = new _Types.List(key, keys);
    }
  }, xs);
  var result = new _Types.List();
  iterate(function (key_1) {
    result = new _Types.List([key_1, (0, _MapUtil.getItemFromDict)(dict, key_1)], result);
  }, keys);
  return result;
}

function where(predicate, source) {
  return filter(predicate, source);
}

function pairwise(source) {
  return ofSeq((0, _Seq.pairwise)(source));
}

function windowed(windowSize, source) {
  if (windowSize <= 0) {
    throw new Error("windowSize must be positive");
  }

  var res = new _Types.List();

  for (var i = length(source); i >= windowSize; i--) {
    res = new _Types.List(getSlice(i - windowSize, i - 1, source), res);
  }

  return res;
}

function splitInto(chunks, source) {
  return map(ofArray, ofArray((0, _Array.splitInto)(chunks, Array.from(source))));
}

function transpose(lists) {
  return ofSeq((0, _Seq.map)(ofSeq, (0, _Seq.transpose)(lists)));
}
},{"./Types.js":"../src/.fable/fable-library.3.0.0/Types.js","./Option.js":"../src/.fable/fable-library.3.0.0/Option.js","./Seq.js":"../src/.fable/fable-library.3.0.0/Seq.js","./Util.js":"../src/.fable/fable-library.3.0.0/Util.js","./Array.js":"../src/.fable/fable-library.3.0.0/Array.js","./MutableSet.js":"../src/.fable/fable-library.3.0.0/MutableSet.js","./MapUtil.js":"../src/.fable/fable-library.3.0.0/MapUtil.js","./MutableMap.js":"../src/.fable/fable-library.3.0.0/MutableMap.js"}],"../src/utils.fs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.throw$ = throw$;
exports.isPowerOf2 = isPowerOf2;
exports.adjustOffset = adjustOffset;
exports.boolToInt = boolToInt;
exports.clipString = clipString;
exports.clipArray = clipArray;
exports.clipObj = clipObj;
exports.enumName = enumName;
exports.WebglContextAttributes$reflection = WebglContextAttributes$reflection;
exports.getClientRect = getClientRect;
exports.Debug_indent = exports.Debug_logCollapsed = exports.Debug_collapsible = exports.Debug_enabled = exports.WebglContextAttributes = exports.DEG_PER_RAD = exports.RAD_PER_DEG = exports.ONE_DEGREE = exports.ONE_RADIAN = void 0;

var _String = require("./.fable/fable-library.3.0.0/String.js");

var _Types = require("./.fable/fable-library.3.0.0/Types.js");

var _Reflection = require("./.fable/fable-library.3.0.0/Reflection.js");

var _Util = require("./.fable/fable-library.3.0.0/Util.js");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function throw$(msg) {
  throw new Error(msg);
}

function isPowerOf2(x) {
  return (x & x - 1) === 0;
}

function adjustOffset(offset, align) {
  return ~~Math.ceil(offset / align) * align;
}

function boolToInt(b) {
  if (b) {
    return 1;
  } else {
    return 0;
  }
}

var ONE_RADIAN = 180 / 3.141592653589793;
exports.ONE_RADIAN = ONE_RADIAN;
var ONE_DEGREE = 3.141592653589793 / 180;
exports.ONE_DEGREE = ONE_DEGREE;
var RAD_PER_DEG = ONE_DEGREE * 1;
exports.RAD_PER_DEG = RAD_PER_DEG;
var DEG_PER_RAD = ONE_RADIAN * 1;
exports.DEG_PER_RAD = DEG_PER_RAD;

function clipString(count, str) {
  if (str.length > count) {
    return (0, _String.substring)(str, 0, count - 3) + "...";
  } else {
    return str;
  }
}

function clipArray(count, arr) {
  return clipString(count, (0, _String.toText)((0, _String.printf)("%A"))(arr));
}

function clipObj(count, o) {
  var copyOfStruct;
  return clipString(count, (copyOfStruct = o, (0, _Types.toString)(copyOfStruct)));
}

function enumName(enumType, value) {
  return (0, _Reflection.getEnumName)(enumType, value);
}

var WebglContextAttributes = /*#__PURE__*/function (_Record) {
  _inherits(WebglContextAttributes, _Record);

  var _super = _createSuper(WebglContextAttributes);

  function WebglContextAttributes(alpha, desynchronized, antialias, depth, failIfMajorPerformanceCaveat, powerPreference, premultipliedAlpha, preserveDrawingBuffer, stencil) {
    var _this;

    _classCallCheck(this, WebglContextAttributes);

    _this = _super.call(this);
    _this.alpha = alpha;
    _this.desynchronized = desynchronized;
    _this.antialias = antialias;
    _this.depth = depth;
    _this.failIfMajorPerformanceCaveat = failIfMajorPerformanceCaveat;
    _this.powerPreference = powerPreference;
    _this.premultipliedAlpha = premultipliedAlpha;
    _this.preserveDrawingBuffer = preserveDrawingBuffer;
    _this.stencil = stencil;
    return _this;
  }

  return WebglContextAttributes;
}(_Types.Record);

exports.WebglContextAttributes = WebglContextAttributes;

function WebglContextAttributes$reflection() {
  return (0, _Reflection.record_type)("Utils.WebglContextAttributes", [], WebglContextAttributes, function () {
    return [["alpha", _Reflection.bool_type], ["desynchronized", _Reflection.bool_type], ["antialias", _Reflection.bool_type], ["depth", _Reflection.bool_type], ["failIfMajorPerformanceCaveat", _Reflection.bool_type], ["powerPreference", _Reflection.string_type], ["premultipliedAlpha", _Reflection.bool_type], ["preserveDrawingBuffer", _Reflection.bool_type], ["stencil", _Reflection.bool_type]];
  });
}

function getClientRect(elem) {
  var cw = elem.clientWidth;
  var ch = elem.clientHeight;
  var rect = elem.getBoundingClientRect();
  rect.x = rect.x + (rect.width - cw) * 0.5;
  rect.y = rect.y + (rect.height - ch) * 0.5;
  rect.width = cw;
  rect.height = ch;
  return rect;
}

var Debug_enabled = (0, _Util.createAtom)(false);
exports.Debug_enabled = Debug_enabled;
var Debug_collapsible = (0, _Util.createAtom)(true);
exports.Debug_collapsible = Debug_collapsible;
var Debug_logCollapsed = (0, _Util.createAtom)(true);
exports.Debug_logCollapsed = Debug_logCollapsed;
var Debug_indent = (0, _Util.createAtom)("");
exports.Debug_indent = Debug_indent;
},{"./.fable/fable-library.3.0.0/String.js":"../src/.fable/fable-library.3.0.0/String.js","./.fable/fable-library.3.0.0/Types.js":"../src/.fable/fable-library.3.0.0/Types.js","./.fable/fable-library.3.0.0/Reflection.js":"../src/.fable/fable-library.3.0.0/Reflection.js","./.fable/fable-library.3.0.0/Util.js":"../src/.fable/fable-library.3.0.0/Util.js"}],"../src/mouse.fs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ListenerOptions$reflection = ListenerOptions$reflection;
exports.Mouse$reflection = Mouse$reflection;
exports.Mouse_$ctor_Z38C79397 = Mouse_$ctor_Z38C79397;
exports.Mouse__get_DragTolerance = Mouse__get_DragTolerance;
exports.Mouse__set_DragTolerance_Z16DF143 = Mouse__set_DragTolerance_Z16DF143;
exports.Mouse__get_Changed = Mouse__get_Changed;
exports.Mouse__get_Position = Mouse__get_Position;
exports.Mouse__get_LastPosition = Mouse__get_LastPosition;
exports.Mouse__get_PositionDelta = Mouse__get_PositionDelta;
exports.Mouse__get_WheelDelta = Mouse__get_WheelDelta;
exports.Mouse__IsButtonPressed_Z524259A4 = Mouse__IsButtonPressed_Z524259A4;
exports.Mouse__IsButtonDownEvent_Z524259A4 = Mouse__IsButtonDownEvent_Z524259A4;
exports.Mouse__IsButtonUpEvent_Z524259A4 = Mouse__IsButtonUpEvent_Z524259A4;
exports.Mouse__DragOrigin_Z524259A4 = Mouse__DragOrigin_Z524259A4;
exports.Mouse__DragOriginDelta_Z524259A4 = Mouse__DragOriginDelta_Z524259A4;
exports.Mouse__get_IsWheelEvent = Mouse__get_IsWheelEvent;
exports.Mouse__get_IsMoveEvent = Mouse__get_IsMoveEvent;
exports.Mouse__IsDragStartEvent_Z524259A4 = Mouse__IsDragStartEvent_Z524259A4;
exports.Mouse__IsDragEvent_Z524259A4 = Mouse__IsDragEvent_Z524259A4;
exports.Mouse__IsDragEndEvent_Z524259A4 = Mouse__IsDragEndEvent_Z524259A4;
exports.Mouse__Update = Mouse__Update;
exports.MouseModule_rightButton = exports.MouseModule_middleButton = exports.MouseModule_leftButton = exports.Mouse = exports.ListenerOptions = void 0;

var _Types = require("./.fable/fable-library.3.0.0/Types.js");

var _Reflection = require("./.fable/fable-library.3.0.0/Reflection.js");

var _vectorsFs = require("./vectors.fs.js");

var _Event = _interopRequireDefault(require("./.fable/fable-library.3.0.0/Event.js"));

var _Array = require("./.fable/fable-library.3.0.0/Array.js");

var _Util = require("./.fable/fable-library.3.0.0/Util.js");

var _Seq = require("./.fable/fable-library.3.0.0/Seq.js");

var _List = require("./.fable/fable-library.3.0.0/List.js");

var _utilsFs = require("./utils.fs.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ListenerOptions = /*#__PURE__*/function (_Record) {
  _inherits(ListenerOptions, _Record);

  var _super = _createSuper(ListenerOptions);

  function ListenerOptions(capture, once, passive) {
    var _this;

    _classCallCheck(this, ListenerOptions);

    _this = _super.call(this);
    _this.capture = capture;
    _this.once = once;
    _this.passive = passive;
    return _this;
  }

  return ListenerOptions;
}(_Types.Record);

exports.ListenerOptions = ListenerOptions;

function ListenerOptions$reflection() {
  return (0, _Reflection.record_type)("Wil.ListenerOptions", [], ListenerOptions, function () {
    return [["capture", (0, _Reflection.option_type)(_Reflection.bool_type)], ["once", (0, _Reflection.option_type)(_Reflection.bool_type)], ["passive", (0, _Reflection.option_type)(_Reflection.bool_type)]];
  });
}

var Mouse = function Mouse(canvas) {
  var _this2 = this;

  _classCallCheck(this, Mouse);

  this.m = new _Types.FSharpRef(null);
  var m = this.m;
  this.canvas = canvas;
  this.m.contents = this;
  this.leftButton = 0;
  this.rightButton = 2;
  this.buttonPressed = [false, false, false];
  this.buttonDownEvent = [false, false, false];
  this.buttonUpEvent = [false, false, false];
  this.buttonLast = [false, false, false];
  this.wheelEvent = false;
  this.wheelEventLast = false;
  this.wheelDelta = (0, _vectorsFs.Vec2_Create)();
  this.position = (0, _vectorsFs.Vec2_Create)();
  this.lastPosition = (0, _vectorsFs.Vec2_Create)();
  this.positionDelta = (0, _vectorsFs.Vec2_Create)();
  this.moveEvent = false;
  this.dragOrigin = [(0, _vectorsFs.Vec2_Create)(), (0, _vectorsFs.Vec2_Create)(), (0, _vectorsFs.Vec2_Create)()];
  this.dragOriginDelta = [(0, _vectorsFs.Vec2_Create)(), (0, _vectorsFs.Vec2_Create)(), (0, _vectorsFs.Vec2_Create)()];
  this.dragPending = [false, false, false];
  this.dragging = [false, false, false];
  this.dragStartEvent = [false, false, false];
  this.dragEvent = [false, false, false];
  this.dragEndEvent = [false, false, false];
  this.changes = new _Event.default();
  window.addEventListener("contextmenu", function (arg) {
    var value = Mouse__handleContextMenu_Z5B3E8D2(_this2, arg);
    void value;
  });
  window.addEventListener("mousemove", function (arg_1) {
    var value_1 = Mouse__handleMouseMove_Z5B3E8D2(_this2, arg_1);
    void value_1;
  });
  window.addEventListener("mousedown", function (arg_2) {
    var value_2 = Mouse__handleMouseDown_Z5B3E8D2(_this2, arg_2);
    void undefined;
  });
  window.addEventListener("mouseup", function (arg_3) {
    var value_3 = Mouse__handleMouseUp_Z5B3E8D2(_this2, arg_3);
    void undefined;
  });
  var opts = new ListenerOptions(void 0, void 0, false);
  window.addEventListener("wheel", function (arg_4) {
    var value_4 = Mouse__handleMouseWheel_Z5B3E8D2(_this2, arg_4);
    void undefined;
  }, opts);
  this["DragTolerance@"] = 5;
  this["Changed@"] = this.changes.Publish;
  this["init@21-8"] = 1;
};

exports.Mouse = Mouse;

function Mouse$reflection() {
  return (0, _Reflection.class_type)("Wil.Mouse", void 0, Mouse);
}

function Mouse_$ctor_Z38C79397(canvas) {
  return new Mouse(canvas);
}

function Mouse__get_DragTolerance(__) {
  return __["DragTolerance@"];
}

function Mouse__set_DragTolerance_Z16DF143(__, v) {
  __["DragTolerance@"] = v;
}

function Mouse__get_Changed(__) {
  return __["Changed@"];
}

function Mouse__get_Position(_) {
  return _.position;
}

function Mouse__get_LastPosition(_) {
  return _.lastPosition;
}

function Mouse__get_PositionDelta(_) {
  return _.positionDelta;
}

function Mouse__get_WheelDelta(_) {
  return _.wheelDelta;
}

function Mouse__IsButtonPressed_Z524259A4(_, button) {
  return _.buttonPressed[button];
}

function Mouse__IsButtonDownEvent_Z524259A4(_, button) {
  return _.buttonDownEvent[button];
}

function Mouse__IsButtonUpEvent_Z524259A4(_, button) {
  return _.buttonUpEvent[button];
}

function Mouse__DragOrigin_Z524259A4(_, button) {
  return _.dragOrigin[button];
}

function Mouse__DragOriginDelta_Z524259A4(_, button) {
  return _.dragOriginDelta[button];
}

function Mouse__get_IsWheelEvent(_) {
  return _.wheelEvent;
}

function Mouse__get_IsMoveEvent(_) {
  return _.moveEvent;
}

function Mouse__IsDragStartEvent_Z524259A4(_, button) {
  return _.dragStartEvent[button];
}

function Mouse__IsDragEvent_Z524259A4(_, button) {
  return _.dragEvent[button];
}

function Mouse__IsDragEndEvent_Z524259A4(_, button) {
  return _.dragEndEvent[button];
}

function Mouse__Update(_) {
  var __25;

  _.moveEvent = !(0, _Array.equalsWith)(_Util.comparePrimitives, (0, _vectorsFs.Vec2__get_Values)(_.position), (0, _vectorsFs.Vec2__get_Values)(_.lastPosition));
  var other = (0, _vectorsFs.Vec2_op_Subtraction_5E235CE0)(_.position, _.lastPosition);
  var value_2;
  var __4 = _.positionDelta.v.contents;
  var x_1 = other.values[0];
  var y_1 = other.values[1];
  var __5 = __4.v.contents;
  __5.values[0] = x_1;
  var __6 = __4.v.contents;
  __6.values[1] = y_1;
  value_2 = __4.v.contents;
  void value_2;
  var other_1 = _.position;
  var value_5;
  var __10 = _.lastPosition.v.contents;
  var x_2 = other_1.values[0];
  var y_2 = other_1.values[1];
  var __11 = __10.v.contents;
  __11.values[0] = x_2;
  var __12 = __10.v.contents;
  __12.values[1] = y_2;
  value_5 = __10.v.contents;
  void value_5;
  _.wheelEvent = _.wheelEvent ? !_.wheelEventLast : false;
  _.wheelEventLast = _.wheelEvent;
  var enumerator = (0, _Seq.getEnumerator)((0, _List.ofSeq)((0, _Seq.rangeNumber)(_.leftButton, 1, _.rightButton)));

  try {
    while (enumerator["System.Collections.IEnumerator.MoveNext"]()) {
      var button = enumerator["System.Collections.Generic.IEnumerator`1.get_Current"]() | 0;
      _.buttonDownEvent[button] = !_.buttonLast[button] ? _.buttonPressed[button] : false;
      _.buttonUpEvent[button] = _.buttonLast[button] ? !_.buttonPressed[button] : false;
      _.buttonLast[button] = _.buttonPressed[button];
      _.dragEvent[button] = false;
      _.dragStartEvent[button] = false;
      _.dragEndEvent[button] = false;

      if (_.buttonUpEvent[button]) {
        _.dragEndEvent[button] = _.dragging[button];
        _.dragPending[button] = false;
        _.dragging[button] = false;
      }

      if (_.buttonDownEvent[button]) {
        var other_2 = _.position;
        var value_8 = void 0;
        var __16 = _.dragOrigin[button].v.contents;
        var x_3 = other_2.values[0];
        var y_3 = other_2.values[1];
        var __17 = __16.v.contents;
        __17.values[0] = x_3;
        var __18 = __16.v.contents;
        __18.values[1] = y_3;
        value_8 = __16.v.contents;
        void value_8;
        _.dragPending[button] = true;
        _.dragging[button] = false;
      }

      if (_.buttonPressed[button] ? _.moveEvent : false) {
        var __19 = _.dragOriginDelta[button];
        var other_3 = (0, _vectorsFs.Vec2_op_Subtraction_5E235CE0)(_.position, _.dragOrigin[button]);
        var value_11 = void 0;
        var __22 = __19.v.contents;
        var x_4 = other_3.values[0];
        var y_4 = other_3.values[1];
        var __23 = __22.v.contents;
        __23.values[0] = x_4;
        var __24 = __22.v.contents;
        __24.values[1] = y_4;
        value_11 = __22.v.contents;
        void value_11;

        if (_.dragPending[button]) {
          if ((__25 = _.dragOriginDelta[button], Math.sqrt(__25.v.contents.values[0] * __25.v.contents.values[0] + __25.v.contents.values[1] * __25.v.contents.values[1])) > Mouse__get_DragTolerance(_.m.contents)) {
            _.dragPending[button] = false;
            _.dragging[button] = true;
            _.dragStartEvent[button] = true;
            _.dragEvent[button] = true;
          }
        } else if (_.dragging[button]) {
          _.dragEvent[button] = true;
        }
      }
    }
  } finally {
    enumerator.Dispose();
  }
}

function Mouse__handleContextMenu_Z5B3E8D2(this$, event) {
  event.preventDefault();
  return false;
}

function Mouse__handleMouseMove_Z5B3E8D2(this$, event) {
  var event_1 = event;
  var rect = (0, _utilsFs.getClientRect)(this$.canvas);
  var mx = (0, _Util.round)((event_1.clientX - rect.x) * (this$.canvas.width / rect.width));
  var my = (0, _Util.round)((event_1.clientY - rect.y) * (this$.canvas.height / rect.height));

  if (((mx >= 0 ? mx < rect.width : false) ? my >= 0 : false) ? my < rect.height : false) {
    var _ = this$.position;
    var value_2 = (0, _vectorsFs.Vec2__WithXY_7EFBDC2A)(_.v.contents, mx, rect.height - 1 - my, _.v.contents);
    void value_2;
    this$.changes.Trigger();
    return true;
  } else {
    return false;
  }
}

function Mouse__handleMouseDown_Z5B3E8D2(this$, event) {
  if (Mouse__handleMouseMove_Z5B3E8D2(this$, event)) {
    var event_1 = event;
    this$.buttonPressed[~~event_1.button] = true;

    if (~~event_1.button === this$.rightButton) {
      event_1.preventDefault();
    }

    this$.changes.Trigger();
  }
}

function Mouse__handleMouseUp_Z5B3E8D2(this$, event) {
  var value = Mouse__handleMouseMove_Z5B3E8D2(this$, event);
  void value;
  var event_1 = event;
  this$.buttonPressed[~~event_1.button] = false;

  if (~~event_1.button === this$.rightButton) {
    event_1.preventDefault();
  }

  this$.changes.Trigger();
}

function Mouse__handleMouseWheel_Z5B3E8D2(this$, event) {
  if (Mouse__handleMouseMove_Z5B3E8D2(this$, event)) {
    var event_1 = event;
    this$.wheelEvent = true;
    var _ = this$.wheelDelta;
    var value = (0, _vectorsFs.Vec2__WithXY_7EFBDC2A)(_.v.contents, event_1.deltaX, event_1.deltaY, _.v.contents);
    void value;
    event_1.preventDefault();
    this$.changes.Trigger();
  }
}

var MouseModule_leftButton = 0;
exports.MouseModule_leftButton = MouseModule_leftButton;
var MouseModule_middleButton = 1;
exports.MouseModule_middleButton = MouseModule_middleButton;
var MouseModule_rightButton = 2;
exports.MouseModule_rightButton = MouseModule_rightButton;
},{"./.fable/fable-library.3.0.0/Types.js":"../src/.fable/fable-library.3.0.0/Types.js","./.fable/fable-library.3.0.0/Reflection.js":"../src/.fable/fable-library.3.0.0/Reflection.js","./vectors.fs.js":"../src/vectors.fs.js","./.fable/fable-library.3.0.0/Event.js":"../src/.fable/fable-library.3.0.0/Event.js","./.fable/fable-library.3.0.0/Array.js":"../src/.fable/fable-library.3.0.0/Array.js","./.fable/fable-library.3.0.0/Util.js":"../src/.fable/fable-library.3.0.0/Util.js","./.fable/fable-library.3.0.0/Seq.js":"../src/.fable/fable-library.3.0.0/Seq.js","./.fable/fable-library.3.0.0/List.js":"../src/.fable/fable-library.3.0.0/List.js","./utils.fs.js":"../src/utils.fs.js"}],"../src/bounds.fs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Bounds$reflection = Bounds$reflection;
exports.Bounds_$ctor_5E235CE0 = Bounds_$ctor_5E235CE0;
exports.Bounds_Create_299C7800 = Bounds_Create_299C7800;
exports.Bounds__get_Center = Bounds__get_Center;
exports.Bounds__get_HalfSize = Bounds__get_HalfSize;
exports.Bounds__get_Values = Bounds__get_Values;
exports.Bounds__get_RectValues = Bounds__get_RectValues;
exports.Bounds__get_Size = Bounds__get_Size;
exports.Bounds__get_Min = Bounds__get_Min;
exports.Bounds__get_Max = Bounds__get_Max;
exports.Bounds__get_Left = Bounds__get_Left;
exports.Bounds__get_Right = Bounds__get_Right;
exports.Bounds__get_Anchor = Bounds__get_Anchor;
exports.Bounds__get_X = Bounds__get_X;
exports.Bounds__get_Y = Bounds__get_Y;
exports.Bounds__get_Width = Bounds__get_Width;
exports.Bounds__get_Height = Bounds__get_Height;
exports.Bounds__get_W = Bounds__get_W;
exports.Bounds__get_H = Bounds__get_H;
exports.Bounds__get_CenterX = Bounds__get_CenterX;
exports.Bounds__get_CenterY = Bounds__get_CenterY;
exports.Bounds__get_MaxRight = Bounds__get_MaxRight;
exports.Bounds__get_MaxCenter = Bounds__get_MaxCenter;
exports.Bounds__get_MaxLeft = Bounds__get_MaxLeft;
exports.Bounds__get_LeftCenter = Bounds__get_LeftCenter;
exports.Bounds__get_MinLeft = Bounds__get_MinLeft;
exports.Bounds__get_MinCenter = Bounds__get_MinCenter;
exports.Bounds__get_MinRight = Bounds__get_MinRight;
exports.Bounds__get_RightCenter = Bounds__get_RightCenter;
exports.Bounds__get_Quadrant1 = Bounds__get_Quadrant1;
exports.Bounds__get_Quadrant2 = Bounds__get_Quadrant2;
exports.Bounds__get_Quadrant3 = Bounds__get_Quadrant3;
exports.Bounds__get_Quadrant4 = Bounds__get_Quadrant4;
exports.Bounds__Clone = Bounds__Clone;
exports.Bounds__WithCenter_Z66910A61 = Bounds__WithCenter_Z66910A61;
exports.Bounds__WithCenterM_Z4BDB77B1 = Bounds__WithCenterM_Z4BDB77B1;
exports.Bounds__WithAnchor_Z66910A61 = Bounds__WithAnchor_Z66910A61;
exports.Bounds__WithAnchor_7B00E9A0 = Bounds__WithAnchor_7B00E9A0;
exports.Bounds__WithAnchorM_Z66910A61 = Bounds__WithAnchorM_Z66910A61;
exports.Bounds__WithAnchorM_7B00E9A0 = Bounds__WithAnchorM_7B00E9A0;
exports.Bounds__WithWidth_5E38073B = Bounds__WithWidth_5E38073B;
exports.Bounds__WithWidthM_Z16DF143 = Bounds__WithWidthM_Z16DF143;
exports.Bounds__WithHeight_5E38073B = Bounds__WithHeight_5E38073B;
exports.Bounds__WithHeightM_Z16DF143 = Bounds__WithHeightM_Z16DF143;
exports.Bounds__WithSize_Z66910A61 = Bounds__WithSize_Z66910A61;
exports.Bounds__WithSize_2E41E8E0 = Bounds__WithSize_2E41E8E0;
exports.Bounds__WithSize_Z16DF143 = Bounds__WithSize_Z16DF143;
exports.Bounds__WithSizeM_Z66910A61 = Bounds__WithSizeM_Z66910A61;
exports.Bounds__WithSizeM_2E41E8E0 = Bounds__WithSizeM_2E41E8E0;
exports.Bounds__WithSizeM_Z16DF143 = Bounds__WithSizeM_Z16DF143;
exports.Bounds__WithHalfSize_Z66910A61 = Bounds__WithHalfSize_Z66910A61;
exports.Bounds__WithHalfSize_7B00E9A0 = Bounds__WithHalfSize_7B00E9A0;
exports.Bounds__WithHalfSize_5E38073B = Bounds__WithHalfSize_5E38073B;
exports.Bounds__WithHalfSizeM_Z66910A61 = Bounds__WithHalfSizeM_Z66910A61;
exports.Bounds__WithHalfSizeM_7B00E9A0 = Bounds__WithHalfSizeM_7B00E9A0;
exports.Bounds__WithHalfSizeM_5E38073B = Bounds__WithHalfSizeM_5E38073B;
exports.Bounds__Inflate_Z66910A61 = Bounds__Inflate_Z66910A61;
exports.Bounds__Inflate_7B00E9A0 = Bounds__Inflate_7B00E9A0;
exports.Bounds__Inflate_5E38073B = Bounds__Inflate_5E38073B;
exports.Bounds__InflateM_Z66910A61 = Bounds__InflateM_Z66910A61;
exports.Bounds__InflateM_7B00E9A0 = Bounds__InflateM_7B00E9A0;
exports.Bounds__InflateM_5E38073B = Bounds__InflateM_5E38073B;
exports.Bounds__MaxWith_Z780DF58B = Bounds__MaxWith_Z780DF58B;
exports.Bounds__MaxWithM_Z134B2C62 = Bounds__MaxWithM_Z134B2C62;
exports.Bounds__MinWith_Z780DF58B = Bounds__MinWith_Z780DF58B;
exports.Bounds__MinWithM_Z134B2C62 = Bounds__MinWithM_Z134B2C62;
exports.Bounds__Clamp_Z780DF58B = Bounds__Clamp_Z780DF58B;
exports.Bounds__ClampM_Z134B2C62 = Bounds__ClampM_Z134B2C62;
exports.Bounds__ClampVec_62A868F5 = Bounds__ClampVec_62A868F5;
exports.Bounds__Contains_Z66910A61 = Bounds__Contains_Z66910A61;
exports.Bounds__IntersectsWith_Z134B2C62 = Bounds__IntersectsWith_Z134B2C62;
exports.Bounds_get_Zero = Bounds_get_Zero;
exports.BoundsPatterns_$007CBoundsRect$007C = BoundsPatterns_$007CBoundsRect$007C;
exports.BoundsPatterns_$007COptBoundsRect$007C = BoundsPatterns_$007COptBoundsRect$007C;
exports.BoundsPatterns_$007CBoundsRange$007C = BoundsPatterns_$007CBoundsRange$007C;
exports.BoundsPatterns_$007COptBoundsRange$007C = BoundsPatterns_$007COptBoundsRange$007C;
exports.BoundsPatterns_$007CBoundsDim$007C = BoundsPatterns_$007CBoundsDim$007C;
exports.BoundsModule_bounds = BoundsModule_bounds;
exports.BoundsModule_boundsV = BoundsModule_boundsV;
exports.BoundsModule_boundsSize = BoundsModule_boundsSize;
exports.BoundsModule_boundsSizeV = BoundsModule_boundsSizeV;
exports.BoundsModule_boundsCenter = BoundsModule_boundsCenter;
exports.BoundsModule_boundsCenterV = BoundsModule_boundsCenterV;
exports.BoundsModule_boundsCenterHalf = BoundsModule_boundsCenterHalf;
exports.BoundsModule_boundsCenterHalfV = BoundsModule_boundsCenterHalfV;
exports.Bounds = void 0;

var _String = require("./.fable/fable-library.3.0.0/String.js");

var _Types = require("./.fable/fable-library.3.0.0/Types.js");

var _Reflection = require("./.fable/fable-library.3.0.0/Reflection.js");

var _vectorsFs = require("./vectors.fs.js");

var _optionexFs = require("./optionex.fs.js");

var _Util = require("./.fable/fable-library.3.0.0/Util.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Bounds = /*#__PURE__*/function () {
  function Bounds(center, halfSize) {
    _classCallCheck(this, Bounds);

    this.b = new _Types.FSharpRef(null);
    var b = this.b;
    this.b.contents = this;
    this["Center@"] = center;
    this["HalfSize@"] = halfSize;
    this["init@6-7"] = 1;
  }

  _createClass(Bounds, [{
    key: "toString",
    value: function toString() {
      var b = this;
      var arg20 = Bounds__get_Max(b);
      var arg10 = Bounds__get_Min(b);
      return (0, _String.toText)((0, _String.printf)("%A -> %A"))(arg10)(arg20);
    }
  }]);

  return Bounds;
}();

exports.Bounds = Bounds;

function Bounds$reflection() {
  return (0, _Reflection.class_type)("Wil.Twod.Bounds", void 0, Bounds);
}

function Bounds_$ctor_5E235CE0(center, halfSize) {
  return new Bounds(center, halfSize);
}

function Bounds_Create_299C7800(x, y, w, h) {
  return Bounds_$ctor_5E235CE0((0, _vectorsFs.Vec2Module_vec2)(x, y), (0, _vectorsFs.Vec2Module_vec2)(w * 0.5, h * 0.5));
}

function Bounds__get_Center(__) {
  return __["Center@"];
}

function Bounds__get_HalfSize(__) {
  return __["HalfSize@"];
}

function Bounds__get_Values(_) {
  var m = Bounds__get_Min(_.b.contents);
  return new Float64Array([m.values[0], m.values[1], Bounds__get_HalfSize(_.b.contents).values[0] * 2, Bounds__get_HalfSize(_.b.contents).values[1] * 2]);
}

function Bounds__get_RectValues(_) {
  var mn = Bounds__get_Min(_.b.contents);
  var mx = Bounds__get_Max(_.b.contents);
  return new Float64Array([mn.values[0], mn.values[1], mx.values[0], mx.values[1]]);
}

function Bounds__get_Size(_) {
  return (0, _vectorsFs.Vec2__Scale_Z7F22D0EF)(Bounds__get_HalfSize(_.b.contents), 2);
}

function Bounds__get_Min(_) {
  return (0, _vectorsFs.Vec2__Sub_62A868F5)(Bounds__get_Center(_.b.contents), Bounds__get_HalfSize(_.b.contents));
}

function Bounds__get_Max(_) {
  return (0, _vectorsFs.Vec2__Add_62A868F5)(Bounds__get_Center(_.b.contents), Bounds__get_HalfSize(_.b.contents));
}

function Bounds__get_Left(_) {
  return Bounds__get_Center(_.b.contents).values[0] - Bounds__get_HalfSize(_.b.contents).values[0];
}

function Bounds__get_Right(_) {
  return Bounds__get_Center(_.b.contents).values[0] + Bounds__get_HalfSize(_.b.contents).values[0];
}

function Bounds__get_Anchor(_) {
  return Bounds__get_Min(_.b.contents);
}

function Bounds__get_X(_) {
  return Bounds__get_Min(_.b.contents).values[0];
}

function Bounds__get_Y(_) {
  return Bounds__get_Min(_.b.contents).values[1];
}

function Bounds__get_Width(_) {
  return Bounds__get_HalfSize(_.b.contents).values[0] * 2;
}

function Bounds__get_Height(_) {
  return Bounds__get_HalfSize(_.b.contents).values[1] * 2;
}

function Bounds__get_W(_) {
  return Bounds__get_HalfSize(_.b.contents).values[0] * 2;
}

function Bounds__get_H(_) {
  return Bounds__get_HalfSize(_.b.contents).values[1] * 2;
}

function Bounds__get_CenterX(_) {
  return Bounds__get_Center(_.b.contents).values[0];
}

function Bounds__get_CenterY(_) {
  return Bounds__get_Center(_.b.contents).values[1];
}

function Bounds__get_MaxRight(_) {
  return (0, _vectorsFs.Vec2_op_Addition_5E235CE0)(Bounds__get_Center(_.b.contents), Bounds__get_HalfSize(_.b.contents));
}

function Bounds__get_MaxCenter(_) {
  return (0, _vectorsFs.Vec2Module_vec2)(Bounds__get_Center(_.b.contents).values[0], Bounds__get_Center(_.b.contents).values[1] + Bounds__get_HalfSize(_.b.contents).values[1]);
}

function Bounds__get_MaxLeft(_) {
  return (0, _vectorsFs.Vec2Module_vec2)(Bounds__get_Center(_.b.contents).values[0] - Bounds__get_HalfSize(_.b.contents).values[0], Bounds__get_Center(_.b.contents).values[1] + Bounds__get_HalfSize(_.b.contents).values[1]);
}

function Bounds__get_LeftCenter(_) {
  return (0, _vectorsFs.Vec2Module_vec2)(Bounds__get_Center(_.b.contents).values[0] - Bounds__get_HalfSize(_.b.contents).values[0], Bounds__get_Center(_.b.contents).values[1]);
}

function Bounds__get_MinLeft(_) {
  return (0, _vectorsFs.Vec2_op_Subtraction_5E235CE0)(Bounds__get_Center(_.b.contents), Bounds__get_HalfSize(_.b.contents));
}

function Bounds__get_MinCenter(_) {
  return (0, _vectorsFs.Vec2Module_vec2)(Bounds__get_Center(_.b.contents).values[0], Bounds__get_Center(_.b.contents).values[1] - Bounds__get_HalfSize(_.b.contents).values[1]);
}

function Bounds__get_MinRight(_) {
  return (0, _vectorsFs.Vec2Module_vec2)(Bounds__get_Center(_.b.contents).values[0] + Bounds__get_HalfSize(_.b.contents).values[0], Bounds__get_Center(_.b.contents).values[1] - Bounds__get_HalfSize(_.b.contents).values[1]);
}

function Bounds__get_RightCenter(_) {
  return (0, _vectorsFs.Vec2Module_vec2)(Bounds__get_Center(_.b.contents).values[0] + Bounds__get_HalfSize(_.b.contents).values[0], Bounds__get_Center(_.b.contents).values[1]);
}

function Bounds__get_Quadrant1(_) {
  var quarterSize = (0, _vectorsFs.Vec2_op_Multiply_Z668A51BC)(Bounds__get_HalfSize(_.b.contents), 0.5);
  return Bounds_$ctor_5E235CE0((0, _vectorsFs.Vec2_op_Addition_5E235CE0)(Bounds__get_Center(_.b.contents), quarterSize), quarterSize);
}

function Bounds__get_Quadrant2(_) {
  var quarterSize = (0, _vectorsFs.Vec2_op_Multiply_Z668A51BC)(Bounds__get_HalfSize(_.b.contents), 0.5);
  return Bounds_$ctor_5E235CE0((0, _vectorsFs.Vec2_op_Addition_5E235CE0)(Bounds__get_Center(_.b.contents), (0, _vectorsFs.Vec2Module_vec2)(-quarterSize.values[0], quarterSize.values[1])), quarterSize);
}

function Bounds__get_Quadrant3(_) {
  var quarterSize = (0, _vectorsFs.Vec2_op_Multiply_Z668A51BC)(Bounds__get_HalfSize(_.b.contents), 0.5);
  return Bounds_$ctor_5E235CE0((0, _vectorsFs.Vec2_op_Subtraction_5E235CE0)(Bounds__get_Center(_.b.contents), quarterSize), quarterSize);
}

function Bounds__get_Quadrant4(_) {
  var quarterSize = (0, _vectorsFs.Vec2_op_Multiply_Z668A51BC)(Bounds__get_HalfSize(_.b.contents), 0.5);
  return Bounds_$ctor_5E235CE0((0, _vectorsFs.Vec2_op_Addition_5E235CE0)(Bounds__get_Center(_.b.contents), (0, _vectorsFs.Vec2Module_vec2)(quarterSize.values[0], -quarterSize.values[1])), quarterSize);
}

function Bounds__Clone(_) {
  return Bounds_$ctor_5E235CE0((0, _vectorsFs.Vec2__Clone)(Bounds__get_Center(_.b.contents)), (0, _vectorsFs.Vec2__Clone)(Bounds__get_HalfSize(_.b.contents)));
}

function Bounds__WithCenter_Z66910A61(_, value) {
  return Bounds_$ctor_5E235CE0(value, (0, _vectorsFs.Vec2__Clone)(Bounds__get_HalfSize(_.b.contents)));
}

function Bounds__WithCenterM_Z4BDB77B1(_, value) {
  var tupledArg = value;

  var __1 = Bounds__get_Center(_.b.contents);

  var value_1 = (0, _vectorsFs.Vec2__WithXY_7EFBDC2A)(__1.v.contents, tupledArg[0], tupledArg[1], __1.v.contents);
  void value_1;
}

function Bounds__WithAnchor_Z66910A61(_, value) {
  return Bounds_$ctor_5E235CE0((0, _vectorsFs.Vec2__Add_62A868F5)(value, Bounds__get_HalfSize(_.b.contents)), (0, _vectorsFs.Vec2__Clone)(Bounds__get_HalfSize(_.b.contents)));
}

function Bounds__WithAnchor_7B00E9A0(_, x, y) {
  return Bounds__WithAnchor_Z66910A61(_.b.contents, (0, _vectorsFs.Vec2Module_vec2)(x, y));
}

function Bounds__WithAnchorM_Z66910A61(_, value) {
  var __1 = Bounds__get_Center(_.b.contents);

  var other = (0, _vectorsFs.Vec2__Add_62A868F5)(value, Bounds__get_HalfSize(_.b.contents));
  var value_3;
  var __4 = __1.v.contents;
  var x = other.values[0];
  var y = other.values[1];
  var __5 = __4.v.contents;
  __5.values[0] = x;
  var __6 = __4.v.contents;
  __6.values[1] = y;
  value_3 = __4.v.contents;
  void value_3;
}

function Bounds__WithAnchorM_7B00E9A0(_, x, y) {
  var value = Bounds__WithAnchor_Z66910A61(_.b.contents, (0, _vectorsFs.Vec2Module_vec2)(x, y));
  void value;
}

function Bounds__WithWidth_5E38073B(_, w) {
  return Bounds_$ctor_5E235CE0((0, _vectorsFs.Vec2__Clone)(Bounds__get_Center(_.b.contents)), (0, _vectorsFs.Vec2Module_vec2)(w, Bounds__get_Height(_.b.contents)));
}

function Bounds__WithWidthM_Z16DF143(_, w) {
  var __1 = Bounds__get_HalfSize(_.b.contents);

  var value = (0, _vectorsFs.Vec2__WithX_Z7F22D0EF)(__1.v.contents, w * 0.5, __1.v.contents);
  void value;
}

function Bounds__WithHeight_5E38073B(_, h) {
  return Bounds_$ctor_5E235CE0((0, _vectorsFs.Vec2__Clone)(Bounds__get_Center(_.b.contents)), (0, _vectorsFs.Vec2Module_vec2)(Bounds__get_Width(_.b.contents), h));
}

function Bounds__WithHeightM_Z16DF143(_, h) {
  var __1 = Bounds__get_HalfSize(_.b.contents);

  var value = (0, _vectorsFs.Vec2__WithY_Z7F22D0EF)(__1.v.contents, h * 0.5, __1.v.contents);
  void value;
}

function Bounds__WithSize_Z66910A61(_, value) {
  return Bounds_$ctor_5E235CE0((0, _vectorsFs.Vec2__Clone)(Bounds__get_Center(_.b.contents)), (0, _vectorsFs.Vec2__Scale_Z7F22D0EF)(value, 0.5));
}

function Bounds__WithSize_2E41E8E0(_, x, y) {
  return Bounds_$ctor_5E235CE0((0, _vectorsFs.Vec2__Clone)(Bounds__get_Center(_.b.contents)), (0, _vectorsFs.Vec2Module_vec2)(x * 0.5, y * 0.5));
}

function Bounds__WithSize_Z16DF143(_, s) {
  var hs = s * 0.5;
  return Bounds_$ctor_5E235CE0((0, _vectorsFs.Vec2__Clone)(Bounds__get_Center(_.b.contents)), (0, _vectorsFs.Vec2Module_vec2)(hs, hs));
}

function Bounds__WithSizeM_Z66910A61(_, value) {
  var value_1 = (0, _vectorsFs.Vec2__Scale_Z7F22D0EF)(value, 0.5, Bounds__get_HalfSize(_.b.contents));
  void value_1;
}

function Bounds__WithSizeM_2E41E8E0(_, x, y) {
  var value = (0, _vectorsFs.Vec2__WithXY_7EFBDC2A)(Bounds__get_HalfSize(_.b.contents), x * 0.5, y * 0.5);
  void value;
}

function Bounds__WithSizeM_Z16DF143(_, s) {
  var hs = s * 0.5;
  var value = (0, _vectorsFs.Vec2__WithXY_7EFBDC2A)(Bounds__get_HalfSize(_.b.contents), hs, hs);
  void value;
}

function Bounds__WithHalfSize_Z66910A61(_, value) {
  return Bounds_$ctor_5E235CE0((0, _vectorsFs.Vec2__Clone)(Bounds__get_Center(_.b.contents)), value);
}

function Bounds__WithHalfSize_7B00E9A0(_, x, y) {
  return Bounds__WithHalfSize_Z66910A61(_.b.contents, (0, _vectorsFs.Vec2Module_vec2)(x, y));
}

function Bounds__WithHalfSize_5E38073B(_, s) {
  return Bounds__WithHalfSize_Z66910A61(_.b.contents, (0, _vectorsFs.Vec2Module_vec2)(s, s));
}

function Bounds__WithHalfSizeM_Z66910A61(_, value) {
  var other = value;
  var value_3;
  var __4 = Bounds__get_HalfSize(_.b.contents).v.contents;
  var x = other.values[0];
  var y = other.values[1];
  var __5 = __4.v.contents;
  __5.values[0] = x;
  var __6 = __4.v.contents;
  __6.values[1] = y;
  value_3 = __4.v.contents;
  void value_3;
}

function Bounds__WithHalfSizeM_7B00E9A0(_, x, y) {
  var value = (0, _vectorsFs.Vec2__WithXY_7EFBDC2A)(Bounds__get_HalfSize(_.b.contents), x, y);
  void value;
}

function Bounds__WithHalfSizeM_5E38073B(_, s) {
  var value = (0, _vectorsFs.Vec2__WithXY_7EFBDC2A)(Bounds__get_HalfSize(_.b.contents), s, s);
  void value;
}

function Bounds__Inflate_Z66910A61(_, value) {
  return Bounds_$ctor_5E235CE0((0, _vectorsFs.Vec2__Clone)(Bounds__get_Center(_.b.contents)), (0, _vectorsFs.Vec2__Add_62A868F5)(Bounds__get_HalfSize(_.b.contents), value));
}

function Bounds__Inflate_7B00E9A0(_, x, y) {
  return Bounds__Inflate_Z66910A61(_.b.contents, (0, _vectorsFs.Vec2Module_vec2)(x, y));
}

function Bounds__Inflate_5E38073B(_, s) {
  return Bounds__Inflate_Z66910A61(_.b.contents, (0, _vectorsFs.Vec2Module_vec2)(s, s));
}

function Bounds__InflateM_Z66910A61(_, value) {
  var hs = Bounds__get_HalfSize(_.b.contents);
  var value_1 = (0, _vectorsFs.Vec2__WithXY_7EFBDC2A)(hs, hs.values[0] + value.values[0], hs.values[1] + value.values[1]);
  void value_1;
}

function Bounds__InflateM_7B00E9A0(_, x, y) {
  var hs = Bounds__get_HalfSize(_.b.contents);
  var value = (0, _vectorsFs.Vec2__WithXY_7EFBDC2A)(hs, hs.values[0] + x, hs.values[1] + y);
  void value;
}

function Bounds__InflateM_5E38073B(_, s) {
  var hs = Bounds__get_HalfSize(_.b.contents);
  var value = (0, _vectorsFs.Vec2__WithXY_7EFBDC2A)(hs, hs.values[0] + s, hs.values[1] + s);
  void value;
}

function Bounds__MaxWith_Z780DF58B(_, other, result) {
  var result_1;
  var __1 = _.b.contents;
  result_1 = (0, _optionexFs.calcDef)(function () {
    return Bounds_Create_299C7800(0, 0, 0, 0);
  }, result);

  var __4 = Bounds__get_HalfSize(result_1);

  var value_1 = (0, _Util.max)(_Util.comparePrimitives, Bounds__get_HalfSize(_.b.contents).values[0], Bounds__get_HalfSize(other).values[0]);
  __4.values[0] = value_1;

  var __7 = Bounds__get_HalfSize(result_1);

  var value_2 = (0, _Util.max)(_Util.comparePrimitives, Bounds__get_HalfSize(_.b.contents).values[1], Bounds__get_HalfSize(other).values[1]);
  __7.values[1] = value_2;
  return result_1;
}

function Bounds__MaxWithM_Z134B2C62(_, other) {
  var value = Bounds__MaxWith_Z780DF58B(_.b.contents, other, _.b.contents);
  void value;
}

function Bounds__MinWith_Z780DF58B(_, other, result) {
  var result_1;
  var __1 = _.b.contents;
  result_1 = (0, _optionexFs.calcDef)(function () {
    return Bounds_Create_299C7800(0, 0, 0, 0);
  }, result);

  var __4 = Bounds__get_HalfSize(result_1);

  var value_1 = (0, _Util.min)(_Util.comparePrimitives, Bounds__get_HalfSize(_.b.contents).values[0], Bounds__get_HalfSize(other).values[0]);
  __4.values[0] = value_1;

  var __7 = Bounds__get_HalfSize(result_1);

  var value_2 = (0, _Util.min)(_Util.comparePrimitives, Bounds__get_HalfSize(_.b.contents).values[1], Bounds__get_HalfSize(other).values[1]);
  __7.values[1] = value_2;
  return result_1;
}

function Bounds__MinWithM_Z134B2C62(_, other) {
  var value = Bounds__MinWith_Z780DF58B(_.b.contents, other, _.b.contents);
  void value;
}

function Bounds__Clamp_Z780DF58B(_, other, result) {
  var result_1;
  var __1 = _.b.contents;
  result_1 = (0, _optionexFs.calcDef)(function () {
    return Bounds_Create_299C7800(0, 0, 0, 0);
  }, result);
  var value_1 = Bounds__MinWith_Z780DF58B(_.b.contents, other, result_1);
  void value_1;
  var bmin = Bounds__get_Min(result_1);
  var omin = Bounds__get_Min(other);

  if (bmin.values[0] < omin.values[0]) {
    var __6 = Bounds__get_Center(result_1);

    var value_2 = omin.values[0] + Bounds__get_HalfSize(result_1).values[0];
    __6.values[0] = value_2;
  }

  if (bmin.values[1] < omin.values[1]) {
    var __11 = Bounds__get_Center(result_1);

    var value_3 = omin.values[1] + Bounds__get_HalfSize(result_1).values[1];
    __11.values[1] = value_3;
  }

  var bmax = Bounds__get_Max(result_1);
  var omax = Bounds__get_Max(other);

  if (bmax.values[0] > omax.values[0]) {
    var __16 = Bounds__get_Center(result_1);

    var value_4 = omax.values[0] - Bounds__get_HalfSize(result_1).values[0];
    __16.values[0] = value_4;
  }

  if (bmax.values[1] > omax.values[1]) {
    var __21 = Bounds__get_Center(result_1);

    var value_5 = omax.values[1] - Bounds__get_HalfSize(result_1).values[1];
    __21.values[1] = value_5;
  }

  return result_1;
}

function Bounds__ClampM_Z134B2C62(_, other) {
  var value = Bounds__Clamp_Z780DF58B(_.b.contents, other, _.b.contents);
  void value;
}

function Bounds__ClampVec_62A868F5(_, v, result) {
  var result_1 = (0, _optionexFs.calcDef)(_vectorsFs.Vec2_Create, result);
  var mn = Bounds__get_Min(_.b.contents);
  var mx = Bounds__get_Max(_.b.contents);
  var value = (0, _Util.min)(_Util.comparePrimitives, (0, _Util.max)(_Util.comparePrimitives, v.values[0], mn.values[0]), mx.values[0]);
  result_1.values[0] = value;
  var value_1 = (0, _Util.min)(_Util.comparePrimitives, (0, _Util.max)(_Util.comparePrimitives, v.values[1], mn.values[1]), mx.values[1]);
  result_1.values[1] = value_1;
  return result_1;
}

function Bounds__Contains_Z66910A61(_, point) {
  var min = Bounds__get_Min(_.b.contents);
  var max = Bounds__get_Max(_.b.contents);

  if ((point.values[0] >= min.values[0] ? point.values[0] <= max.values[0] : false) ? point.values[1] >= min.values[1] : false) {
    return point.values[1] <= max.values[1];
  } else {
    return false;
  }
}

function Bounds__IntersectsWith_Z134B2C62(_, other) {
  var min = Bounds__get_Min(_.b.contents);
  var max = Bounds__get_Max(_.b.contents);
  var otherMin = Bounds__get_Min(other);
  var otherMax = Bounds__get_Max(other);

  if ((min.values[0] <= otherMax.values[0] ? max.values[0] >= otherMin.values[0] : false) ? min.values[1] <= otherMax.values[1] : false) {
    return max.values[1] >= otherMin.values[1];
  } else {
    return false;
  }
}

function Bounds_get_Zero() {
  return Bounds_$ctor_5E235CE0((0, _vectorsFs.Vec2Module_vec2)(0, 0), (0, _vectorsFs.Vec2Module_vec2)(0, 0));
}

function BoundsPatterns_$007CBoundsRect$007C(b) {
  var anchor = Bounds__get_Anchor(b);
  var size = Bounds__get_Size(b);
  return [anchor.values[0], anchor.values[1], size.values[0], size.values[1]];
}

function BoundsPatterns_$007COptBoundsRect$007C(b) {
  if (b == null) {
    return [void 0, void 0, void 0, void 0];
  } else {
    var b_1 = b;
    var anchor = Bounds__get_Anchor(b_1);
    var size = Bounds__get_Size(b_1);
    return [anchor.values[0], anchor.values[1], size.values[0], size.values[1]];
  }
}

function BoundsPatterns_$007CBoundsRange$007C(b) {
  var min = Bounds__get_Min(b);
  var max = Bounds__get_Max(b);
  return [min.values[0], min.values[1], max.values[0], max.values[1]];
}

function BoundsPatterns_$007COptBoundsRange$007C(b) {
  if (b == null) {
    return [void 0, void 0, void 0, void 0];
  } else {
    var b_1 = b;
    var min = Bounds__get_Min(b_1);
    var max = Bounds__get_Max(b_1);
    return [min.values[0], min.values[1], max.values[0], max.values[1]];
  }
}

function BoundsPatterns_$007CBoundsDim$007C(b) {
  return [Bounds__get_Anchor(b), Bounds__get_Size(b)];
}

function BoundsModule_bounds(x, y, w, h) {
  return Bounds_$ctor_5E235CE0((0, _vectorsFs.Vec2Module_vec2)(x + w * 0.5, y + h * 0.5), (0, _vectorsFs.Vec2Module_vec2)(w * 0.5, h * 0.5));
}

function BoundsModule_boundsV(anchor, size) {
  var anchor_1, size_1;
  return Bounds_$ctor_5E235CE0((anchor_1 = anchor, (size_1 = size, (0, _vectorsFs.Vec2Module_vec2)(anchor_1.values[0] + size_1.values[0] * 0.5, anchor_1.values[1] + size_1.values[1] * 0.5))), (0, _vectorsFs.Vec2__Scale_Z7F22D0EF)(size, 0.5));
}

function BoundsModule_boundsSize(w, h) {
  return BoundsModule_bounds(0, 0, w, h);
}

function BoundsModule_boundsSizeV(size) {
  return BoundsModule_boundsV((0, _vectorsFs.Vec2Module_vec2)(0, 0), size);
}

function BoundsModule_boundsCenter(cx, cy, w, h) {
  return Bounds_$ctor_5E235CE0((0, _vectorsFs.Vec2Module_vec2)(cx, cy), (0, _vectorsFs.Vec2Module_vec2)(w * 0.5, h * 0.5));
}

function BoundsModule_boundsCenterV(center, size) {
  return Bounds_$ctor_5E235CE0(center, (0, _vectorsFs.Vec2__Scale_Z7F22D0EF)(size, 0.5));
}

function BoundsModule_boundsCenterHalf(cx, cy, hw, hh) {
  return Bounds_$ctor_5E235CE0((0, _vectorsFs.Vec2Module_vec2)(cx, cy), (0, _vectorsFs.Vec2Module_vec2)(hw, hh));
}

function BoundsModule_boundsCenterHalfV(center, halfSize) {
  return Bounds_$ctor_5E235CE0(center, halfSize);
}
},{"./.fable/fable-library.3.0.0/String.js":"../src/.fable/fable-library.3.0.0/String.js","./.fable/fable-library.3.0.0/Types.js":"../src/.fable/fable-library.3.0.0/Types.js","./.fable/fable-library.3.0.0/Reflection.js":"../src/.fable/fable-library.3.0.0/Reflection.js","./vectors.fs.js":"../src/vectors.fs.js","./optionex.fs.js":"../src/optionex.fs.js","./.fable/fable-library.3.0.0/Util.js":"../src/.fable/fable-library.3.0.0/Util.js"}],"../src/.fable/fable-library.3.0.0/FSharp.Collections.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HashIdentity_FromFunctions = HashIdentity_FromFunctions;
exports.HashIdentity_Structural = HashIdentity_Structural;
exports.HashIdentity_Reference = HashIdentity_Reference;
exports.ComparisonIdentity_FromFunction = ComparisonIdentity_FromFunction;
exports.ComparisonIdentity_Structural = ComparisonIdentity_Structural;

var _Util = require("./Util.js");

function HashIdentity_FromFunctions(hash, eq) {
  return {
    Equals: function Equals(x, y) {
      return eq(x, y);
    },
    GetHashCode: function GetHashCode(x_1) {
      return hash(x_1);
    }
  };
}

function HashIdentity_Structural() {
  return HashIdentity_FromFunctions(_Util.structuralHash, _Util.equals);
}

function HashIdentity_Reference() {
  return HashIdentity_FromFunctions(_Util.physicalHash, function (e1, e2) {
    return e1 === e2;
  });
}

function ComparisonIdentity_FromFunction(comparer) {
  return {
    Compare: function Compare(x, y) {
      return comparer(x, y);
    }
  };
}

function ComparisonIdentity_Structural() {
  return ComparisonIdentity_FromFunction(_Util.compare);
}
},{"./Util.js":"../src/.fable/fable-library.3.0.0/Util.js"}],"../src/.fable/fable-library.3.0.0/System.Text.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StringBuilder$reflection = StringBuilder$reflection;
exports.StringBuilder_$ctor_Z18115A39 = StringBuilder_$ctor_Z18115A39;
exports.StringBuilder_$ctor_Z524259A4 = StringBuilder_$ctor_Z524259A4;
exports.StringBuilder_$ctor_Z721C83C5 = StringBuilder_$ctor_Z721C83C5;
exports.StringBuilder_$ctor = StringBuilder_$ctor;
exports.StringBuilder__Append_Z721C83C5 = StringBuilder__Append_Z721C83C5;
exports.StringBuilder__Append_244C7CD6 = StringBuilder__Append_244C7CD6;
exports.StringBuilder__Append_Z524259A4 = StringBuilder__Append_Z524259A4;
exports.StringBuilder__Append_5E38073B = StringBuilder__Append_5E38073B;
exports.StringBuilder__Append_Z1FBCCD16 = StringBuilder__Append_Z1FBCCD16;
exports.StringBuilder__Append_4E60E31B = StringBuilder__Append_4E60E31B;
exports.StringBuilder__Append_695F1130 = StringBuilder__Append_695F1130;
exports.StringBuilder__Append_43A65C09 = StringBuilder__Append_43A65C09;
exports.StringBuilder__AppendFormat_433E080 = StringBuilder__AppendFormat_433E080;
exports.StringBuilder__AppendLine = StringBuilder__AppendLine;
exports.StringBuilder__AppendLine_Z721C83C5 = StringBuilder__AppendLine_Z721C83C5;
exports.StringBuilder__get_Length = StringBuilder__get_Length;
exports.StringBuilder__ToString_Z37302880 = StringBuilder__ToString_Z37302880;
exports.StringBuilder__Clear = StringBuilder__Clear;
exports.StringBuilder = void 0;

var _String = require("./String.js");

var _Reflection = require("./Reflection.js");

var _Util = require("./Util.js");

var _Types = require("./Types.js");

var _Seq = require("./Seq.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var StringBuilder = /*#__PURE__*/function () {
  function StringBuilder(value, capacity) {
    _classCallCheck(this, StringBuilder);

    this.buf = [];

    if (!(0, _String.isNullOrEmpty)(value)) {
      void this.buf.push(value);
    }
  }

  _createClass(StringBuilder, [{
    key: "toString",
    value: function toString() {
      var __ = this;

      return (0, _String.join)("", __.buf);
    }
  }]);

  return StringBuilder;
}();

exports.StringBuilder = StringBuilder;

function StringBuilder$reflection() {
  return (0, _Reflection.class_type)("System.Text.StringBuilder", void 0, StringBuilder);
}

function StringBuilder_$ctor_Z18115A39(value, capacity) {
  return new StringBuilder(value, capacity);
}

function StringBuilder_$ctor_Z524259A4(capacity) {
  return StringBuilder_$ctor_Z18115A39("", capacity);
}

function StringBuilder_$ctor_Z721C83C5(value) {
  return StringBuilder_$ctor_Z18115A39(value, 16);
}

function StringBuilder_$ctor() {
  return StringBuilder_$ctor_Z18115A39("", 16);
}

function StringBuilder__Append_Z721C83C5(x, s) {
  void x.buf.push(s);
  return x;
}

function StringBuilder__Append_244C7CD6(x, c) {
  void x.buf.push(c);
  return x;
}

function StringBuilder__Append_Z524259A4(x, o) {
  void x.buf.push((0, _Util.int32ToString)(o));
  return x;
}

function StringBuilder__Append_5E38073B(x, o) {
  void x.buf.push(o.toString());
  return x;
}

function StringBuilder__Append_Z1FBCCD16(x, o) {
  void x.buf.push((0, _Types.toString)(o));
  return x;
}

function StringBuilder__Append_4E60E31B(x, o) {
  void x.buf.push((0, _Types.toString)(o));
  return x;
}

function StringBuilder__Append_695F1130(x, cs) {
  void x.buf.push(cs.join(''));
  return x;
}

function StringBuilder__Append_43A65C09(x, s) {
  void x.buf.push((0, _Types.toString)(s));
  return x;
}

function StringBuilder__AppendFormat_433E080(x, fmt, o) {
  void x.buf.push((0, _String.format)(fmt, o));
  return x;
}

function StringBuilder__AppendLine(x) {
  void x.buf.push("\n");
  return x;
}

function StringBuilder__AppendLine_Z721C83C5(x, s) {
  void x.buf.push(s);
  void x.buf.push("\n");
  return x;
}

function StringBuilder__get_Length(x) {
  return (0, _Seq.sumBy)(function (str) {
    return str.length;
  }, x.buf, {
    GetZero: function GetZero() {
      return 0;
    },
    Add: function Add(x_1, y) {
      return x_1 + y;
    }
  });
}

function StringBuilder__ToString_Z37302880(x, firstIndex, length) {
  return (0, _String.substring)((0, _Types.toString)(x), firstIndex, length);
}

function StringBuilder__Clear(x) {
  (0, _Util.clear)(x.buf);
  return x;
}
},{"./String.js":"../src/.fable/fable-library.3.0.0/String.js","./Reflection.js":"../src/.fable/fable-library.3.0.0/Reflection.js","./Util.js":"../src/.fable/fable-library.3.0.0/Util.js","./Types.js":"../src/.fable/fable-library.3.0.0/Types.js","./Seq.js":"../src/.fable/fable-library.3.0.0/Seq.js"}],"../src/.fable/fable-library.3.0.0/FSharp.Core.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LanguagePrimitives_FastGenericComparer = LanguagePrimitives_FastGenericComparer;
exports.LanguagePrimitives_FastGenericComparerFromTable = LanguagePrimitives_FastGenericComparerFromTable;
exports.LanguagePrimitives_FastGenericEqualityComparer = LanguagePrimitives_FastGenericEqualityComparer;
exports.LanguagePrimitives_FastGenericEqualityComparerFromTable = LanguagePrimitives_FastGenericEqualityComparerFromTable;
exports.Operators_Failure = Operators_Failure;
exports.Operators_FailurePattern = Operators_FailurePattern;
exports.Operators_NullArg = Operators_NullArg;
exports.Operators_Using = Operators_Using;
exports.Operators_Lock = Operators_Lock;
exports.ExtraTopLevelOperators_LazyPattern = ExtraTopLevelOperators_LazyPattern;
exports.PrintfModule_PrintFormatToStringBuilderThen = PrintfModule_PrintFormatToStringBuilderThen;
exports.PrintfModule_PrintFormatToStringBuilder = PrintfModule_PrintFormatToStringBuilder;
exports.LanguagePrimitives_GenericEqualityERComparer = exports.LanguagePrimitives_GenericEqualityComparer = void 0;

var _Util = require("./Util.js");

var _FSharpCollections = require("./FSharp.Collections.js");

var _SystemText = require("./System.Text.js");

var _LanguagePrimitives_G, _LanguagePrimitives_G2;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var LanguagePrimitives_GenericEqualityComparer = (_LanguagePrimitives_G = {}, _defineProperty(_LanguagePrimitives_G, "System.Collections.IEqualityComparer.Equals541DA560", function SystemCollectionsIEqualityComparerEquals541DA560(x, y) {
  return (0, _Util.equals)(x, y);
}), _defineProperty(_LanguagePrimitives_G, "System.Collections.IEqualityComparer.GetHashCode4E60E31B", function SystemCollectionsIEqualityComparerGetHashCode4E60E31B(x_1) {
  return (0, _Util.structuralHash)(x_1);
}), _LanguagePrimitives_G);
exports.LanguagePrimitives_GenericEqualityComparer = LanguagePrimitives_GenericEqualityComparer;
var LanguagePrimitives_GenericEqualityERComparer = (_LanguagePrimitives_G2 = {}, _defineProperty(_LanguagePrimitives_G2, "System.Collections.IEqualityComparer.Equals541DA560", function SystemCollectionsIEqualityComparerEquals541DA560(x, y) {
  return (0, _Util.equals)(x, y);
}), _defineProperty(_LanguagePrimitives_G2, "System.Collections.IEqualityComparer.GetHashCode4E60E31B", function SystemCollectionsIEqualityComparerGetHashCode4E60E31B(x_1) {
  return (0, _Util.structuralHash)(x_1);
}), _LanguagePrimitives_G2);
exports.LanguagePrimitives_GenericEqualityERComparer = LanguagePrimitives_GenericEqualityERComparer;

function LanguagePrimitives_FastGenericComparer() {
  return (0, _FSharpCollections.ComparisonIdentity_Structural)();
}

function LanguagePrimitives_FastGenericComparerFromTable() {
  return (0, _FSharpCollections.ComparisonIdentity_Structural)();
}

function LanguagePrimitives_FastGenericEqualityComparer() {
  return (0, _FSharpCollections.HashIdentity_Structural)();
}

function LanguagePrimitives_FastGenericEqualityComparerFromTable() {
  return (0, _FSharpCollections.HashIdentity_Structural)();
}

function Operators_Failure(message) {
  return new Error(message);
}

function Operators_FailurePattern(exn) {
  return exn.message;
}

function Operators_NullArg(x) {
  throw new Error(x);
}

function Operators_Using(resource, action) {
  try {
    return action(resource);
  } finally {
    if ((0, _Util.equals)(resource, null)) {} else {
      resource.Dispose();
    }
  }
}

function Operators_Lock(_lockObj, action) {
  return action();
}

function ExtraTopLevelOperators_LazyPattern(input) {
  return input.Value;
}

function PrintfModule_PrintFormatToStringBuilderThen(continuation, builder, format) {
  return format.cont(function (s) {
    var value = (0, _SystemText.StringBuilder__Append_Z721C83C5)(builder, s);
    void value;
    return continuation();
  });
}

function PrintfModule_PrintFormatToStringBuilder(builder, format) {
  return PrintfModule_PrintFormatToStringBuilderThen(function () {
    void undefined;
  }, builder, format);
}
},{"./Util.js":"../src/.fable/fable-library.3.0.0/Util.js","./FSharp.Collections.js":"../src/.fable/fable-library.3.0.0/FSharp.Collections.js","./System.Text.js":"../src/.fable/fable-library.3.0.0/System.Text.js"}],"../src/.fable/fable-library.3.0.0/Map.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MapTreeLeaf$2$reflection = MapTreeLeaf$2$reflection;
exports.MapTreeLeaf$2_$ctor_5BDDA1 = MapTreeLeaf$2_$ctor_5BDDA1;
exports.MapTreeLeaf$2__get_Key = MapTreeLeaf$2__get_Key;
exports.MapTreeLeaf$2__get_Value = MapTreeLeaf$2__get_Value;
exports.MapTreeNode$2$reflection = MapTreeNode$2$reflection;
exports.MapTreeNode$2_$ctor_499A11FD = MapTreeNode$2_$ctor_499A11FD;
exports.MapTreeNode$2__get_Left = MapTreeNode$2__get_Left;
exports.MapTreeNode$2__get_Right = MapTreeNode$2__get_Right;
exports.MapTreeNode$2__get_Height = MapTreeNode$2__get_Height;
exports.MapTreeModule_empty = MapTreeModule_empty;
exports.MapTreeModule_sizeAux = MapTreeModule_sizeAux;
exports.MapTreeModule_size = MapTreeModule_size;
exports.MapTreeModule_mk = MapTreeModule_mk;
exports.MapTreeModule_rebalance = MapTreeModule_rebalance;
exports.MapTreeModule_add = MapTreeModule_add;
exports.MapTreeModule_tryFind = MapTreeModule_tryFind;
exports.MapTreeModule_find = MapTreeModule_find;
exports.MapTreeModule_partition1 = MapTreeModule_partition1;
exports.MapTreeModule_partitionAux = MapTreeModule_partitionAux;
exports.MapTreeModule_partition = MapTreeModule_partition;
exports.MapTreeModule_filter1 = MapTreeModule_filter1;
exports.MapTreeModule_filterAux = MapTreeModule_filterAux;
exports.MapTreeModule_filter = MapTreeModule_filter;
exports.MapTreeModule_spliceOutSuccessor = MapTreeModule_spliceOutSuccessor;
exports.MapTreeModule_remove = MapTreeModule_remove;
exports.MapTreeModule_change = MapTreeModule_change;
exports.MapTreeModule_mem = MapTreeModule_mem;
exports.MapTreeModule_iterOpt = MapTreeModule_iterOpt;
exports.MapTreeModule_iter = MapTreeModule_iter;
exports.MapTreeModule_tryPickOpt = MapTreeModule_tryPickOpt;
exports.MapTreeModule_tryPick = MapTreeModule_tryPick;
exports.MapTreeModule_existsOpt = MapTreeModule_existsOpt;
exports.MapTreeModule_exists = MapTreeModule_exists;
exports.MapTreeModule_forallOpt = MapTreeModule_forallOpt;
exports.MapTreeModule_forall = MapTreeModule_forall;
exports.MapTreeModule_map = MapTreeModule_map;
exports.MapTreeModule_mapiOpt = MapTreeModule_mapiOpt;
exports.MapTreeModule_mapi = MapTreeModule_mapi;
exports.MapTreeModule_foldBackOpt = MapTreeModule_foldBackOpt;
exports.MapTreeModule_foldBack = MapTreeModule_foldBack;
exports.MapTreeModule_foldOpt = MapTreeModule_foldOpt;
exports.MapTreeModule_fold = MapTreeModule_fold;
exports.MapTreeModule_foldSectionOpt = MapTreeModule_foldSectionOpt;
exports.MapTreeModule_foldSection = MapTreeModule_foldSection;
exports.MapTreeModule_toList = MapTreeModule_toList;
exports.MapTreeModule_toArray = MapTreeModule_toArray;
exports.MapTreeModule_ofList = MapTreeModule_ofList;
exports.MapTreeModule_mkFromEnumerator = MapTreeModule_mkFromEnumerator;
exports.MapTreeModule_ofArray = MapTreeModule_ofArray;
exports.MapTreeModule_ofSeq = MapTreeModule_ofSeq;
exports.MapTreeModule_copyToArray = MapTreeModule_copyToArray;
exports.MapTreeModule_MapIterator$2$reflection = MapTreeModule_MapIterator$2$reflection;
exports.MapTreeModule_collapseLHS = MapTreeModule_collapseLHS;
exports.MapTreeModule_mkIterator = MapTreeModule_mkIterator;
exports.MapTreeModule_notStarted = MapTreeModule_notStarted;
exports.MapTreeModule_alreadyFinished = MapTreeModule_alreadyFinished;
exports.MapTreeModule_current = MapTreeModule_current;
exports.MapTreeModule_moveNext = MapTreeModule_moveNext;
exports.MapTreeModule_mkIEnumerator = MapTreeModule_mkIEnumerator;
exports.MapTreeModule_toSeq = MapTreeModule_toSeq;
exports.FSharpMap$reflection = FSharpMap$reflection;
exports.FSharpMap_$ctor = FSharpMap_$ctor;
exports.FSharpMap_get_Empty = FSharpMap_get_Empty;
exports.FSharpMap_Create = FSharpMap_Create;
exports.FSharpMap__get_Comparer = FSharpMap__get_Comparer;
exports.FSharpMap__get_Tree = FSharpMap__get_Tree;
exports.FSharpMap__Add = FSharpMap__Add;
exports.FSharpMap__Change = FSharpMap__Change;
exports.FSharpMap__get_IsEmpty = FSharpMap__get_IsEmpty;
exports.FSharpMap__get_Item = FSharpMap__get_Item;
exports.FSharpMap__TryPick = FSharpMap__TryPick;
exports.FSharpMap__Exists = FSharpMap__Exists;
exports.FSharpMap__Filter = FSharpMap__Filter;
exports.FSharpMap__ForAll = FSharpMap__ForAll;
exports.FSharpMap__Fold = FSharpMap__Fold;
exports.FSharpMap__FoldSection = FSharpMap__FoldSection;
exports.FSharpMap__Iterate = FSharpMap__Iterate;
exports.FSharpMap__MapRange = FSharpMap__MapRange;
exports.FSharpMap__Map = FSharpMap__Map;
exports.FSharpMap__Partition = FSharpMap__Partition;
exports.FSharpMap__get_Count = FSharpMap__get_Count;
exports.FSharpMap__ContainsKey = FSharpMap__ContainsKey;
exports.FSharpMap__Remove = FSharpMap__Remove;
exports.FSharpMap__TryGetValue = FSharpMap__TryGetValue;
exports.FSharpMap__TryFind = FSharpMap__TryFind;
exports.FSharpMap__ToList = FSharpMap__ToList;
exports.FSharpMap__ToArray = FSharpMap__ToArray;
exports.FSharpMap__ComputeHashCode = FSharpMap__ComputeHashCode;
exports.isEmpty = isEmpty;
exports.add = add;
exports.change = change;
exports.find = find;
exports.tryFind = tryFind;
exports.remove = remove;
exports.containsKey = containsKey;
exports.iterate = iterate;
exports.tryPick = tryPick;
exports.pick = pick;
exports.exists = exists;
exports.filter = filter;
exports.partition = partition;
exports.forAll = forAll;
exports.map = map;
exports.fold = fold;
exports.foldBack = foldBack;
exports.toSeq = toSeq;
exports.findKey = findKey;
exports.tryFindKey = tryFindKey;
exports.ofList = ofList;
exports.ofSeq = ofSeq;
exports.ofArray = ofArray;
exports.toList = toList;
exports.toArray = toArray;
exports.empty = empty;
exports.createMutable = createMutable;
exports.groupBy = groupBy;
exports.countBy = countBy;
exports.count = count;
exports.FSharpMap = exports.MapTreeModule_MapIterator$2 = exports.MapTreeNode$2 = exports.MapTreeLeaf$2 = void 0;

var _Reflection = require("./Reflection.js");

var _Option = require("./Option.js");

var _Types = require("./Types.js");

var _List = require("./List.js");

var _Util = require("./Util.js");

var _Seq = require("./Seq.js");

var _String = require("./String.js");

var _FSharpCore = require("./FSharp.Core.js");

var _MutableMap = require("./MutableMap.js");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MapTreeLeaf$2 = function MapTreeLeaf$2(k, v) {
  _classCallCheck(this, MapTreeLeaf$2);

  this.k = k;
  this.v = v;
};

exports.MapTreeLeaf$2 = MapTreeLeaf$2;

function MapTreeLeaf$2$reflection(gen0, gen1) {
  return (0, _Reflection.class_type)("Map.MapTreeLeaf`2", [gen0, gen1], MapTreeLeaf$2);
}

function MapTreeLeaf$2_$ctor_5BDDA1(k, v) {
  return new MapTreeLeaf$2(k, v);
}

function MapTreeLeaf$2__get_Key(_) {
  return _.k;
}

function MapTreeLeaf$2__get_Value(_) {
  return _.v;
}

var MapTreeNode$2 = /*#__PURE__*/function (_MapTreeLeaf$) {
  _inherits(MapTreeNode$2, _MapTreeLeaf$);

  var _super = _createSuper(MapTreeNode$2);

  function MapTreeNode$2(k, v, left, right, h) {
    var _this;

    _classCallCheck(this, MapTreeNode$2);

    _this = _super.call(this, k, v);
    _this.left = left;
    _this.right = right;
    _this.h = h;
    return _this;
  }

  return MapTreeNode$2;
}(MapTreeLeaf$2);

exports.MapTreeNode$2 = MapTreeNode$2;

function MapTreeNode$2$reflection(gen0, gen1) {
  return (0, _Reflection.class_type)("Map.MapTreeNode`2", [gen0, gen1], MapTreeNode$2, MapTreeLeaf$2$reflection(gen0, gen1));
}

function MapTreeNode$2_$ctor_499A11FD(k, v, left, right, h) {
  return new MapTreeNode$2(k, v, left, right, h);
}

function MapTreeNode$2__get_Left(_) {
  return _.left;
}

function MapTreeNode$2__get_Right(_) {
  return _.right;
}

function MapTreeNode$2__get_Height(_) {
  return _.h;
}

function MapTreeModule_empty() {
  return void 0;
}

function MapTreeModule_sizeAux(acc_mut, m_mut) {
  MapTreeModule_sizeAux: while (true) {
    var acc = acc_mut,
        m = m_mut;

    if (m != null) {
      var m2 = m;

      if (m2 instanceof MapTreeNode$2) {
        acc_mut = MapTreeModule_sizeAux(acc + 1, MapTreeNode$2__get_Left(m2));
        m_mut = MapTreeNode$2__get_Right(m2);
        continue MapTreeModule_sizeAux;
      } else {
        return acc + 1 | 0;
      }
    } else {
      return acc | 0;
    }

    break;
  }
}

function MapTreeModule_size(x) {
  return MapTreeModule_sizeAux(0, x);
}

function MapTreeModule_mk(l, k, v, r) {
  var hl;
  var m = l;

  if (m != null) {
    var m2 = m;
    hl = m2 instanceof MapTreeNode$2 ? MapTreeNode$2__get_Height(m2) : 1;
  } else {
    hl = 0;
  }

  var hr;
  var m_1 = r;

  if (m_1 != null) {
    var m2_1 = m_1;
    hr = m2_1 instanceof MapTreeNode$2 ? MapTreeNode$2__get_Height(m2_1) : 1;
  } else {
    hr = 0;
  }

  var m_2 = (hl < hr ? hr : hl) | 0;

  if (m_2 === 0) {
    return MapTreeLeaf$2_$ctor_5BDDA1(k, v);
  } else {
    return MapTreeNode$2_$ctor_499A11FD(k, v, l, r, m_2 + 1);
  }
}

function MapTreeModule_rebalance(t1, k, v, t2) {
  var m_2, m2_2, m_3, m2_3;
  var t1h;
  var m = t1;

  if (m != null) {
    var m2 = m;
    t1h = m2 instanceof MapTreeNode$2 ? MapTreeNode$2__get_Height(m2) : 1;
  } else {
    t1h = 0;
  }

  var t2h;
  var m_1 = t2;

  if (m_1 != null) {
    var m2_1 = m_1;
    t2h = m2_1 instanceof MapTreeNode$2 ? MapTreeNode$2__get_Height(m2_1) : 1;
  } else {
    t2h = 0;
  }

  if (t2h > t1h + 2) {
    var matchValue = t2;

    if (matchValue instanceof MapTreeNode$2) {
      if ((m_2 = MapTreeNode$2__get_Left(matchValue), m_2 != null ? (m2_2 = m_2, m2_2 instanceof MapTreeNode$2 ? MapTreeNode$2__get_Height(m2_2) : 1) : 0) > t1h + 1) {
        var matchValue_1 = MapTreeNode$2__get_Left(matchValue);

        if (matchValue_1 instanceof MapTreeNode$2) {
          return MapTreeModule_mk(MapTreeModule_mk(t1, k, v, MapTreeNode$2__get_Left(matchValue_1)), MapTreeLeaf$2__get_Key(matchValue_1), MapTreeLeaf$2__get_Value(matchValue_1), MapTreeModule_mk(MapTreeNode$2__get_Right(matchValue_1), MapTreeLeaf$2__get_Key(matchValue), MapTreeLeaf$2__get_Value(matchValue), MapTreeNode$2__get_Right(matchValue)));
        } else {
          throw new Error("internal error: Map.rebalance");
        }
      } else {
        return MapTreeModule_mk(MapTreeModule_mk(t1, k, v, MapTreeNode$2__get_Left(matchValue)), MapTreeLeaf$2__get_Key(matchValue), MapTreeLeaf$2__get_Value(matchValue), MapTreeNode$2__get_Right(matchValue));
      }
    } else {
      throw new Error("internal error: Map.rebalance");
    }
  } else if (t1h > t2h + 2) {
    var matchValue_2 = t1;

    if (matchValue_2 instanceof MapTreeNode$2) {
      if ((m_3 = MapTreeNode$2__get_Right(matchValue_2), m_3 != null ? (m2_3 = m_3, m2_3 instanceof MapTreeNode$2 ? MapTreeNode$2__get_Height(m2_3) : 1) : 0) > t2h + 1) {
        var matchValue_3 = MapTreeNode$2__get_Right(matchValue_2);

        if (matchValue_3 instanceof MapTreeNode$2) {
          return MapTreeModule_mk(MapTreeModule_mk(MapTreeNode$2__get_Left(matchValue_2), MapTreeLeaf$2__get_Key(matchValue_2), MapTreeLeaf$2__get_Value(matchValue_2), MapTreeNode$2__get_Left(matchValue_3)), MapTreeLeaf$2__get_Key(matchValue_3), MapTreeLeaf$2__get_Value(matchValue_3), MapTreeModule_mk(MapTreeNode$2__get_Right(matchValue_3), k, v, t2));
        } else {
          throw new Error("internal error: Map.rebalance");
        }
      } else {
        return MapTreeModule_mk(MapTreeNode$2__get_Left(matchValue_2), MapTreeLeaf$2__get_Key(matchValue_2), MapTreeLeaf$2__get_Value(matchValue_2), MapTreeModule_mk(MapTreeNode$2__get_Right(matchValue_2), k, v, t2));
      }
    } else {
      throw new Error("internal error: Map.rebalance");
    }
  } else {
    return MapTreeModule_mk(t1, k, v, t2);
  }
}

function MapTreeModule_add(comparer, k, v, m) {
  if (m != null) {
    var m2 = m;
    var c = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;

    if (m2 instanceof MapTreeNode$2) {
      if (c < 0) {
        return MapTreeModule_rebalance(MapTreeModule_add(comparer, k, v, MapTreeNode$2__get_Left(m2)), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeNode$2__get_Right(m2));
      } else if (c === 0) {
        return MapTreeNode$2_$ctor_499A11FD(k, v, MapTreeNode$2__get_Left(m2), MapTreeNode$2__get_Right(m2), MapTreeNode$2__get_Height(m2));
      } else {
        return MapTreeModule_rebalance(MapTreeNode$2__get_Left(m2), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeModule_add(comparer, k, v, MapTreeNode$2__get_Right(m2)));
      }
    } else if (c < 0) {
      return MapTreeNode$2_$ctor_499A11FD(k, v, MapTreeModule_empty(), m, 2);
    } else if (c === 0) {
      return MapTreeLeaf$2_$ctor_5BDDA1(k, v);
    } else {
      return MapTreeNode$2_$ctor_499A11FD(k, v, m, MapTreeModule_empty(), 2);
    }
  } else {
    return MapTreeLeaf$2_$ctor_5BDDA1(k, v);
  }
}

function MapTreeModule_tryFind(comparer_mut, k_mut, m_mut) {
  MapTreeModule_tryFind: while (true) {
    var comparer = comparer_mut,
        k = k_mut,
        m = m_mut;

    if (m != null) {
      var m2 = m;
      var c = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;

      if (c === 0) {
        return (0, _Option.some)(MapTreeLeaf$2__get_Value(m2));
      } else if (m2 instanceof MapTreeNode$2) {
        comparer_mut = comparer;
        k_mut = k;
        m_mut = c < 0 ? MapTreeNode$2__get_Left(m2) : MapTreeNode$2__get_Right(m2);
        continue MapTreeModule_tryFind;
      } else {
        return void 0;
      }
    } else {
      return void 0;
    }

    break;
  }
}

function MapTreeModule_find(comparer, k, m) {
  var matchValue = MapTreeModule_tryFind(comparer, k, m);

  if (matchValue == null) {
    throw new Error();
  } else {
    return (0, _Option.value)(matchValue);
  }
}

function MapTreeModule_partition1(comparer, f, k, v, acc1, acc2) {
  if (f(k, v)) {
    return [MapTreeModule_add(comparer, k, v, acc1), acc2];
  } else {
    return [acc1, MapTreeModule_add(comparer, k, v, acc2)];
  }
}

function MapTreeModule_partitionAux(comparer_mut, f_mut, m_mut, acc_0_mut, acc_1_mut) {
  MapTreeModule_partitionAux: while (true) {
    var comparer = comparer_mut,
        f = f_mut,
        m = m_mut,
        acc_0 = acc_0_mut,
        acc_1 = acc_1_mut;
    var acc = [acc_0, acc_1];

    if (m != null) {
      var m2 = m;

      if (m2 instanceof MapTreeNode$2) {
        var acc_2 = MapTreeModule_partitionAux(comparer, f, MapTreeNode$2__get_Right(m2), acc[0], acc[1]);
        var acc_3 = MapTreeModule_partition1(comparer, f, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), acc_2[0], acc_2[1]);
        comparer_mut = comparer;
        f_mut = f;
        m_mut = MapTreeNode$2__get_Left(m2);
        acc_0_mut = acc_3[0];
        acc_1_mut = acc_3[1];
        continue MapTreeModule_partitionAux;
      } else {
        return MapTreeModule_partition1(comparer, f, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), acc[0], acc[1]);
      }
    } else {
      return acc;
    }

    break;
  }
}

function MapTreeModule_partition(comparer, f, m) {
  return MapTreeModule_partitionAux(comparer, f, m, MapTreeModule_empty(), MapTreeModule_empty());
}

function MapTreeModule_filter1(comparer, f, k, v, acc) {
  if (f(k, v)) {
    return MapTreeModule_add(comparer, k, v, acc);
  } else {
    return acc;
  }
}

function MapTreeModule_filterAux(comparer_mut, f_mut, m_mut, acc_mut) {
  MapTreeModule_filterAux: while (true) {
    var comparer = comparer_mut,
        f = f_mut,
        m = m_mut,
        acc = acc_mut;

    if (m != null) {
      var m2 = m;

      if (m2 instanceof MapTreeNode$2) {
        var acc_1 = MapTreeModule_filterAux(comparer, f, MapTreeNode$2__get_Left(m2), acc);
        var acc_2 = MapTreeModule_filter1(comparer, f, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), acc_1);
        comparer_mut = comparer;
        f_mut = f;
        m_mut = MapTreeNode$2__get_Right(m2);
        acc_mut = acc_2;
        continue MapTreeModule_filterAux;
      } else {
        return MapTreeModule_filter1(comparer, f, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), acc);
      }
    } else {
      return acc;
    }

    break;
  }
}

function MapTreeModule_filter(comparer, f, m) {
  return MapTreeModule_filterAux(comparer, f, m, MapTreeModule_empty());
}

function MapTreeModule_spliceOutSuccessor(m) {
  if (m != null) {
    var m2 = m;

    if (m2 instanceof MapTreeNode$2) {
      if (MapTreeNode$2__get_Left(m2) == null) {
        return [MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeNode$2__get_Right(m2)];
      } else {
        var patternInput = MapTreeModule_spliceOutSuccessor(MapTreeNode$2__get_Left(m2));
        return [patternInput[0], patternInput[1], MapTreeModule_mk(patternInput[2], MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeNode$2__get_Right(m2))];
      }
    } else {
      return [MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeModule_empty()];
    }
  } else {
    throw new Error("internal error: Map.spliceOutSuccessor");
  }
}

function MapTreeModule_remove(comparer, k, m) {
  if (m != null) {
    var m2 = m;
    var c = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;

    if (m2 instanceof MapTreeNode$2) {
      if (c < 0) {
        return MapTreeModule_rebalance(MapTreeModule_remove(comparer, k, MapTreeNode$2__get_Left(m2)), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeNode$2__get_Right(m2));
      } else if (c === 0) {
        if (MapTreeNode$2__get_Left(m2) == null) {
          return MapTreeNode$2__get_Right(m2);
        } else if (MapTreeNode$2__get_Right(m2) == null) {
          return MapTreeNode$2__get_Left(m2);
        } else {
          var patternInput = MapTreeModule_spliceOutSuccessor(MapTreeNode$2__get_Right(m2));
          return MapTreeModule_mk(MapTreeNode$2__get_Left(m2), patternInput[0], patternInput[1], patternInput[2]);
        }
      } else {
        return MapTreeModule_rebalance(MapTreeNode$2__get_Left(m2), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeModule_remove(comparer, k, MapTreeNode$2__get_Right(m2)));
      }
    } else if (c === 0) {
      return MapTreeModule_empty();
    } else {
      return m;
    }
  } else {
    return MapTreeModule_empty();
  }
}

function MapTreeModule_change(comparer, k, u, m) {
  if (m != null) {
    var m2 = m;

    if (m2 instanceof MapTreeNode$2) {
      var c = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;

      if (c < 0) {
        return MapTreeModule_rebalance(MapTreeModule_change(comparer, k, u, MapTreeNode$2__get_Left(m2)), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeNode$2__get_Right(m2));
      } else if (c === 0) {
        var matchValue_1 = u((0, _Option.some)(MapTreeLeaf$2__get_Value(m2)));

        if (matchValue_1 != null) {
          return MapTreeNode$2_$ctor_499A11FD(k, (0, _Option.value)(matchValue_1), MapTreeNode$2__get_Left(m2), MapTreeNode$2__get_Right(m2), MapTreeNode$2__get_Height(m2));
        } else if (MapTreeNode$2__get_Left(m2) == null) {
          return MapTreeNode$2__get_Right(m2);
        } else if (MapTreeNode$2__get_Right(m2) == null) {
          return MapTreeNode$2__get_Left(m2);
        } else {
          var patternInput = MapTreeModule_spliceOutSuccessor(MapTreeNode$2__get_Right(m2));
          return MapTreeModule_mk(MapTreeNode$2__get_Left(m2), patternInput[0], patternInput[1], patternInput[2]);
        }
      } else {
        return MapTreeModule_rebalance(MapTreeNode$2__get_Left(m2), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeModule_change(comparer, k, u, MapTreeNode$2__get_Right(m2)));
      }
    } else {
      var c_1 = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;

      if (c_1 < 0) {
        var matchValue_2 = u(void 0);

        if (matchValue_2 != null) {
          return MapTreeNode$2_$ctor_499A11FD(k, (0, _Option.value)(matchValue_2), MapTreeModule_empty(), m, 2);
        } else {
          return m;
        }
      } else if (c_1 === 0) {
        var matchValue_3 = u((0, _Option.some)(MapTreeLeaf$2__get_Value(m2)));

        if (matchValue_3 != null) {
          return MapTreeLeaf$2_$ctor_5BDDA1(k, (0, _Option.value)(matchValue_3));
        } else {
          return MapTreeModule_empty();
        }
      } else {
        var matchValue_4 = u(void 0);

        if (matchValue_4 != null) {
          return MapTreeNode$2_$ctor_499A11FD(k, (0, _Option.value)(matchValue_4), m, MapTreeModule_empty(), 2);
        } else {
          return m;
        }
      }
    }
  } else {
    var matchValue = u(void 0);

    if (matchValue != null) {
      return MapTreeLeaf$2_$ctor_5BDDA1(k, (0, _Option.value)(matchValue));
    } else {
      return m;
    }
  }
}

function MapTreeModule_mem(comparer_mut, k_mut, m_mut) {
  MapTreeModule_mem: while (true) {
    var comparer = comparer_mut,
        k = k_mut,
        m = m_mut;

    if (m != null) {
      var m2 = m;
      var c = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;

      if (m2 instanceof MapTreeNode$2) {
        if (c < 0) {
          comparer_mut = comparer;
          k_mut = k;
          m_mut = MapTreeNode$2__get_Left(m2);
          continue MapTreeModule_mem;
        } else if (c === 0) {
          return true;
        } else {
          comparer_mut = comparer;
          k_mut = k;
          m_mut = MapTreeNode$2__get_Right(m2);
          continue MapTreeModule_mem;
        }
      } else {
        return c === 0;
      }
    } else {
      return false;
    }

    break;
  }
}

function MapTreeModule_iterOpt(f_mut, m_mut) {
  MapTreeModule_iterOpt: while (true) {
    var f = f_mut,
        m = m_mut;

    if (m != null) {
      var m2 = m;

      if (m2 instanceof MapTreeNode$2) {
        MapTreeModule_iterOpt(f, MapTreeNode$2__get_Left(m2));
        f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));
        f_mut = f;
        m_mut = MapTreeNode$2__get_Right(m2);
        continue MapTreeModule_iterOpt;
      } else {
        f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));
      }
    }

    break;
  }
}

function MapTreeModule_iter(f, m) {
  MapTreeModule_iterOpt(f, m);
}

function MapTreeModule_tryPickOpt(f_mut, m_mut) {
  MapTreeModule_tryPickOpt: while (true) {
    var f = f_mut,
        m = m_mut;

    if (m != null) {
      var m2 = m;

      if (m2 instanceof MapTreeNode$2) {
        var matchValue = MapTreeModule_tryPickOpt(f, MapTreeNode$2__get_Left(m2));

        if (matchValue == null) {
          var matchValue_1 = f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));

          if (matchValue_1 == null) {
            f_mut = f;
            m_mut = MapTreeNode$2__get_Right(m2);
            continue MapTreeModule_tryPickOpt;
          } else {
            return matchValue_1;
          }
        } else {
          return matchValue;
        }
      } else {
        return f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));
      }
    } else {
      return void 0;
    }

    break;
  }
}

function MapTreeModule_tryPick(f, m) {
  return MapTreeModule_tryPickOpt(f, m);
}

function MapTreeModule_existsOpt(f_mut, m_mut) {
  MapTreeModule_existsOpt: while (true) {
    var f = f_mut,
        m = m_mut;

    if (m != null) {
      var m2 = m;

      if (m2 instanceof MapTreeNode$2) {
        if (MapTreeModule_existsOpt(f, MapTreeNode$2__get_Left(m2)) ? true : f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2))) {
          return true;
        } else {
          f_mut = f;
          m_mut = MapTreeNode$2__get_Right(m2);
          continue MapTreeModule_existsOpt;
        }
      } else {
        return f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));
      }
    } else {
      return false;
    }

    break;
  }
}

function MapTreeModule_exists(f, m) {
  return MapTreeModule_existsOpt(f, m);
}

function MapTreeModule_forallOpt(f_mut, m_mut) {
  MapTreeModule_forallOpt: while (true) {
    var f = f_mut,
        m = m_mut;

    if (m != null) {
      var m2 = m;

      if (m2 instanceof MapTreeNode$2) {
        if (MapTreeModule_forallOpt(f, MapTreeNode$2__get_Left(m2)) ? f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2)) : false) {
          f_mut = f;
          m_mut = MapTreeNode$2__get_Right(m2);
          continue MapTreeModule_forallOpt;
        } else {
          return false;
        }
      } else {
        return f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));
      }
    } else {
      return true;
    }

    break;
  }
}

function MapTreeModule_forall(f, m) {
  return MapTreeModule_forallOpt(f, m);
}

function MapTreeModule_map(f, m) {
  if (m != null) {
    var m2 = m;

    if (m2 instanceof MapTreeNode$2) {
      var l2 = MapTreeModule_map(f, MapTreeNode$2__get_Left(m2));
      var v2 = f(MapTreeLeaf$2__get_Value(m2));
      var r2 = MapTreeModule_map(f, MapTreeNode$2__get_Right(m2));
      return MapTreeNode$2_$ctor_499A11FD(MapTreeLeaf$2__get_Key(m2), v2, l2, r2, MapTreeNode$2__get_Height(m2));
    } else {
      return MapTreeLeaf$2_$ctor_5BDDA1(MapTreeLeaf$2__get_Key(m2), f(MapTreeLeaf$2__get_Value(m2)));
    }
  } else {
    return MapTreeModule_empty();
  }
}

function MapTreeModule_mapiOpt(f, m) {
  if (m != null) {
    var m2 = m;

    if (m2 instanceof MapTreeNode$2) {
      var l2 = MapTreeModule_mapiOpt(f, MapTreeNode$2__get_Left(m2));
      var v2 = f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));
      var r2 = MapTreeModule_mapiOpt(f, MapTreeNode$2__get_Right(m2));
      return MapTreeNode$2_$ctor_499A11FD(MapTreeLeaf$2__get_Key(m2), v2, l2, r2, MapTreeNode$2__get_Height(m2));
    } else {
      return MapTreeLeaf$2_$ctor_5BDDA1(MapTreeLeaf$2__get_Key(m2), f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2)));
    }
  } else {
    return MapTreeModule_empty();
  }
}

function MapTreeModule_mapi(f, m) {
  return MapTreeModule_mapiOpt(f, m);
}

function MapTreeModule_foldBackOpt(f_mut, m_mut, x_mut) {
  MapTreeModule_foldBackOpt: while (true) {
    var f = f_mut,
        m = m_mut,
        x = x_mut;

    if (m != null) {
      var m2 = m;

      if (m2 instanceof MapTreeNode$2) {
        var x_1 = MapTreeModule_foldBackOpt(f, MapTreeNode$2__get_Right(m2), x);
        var x_2 = f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), x_1);
        f_mut = f;
        m_mut = MapTreeNode$2__get_Left(m2);
        x_mut = x_2;
        continue MapTreeModule_foldBackOpt;
      } else {
        return f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), x);
      }
    } else {
      return x;
    }

    break;
  }
}

function MapTreeModule_foldBack(f, m, x) {
  return MapTreeModule_foldBackOpt(f, m, x);
}

function MapTreeModule_foldOpt(f_mut, x_mut, m_mut) {
  MapTreeModule_foldOpt: while (true) {
    var f = f_mut,
        x = x_mut,
        m = m_mut;

    if (m != null) {
      var m2 = m;

      if (m2 instanceof MapTreeNode$2) {
        f_mut = f;
        x_mut = f(MapTreeModule_foldOpt(f, x, MapTreeNode$2__get_Left(m2)), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));
        m_mut = MapTreeNode$2__get_Right(m2);
        continue MapTreeModule_foldOpt;
      } else {
        return f(x, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));
      }
    } else {
      return x;
    }

    break;
  }
}

function MapTreeModule_fold(f, x, m) {
  return MapTreeModule_foldOpt(f, x, m);
}

function MapTreeModule_foldSectionOpt(comparer, lo, hi, f, m, x) {
  var foldFromTo = function foldFromTo(f_1_mut, m_1_mut, x_1_mut) {
    foldFromTo: while (true) {
      var f_1 = f_1_mut,
          m_1 = m_1_mut,
          x_1 = x_1_mut;

      if (m_1 != null) {
        var m2 = m_1;

        if (m2 instanceof MapTreeNode$2) {
          var cLoKey = comparer.Compare(lo, MapTreeLeaf$2__get_Key(m2)) | 0;
          var cKeyHi = comparer.Compare(MapTreeLeaf$2__get_Key(m2), hi) | 0;
          var x_2 = cLoKey < 0 ? foldFromTo(f_1, MapTreeNode$2__get_Left(m2), x_1) : x_1;
          var x_3 = (cLoKey <= 0 ? cKeyHi <= 0 : false) ? f_1(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), x_2) : x_2;

          if (cKeyHi < 0) {
            f_1_mut = f_1;
            m_1_mut = MapTreeNode$2__get_Right(m2);
            x_1_mut = x_3;
            continue foldFromTo;
          } else {
            return x_3;
          }
        } else if (comparer.Compare(lo, MapTreeLeaf$2__get_Key(m2)) <= 0 ? comparer.Compare(MapTreeLeaf$2__get_Key(m2), hi) <= 0 : false) {
          return f_1(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), x_1);
        } else {
          return x_1;
        }
      } else {
        return x_1;
      }

      break;
    }
  };

  if (comparer.Compare(lo, hi) === 1) {
    return x;
  } else {
    return foldFromTo(f, m, x);
  }
}

function MapTreeModule_foldSection(comparer, lo, hi, f, m, x) {
  return MapTreeModule_foldSectionOpt(comparer, lo, hi, f, m, x);
}

function MapTreeModule_toList(m) {
  var loop = function loop(m_1_mut, acc_mut) {
    loop: while (true) {
      var m_1 = m_1_mut,
          acc = acc_mut;

      if (m_1 != null) {
        var m2 = m_1;

        if (m2 instanceof MapTreeNode$2) {
          m_1_mut = MapTreeNode$2__get_Left(m2);
          acc_mut = new _Types.List([MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2)], loop(MapTreeNode$2__get_Right(m2), acc));
          continue loop;
        } else {
          return new _Types.List([MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2)], acc);
        }
      } else {
        return acc;
      }

      break;
    }
  };

  return loop(m, new _Types.List());
}

function MapTreeModule_toArray(m) {
  return Array.from(MapTreeModule_toList(m));
}

function MapTreeModule_ofList(comparer, l) {
  return (0, _List.fold)(function (acc, tupledArg) {
    return MapTreeModule_add(comparer, tupledArg[0], tupledArg[1], acc);
  }, MapTreeModule_empty(), l);
}

function MapTreeModule_mkFromEnumerator(comparer_mut, acc_mut, e_mut) {
  MapTreeModule_mkFromEnumerator: while (true) {
    var comparer = comparer_mut,
        acc = acc_mut,
        e = e_mut;

    if (e["System.Collections.IEnumerator.MoveNext"]()) {
      var patternInput = e["System.Collections.Generic.IEnumerator`1.get_Current"]();
      comparer_mut = comparer;
      acc_mut = MapTreeModule_add(comparer, patternInput[0], patternInput[1], acc);
      e_mut = e;
      continue MapTreeModule_mkFromEnumerator;
    } else {
      return acc;
    }

    break;
  }
}

function MapTreeModule_ofArray(comparer, arr) {
  var res = MapTreeModule_empty();

  for (var idx = 0; idx <= arr.length - 1; idx++) {
    var forLoopVar = arr[idx];
    res = MapTreeModule_add(comparer, forLoopVar[0], forLoopVar[1], res);
  }

  return res;
}

function MapTreeModule_ofSeq(comparer, c) {
  if ((0, _Util.isArrayLike)(c)) {
    return MapTreeModule_ofArray(comparer, c);
  } else if (c instanceof _Types.List) {
    return MapTreeModule_ofList(comparer, c);
  } else {
    var ie = (0, _Seq.getEnumerator)(c);

    try {
      return MapTreeModule_mkFromEnumerator(comparer, MapTreeModule_empty(), ie);
    } finally {
      ie.Dispose();
    }
  }
}

function MapTreeModule_copyToArray(m, arr, i) {
  var j = i | 0;
  MapTreeModule_iter(function (x, y) {
    arr[j] = [x, y];
    j = j + 1;
  }, m);
}

var MapTreeModule_MapIterator$2 = /*#__PURE__*/function (_Record) {
  _inherits(MapTreeModule_MapIterator$2, _Record);

  var _super2 = _createSuper(MapTreeModule_MapIterator$2);

  function MapTreeModule_MapIterator$2(stack, started) {
    var _this2;

    _classCallCheck(this, MapTreeModule_MapIterator$2);

    _this2 = _super2.call(this);
    _this2.stack = stack;
    _this2.started = started;
    return _this2;
  }

  return MapTreeModule_MapIterator$2;
}(_Types.Record);

exports.MapTreeModule_MapIterator$2 = MapTreeModule_MapIterator$2;

function MapTreeModule_MapIterator$2$reflection(gen0, gen1) {
  return (0, _Reflection.record_type)("Map.MapTreeModule.MapIterator`2", [gen0, gen1], MapTreeModule_MapIterator$2, function () {
    return [["stack", (0, _Reflection.list_type)((0, _Reflection.option_type)(MapTreeLeaf$2$reflection(gen0, gen1)))], ["started", _Reflection.bool_type]];
  });
}

function MapTreeModule_collapseLHS(stack_mut) {
  MapTreeModule_collapseLHS: while (true) {
    var stack = stack_mut;

    if (stack.tail != null) {
      var rest = stack.tail;
      var m = stack.head;

      if (m != null) {
        var m2 = m;

        if (m2 instanceof MapTreeNode$2) {
          stack_mut = new _Types.List(MapTreeNode$2__get_Left(m2), new _Types.List(MapTreeLeaf$2_$ctor_5BDDA1(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2)), new _Types.List(MapTreeNode$2__get_Right(m2), rest)));
          continue MapTreeModule_collapseLHS;
        } else {
          return stack;
        }
      } else {
        stack_mut = rest;
        continue MapTreeModule_collapseLHS;
      }
    } else {
      return new _Types.List();
    }

    break;
  }
}

function MapTreeModule_mkIterator(m) {
  return new MapTreeModule_MapIterator$2(MapTreeModule_collapseLHS(new _Types.List(m, new _Types.List())), false);
}

function MapTreeModule_notStarted() {
  throw new Error("enumeration not started");
}

function MapTreeModule_alreadyFinished() {
  throw new Error("enumeration already finished");
}

function MapTreeModule_current(i) {
  if (i.started) {
    var matchValue = i.stack;

    if (matchValue.tail != null) {
      if (matchValue.head != null) {
        var m = matchValue.head;

        if (m instanceof MapTreeNode$2) {
          throw new Error("Please report error: Map iterator, unexpected stack for current");
        } else {
          return [MapTreeLeaf$2__get_Key(m), MapTreeLeaf$2__get_Value(m)];
        }
      } else {
        throw new Error("Please report error: Map iterator, unexpected stack for current");
      }
    } else {
      return MapTreeModule_alreadyFinished();
    }
  } else {
    return MapTreeModule_notStarted();
  }
}

function MapTreeModule_moveNext(i) {
  if (i.started) {
    var matchValue = i.stack;

    if (matchValue.tail != null) {
      if (matchValue.head != null) {
        var m = matchValue.head;

        if (m instanceof MapTreeNode$2) {
          throw new Error("Please report error: Map iterator, unexpected stack for moveNext");
        } else {
          i.stack = MapTreeModule_collapseLHS(matchValue.tail);
          return !(i.stack.tail == null);
        }
      } else {
        throw new Error("Please report error: Map iterator, unexpected stack for moveNext");
      }
    } else {
      return false;
    }
  } else {
    i.started = true;
    return !(i.stack.tail == null);
  }
}

function MapTreeModule_mkIEnumerator(m) {
  var _ref;

  var i = MapTreeModule_mkIterator(m);
  return _ref = {}, _defineProperty(_ref, "System.Collections.Generic.IEnumerator`1.get_Current", function SystemCollectionsGenericIEnumerator1Get_Current() {
    return MapTreeModule_current(i);
  }), _defineProperty(_ref, "System.Collections.IEnumerator.get_Current", function SystemCollectionsIEnumeratorGet_Current() {
    return MapTreeModule_current(i);
  }), _defineProperty(_ref, "System.Collections.IEnumerator.MoveNext", function SystemCollectionsIEnumeratorMoveNext() {
    return MapTreeModule_moveNext(i);
  }), _defineProperty(_ref, "System.Collections.IEnumerator.Reset", function SystemCollectionsIEnumeratorReset() {
    i = MapTreeModule_mkIterator(m);
  }), _defineProperty(_ref, "Dispose", function Dispose() {}), _ref;
}

function MapTreeModule_toSeq(s) {
  return (0, _Seq.unfold)(function (en_1) {
    if (en_1["System.Collections.IEnumerator.MoveNext"]()) {
      return [en_1["System.Collections.Generic.IEnumerator`1.get_Current"](), en_1];
    } else {
      return void 0;
    }
  }, MapTreeModule_mkIEnumerator(s));
}

var FSharpMap = /*#__PURE__*/function () {
  function FSharpMap(comparer, tree) {
    _classCallCheck(this, FSharpMap);

    this.comparer = comparer;
    this.tree = tree;
  }

  _createClass(FSharpMap, [{
    key: "GetHashCode",
    value: function GetHashCode() {
      var this$ = this;
      return FSharpMap__ComputeHashCode(this$) | 0;
    }
  }, {
    key: "Equals",
    value: function Equals(that) {
      var this$ = this;

      if (that instanceof FSharpMap) {
        var e1 = (0, _Seq.getEnumerator)(this$);

        try {
          var e2 = (0, _Seq.getEnumerator)(that);

          try {
            var loop = function loop() {
              var m1 = e1["System.Collections.IEnumerator.MoveNext"]();

              if (m1 === e2["System.Collections.IEnumerator.MoveNext"]()) {
                if (!m1) {
                  return true;
                } else {
                  var e1c = e1["System.Collections.Generic.IEnumerator`1.get_Current"]();
                  var e2c = e2["System.Collections.Generic.IEnumerator`1.get_Current"]();

                  if ((0, _Util.equals)(e1c[0], e2c[0]) ? (0, _Util.equals)(e1c[1], e2c[1]) : false) {
                    return loop();
                  } else {
                    return false;
                  }
                }
              } else {
                return false;
              }
            };

            return loop();
          } finally {
            e2.Dispose();
          }
        } finally {
          e1.Dispose();
        }
      } else {
        return false;
      }
    }
  }, {
    key: "toString",
    value: function toString() {
      var this$ = this;
      return "map [" + (0, _String.join)("; ", (0, _Seq.map)(function (kv) {
        return (0, _String.format)("({0}, {1})", kv[0], kv[1]);
      }, this$)) + "]";
    }
  }, {
    key: "GetEnumerator",
    value: function GetEnumerator() {
      var __ = this;

      return MapTreeModule_mkIEnumerator(__.tree);
    }
  }, {
    key: Symbol.iterator,
    value: function value() {
      return (0, _Seq.toIterator)(this.GetEnumerator());
    }
  }, {
    key: "System.Collections.IEnumerable.GetEnumerator",
    value: function SystemCollectionsIEnumerableGetEnumerator() {
      var __ = this;

      return MapTreeModule_mkIEnumerator(__.tree);
    }
  }, {
    key: "CompareTo",
    value: function CompareTo(obj) {
      var m = this;

      if (obj instanceof FSharpMap) {
        return (0, _Seq.compareWith)(function (kvp1, kvp2) {
          var c = m.comparer.Compare(kvp1[0], kvp2[0]) | 0;
          return (c !== 0 ? c : (0, _Util.compare)(kvp1[1], kvp2[1])) | 0;
        }, m, obj) | 0;
      } else {
        throw new Error("not comparable\\nParameter name: obj");
      }
    }
  }, {
    key: "System.Collections.Generic.ICollection`1.Add2B595",
    value: function SystemCollectionsGenericICollection1Add2B595(x) {
      void x;
      throw new Error("Map cannot be mutated");
    }
  }, {
    key: "System.Collections.Generic.ICollection`1.Clear",
    value: function SystemCollectionsGenericICollection1Clear() {
      throw new Error("Map cannot be mutated");
    }
  }, {
    key: "System.Collections.Generic.ICollection`1.Remove2B595",
    value: function SystemCollectionsGenericICollection1Remove2B595(x) {
      void x;
      throw new Error("Map cannot be mutated");
    }
  }, {
    key: "System.Collections.Generic.ICollection`1.Contains2B595",
    value: function SystemCollectionsGenericICollection1Contains2B595(x) {
      var m = this;
      return FSharpMap__ContainsKey(m, x[0]) ? (0, _Util.equals)(FSharpMap__get_Item(m, x[0]), x[1]) : false;
    }
  }, {
    key: "System.Collections.Generic.ICollection`1.CopyToZ2E171D71",
    value: function SystemCollectionsGenericICollection1CopyToZ2E171D71(arr, i) {
      var m = this;
      MapTreeModule_copyToArray(m.tree, arr, i);
    }
  }, {
    key: "System.Collections.Generic.ICollection`1.get_IsReadOnly",
    value: function SystemCollectionsGenericICollection1Get_IsReadOnly() {
      return true;
    }
  }, {
    key: "System.Collections.Generic.ICollection`1.get_Count",
    value: function SystemCollectionsGenericICollection1Get_Count() {
      var m = this;
      return FSharpMap__get_Count(m) | 0;
    }
  }, {
    key: "System.Collections.Generic.IReadOnlyCollection`1.get_Count",
    value: function SystemCollectionsGenericIReadOnlyCollection1Get_Count() {
      var m = this;
      return FSharpMap__get_Count(m) | 0;
    }
  }, {
    key: "clear",
    value: function clear() {
      throw new Error("Map cannot be mutated");
    }
  }, {
    key: "delete",
    value: function _delete(_arg1) {
      throw new Error("Map cannot be mutated");
      return false;
    }
  }, {
    key: "entries",
    value: function entries() {
      var m = this;
      return (0, _Seq.map)(function (p) {
        return [p[0], p[1]];
      }, m);
    }
  }, {
    key: "get",
    value: function get(k) {
      var m = this;
      return FSharpMap__get_Item(m, k);
    }
  }, {
    key: "has",
    value: function has(k) {
      var m = this;
      return FSharpMap__ContainsKey(m, k);
    }
  }, {
    key: "keys",
    value: function keys() {
      var m = this;
      return (0, _Seq.map)(function (p) {
        return p[0];
      }, m);
    }
  }, {
    key: "set",
    value: function set(k, v) {
      var m = this;
      throw new Error("Map cannot be mutated");
      return m;
    }
  }, {
    key: "values",
    value: function values() {
      var m = this;
      return (0, _Seq.map)(function (p) {
        return p[1];
      }, m);
    }
  }, {
    key: "forEach",
    value: function forEach(f, thisArg) {
      var m = this;
      (0, _Seq.iterate)(function (p) {
        f(p[1], p[0], m);
      }, m);
    }
  }, {
    key: Symbol.toStringTag,
    get: function get() {
      return "FSharpMap";
    }
  }, {
    key: "size",
    get: function get() {
      var m = this;
      return FSharpMap__get_Count(m) | 0;
    }
  }]);

  return FSharpMap;
}();

exports.FSharpMap = FSharpMap;

function FSharpMap$reflection(gen0, gen1) {
  return (0, _Reflection.class_type)("Map.FSharpMap", [gen0, gen1], FSharpMap);
}

function FSharpMap_$ctor(comparer, tree) {
  return new FSharpMap(comparer, tree);
}

(function () {
  FSharpMap.empty = FSharpMap_$ctor((0, _FSharpCore.LanguagePrimitives_FastGenericComparer)(), MapTreeModule_empty());
})();

function FSharpMap_get_Empty() {
  return FSharpMap.empty;
}

function FSharpMap_Create(ie) {
  var comparer = (0, _FSharpCore.LanguagePrimitives_FastGenericComparer)();
  return FSharpMap_$ctor(comparer, MapTreeModule_ofSeq(comparer, ie));
}

function FSharpMap__get_Comparer(m) {
  return m.comparer;
}

function FSharpMap__get_Tree(m) {
  return m.tree;
}

function FSharpMap__Add(m, key, value) {
  return FSharpMap_$ctor(m.comparer, MapTreeModule_add(m.comparer, key, value, m.tree));
}

function FSharpMap__Change(m, key, f) {
  return FSharpMap_$ctor(m.comparer, MapTreeModule_change(m.comparer, key, f, m.tree));
}

function FSharpMap__get_IsEmpty(m) {
  return m.tree == null;
}

function FSharpMap__get_Item(m, key) {
  return MapTreeModule_find(m.comparer, key, m.tree);
}

function FSharpMap__TryPick(m, f) {
  return MapTreeModule_tryPick(f, m.tree);
}

function FSharpMap__Exists(m, predicate) {
  return MapTreeModule_exists(predicate, m.tree);
}

function FSharpMap__Filter(m, predicate) {
  return FSharpMap_$ctor(m.comparer, MapTreeModule_filter(m.comparer, predicate, m.tree));
}

function FSharpMap__ForAll(m, predicate) {
  return MapTreeModule_forall(predicate, m.tree);
}

function FSharpMap__Fold(m, f, acc) {
  return MapTreeModule_foldBack(f, m.tree, acc);
}

function FSharpMap__FoldSection(m, lo, hi, f, acc) {
  return MapTreeModule_foldSection(m.comparer, lo, hi, f, m.tree, acc);
}

function FSharpMap__Iterate(m, f) {
  MapTreeModule_iter(f, m.tree);
}

function FSharpMap__MapRange(m, f) {
  return FSharpMap_$ctor(m.comparer, MapTreeModule_map(f, m.tree));
}

function FSharpMap__Map(m, f) {
  return FSharpMap_$ctor(m.comparer, MapTreeModule_mapi(f, m.tree));
}

function FSharpMap__Partition(m, predicate) {
  var patternInput = MapTreeModule_partition(m.comparer, predicate, m.tree);
  return [FSharpMap_$ctor(m.comparer, patternInput[0]), FSharpMap_$ctor(m.comparer, patternInput[1])];
}

function FSharpMap__get_Count(m) {
  return MapTreeModule_size(m.tree);
}

function FSharpMap__ContainsKey(m, key) {
  return MapTreeModule_mem(m.comparer, key, m.tree);
}

function FSharpMap__Remove(m, key) {
  return FSharpMap_$ctor(m.comparer, MapTreeModule_remove(m.comparer, key, m.tree));
}

function FSharpMap__TryGetValue(__, key, value) {
  var matchValue = MapTreeModule_tryFind(__.comparer, key, __.tree);

  if (matchValue == null) {
    return false;
  } else {
    var v = (0, _Option.value)(matchValue);
    value.contents = v;
    return true;
  }
}

function FSharpMap__TryFind(m, key) {
  return MapTreeModule_tryFind(m.comparer, key, m.tree);
}

function FSharpMap__ToList(m) {
  return MapTreeModule_toList(m.tree);
}

function FSharpMap__ToArray(m) {
  return MapTreeModule_toArray(m.tree);
}

function FSharpMap__ComputeHashCode(this$) {
  var combineHash = function combineHash(x, y) {
    return (x << 1) + y + 631;
  };

  var res = 0;
  var enumerator = (0, _Seq.getEnumerator)(this$);

  try {
    while (enumerator["System.Collections.IEnumerator.MoveNext"]()) {
      var activePatternResult4281 = enumerator["System.Collections.Generic.IEnumerator`1.get_Current"]();
      res = combineHash(res, (0, _Util.structuralHash)(activePatternResult4281[0]));
      res = combineHash(res, (0, _Util.structuralHash)(activePatternResult4281[1]));
    }
  } finally {
    enumerator.Dispose();
  }

  return res | 0;
}

function isEmpty(table) {
  return FSharpMap__get_IsEmpty(table);
}

function add(key, value, table) {
  return FSharpMap__Add(table, key, value);
}

function change(key, f, table) {
  return FSharpMap__Change(table, key, f);
}

function find(key, table) {
  return FSharpMap__get_Item(table, key);
}

function tryFind(key, table) {
  return FSharpMap__TryFind(table, key);
}

function remove(key, table) {
  return FSharpMap__Remove(table, key);
}

function containsKey(key, table) {
  return FSharpMap__ContainsKey(table, key);
}

function iterate(action, table) {
  FSharpMap__Iterate(table, action);
}

function tryPick(chooser, table) {
  return FSharpMap__TryPick(table, chooser);
}

function pick(chooser, table) {
  var matchValue = tryPick(chooser, table);

  if (matchValue != null) {
    return (0, _Option.value)(matchValue);
  } else {
    throw new Error();
  }
}

function exists(predicate, table) {
  return FSharpMap__Exists(table, predicate);
}

function filter(predicate, table) {
  return FSharpMap__Filter(table, predicate);
}

function partition(predicate, table) {
  return FSharpMap__Partition(table, predicate);
}

function forAll(predicate, table) {
  return FSharpMap__ForAll(table, predicate);
}

function map(mapping, table) {
  return FSharpMap__Map(table, mapping);
}

function fold(folder, state, table) {
  return MapTreeModule_fold(folder, state, FSharpMap__get_Tree(table));
}

function foldBack(folder, table, state) {
  return MapTreeModule_foldBack(folder, FSharpMap__get_Tree(table), state);
}

function toSeq(table) {
  return (0, _Seq.map)(function (kvp) {
    return [kvp[0], kvp[1]];
  }, table);
}

function findKey(predicate, table) {
  return (0, _Seq.pick)(function (kvp) {
    var k = kvp[0];

    if (predicate(k, kvp[1])) {
      return (0, _Option.some)(k);
    } else {
      return void 0;
    }
  }, table);
}

function tryFindKey(predicate, table) {
  return (0, _Seq.tryPick)(function (kvp) {
    var k = kvp[0];

    if (predicate(k, kvp[1])) {
      return (0, _Option.some)(k);
    } else {
      return void 0;
    }
  }, table);
}

function ofList(elements) {
  return FSharpMap_Create(elements);
}

function ofSeq(elements) {
  return FSharpMap_Create(elements);
}

function ofArray(elements) {
  var comparer = (0, _FSharpCore.LanguagePrimitives_FastGenericComparer)();
  return FSharpMap_$ctor(comparer, MapTreeModule_ofArray(comparer, elements));
}

function toList(table) {
  return FSharpMap__ToList(table);
}

function toArray(table) {
  return FSharpMap__ToArray(table);
}

function empty() {
  return FSharpMap_get_Empty();
}

function createMutable(source, comparer) {
  return (0, _MutableMap.Dictionary_$ctor_6623D9B3)(source, comparer);
}

function groupBy(projection, xs, comparer) {
  var dict = createMutable((0, _Seq.empty)(), comparer);
  var enumerator = (0, _Seq.getEnumerator)(xs);

  try {
    while (enumerator["System.Collections.IEnumerator.MoveNext"]()) {
      var v = enumerator["System.Collections.Generic.IEnumerator`1.get_Current"]();
      var key = projection(v);

      if (dict.has(key)) {
        void dict.get(key).push(v);
      } else {
        var value = dict.set(key, [v]);
        void value;
      }
    }
  } finally {
    enumerator.Dispose();
  }

  return (0, _Seq.map)(function (tupledArg) {
    return [tupledArg[0], tupledArg[1]];
  }, dict.entries());
}

function countBy(projection, xs, comparer) {
  var dict = createMutable((0, _Seq.empty)(), comparer);
  var enumerator = (0, _Seq.getEnumerator)(xs);

  try {
    while (enumerator["System.Collections.IEnumerator.MoveNext"]()) {
      var key = projection(enumerator["System.Collections.Generic.IEnumerator`1.get_Current"]());
      var value_1 = dict.has(key) ? dict.set(key, dict.get(key) + 1) : dict.set(key, 1);
      void value_1;
    }
  } finally {
    enumerator.Dispose();
  }

  return dict.entries();
}

function count(table) {
  return FSharpMap__get_Count(table);
}
},{"./Reflection.js":"../src/.fable/fable-library.3.0.0/Reflection.js","./Option.js":"../src/.fable/fable-library.3.0.0/Option.js","./Types.js":"../src/.fable/fable-library.3.0.0/Types.js","./List.js":"../src/.fable/fable-library.3.0.0/List.js","./Util.js":"../src/.fable/fable-library.3.0.0/Util.js","./Seq.js":"../src/.fable/fable-library.3.0.0/Seq.js","./String.js":"../src/.fable/fable-library.3.0.0/String.js","./FSharp.Core.js":"../src/.fable/fable-library.3.0.0/FSharp.Core.js","./MutableMap.js":"../src/.fable/fable-library.3.0.0/MutableMap.js"}],"../src/typedarray_utils.fs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bufferView = bufferView;
exports.bufferView2 = bufferView2;
exports.bufferView3 = bufferView3;
exports.toArrayBufferViewFloat32 = toArrayBufferViewFloat32;
exports.toArrayBufferViewUint16 = toArrayBufferViewUint16;
exports.int8Array = int8Array;
exports.uint8Array = uint8Array;
exports.int32Array = int32Array;
exports.uint32Array = uint32Array;
exports.float32Array = float32Array;
exports.writeFloat32View = writeFloat32View;
exports.writeInt8View = writeInt8View;
exports.writeUint8View = writeUint8View;
exports.writeInt16View = writeInt16View;
exports.writeUint16View = writeUint16View;
exports.writeInt32View = writeInt32View;
exports.float32ArrayFactory = exports.uint32ArrayFactory = exports.int32ArrayFactory = exports.uint16ArrayFactory = exports.int16ArrayFactory = exports.uint8ArrayFactory = exports.int8ArrayFactory = exports.isLittleEndian = exports.emptyFloat32Array = exports.emptyInt32Array = exports.emptyUint8Array = exports.emptyInt8Array = void 0;

var _List = require("./.fable/fable-library.3.0.0/List.js");

var _int8ArrayFactory, _uint8ArrayFactory, _int16ArrayFactory, _uint16ArrayFactory, _int32ArrayFactory, _uint32ArrayFactory, _float32ArrayFactory;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function bufferView(data) {
  return data;
}

function bufferView2(data) {
  return data;
}

function bufferView3(data) {
  return data;
}

function toArrayBufferViewFloat32(arr) {
  return new Float32Array(arr);
}

function toArrayBufferViewUint16(arr) {
  return new Uint16Array(arr);
}

function int8Array(arr) {
  return new Int8Array(arr);
}

function uint8Array(arr) {
  return new Uint8Array(arr);
}

function int32Array(arr) {
  return new Int32Array(arr);
}

function uint32Array(arr) {
  return new Uint32Array(arr);
}

function float32Array(arr) {
  return new Float32Array(arr);
}

var emptyInt8Array = int8Array(0);
exports.emptyInt8Array = emptyInt8Array;
var emptyUint8Array = uint8Array(0);
exports.emptyUint8Array = emptyUint8Array;
var emptyInt32Array = int32Array(0);
exports.emptyInt32Array = emptyInt32Array;
var emptyFloat32Array = float32Array(0);
exports.emptyFloat32Array = emptyFloat32Array;
var isLittleEndian = int32Array(int8Array((0, _List.ofArray)([1, 0, 0, 0])))[0] === 1;
exports.isLittleEndian = isLittleEndian;

function writeFloat32View(view, ofs, value) {
  view.setFloat32(ofs, value, isLittleEndian);
  return 4;
}

function writeInt8View(view, ofs, value) {
  view.setInt8(ofs, (value + 0x80 & 0xFF) - 0x80);
  return 1;
}

function writeUint8View(view, ofs, value) {
  view.setUint8(ofs, value & 0xFF);
  return 1;
}

function writeInt16View(view, ofs, value) {
  view.setInt16(ofs, (value + 0x8000 & 0xFFFF) - 0x8000, isLittleEndian);
  return 2;
}

function writeUint16View(view, ofs, value) {
  view.setUint16(ofs, value & 0xFFFF, isLittleEndian);
  return 2;
}

function writeInt32View(view, ofs, value) {
  view.setInt32(ofs, value, isLittleEndian);
  return 4;
}

var int8ArrayFactory = (_int8ArrayFactory = {
  Create: function Create(size) {
    return new Int8Array(size);
  }
}, _defineProperty(_int8ArrayFactory, "Create", function Create(typedArray) {
  return new Int8Array(typedArray);
}), _defineProperty(_int8ArrayFactory, "Create", function Create(data) {
  return new Int8Array(data);
}), _defineProperty(_int8ArrayFactory, "Create", function Create(buffer, offset, length) {
  return new Int8Array(buffer, offset, length);
}), _int8ArrayFactory);
exports.int8ArrayFactory = int8ArrayFactory;
var uint8ArrayFactory = (_uint8ArrayFactory = {
  Create: function Create(size) {
    return new Uint8Array(size);
  }
}, _defineProperty(_uint8ArrayFactory, "Create", function Create(typedArray) {
  return new Uint8Array(typedArray);
}), _defineProperty(_uint8ArrayFactory, "Create", function Create(data) {
  return new Uint8Array(data);
}), _defineProperty(_uint8ArrayFactory, "Create", function Create(buffer, offset, length) {
  return new Uint8Array(buffer, offset, length);
}), _uint8ArrayFactory);
exports.uint8ArrayFactory = uint8ArrayFactory;
var int16ArrayFactory = (_int16ArrayFactory = {
  Create: function Create(size) {
    return new Int16Array(size);
  }
}, _defineProperty(_int16ArrayFactory, "Create", function Create(typedArray) {
  return new Int16Array(typedArray);
}), _defineProperty(_int16ArrayFactory, "Create", function Create(data) {
  return new Int16Array(data);
}), _defineProperty(_int16ArrayFactory, "Create", function Create(buffer, offset, length) {
  return new Int16Array(buffer, offset, length);
}), _int16ArrayFactory);
exports.int16ArrayFactory = int16ArrayFactory;
var uint16ArrayFactory = (_uint16ArrayFactory = {
  Create: function Create(size) {
    return new Uint16Array(size);
  }
}, _defineProperty(_uint16ArrayFactory, "Create", function Create(typedArray) {
  return new Uint16Array(typedArray);
}), _defineProperty(_uint16ArrayFactory, "Create", function Create(data) {
  return new Uint16Array(data);
}), _defineProperty(_uint16ArrayFactory, "Create", function Create(buffer, offset, length) {
  return new Uint16Array(buffer, offset, length);
}), _uint16ArrayFactory);
exports.uint16ArrayFactory = uint16ArrayFactory;
var int32ArrayFactory = (_int32ArrayFactory = {
  Create: function Create(size) {
    return new Int32Array(size);
  }
}, _defineProperty(_int32ArrayFactory, "Create", function Create(typedArray) {
  return new Int32Array(typedArray);
}), _defineProperty(_int32ArrayFactory, "Create", function Create(data) {
  return new Int32Array(data);
}), _defineProperty(_int32ArrayFactory, "Create", function Create(buffer, offset, length) {
  return new Int32Array(buffer, offset, length);
}), _int32ArrayFactory);
exports.int32ArrayFactory = int32ArrayFactory;
var uint32ArrayFactory = (_uint32ArrayFactory = {
  Create: function Create(size) {
    return new Uint32Array(size);
  }
}, _defineProperty(_uint32ArrayFactory, "Create", function Create(typedArray) {
  return new Uint32Array(typedArray);
}), _defineProperty(_uint32ArrayFactory, "Create", function Create(data) {
  return new Uint32Array(data);
}), _defineProperty(_uint32ArrayFactory, "Create", function Create(buffer, offset, length) {
  return new Uint32Array(buffer, offset, length);
}), _uint32ArrayFactory);
exports.uint32ArrayFactory = uint32ArrayFactory;
var float32ArrayFactory = (_float32ArrayFactory = {
  Create: function Create(size) {
    return new Float32Array(size);
  }
}, _defineProperty(_float32ArrayFactory, "Create", function Create(typedArray) {
  return new Float32Array(typedArray);
}), _defineProperty(_float32ArrayFactory, "Create", function Create(data) {
  return new Float32Array(data);
}), _defineProperty(_float32ArrayFactory, "Create", function Create(buffer, offset, length) {
  return new Float32Array(buffer, offset, length);
}), _float32ArrayFactory);
exports.float32ArrayFactory = float32ArrayFactory;
},{"./.fable/fable-library.3.0.0/List.js":"../src/.fable/fable-library.3.0.0/List.js"}],"../src/webgl_types.fs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GlTypeInfo$reflection = GlTypeInfo$reflection;
exports.glTypeInfo = glTypeInfo;
exports.addGlTypeInfo = addGlTypeInfo;
exports.getGlTypeInfo = getGlTypeInfo;
exports.GlDrawMethod$reflection = GlDrawMethod$reflection;
exports.getViewWriter = getViewWriter;
exports.GlCommon_getEmptyBuffer = GlCommon_getEmptyBuffer;
exports.GlCommon_useProgram = GlCommon_useProgram;
exports.GlCommon_getUniformBlockIndex = GlCommon_getUniformBlockIndex;
exports.GlCommon_uniformBlockBinding = GlCommon_uniformBlockBinding;
exports.GlCommon_bindVertexArray = GlCommon_bindVertexArray;
exports.GlCommon_bindBuffer = GlCommon_bindBuffer;
exports.GlCommon_bindBufferBase = GlCommon_bindBufferBase;
exports.GlCommon_bufferData = GlCommon_bufferData;
exports.GlCommon_bufferSubData = GlCommon_bufferSubData;
exports.GlCommon_enableVertexAttribArray = GlCommon_enableVertexAttribArray;
exports.GlCommon_vertexAttribPointer = GlCommon_vertexAttribPointer;
exports.GlCommon_vertexAttribDivisor = GlCommon_vertexAttribDivisor;
exports.GlCommon_drawArrays = GlCommon_drawArrays;
exports.GlCommon_drawElements = GlCommon_drawElements;
exports.GlCommon_drawArraysInstanced = GlCommon_drawArraysInstanced;
exports.GlCommon_uniform1i = GlCommon_uniform1i;
exports.GlCommon_uniform2i = GlCommon_uniform2i;
exports.GlCommon_uniform3i = GlCommon_uniform3i;
exports.GlCommon_uniform4i = GlCommon_uniform4i;
exports.GlCommon_uniform1ui = GlCommon_uniform1ui;
exports.GlCommon_uniform2ui = GlCommon_uniform2ui;
exports.GlCommon_uniform3ui = GlCommon_uniform3ui;
exports.GlCommon_uniform4ui = GlCommon_uniform4ui;
exports.GlCommon_uniform1f = GlCommon_uniform1f;
exports.GlCommon_uniform2f = GlCommon_uniform2f;
exports.GlCommon_uniform3f = GlCommon_uniform3f;
exports.GlCommon_uniform4f = GlCommon_uniform4f;
exports.GlCommon_uniform1iv = GlCommon_uniform1iv;
exports.GlCommon_uniform2iv = GlCommon_uniform2iv;
exports.GlCommon_uniform3iv = GlCommon_uniform3iv;
exports.GlCommon_uniform4iv = GlCommon_uniform4iv;
exports.GlCommon_uniform1uiv = GlCommon_uniform1uiv;
exports.GlCommon_uniform2uiv = GlCommon_uniform2uiv;
exports.GlCommon_uniform3uiv = GlCommon_uniform3uiv;
exports.GlCommon_uniform4uiv = GlCommon_uniform4uiv;
exports.GlCommon_uniform1fv = GlCommon_uniform1fv;
exports.GlCommon_uniform2fv = GlCommon_uniform2fv;
exports.GlCommon_uniform3fv = GlCommon_uniform3fv;
exports.GlCommon_uniform4fv = GlCommon_uniform4fv;
exports.GlCommon_uniformMatrix2fv = GlCommon_uniformMatrix2fv;
exports.GlCommon_uniformMatrix3fv = GlCommon_uniformMatrix3fv;
exports.GlCommon_uniformMatrix4fv = GlCommon_uniformMatrix4fv;
exports.GlCommon_uniformMatrix2x3fv = GlCommon_uniformMatrix2x3fv;
exports.GlCommon_uniformMatrix2x4fv = GlCommon_uniformMatrix2x4fv;
exports.GlCommon_uniformMatrix3x2fv = GlCommon_uniformMatrix3x2fv;
exports.GlCommon_uniformMatrix3x4fv = GlCommon_uniformMatrix3x4fv;
exports.GlCommon_uniformMatrix4x2fv = GlCommon_uniformMatrix4x2fv;
exports.GlCommon_uniformMatrix4x3fv = GlCommon_uniformMatrix4x3fv;
exports.GlCommon_enable = GlCommon_enable;
exports.GlCommon_disable = GlCommon_disable;
exports.GlCommon_cullFace = GlCommon_cullFace;
exports.GlCommon_blendColor = GlCommon_blendColor;
exports.GlCommon_blendFunc = GlCommon_blendFunc;
exports.GlCommon_blendFuncSeparate = GlCommon_blendFuncSeparate;
exports.GlCommon_blendEquation = GlCommon_blendEquation;
exports.GlCommon_blendEquationSeparate = GlCommon_blendEquationSeparate;
exports.GlCommon_texImage2DData = GlCommon_texImage2DData;
exports.GlCommon_texImage2DImage = GlCommon_texImage2DImage;
exports.GlCommon_texImage2DCanvas = GlCommon_texImage2DCanvas;
exports.GlCommon_texImage2DVideo = GlCommon_texImage2DVideo;
exports.GlCommon_texImage2DBitmap = GlCommon_texImage2DBitmap;
exports.GlCommon_texImage2D = GlCommon_texImage2D;
exports.GlCommon_texImage2DCanvas2 = GlCommon_texImage2DCanvas2;
exports.GlCommon_texImage2DImage2 = GlCommon_texImage2DImage2;
exports.GlCommon_texImage2DVideo2 = GlCommon_texImage2DVideo2;
exports.GlCommon_texImage2DBitmap2 = GlCommon_texImage2DBitmap2;
exports.GlCommon_texImage2DImageData2 = GlCommon_texImage2DImageData2;
exports.GlCommon_texImage2DData2 = GlCommon_texImage2DData2;
exports.GlPixelConversionT = exports.GlPixelAlignT = exports.GlPixelStoreParamT = exports.GlCompareModeT = exports.GlCompareFuncT = exports.GlWrapModeT = exports.GlMinFilterT = exports.GlMagFilterT = exports.GlTextureParamT = exports.GlTextureTypeT = exports.GlColorFormatT = exports.GlTextureUnitT = exports.GlBlendModeT = exports.GlBlendFactorT = exports.GlCapabilityT = exports.GlCullModeT = exports.GlDrawMethod = exports.GlClearBitT = exports.GlDrawPrimitiveT = exports.GlBufferUsageT = exports.GlTextureTargetT = exports.GlBufferTargetT = exports.GlProgParamNameT = exports.GlIndexedParamT = exports.GlBlockParamT = exports.GlUniformParamT = exports.glTypeInfos = exports.Vec4BaseAlign = exports.FloatByteSize = exports.BaseUnit = exports.GlTypeInfo = exports.GlIndiciesTypeT = exports.GlTypeT = exports.emptyImageData = void 0;

var _Reflection = require("./.fable/fable-library.3.0.0/Reflection.js");

var _Types = require("./.fable/fable-library.3.0.0/Types.js");

var _Util = require("./.fable/fable-library.3.0.0/Util.js");

var _Map = require("./.fable/fable-library.3.0.0/Map.js");

var _String = require("./.fable/fable-library.3.0.0/String.js");

var _utilsFs = require("./utils.fs.js");

var _typedarray_utilsFs = require("./typedarray_utils.fs.js");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var emptyImageData = function () {
  var canvas = document.createElement("canvas");
  var ctx = canvas.getContext('2d');
  return ctx.createImageData(1, 1);
}();

exports.emptyImageData = emptyImageData;
var GlTypeT = (0, _Reflection.enum_type)("WebGLTypes.GlType", _Reflection.int32_type, [["Unknown", 0], ["BYTE", 5120], ["SHORT", 5122], ["BOOL", 35670], ["BOOL_VEC2", 35671], ["BOOL_VEC3", 35672], ["BOOL_VEC4", 35673], ["FLOAT", 5126], ["HALF_FLOAT", 5131], ["FLOAT_MAT2x3", 35685], ["FLOAT_MAT2", 35674], ["FLOAT_MAT2x4", 35686], ["FLOAT_MAT3", 35675], ["FLOAT_MAT3x2", 35687], ["FLOAT_MAT3x4", 35688], ["FLOAT_MAT4", 35676], ["FLOAT_MAT4x2", 35689], ["FLOAT_MAT4x3", 35690], ["FLOAT_VEC2", 35664], ["FLOAT_VEC3", 35665], ["FLOAT_VEC4", 35666], ["INT", 5124], ["INT_VEC2", 35667], ["INT_VEC3", 35668], ["INT_VEC4", 35669], ["INT_SAMPLER_2D", 36298], ["INT_SAMPLER_2D_ARRAY", 36303], ["INT_SAMPLER_3D", 36299], ["INT_SAMPLER_CUBE", 36300], ["UNSIGNED_BYTE", 5121], ["UNSIGNED_SHORT", 5123], ["UNSIGNED_INT", 5125], ["UNSIGNED_INT_24_8", 34042], ["UNSIGNED_INT_SAMPLER_2D", 36306], ["UNSIGNED_INT_SAMPLER_2D_ARRAY", 36311], ["UNSIGNED_INT_SAMPLER_3D", 36307], ["UNSIGNED_INT_SAMPLER_CUBE", 36308], ["UNSIGNED_INT_VEC2", 36294], ["UNSIGNED_INT_VEC3", 36295], ["UNSIGNED_INT_VEC4", 36296], ["SAMPLER_2D", 35678], ["SAMPLER_2D_ARRAY", 36289], ["SAMPLER_2D_ARRAY_SHADOW", 36292], ["SAMPLER_2D_SHADOW", 35682], ["SAMPLER_3D", 35679], ["SAMPLER_CUBE", 35680], ["SAMPLER_CUBE_SHADOW", 36293]]);
exports.GlTypeT = GlTypeT;
var GlIndiciesTypeT = (0, _Reflection.enum_type)("WebGLTypes.GlIndiciesType", _Reflection.int32_type, [["UNSIGNED_BYTE", 5121], ["UNSIGNED_SHORT", 5123], ["UNSIGNED_INT", 5125]]);
exports.GlIndiciesTypeT = GlIndiciesTypeT;

var GlTypeInfo = /*#__PURE__*/function (_Record) {
  _inherits(GlTypeInfo, _Record);

  var _super = _createSuper(GlTypeInfo);

  function GlTypeInfo(Type, BaseType, ElementCount, ByteSize, BaseAlign, IsMatrix, MatrixColCount, MatrixRowCount, TypeArrayCreator) {
    var _this;

    _classCallCheck(this, GlTypeInfo);

    _this = _super.call(this);
    _this.Type = Type | 0;
    _this.BaseType = BaseType | 0;
    _this.ElementCount = ElementCount | 0;
    _this.ByteSize = ByteSize | 0;
    _this.BaseAlign = BaseAlign | 0;
    _this.IsMatrix = IsMatrix;
    _this.MatrixColCount = MatrixColCount | 0;
    _this.MatrixRowCount = MatrixRowCount | 0;
    _this.TypeArrayCreator = TypeArrayCreator;
    return _this;
  }

  return GlTypeInfo;
}(_Types.Record);

exports.GlTypeInfo = GlTypeInfo;

function GlTypeInfo$reflection() {
  return (0, _Reflection.record_type)("WebGLTypes.GlTypeInfo", [], GlTypeInfo, function () {
    return [["Type", (0, _Reflection.enum_type)("WebGLTypes.GlType", _Reflection.int32_type, [["Unknown", 0], ["BYTE", 5120], ["SHORT", 5122], ["BOOL", 35670], ["BOOL_VEC2", 35671], ["BOOL_VEC3", 35672], ["BOOL_VEC4", 35673], ["FLOAT", 5126], ["HALF_FLOAT", 5131], ["FLOAT_MAT2x3", 35685], ["FLOAT_MAT2", 35674], ["FLOAT_MAT2x4", 35686], ["FLOAT_MAT3", 35675], ["FLOAT_MAT3x2", 35687], ["FLOAT_MAT3x4", 35688], ["FLOAT_MAT4", 35676], ["FLOAT_MAT4x2", 35689], ["FLOAT_MAT4x3", 35690], ["FLOAT_VEC2", 35664], ["FLOAT_VEC3", 35665], ["FLOAT_VEC4", 35666], ["INT", 5124], ["INT_VEC2", 35667], ["INT_VEC3", 35668], ["INT_VEC4", 35669], ["INT_SAMPLER_2D", 36298], ["INT_SAMPLER_2D_ARRAY", 36303], ["INT_SAMPLER_3D", 36299], ["INT_SAMPLER_CUBE", 36300], ["UNSIGNED_BYTE", 5121], ["UNSIGNED_SHORT", 5123], ["UNSIGNED_INT", 5125], ["UNSIGNED_INT_24_8", 34042], ["UNSIGNED_INT_SAMPLER_2D", 36306], ["UNSIGNED_INT_SAMPLER_2D_ARRAY", 36311], ["UNSIGNED_INT_SAMPLER_3D", 36307], ["UNSIGNED_INT_SAMPLER_CUBE", 36308], ["UNSIGNED_INT_VEC2", 36294], ["UNSIGNED_INT_VEC3", 36295], ["UNSIGNED_INT_VEC4", 36296], ["SAMPLER_2D", 35678], ["SAMPLER_2D_ARRAY", 36289], ["SAMPLER_2D_ARRAY_SHADOW", 36292], ["SAMPLER_2D_SHADOW", 35682], ["SAMPLER_3D", 35679], ["SAMPLER_CUBE", 35680], ["SAMPLER_CUBE_SHADOW", 36293]])], ["BaseType", (0, _Reflection.enum_type)("WebGLTypes.GlType", _Reflection.int32_type, [["Unknown", 0], ["BYTE", 5120], ["SHORT", 5122], ["BOOL", 35670], ["BOOL_VEC2", 35671], ["BOOL_VEC3", 35672], ["BOOL_VEC4", 35673], ["FLOAT", 5126], ["HALF_FLOAT", 5131], ["FLOAT_MAT2x3", 35685], ["FLOAT_MAT2", 35674], ["FLOAT_MAT2x4", 35686], ["FLOAT_MAT3", 35675], ["FLOAT_MAT3x2", 35687], ["FLOAT_MAT3x4", 35688], ["FLOAT_MAT4", 35676], ["FLOAT_MAT4x2", 35689], ["FLOAT_MAT4x3", 35690], ["FLOAT_VEC2", 35664], ["FLOAT_VEC3", 35665], ["FLOAT_VEC4", 35666], ["INT", 5124], ["INT_VEC2", 35667], ["INT_VEC3", 35668], ["INT_VEC4", 35669], ["INT_SAMPLER_2D", 36298], ["INT_SAMPLER_2D_ARRAY", 36303], ["INT_SAMPLER_3D", 36299], ["INT_SAMPLER_CUBE", 36300], ["UNSIGNED_BYTE", 5121], ["UNSIGNED_SHORT", 5123], ["UNSIGNED_INT", 5125], ["UNSIGNED_INT_24_8", 34042], ["UNSIGNED_INT_SAMPLER_2D", 36306], ["UNSIGNED_INT_SAMPLER_2D_ARRAY", 36311], ["UNSIGNED_INT_SAMPLER_3D", 36307], ["UNSIGNED_INT_SAMPLER_CUBE", 36308], ["UNSIGNED_INT_VEC2", 36294], ["UNSIGNED_INT_VEC3", 36295], ["UNSIGNED_INT_VEC4", 36296], ["SAMPLER_2D", 35678], ["SAMPLER_2D_ARRAY", 36289], ["SAMPLER_2D_ARRAY_SHADOW", 36292], ["SAMPLER_2D_SHADOW", 35682], ["SAMPLER_3D", 35679], ["SAMPLER_CUBE", 35680], ["SAMPLER_CUBE_SHADOW", 36293]])], ["ElementCount", _Reflection.int32_type], ["ByteSize", _Reflection.int32_type], ["BaseAlign", _Reflection.int32_type], ["IsMatrix", _Reflection.bool_type], ["MatrixColCount", _Reflection.int32_type], ["MatrixRowCount", _Reflection.int32_type], ["TypeArrayCreator", (0, _Reflection.class_type)("TypedArrayUtils.ITypedArrayFactory")]];
  });
}

function glTypeInfo(t, bt, ec, bs, ba, im, mcc, mrc, tac) {
  return new GlTypeInfo(t, bt, ec, bs, ba, im, mcc, mrc, tac);
}

var BaseUnit = 4;
exports.BaseUnit = BaseUnit;
var FloatByteSize = 4;
exports.FloatByteSize = FloatByteSize;
var Vec4BaseAlign = 4 * BaseUnit;
exports.Vec4BaseAlign = Vec4BaseAlign;
var glTypeInfos = (0, _Util.createAtom)((0, _Map.ofSeq)([], {
  Compare: _Util.comparePrimitives
}));
exports.glTypeInfos = glTypeInfos;

function addGlTypeInfo(ti) {
  glTypeInfos((0, _Map.FSharpMap__Add)(glTypeInfos(), ti.Type, ti), true);
}

function getGlTypeInfo(t) {
  var matchValue = (0, _Map.tryFind)(t, glTypeInfos());

  if (matchValue == null) {
    throw new Error((0, _String.toText)((0, _String.interpolate)("Could not get type info for %P()", [(0, _utilsFs.enumName)(GlTypeT, t)])));
  } else {
    var info = matchValue;
    return info;
  }
}

addGlTypeInfo(glTypeInfo(5120, 5120, 1, 1, 1 * BaseUnit, false, 0, 0, _typedarray_utilsFs.int8ArrayFactory));
addGlTypeInfo(glTypeInfo(5121, 5121, 1, 1, 1 * BaseUnit, false, 0, 0, _typedarray_utilsFs.uint8ArrayFactory));
addGlTypeInfo(glTypeInfo(5122, 5122, 1, 2, 1 * BaseUnit, false, 0, 0, _typedarray_utilsFs.int16ArrayFactory));
addGlTypeInfo(glTypeInfo(5123, 5123, 1, 2, 1 * BaseUnit, false, 0, 0, _typedarray_utilsFs.uint16ArrayFactory));
addGlTypeInfo(glTypeInfo(5124, 5124, 1, FloatByteSize, 1 * BaseUnit, false, 0, 0, _typedarray_utilsFs.int32ArrayFactory));
addGlTypeInfo(glTypeInfo(5126, 5126, 1, FloatByteSize, 1 * BaseUnit, false, 0, 0, _typedarray_utilsFs.float32ArrayFactory));
addGlTypeInfo(glTypeInfo(35674, 5126, 2 * 2, 2 * 2 * FloatByteSize, Vec4BaseAlign, true, 2, 2, _typedarray_utilsFs.float32ArrayFactory));
addGlTypeInfo(glTypeInfo(35685, 5126, 2 * 3, 2 * 3 * FloatByteSize, Vec4BaseAlign, true, 2, 3, _typedarray_utilsFs.float32ArrayFactory));
addGlTypeInfo(glTypeInfo(35675, 5126, 3 * 3, 3 * 3 * FloatByteSize, Vec4BaseAlign, true, 3, 3, _typedarray_utilsFs.float32ArrayFactory));
addGlTypeInfo(glTypeInfo(35676, 5126, 4 * 4, 4 * 4 * FloatByteSize, Vec4BaseAlign, true, 4, 4, _typedarray_utilsFs.float32ArrayFactory));
addGlTypeInfo(glTypeInfo(35664, 5126, 2, 2 * FloatByteSize, 2 * BaseUnit, false, 0, 0, _typedarray_utilsFs.float32ArrayFactory));
addGlTypeInfo(glTypeInfo(35665, 5126, 3, 3 * FloatByteSize, Vec4BaseAlign, false, 0, 0, _typedarray_utilsFs.float32ArrayFactory));
addGlTypeInfo(glTypeInfo(35666, 5126, 4, 4 * FloatByteSize, Vec4BaseAlign, false, 0, 0, _typedarray_utilsFs.float32ArrayFactory));
addGlTypeInfo(glTypeInfo(35667, 5124, 2, 2 * FloatByteSize, 2 * BaseUnit, false, 0, 0, _typedarray_utilsFs.int32ArrayFactory));
addGlTypeInfo(glTypeInfo(35668, 5124, 3, 3 * FloatByteSize, Vec4BaseAlign, false, 0, 0, _typedarray_utilsFs.int32ArrayFactory));
addGlTypeInfo(glTypeInfo(35669, 5124, 4, 4 * FloatByteSize, Vec4BaseAlign, false, 0, 0, _typedarray_utilsFs.int32ArrayFactory));
addGlTypeInfo(glTypeInfo(35670, 5125, 1, FloatByteSize, 1 * BaseUnit, false, 0, 0, _typedarray_utilsFs.uint32ArrayFactory));
addGlTypeInfo(glTypeInfo(5125, 5125, 1, FloatByteSize, 1 * BaseUnit, false, 0, 0, _typedarray_utilsFs.uint32ArrayFactory));
addGlTypeInfo(glTypeInfo(35678, 5124, 1, FloatByteSize, 1 * BaseUnit, false, 0, 0, _typedarray_utilsFs.int32ArrayFactory));
addGlTypeInfo(glTypeInfo(35679, 5124, 1, FloatByteSize, 1 * BaseUnit, false, 0, 0, _typedarray_utilsFs.int32ArrayFactory));
var GlUniformParamT = (0, _Reflection.enum_type)("WebGLTypes.GlUniformParam", _Reflection.int32_type, [["UNIFORM_TYPE", 35383], ["UNIFORM_SIZE", 35384], ["UNIFORM_BLOCK_INDEX", 35386], ["UNIFORM_OFFSET", 35387], ["UNIFORM_ARRAY_STRIDE", 35388], ["UNIFORM_MATRIX_STRIDE", 35389], ["UNIFORM_IS_ROW_MAJOR", 35390]]);
exports.GlUniformParamT = GlUniformParamT;
var GlBlockParamT = (0, _Reflection.enum_type)("WebGLTypes.GlBlockParam", _Reflection.int32_type, [["UNIFORM_BLOCK_BINDING", 35391], ["UNIFORM_BLOCK_DATA_SIZE", 35392], ["UNIFORM_BLOCK_ACTIVE_UNIFORMS", 35394], ["UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES", 35395], ["UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER", 35396], ["UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER", 35398]]);
exports.GlBlockParamT = GlBlockParamT;
var GlIndexedParamT = (0, _Reflection.enum_type)("WebGLTypes.GlIndexedParam", _Reflection.int32_type, [["TRANSFORM_FEEDBACK_BUFFER_BINDING", 35983], ["TRANSFORM_FEEDBACK_BUFFER_SIZE", 35973], ["TRANSFORM_FEEDBACK_BUFFER_START", 35972], ["UNIFORM_BUFFER_BINDING", 35368], ["UNIFORM_BUFFER_SIZE", 35370], ["UNIFORM_BUFFER_START", 35369]]);
exports.GlIndexedParamT = GlIndexedParamT;
var GlProgParamNameT = (0, _Reflection.enum_type)("WebGLTypes.GlProgParamName", _Reflection.int32_type, [["DELETE_STATUS", 35712], ["LINK_STATUS", 35714], ["VALIDATE_STATUS", 35715], ["ATTACHED_SHADERS", 35717], ["ACTIVE_ATTRIBUTES", 35721], ["ACTIVE_UNIFORMS", 35718], ["TRANSFORM_FEEDBACK_BUFFER_MODE", 35967], ["TRANSFORM_FEEDBACK_VARYINGS", 35971], ["ACTIVE_UNIFORM_BLOCKS", 35382]]);
exports.GlProgParamNameT = GlProgParamNameT;
var GlBufferTargetT = (0, _Reflection.enum_type)("WebGLTypes.GlBufferTarget", _Reflection.int32_type, [["ARRAY_BUFFER", 34962], ["ELEMENT_ARRAY_BUFFER", 34963], ["UNIFORM_BUFFER", 35345], ["TRANSFORM_FEEDBACK_BUFFER", 35982]]);
exports.GlBufferTargetT = GlBufferTargetT;
var GlTextureTargetT = (0, _Reflection.enum_type)("WebGLTypes.GlTextureTarget", _Reflection.int32_type, [["TEXTURE_2D", 3553], ["TEXTURE_CUBE_MAP_POSITIVE_X", 34069], ["TEXTURE_CUBE_MAP_NEGATIVE_X", 34070], ["TEXTURE_CUBE_MAP_POSITIVE_Y", 34071], ["TEXTURE_CUBE_MAP_NEGATIVE_Y", 34072], ["TEXTURE_CUBE_MAP_POSITIVE_Z", 34073], ["TEXTURE_CUBE_MAP_NEGATIVE_Z", 34074]]);
exports.GlTextureTargetT = GlTextureTargetT;
var GlBufferUsageT = (0, _Reflection.enum_type)("WebGLTypes.GlBufferUsage", _Reflection.int32_type, [["STREAM_DRAW", 35040], ["STATIC_DRAW", 35044], ["DYNAMIC_DRAW", 35048]]);
exports.GlBufferUsageT = GlBufferUsageT;
var GlDrawPrimitiveT = (0, _Reflection.enum_type)("WebGLTypes.GlDrawPrimitive", _Reflection.int32_type, [["POINTS", 0], ["LINES", 1], ["LINE_LOOP", 2], ["LINE_STRIP", 3], ["TRIANGLES", 4], ["TRIANGLE_STRIP", 5], ["TRIANGLE_FAN", 6]]);
exports.GlDrawPrimitiveT = GlDrawPrimitiveT;
var GlClearBitT = (0, _Reflection.enum_type)("WebGLTypes.GlClearBit", _Reflection.int32_type, [["COLOR_BUFFER_BIT", 16384], ["DEPTH_BUFFER_BIT", 256], ["STENCIL_BUFFER_BIT", 1024]]);
exports.GlClearBitT = GlClearBitT;

var GlDrawMethod = /*#__PURE__*/function (_Union) {
  _inherits(GlDrawMethod, _Union);

  var _super2 = _createSuper(GlDrawMethod);

  function GlDrawMethod(tag) {
    var _this2;

    _classCallCheck(this, GlDrawMethod);

    _this2 = _super2.call(this);
    _this2.tag = tag | 0;

    for (var _len = arguments.length, fields = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      fields[_key - 1] = arguments[_key];
    }

    _this2.fields = fields;
    return _this2;
  }

  _createClass(GlDrawMethod, [{
    key: "cases",
    value: function cases() {
      return ["DRAW_ARRAYS", "DRAW_ELEMENTS", "DRAW_ARRAYS_INSTANCED", "DRAW_ELEMENTS_INSTANCED", "Unknown"];
    }
  }]);

  return GlDrawMethod;
}(_Types.Union);

exports.GlDrawMethod = GlDrawMethod;

function GlDrawMethod$reflection() {
  return (0, _Reflection.union_type)("WebGLTypes.GlDrawMethod", [], GlDrawMethod, function () {
    return [[], [], [], [], []];
  });
}

var GlCullModeT = (0, _Reflection.enum_type)("WebGLTypes.GlCullMode", _Reflection.int32_type, [["FRONT", 1028], ["BACK", 1029], ["FRONT_AND_BACK", 1032]]);
exports.GlCullModeT = GlCullModeT;
var GlCapabilityT = (0, _Reflection.enum_type)("WebGLTypes.GlCapability", _Reflection.int32_type, [["BLEND", 3042], ["CULL_FACE", 2884], ["DEPTH_TEST", 2929], ["DITHER", 3024], ["POLYGON_OFFSET_FILL", 32823], ["SAMPLE_ALPHA_TO_COVERAGE", 32926], ["SAMPLE_COVERAGE", 32928], ["SCISSOR_TEST", 3089], ["STENCIL_TEST", 2960], ["RASTERIZER_DISCARD", 35977]]);
exports.GlCapabilityT = GlCapabilityT;
var GlBlendFactorT = (0, _Reflection.enum_type)("WebGLTypes.GlBlendFactor", _Reflection.int32_type, [["ZERO", 0], ["ONE", 1], ["SRC_COLOR", 768], ["ONE_MINUS_SRC_COLOR", 769], ["SRC_ALPHA", 770], ["ONE_MINUS_SRC_ALPHA", 771], ["DST_ALPHA", 772], ["ONE_MINUS_DST_ALPHA", 773], ["DST_COLOR", 774], ["ONE_MINUS_DST_COLOR", 775], ["SRC_ALPHA_SATURATE", 776], ["CONSTANT_COLOR", 32769], ["ONE_MINUS_CONSTANT_COLOR", 32770], ["CONSTANT_ALPHA", 32771], ["ONE_MINUS_CONSTANT_ALPHA", 32772]]);
exports.GlBlendFactorT = GlBlendFactorT;
var GlBlendModeT = (0, _Reflection.enum_type)("WebGLTypes.GlBlendMode", _Reflection.int32_type, [["FUNC_ADD", 32774], ["FUNC_SUBTRACT", 32778], ["FUNC_REVERSE_SUBTRACT", 32779], ["MIN", 32775], ["MAX", 32776]]);
exports.GlBlendModeT = GlBlendModeT;
var GlTextureUnitT = (0, _Reflection.enum_type)("WebGLTypes.GlTextureUnit", _Reflection.int32_type, [["TEXTURE0", 33984], ["TEXTURE1", 33985], ["TEXTURE2", 33986], ["TEXTURE3", 33987], ["TEXTURE4", 33988], ["TEXTURE5", 33989], ["TEXTURE6", 33990], ["TEXTURE7", 33991], ["TEXTURE8", 33992], ["TEXTURE9", 33993], ["TEXTURE10", 33994], ["TEXTURE11", 33995], ["TEXTURE12", 33996], ["TEXTURE13", 33997], ["TEXTURE14", 33998], ["TEXTURE15", 33999], ["TEXTURE16", 34000], ["TEXTURE17", 34001], ["TEXTURE18", 34002], ["TEXTURE19", 34003], ["TEXTURE20", 34004], ["TEXTURE21", 34005], ["TEXTURE22", 34006], ["TEXTURE23", 34007], ["TEXTURE24", 34008], ["TEXTURE25", 34009], ["TEXTURE26", 34010], ["TEXTURE27", 34011], ["TEXTURE28", 34012], ["TEXTURE29", 34013], ["TEXTURE30", 34014], ["TEXTURE31", 34015]]);
exports.GlTextureUnitT = GlTextureUnitT;
var GlColorFormatT = (0, _Reflection.enum_type)("WebGLTypes.GlColorFormat", _Reflection.int32_type, [["RGB", 6407], ["RGBA", 6408], ["LUMINANCE", 6409], ["LUMINANCE_ALPHA", 6410], ["ALPHA", 6406], ["R8", 33321], ["R8_SNORM", 36756], ["RG8", 33323], ["RG8_SNORM", 36757], ["RGB8", 32849], ["RGB8_SNORM", 36758], ["RGB565", 36194], ["RGBA4", 32854], ["RGB5_A1", 32855], ["RGBA8", 32856], ["RGBA8_SNORM", 36759], ["RGB10_A2", 32857], ["RGB10_A2UI", 36975], ["SRGB8", 35905], ["SRGB8_ALPHA8", 35907], ["R16F", 33325], ["RG16F", 33327], ["RGB16F", 34843], ["RGBA16F", 34842], ["R32F", 33326], ["RG32F", 33328], ["RGB32F", 34837], ["RGBA32F", 34836], ["R11F_G11F_B10F", 35898], ["RGB9_E5", 35901], ["R8I", 33329], ["R8UI", 33330], ["R16I", 33331], ["R16UI", 33332], ["R32I", 33333], ["R32UI", 33334], ["RG8I", 33335], ["RG8UI", 33336], ["RG16I", 33337], ["RG16UI", 33338], ["RG32I", 33339], ["RG32UI", 33340], ["RGB8UI", 36221], ["RGB16I", 36233], ["RGB16UI", 36215], ["RGB32I", 36227], ["RGB32UI", 36209], ["RGBA8I", 36238], ["RGBA8UI", 36220], ["RGBA16I", 36232], ["RGBA16UI", 36214], ["RGBA32I", 36226], ["RGBA32UI", 36208]]);
exports.GlColorFormatT = GlColorFormatT;
var GlTextureTypeT = (0, _Reflection.enum_type)("WebGLTypes.GlTextureType", _Reflection.int32_type, [["UNSIGNED_BYTE", 5121], ["UNSIGNED_SHORT_4_4_4_4", 32819], ["UNSIGNED_SHORT_5_5_5_1", 32820], ["UNSIGNED_SHORT_5_6_5", 33635], ["UNSIGNED_SHORT", 5123], ["UNSIGNED_INT", 5125], ["UNSIGNED_INT_24_8", 34042], ["FLOAT", 5126], ["HALF_FLOAT", 5131], ["BYTE", 5120], ["SHORT", 5122], ["INT", 5124], ["UNSIGNED_INT_2_10_10_10_REV", 33640], ["UNSIGNED_INT_10F_11F_11F_REV", 35899], ["UNSIGNED_INT_5_9_9_9_REV", 35902], ["FLOAT_32_UNSIGNED_INT_24_8_REV", 36269]]);
exports.GlTextureTypeT = GlTextureTypeT;
var GlTextureParamT = (0, _Reflection.enum_type)("WebGLTypes.GlTextureParam", _Reflection.int32_type, [["TEXTURE_MAG_FILTER", 10240], ["TEXTURE_MIN_FILTER", 10241], ["TEXTURE_WRAP_S", 10242], ["TEXTURE_WRAP_T", 10243], ["TEXTURE_WRAP_R", 32882], ["TEXTURE_MIN_LOD", 33082], ["TEXTURE_MAX_LOD", 33083], ["TEXTURE_BASE_LEVEL", 33084], ["TEXTURE_MAX_LEVEL", 33085], ["TEXTURE_COMPARE_MODE", 34892], ["TEXTURE_COMPARE_FUNC", 34893]]);
exports.GlTextureParamT = GlTextureParamT;
var GlMagFilterT = (0, _Reflection.enum_type)("WebGLTypes.GlMagFilter", _Reflection.int32_type, [["NEAREST", 9728], ["LINEAR", 9729]]);
exports.GlMagFilterT = GlMagFilterT;
var GlMinFilterT = (0, _Reflection.enum_type)("WebGLTypes.GlMinFilter", _Reflection.int32_type, [["NEAREST", 9728], ["LINEAR", 9729], ["NEAREST_MIPMAP_NEAREST", 9984], ["LINEAR_MIPMAP_NEAREST", 9985], ["NEAREST_MIPMAP_LINEAR", 9986], ["LINEAR_MIPMAP_LINEAR", 9987]]);
exports.GlMinFilterT = GlMinFilterT;
var GlWrapModeT = (0, _Reflection.enum_type)("WebGLTypes.GlWrapMode", _Reflection.int32_type, [["REPEAT", 10497], ["CLAMP_TO_EDGE", 33071], ["MIRRORED_REPEAT", 33648]]);
exports.GlWrapModeT = GlWrapModeT;
var GlCompareFuncT = (0, _Reflection.enum_type)("WebGLTypes.GlCompareFunc", _Reflection.int32_type, [["NEVER", 512], ["LESS", 513], ["EQUAL", 514], ["LEQUAL", 515], ["GREATER", 516], ["NOTEQUAL", 517], ["GEQUAL", 518], ["ALWAYS", 519]]);
exports.GlCompareFuncT = GlCompareFuncT;
var GlCompareModeT = (0, _Reflection.enum_type)("WebGLTypes.GlCompareMode", _Reflection.int32_type, [["NONE", 0], ["COMPARE_REF_TO_TEXTURE", 34894]]);
exports.GlCompareModeT = GlCompareModeT;
var GlPixelStoreParamT = (0, _Reflection.enum_type)("WebGLTypes.GlPixelStoreParam", _Reflection.int32_type, [["PACK_ALIGNMENT", 3333], ["UNPACK_ALIGNMENT", 3317], ["UNPACK_FLIP_Y_WEBGL", 37440], ["UNPACK_PREMULTIPLY_ALPHA_WEBGL", 37441], ["UNPACK_COLORSPACE_CONVERSION_WEBGL", 37443], ["PACK_ROW_LENGTH", 3330], ["PACK_SKIP_PIXELS", 3332], ["PACK_SKIP_ROWS", 3331], ["UNPACK_ROW_LENGTH", 3314], ["UNPACK_IMAGE_HEIGHT", 32878], ["UNPACK_SKIP_PIXELS", 3316], ["UNPACK_SKIP_ROWS", 3315], ["UNPACK_SKIP_IMAGES", 32877]]);
exports.GlPixelStoreParamT = GlPixelStoreParamT;
var GlPixelAlignT = (0, _Reflection.enum_type)("WebGLTypes.GlPixelAlign", _Reflection.int32_type, [["ONE", 1], ["TWO", 2], ["FOUR", 4], ["EIGHT", 8]]);
exports.GlPixelAlignT = GlPixelAlignT;
var GlPixelConversionT = (0, _Reflection.enum_type)("WebGLTypes.GlPixelConversion", _Reflection.int32_type, [["NONE", 0], ["BROWSER_DEFAULT_WEBGL", 37444]]);
exports.GlPixelConversionT = GlPixelConversionT;

function getViewWriter(dataType) {
  switch (dataType) {
    case 5120:
      {
        return function (view_1) {
          return function (ofs_1) {
            return function (value_1) {
              return (0, _typedarray_utilsFs.writeInt8View)(view_1, ofs_1, value_1);
            };
          };
        };
      }

    case 5121:
      {
        return function (view_2) {
          return function (ofs_2) {
            return function (value_2) {
              return (0, _typedarray_utilsFs.writeUint8View)(view_2, ofs_2, value_2);
            };
          };
        };
      }

    case 5122:
      {
        return function (view_3) {
          return function (ofs_3) {
            return function (value_3) {
              return (0, _typedarray_utilsFs.writeInt16View)(view_3, ofs_3, value_3);
            };
          };
        };
      }

    case 5123:
      {
        return function (view_4) {
          return function (ofs_4) {
            return function (value_4) {
              return (0, _typedarray_utilsFs.writeUint16View)(view_4, ofs_4, value_4);
            };
          };
        };
      }

    case 5124:
      {
        return function (view_6) {
          return function (ofs_6) {
            return function (value_6) {
              return (0, _typedarray_utilsFs.writeInt32View)(view_6, ofs_6, value_6);
            };
          };
        };
      }

    case 5126:
      {
        return function (view) {
          return function (ofs) {
            return function (value) {
              return (0, _typedarray_utilsFs.writeFloat32View)(view, ofs, value);
            };
          };
        };
      }

    case 5131:
      {
        return function (view_5) {
          return function (ofs_5) {
            return function (value_5) {
              return (0, _typedarray_utilsFs.writeInt16View)(view_5, ofs_5, value_5);
            };
          };
        };
      }

    case 35664:
      {
        return function (view_11) {
          return function (ofs_11) {
            return function (value_11) {
              return (0, _typedarray_utilsFs.writeFloat32View)(view_11, ofs_11, value_11);
            };
          };
        };
      }

    case 35665:
      {
        return function (view_12) {
          return function (ofs_12) {
            return function (value_12) {
              return (0, _typedarray_utilsFs.writeFloat32View)(view_12, ofs_12, value_12);
            };
          };
        };
      }

    case 35666:
      {
        return function (view_13) {
          return function (ofs_13) {
            return function (value_13) {
              return (0, _typedarray_utilsFs.writeFloat32View)(view_13, ofs_13, value_13);
            };
          };
        };
      }

    case 35670:
      {
        return function (view_7) {
          return function (ofs_7) {
            return function (value_7) {
              return (0, _typedarray_utilsFs.writeInt32View)(view_7, ofs_7, value_7);
            };
          };
        };
      }

    case 35674:
      {
        return function (view_8) {
          return function (ofs_8) {
            return function (value_8) {
              return (0, _typedarray_utilsFs.writeFloat32View)(view_8, ofs_8, value_8);
            };
          };
        };
      }

    case 35675:
      {
        return function (view_9) {
          return function (ofs_9) {
            return function (value_9) {
              return (0, _typedarray_utilsFs.writeFloat32View)(view_9, ofs_9, value_9);
            };
          };
        };
      }

    case 35676:
      {
        return function (view_10) {
          return function (ofs_10) {
            return function (value_10) {
              return (0, _typedarray_utilsFs.writeFloat32View)(view_10, ofs_10, value_10);
            };
          };
        };
      }

    default:
      {
        throw new Error("No view writer for type: " + (0, _Types.toString)(dataType));
      }
  }
}

var GlCommon_emptyWebGLBuffer = null;

function GlCommon_getEmptyBuffer(gl) {
  if (GlCommon_emptyWebGLBuffer == null) {
    GlCommon_emptyWebGLBuffer = gl.createBuffer();
  }

  return GlCommon_emptyWebGLBuffer;
}

function GlCommon_useProgram(gl, program) {
  var msg = (0, _String.toText)((0, _String.interpolate)("useProgram(%P())", [program]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.useProgram(program);
}

function GlCommon_getUniformBlockIndex(gl, program, blockName) {
  return ~~gl.getUniformBlockIndex(program, blockName);
}

function GlCommon_uniformBlockBinding(gl, program, blockIndex, bufferIndex) {
  var msg = (0, _String.toText)((0, _String.interpolate)("uniformBlockBinding(%P(), %P(), %P())", [program, blockIndex, bufferIndex]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.uniformBlockBinding(program, blockIndex, bufferIndex);
}

function GlCommon_bindVertexArray(gl, vao) {
  var msg = (0, _String.toText)((0, _String.interpolate)("bindVertexArray(%P())", [vao]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.bindVertexArray(vao);
}

function GlCommon_bindBuffer(gl, target, buffer) {
  var msg = (0, _String.toText)((0, _String.interpolate)("bindBuffer(%P(), %P())", [(0, _utilsFs.enumName)(GlBufferTargetT, target), buffer]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.bindBuffer(target, buffer);
}

function GlCommon_bindBufferBase(gl, target, location, buffer) {
  var msg = (0, _String.toText)((0, _String.interpolate)("bindBufferBase(%P(), %P(), %P())", [(0, _utilsFs.enumName)(GlBufferTargetT, target), location, buffer]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.bindBufferBase(target, location, buffer);
}

function GlCommon_bufferData(gl, target, data, usage) {
  var msg = (0, _String.toText)((0, _String.interpolate)("bufferData(%P(), [%P()], %P())", [(0, _utilsFs.enumName)(GlBufferTargetT, target), (0, _utilsFs.clipObj)(10, data), (0, _utilsFs.enumName)(GlBufferUsageT, usage)]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.bufferData(target, (0, _typedarray_utilsFs.bufferView3)(data), usage);
}

function GlCommon_bufferSubData(gl, target, dstByteOffset, srcData, srcOffset, length) {
  var msg = (0, _String.toText)((0, _String.interpolate)("bufferSubData(%P(), %P(), [%P()], %P(), %P())", [(0, _utilsFs.enumName)(GlBufferTargetT, target), dstByteOffset, (0, _utilsFs.clipObj)(10, srcData), srcOffset, length]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.bufferSubData(target, dstByteOffset, (0, _typedarray_utilsFs.bufferView)(srcData), srcOffset, length);
}

function GlCommon_enableVertexAttribArray(gl, location) {
  var msg = (0, _String.toText)((0, _String.interpolate)("enableVertexAttribArray(%P())", [location]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.enableVertexAttribArray(location);
}

function GlCommon_vertexAttribPointer(gl, location, size, atype, normalize, stride, offset) {
  var msg = (0, _String.toText)((0, _String.interpolate)("vertexAttribPointer(%P(), %P(), %P(), %P(), %P(), %P())", [location, size, (0, _utilsFs.enumName)(GlTypeT, atype), normalize, stride, offset]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.vertexAttribPointer(location, size, atype, normalize, stride, offset);
}

function GlCommon_vertexAttribDivisor(gl, location, divisor) {
  var msg = (0, _String.toText)((0, _String.interpolate)("vertexAttribDivisor(%P(), %P())", [location, divisor]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.vertexAttribDivisor(location, divisor);
}

function GlCommon_drawArrays(gl, mode, first, count) {
  var msg = (0, _String.toText)((0, _String.interpolate)("drawArrays(%P(), %P(), %P())", [(0, _utilsFs.enumName)(GlDrawPrimitiveT, mode), first, count]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.drawArrays(mode, first, count);
}

function GlCommon_drawElements(gl, mode, count, indexType, offset) {
  var msg = (0, _String.toText)((0, _String.interpolate)("drawElements(%P(), %P(), %P(), %P())", [(0, _utilsFs.enumName)(GlDrawPrimitiveT, mode), count, (0, _utilsFs.enumName)(GlIndiciesTypeT, indexType), offset]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.drawElements(mode, count, indexType, offset);
}

function GlCommon_drawArraysInstanced(gl, mode, first, count, instanceCount) {
  gl.drawArraysInstanced(mode, first, count, instanceCount);
  var msg = (0, _String.toText)((0, _String.interpolate)("drawArraysInstanced(%P(), %P(), %P(), %P())", [(0, _utilsFs.enumName)(GlDrawPrimitiveT, mode), first, count, instanceCount]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }
}

function GlCommon_loc(location) {
  return location;
}

function GlCommon_uniform1i(gl, location, x) {
  var msg = (0, _String.toText)((0, _String.interpolate)("uniform1i(%P(), %P())", [GlCommon_loc(location), x]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.uniform1i(location, x);
}

function GlCommon_uniform2i(gl, location, x, y) {
  var msg = (0, _String.toText)((0, _String.interpolate)("uniform2i(%P(), %P(), %P())", [GlCommon_loc(location), x, y]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.uniform2i(location, x, y);
}

function GlCommon_uniform3i(gl, location, x, y, z) {
  var msg = (0, _String.toText)((0, _String.interpolate)("uniform3i(%P(), %P(), %P(), %P())", [GlCommon_loc(location), x, y, z]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.uniform3i(location, x, y, z);
}

function GlCommon_uniform4i(gl, location, x, y, z, w) {
  var msg = (0, _String.toText)((0, _String.interpolate)("uniform4i(%P(), %P(), %P(), %P(), %P())", [GlCommon_loc(location), x, y, z, w]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.uniform4i(location, x, y, z, w);
}

function GlCommon_uniform1ui(gl, location, x) {
  var msg = (0, _String.toText)((0, _String.interpolate)("uniform1ui(%P(), %P())", [GlCommon_loc(location), x]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.uniform1ui(location, x);
}

function GlCommon_uniform2ui(gl, location, x, y) {
  var msg = (0, _String.toText)((0, _String.interpolate)("uniform2ui(%P(), %P(), %P())", [GlCommon_loc(location), x, y]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.uniform2ui(location, x, y);
}

function GlCommon_uniform3ui(gl, location, x, y, z) {
  var msg = (0, _String.toText)((0, _String.interpolate)("uniform3ui(%P(), %P(), %P(), %P())", [GlCommon_loc(location), x, y, z]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.uniform3ui(location, x, y, z);
}

function GlCommon_uniform4ui(gl, location, x, y, z, w) {
  var msg = (0, _String.toText)((0, _String.interpolate)("uniform4ui(%P(), %P(), %P(), %P(), %P())", [GlCommon_loc(location), x, y, z, w]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.uniform4ui(location, x, y, z, w);
}

function GlCommon_uniform1f(gl, location, x) {
  var msg = (0, _String.toText)((0, _String.interpolate)("uniform1f(%P(), %P())", [GlCommon_loc(location), x]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.uniform1f(location, x);
}

function GlCommon_uniform2f(gl, location, x, y) {
  var msg = (0, _String.toText)((0, _String.interpolate)("uniform2f(%P(), %P(), %P())", [GlCommon_loc(location), x, y]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.uniform2f(location, x, y);
}

function GlCommon_uniform3f(gl, location, x, y, z) {
  var msg = (0, _String.toText)((0, _String.interpolate)("uniform3f(%P(), %P(), %P(), %P())", [GlCommon_loc(location), x, y, z]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.uniform3f(location, x, y, z);
}

function GlCommon_uniform4f(gl, location, x, y, z, w) {
  var msg = (0, _String.toText)((0, _String.interpolate)("uniform4f(%P(), %P(), %P(), %P(), %P())", [GlCommon_loc(location), x, y, z, w]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.uniform4f(location, x, y, z, w);
}

function GlCommon_uniform1iv(gl, location, arr) {
  var msg = (0, _String.toText)((0, _String.interpolate)("uniform1iv(%P(), [%P()])", [GlCommon_loc(location), (0, _utilsFs.clipArray)(10, arr)]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.uniform1iv(location, (0, _typedarray_utilsFs.int32Array)(arr));
}

function GlCommon_uniform2iv(gl, location, arr) {
  var msg = (0, _String.toText)((0, _String.interpolate)("uniform2iv(%P(), [%P()])", [GlCommon_loc(location), (0, _utilsFs.clipArray)(10, arr)]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.uniform2iv(location, (0, _typedarray_utilsFs.int32Array)(arr));
}

function GlCommon_uniform3iv(gl, location, arr) {
  var msg = (0, _String.toText)((0, _String.interpolate)("uniform3iv(%P(), [%P()])", [GlCommon_loc(location), (0, _utilsFs.clipArray)(10, arr)]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.uniform3iv(location, (0, _typedarray_utilsFs.int32Array)(arr));
}

function GlCommon_uniform4iv(gl, location, arr) {
  var msg = (0, _String.toText)((0, _String.interpolate)("uniform4iv(%P(), [%P()])", [GlCommon_loc(location), (0, _utilsFs.clipArray)(10, arr)]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.uniform4iv(location, (0, _typedarray_utilsFs.int32Array)(arr));
}

function GlCommon_uniform1uiv(gl, location, arr) {
  var msg = (0, _String.toText)((0, _String.interpolate)("uniform1uiv(%P(), [%P()])", [GlCommon_loc(location), (0, _utilsFs.clipArray)(10, arr)]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.uniform1uiv(location, (0, _typedarray_utilsFs.uint32Array)(arr));
}

function GlCommon_uniform2uiv(gl, location, arr) {
  var msg = (0, _String.toText)((0, _String.interpolate)("uniform2uiv(%P(), [%P()])", [GlCommon_loc(location), (0, _utilsFs.clipArray)(10, arr)]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.uniform2uiv(location, (0, _typedarray_utilsFs.uint32Array)(arr));
}

function GlCommon_uniform3uiv(gl, location, arr) {
  var msg = (0, _String.toText)((0, _String.interpolate)("uniform3uiv(%P(), [%P()])", [GlCommon_loc(location), (0, _utilsFs.clipArray)(10, arr)]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.uniform3uiv(location, (0, _typedarray_utilsFs.uint32Array)(arr));
}

function GlCommon_uniform4uiv(gl, location, arr) {
  var msg = (0, _String.toText)((0, _String.interpolate)("uniform4uv(%P(), [%P()])", [GlCommon_loc(location), (0, _utilsFs.clipArray)(10, arr)]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.uniform4uiv(location, (0, _typedarray_utilsFs.uint32Array)(arr));
}

function GlCommon_uniform1fv(gl, location, arr) {
  var msg = (0, _String.toText)((0, _String.interpolate)("uniform1fv(%P(), [%P()])", [GlCommon_loc(location), (0, _utilsFs.clipArray)(10, arr)]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.uniform1fv(location, (0, _typedarray_utilsFs.float32Array)(arr));
}

function GlCommon_uniform2fv(gl, location, arr) {
  var msg = (0, _String.toText)((0, _String.interpolate)("uniform2fv(%P(), [%P()])", [GlCommon_loc(location), (0, _utilsFs.clipArray)(10, arr)]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.uniform2fv(location, (0, _typedarray_utilsFs.float32Array)(arr));
}

function GlCommon_uniform3fv(gl, location, arr) {
  var msg = (0, _String.toText)((0, _String.interpolate)("uniform3fv(%P(), [%P()])", [GlCommon_loc(location), (0, _utilsFs.clipArray)(10, arr)]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.uniform3fv(location, (0, _typedarray_utilsFs.float32Array)(arr));
}

function GlCommon_uniform4fv(gl, location, arr) {
  var msg = (0, _String.toText)((0, _String.interpolate)("uniform4fv(%P(), [%P()])", [GlCommon_loc(location), (0, _utilsFs.clipArray)(10, arr)]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.uniform4fv(location, (0, _typedarray_utilsFs.float32Array)(arr));
}

function GlCommon_uniformMatrix2fv(gl, location, arr) {
  var msg = (0, _String.toText)((0, _String.interpolate)("uniformMatrix2fv(%P(), false, [%P()])", [GlCommon_loc(location), (0, _utilsFs.clipArray)(10, arr)]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.uniformMatrix2fv(location, false, (0, _typedarray_utilsFs.float32Array)(arr));
}

function GlCommon_uniformMatrix3fv(gl, location, arr) {
  var msg = (0, _String.toText)((0, _String.interpolate)("uniformMatrix3fv(%P(), false, [%P()])", [GlCommon_loc(location), (0, _utilsFs.clipArray)(10, arr)]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.uniformMatrix3fv(location, false, (0, _typedarray_utilsFs.float32Array)(arr));
}

function GlCommon_uniformMatrix4fv(gl, location, arr) {
  var msg = (0, _String.toText)((0, _String.interpolate)("uniformMatrix4fv(%P(), false, [%P()])", [GlCommon_loc(location), (0, _utilsFs.clipArray)(10, arr)]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.uniformMatrix4fv(location, false, (0, _typedarray_utilsFs.float32Array)(arr));
}

function GlCommon_uniformMatrix2x3fv(gl, location, arr) {
  var msg = (0, _String.toText)((0, _String.interpolate)("uniformMatrix2x3fv(%P(), false, [%P()])", [GlCommon_loc(location), (0, _utilsFs.clipArray)(10, arr)]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.uniformMatrix2x3fv(location, false, (0, _typedarray_utilsFs.float32Array)(arr));
}

function GlCommon_uniformMatrix2x4fv(gl, location, arr) {
  var msg = (0, _String.toText)((0, _String.interpolate)("uniformMatrix2x4fv(%P(), false, [%P()])", [GlCommon_loc(location), (0, _utilsFs.clipArray)(10, arr)]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.uniformMatrix2x4fv(location, false, (0, _typedarray_utilsFs.float32Array)(arr));
}

function GlCommon_uniformMatrix3x2fv(gl, location, arr) {
  var msg = (0, _String.toText)((0, _String.interpolate)("uniformMatrix3x2fv(%P(), false, [%P()])", [GlCommon_loc(location), (0, _utilsFs.clipArray)(10, arr)]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.uniformMatrix3x2fv(location, false, (0, _typedarray_utilsFs.float32Array)(arr));
}

function GlCommon_uniformMatrix3x4fv(gl, location, arr) {
  var msg = (0, _String.toText)((0, _String.interpolate)("uniformMatrix3x4fv(%P(), false, [%P()])", [GlCommon_loc(location), (0, _utilsFs.clipArray)(10, arr)]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.uniformMatrix3x4fv(location, false, (0, _typedarray_utilsFs.float32Array)(arr));
}

function GlCommon_uniformMatrix4x2fv(gl, location, arr) {
  var msg = (0, _String.toText)((0, _String.interpolate)("uniformMatrix4x2fv(%P(), false, [%P()])", [GlCommon_loc(location), (0, _utilsFs.clipArray)(10, arr)]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.uniformMatrix4x2fv(location, false, (0, _typedarray_utilsFs.float32Array)(arr));
}

function GlCommon_uniformMatrix4x3fv(gl, location, arr) {
  var msg = (0, _String.toText)((0, _String.interpolate)("uniformMatrix4x3fv(%P(), false, [%P()])", [GlCommon_loc(location), (0, _utilsFs.clipArray)(10, arr)]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.uniformMatrix4x3fv(location, false, (0, _typedarray_utilsFs.float32Array)(arr));
}

function GlCommon_enable(capability, gl) {
  var msg = (0, _String.toText)((0, _String.interpolate)("enable(%P())", [(0, _utilsFs.enumName)(GlCapabilityT, capability)]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.enable(capability);
}

function GlCommon_disable(capability, gl) {
  var msg = (0, _String.toText)((0, _String.interpolate)("disable(%P())", [(0, _utilsFs.enumName)(GlCapabilityT, capability)]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.disable(capability);
}

function GlCommon_cullFace(mode, gl) {
  var msg = (0, _String.toText)((0, _String.interpolate)("cullFace(%P())", [(0, _utilsFs.enumName)(GlCullModeT, mode)]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.cullFace(mode);
}

function GlCommon_blendColor(r, g, b, a, gl) {
  var msg = (0, _String.toText)((0, _String.interpolate)("blendColor(%P(), %P(), %P(), %P())", [r, g, b, a]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.blendColor(r, g, b, a);
}

function GlCommon_blendFunc(sfactor, dfactor, gl) {
  var msg = (0, _String.toText)((0, _String.interpolate)("blendFunc(%P(), %P())", [(0, _utilsFs.enumName)(GlBlendFactorT, sfactor), (0, _utilsFs.enumName)(GlBlendFactorT, dfactor)]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.blendFunc(sfactor, dfactor);
}

function GlCommon_blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha, gl) {
  var msg = (0, _String.toText)((0, _String.interpolate)("blendFuncSeparate(%P(), %P(), %P(), %P())", [(0, _utilsFs.enumName)(GlBlendFactorT, srcRGB), (0, _utilsFs.enumName)(GlBlendFactorT, dstRGB), (0, _utilsFs.enumName)(GlBlendFactorT, srcAlpha), (0, _utilsFs.enumName)(GlBlendFactorT, dstAlpha)]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);
}

function GlCommon_blendEquation(mode, gl) {
  var msg = (0, _String.toText)((0, _String.interpolate)("blendEquation(%P())", [(0, _utilsFs.enumName)(GlBlendModeT, mode)]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.blendEquation(mode);
}

function GlCommon_blendEquationSeparate(modeRGB, modeAlpha, gl) {
  var msg = (0, _String.toText)((0, _String.interpolate)("blendEquationSeparate(%P(), %P())", [(0, _utilsFs.enumName)(GlBlendModeT, modeRGB), (0, _utilsFs.enumName)(GlBlendModeT, modeAlpha)]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.blendEquationSeparate(modeRGB, modeAlpha);
}

function GlCommon_texImage2DData(target, level, internalformat, width, height, format, dataType, pixels, gl) {
  var msg = (0, _String.toText)((0, _String.interpolate)("texImage2D.(%P(), %P(), %P(), %P(), %P(), 0, %P(), %P(), [%P()])", [(0, _utilsFs.enumName)(GlTextureTargetT, target), level, (0, _utilsFs.enumName)(GlColorFormatT, internalformat), width, height, (0, _utilsFs.enumName)(GlColorFormatT, format), (0, _utilsFs.enumName)(GlTextureTypeT, dataType), pixels]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.texImage2D(target, level, internalformat, width, height, 0, format, dataType, pixels);
}

function GlCommon_texImage2DImage(target, level, internalformat, format, dataType, pixels, gl) {
  var msg = (0, _String.toText)((0, _String.interpolate)("texImage2D.(%P(), %P(), %P(), %P(), %P(), %P())", [(0, _utilsFs.enumName)(GlTextureTargetT, target), level, (0, _utilsFs.enumName)(GlColorFormatT, internalformat), (0, _utilsFs.enumName)(GlColorFormatT, format), (0, _utilsFs.enumName)(GlTextureTypeT, dataType), pixels]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.texImage2D(target, level, internalformat, format, dataType, pixels);
}

function GlCommon_texImage2DCanvas(target, level, internalformat, format, dataType, pixels, gl) {
  var msg = (0, _String.toText)((0, _String.interpolate)("texImage2D(%P(), %P(), %P(), %P(), %P(), %P())", [(0, _utilsFs.enumName)(GlTextureTargetT, target), level, (0, _utilsFs.enumName)(GlColorFormatT, internalformat), (0, _utilsFs.enumName)(GlColorFormatT, format), (0, _utilsFs.enumName)(GlTextureTypeT, dataType), pixels]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.texImage2D(target, level, internalformat, format, dataType, pixels);
}

function GlCommon_texImage2DVideo(target, level, internalformat, format, dataType, pixels, gl) {
  var msg = (0, _String.toText)((0, _String.interpolate)("texImage2D(%P(), %P(), %P(), %P(), %P(), %P())", [(0, _utilsFs.enumName)(GlTextureTargetT, target), level, (0, _utilsFs.enumName)(GlColorFormatT, internalformat), (0, _utilsFs.enumName)(GlColorFormatT, format), (0, _utilsFs.enumName)(GlTextureTypeT, dataType), pixels]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.texImage2D(target, level, internalformat, format, dataType, pixels);
}

function GlCommon_texImage2DBitmap(target, level, internalformat, format, dataType, pixels, gl) {
  var msg = (0, _String.toText)((0, _String.interpolate)("texImage2D(%P(), %P(), %P(), %P(), %P(), %P())", [(0, _utilsFs.enumName)(GlTextureTargetT, target), level, (0, _utilsFs.enumName)(GlColorFormatT, internalformat), (0, _utilsFs.enumName)(GlColorFormatT, format), (0, _utilsFs.enumName)(GlTextureTypeT, dataType), pixels]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.texImage2D(target, level, internalformat, format, dataType, pixels);
}

function GlCommon_texImage2D(target, level, internalformat, width, height, format, dataType, offset, gl) {
  var msg = (0, _String.toText)((0, _String.interpolate)("texImage2D(%P(), %P(), %P(), %P(), %P(), 0, %P(), %P(), %P())", [(0, _utilsFs.enumName)(GlTextureTargetT, target), level, (0, _utilsFs.enumName)(GlColorFormatT, internalformat), width, height, (0, _utilsFs.enumName)(GlColorFormatT, format), (0, _utilsFs.enumName)(GlTextureTypeT, dataType), offset]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.texImage2D(target, level, internalformat, width, height, 0, format, dataType, offset);
}

function GlCommon_texImage2DCanvas2(target, level, internalformat, width, height, format, dataType, source, gl) {
  var msg = (0, _String.toText)((0, _String.interpolate)("texImage2D(%P(), %P(), %P(), %P(), %P(), 0, %P(), %P(), %P())", [(0, _utilsFs.enumName)(GlTextureTargetT, target), level, (0, _utilsFs.enumName)(GlColorFormatT, internalformat), width, height, (0, _utilsFs.enumName)(GlColorFormatT, format), (0, _utilsFs.enumName)(GlTextureTypeT, dataType), source]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.texImage2D(target, level, internalformat, width, height, 0, format, dataType, source);
}

function GlCommon_texImage2DImage2(target, level, internalformat, width, height, format, dataType, source, gl) {
  var msg = (0, _String.toText)((0, _String.interpolate)("texImage2D(%P(), %P(), %P(), %P(), %P(), 0, %P(), %P(), %P())", [(0, _utilsFs.enumName)(GlTextureTargetT, target), level, (0, _utilsFs.enumName)(GlColorFormatT, internalformat), width, height, (0, _utilsFs.enumName)(GlColorFormatT, format), (0, _utilsFs.enumName)(GlTextureTypeT, dataType), source]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.texImage2D(target, level, internalformat, width, height, 0, format, dataType, source);
}

function GlCommon_texImage2DVideo2(target, level, internalformat, width, height, format, dataType, source, gl) {
  var msg = (0, _String.toText)((0, _String.interpolate)("texImage2D(%P(), %P(), %P(), %P(), %P(), 0, %P(), %P(), %P())", [(0, _utilsFs.enumName)(GlTextureTargetT, target), level, (0, _utilsFs.enumName)(GlColorFormatT, internalformat), width, height, (0, _utilsFs.enumName)(GlColorFormatT, format), (0, _utilsFs.enumName)(GlTextureTypeT, dataType), source]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.texImage2D(target, level, internalformat, width, height, 0, format, dataType, source);
}

function GlCommon_texImage2DBitmap2(target, level, internalformat, width, height, format, dataType, source, gl) {
  var msg = (0, _String.toText)((0, _String.interpolate)("texImage2D(%P(), %P(), %P(), %P(), %P(), 0, %P(), %P(), %P())", [(0, _utilsFs.enumName)(GlTextureTargetT, target), level, (0, _utilsFs.enumName)(GlColorFormatT, internalformat), width, height, (0, _utilsFs.enumName)(GlColorFormatT, format), (0, _utilsFs.enumName)(GlTextureTypeT, dataType), source]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.texImage2D(target, level, internalformat, width, height, 0, format, dataType, source);
}

function GlCommon_texImage2DImageData2(target, level, internalformat, width, height, format, dataType, source, gl) {
  var msg = (0, _String.toText)((0, _String.interpolate)("texImage2D(%P(), %P(), %P(), %P(), %P(), 0, %P(), %P(), %P())", [(0, _utilsFs.enumName)(GlTextureTargetT, target), level, (0, _utilsFs.enumName)(GlColorFormatT, internalformat), width, height, (0, _utilsFs.enumName)(GlColorFormatT, format), (0, _utilsFs.enumName)(GlTextureTypeT, dataType), source]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.texImage2D(target, level, internalformat, width, height, 0, format, dataType, source);
}

function GlCommon_texImage2DData2(target, level, internalformat, width, height, format, dataType, srcData, srcOffset, gl) {
  var msg = (0, _String.toText)((0, _String.interpolate)("texImage2D(%P(), %P(), %P(), %P(), %P(), 0, %P(), %P(), [%P()], %P())", [(0, _utilsFs.enumName)(GlTextureTargetT, target), level, (0, _utilsFs.enumName)(GlColorFormatT, internalformat), width, height, (0, _utilsFs.enumName)(GlColorFormatT, format), (0, _utilsFs.enumName)(GlTextureTypeT, dataType), srcData, srcOffset]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  gl.texImage2D(target, level, internalformat, width, height, 0, format, dataType, srcData, srcOffset);
}
},{"./.fable/fable-library.3.0.0/Reflection.js":"../src/.fable/fable-library.3.0.0/Reflection.js","./.fable/fable-library.3.0.0/Types.js":"../src/.fable/fable-library.3.0.0/Types.js","./.fable/fable-library.3.0.0/Util.js":"../src/.fable/fable-library.3.0.0/Util.js","./.fable/fable-library.3.0.0/Map.js":"../src/.fable/fable-library.3.0.0/Map.js","./.fable/fable-library.3.0.0/String.js":"../src/.fable/fable-library.3.0.0/String.js","./utils.fs.js":"../src/utils.fs.js","./typedarray_utils.fs.js":"../src/typedarray_utils.fs.js"}],"../src/.fable/fable-library.3.0.0/Set.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SetTreeLeaf$1$reflection = SetTreeLeaf$1$reflection;
exports.SetTreeLeaf$1_$ctor_2B595 = SetTreeLeaf$1_$ctor_2B595;
exports.SetTreeLeaf$1__get_Key = SetTreeLeaf$1__get_Key;
exports.SetTreeNode$1$reflection = SetTreeNode$1$reflection;
exports.SetTreeNode$1_$ctor_Z6E7BE5F7 = SetTreeNode$1_$ctor_Z6E7BE5F7;
exports.SetTreeNode$1__get_Left = SetTreeNode$1__get_Left;
exports.SetTreeNode$1__get_Right = SetTreeNode$1__get_Right;
exports.SetTreeNode$1__get_Height = SetTreeNode$1__get_Height;
exports.SetTreeModule_empty = SetTreeModule_empty;
exports.SetTreeModule_countAux = SetTreeModule_countAux;
exports.SetTreeModule_count = SetTreeModule_count;
exports.SetTreeModule_mk = SetTreeModule_mk;
exports.SetTreeModule_rebalance = SetTreeModule_rebalance;
exports.SetTreeModule_add = SetTreeModule_add;
exports.SetTreeModule_balance = SetTreeModule_balance;
exports.SetTreeModule_split = SetTreeModule_split;
exports.SetTreeModule_spliceOutSuccessor = SetTreeModule_spliceOutSuccessor;
exports.SetTreeModule_remove = SetTreeModule_remove;
exports.SetTreeModule_mem = SetTreeModule_mem;
exports.SetTreeModule_iter = SetTreeModule_iter;
exports.SetTreeModule_foldBackOpt = SetTreeModule_foldBackOpt;
exports.SetTreeModule_foldBack = SetTreeModule_foldBack;
exports.SetTreeModule_foldOpt = SetTreeModule_foldOpt;
exports.SetTreeModule_fold = SetTreeModule_fold;
exports.SetTreeModule_forall = SetTreeModule_forall;
exports.SetTreeModule_exists = SetTreeModule_exists;
exports.SetTreeModule_subset = SetTreeModule_subset;
exports.SetTreeModule_properSubset = SetTreeModule_properSubset;
exports.SetTreeModule_filterAux = SetTreeModule_filterAux;
exports.SetTreeModule_filter = SetTreeModule_filter;
exports.SetTreeModule_diffAux = SetTreeModule_diffAux;
exports.SetTreeModule_diff = SetTreeModule_diff;
exports.SetTreeModule_union = SetTreeModule_union;
exports.SetTreeModule_intersectionAux = SetTreeModule_intersectionAux;
exports.SetTreeModule_intersection = SetTreeModule_intersection;
exports.SetTreeModule_partition1 = SetTreeModule_partition1;
exports.SetTreeModule_partitionAux = SetTreeModule_partitionAux;
exports.SetTreeModule_partition = SetTreeModule_partition;
exports.SetTreeModule_minimumElementAux = SetTreeModule_minimumElementAux;
exports.SetTreeModule_minimumElementOpt = SetTreeModule_minimumElementOpt;
exports.SetTreeModule_maximumElementAux = SetTreeModule_maximumElementAux;
exports.SetTreeModule_maximumElementOpt = SetTreeModule_maximumElementOpt;
exports.SetTreeModule_minimumElement = SetTreeModule_minimumElement;
exports.SetTreeModule_maximumElement = SetTreeModule_maximumElement;
exports.SetTreeModule_SetIterator$1$reflection = SetTreeModule_SetIterator$1$reflection;
exports.SetTreeModule_collapseLHS = SetTreeModule_collapseLHS;
exports.SetTreeModule_mkIterator = SetTreeModule_mkIterator;
exports.SetTreeModule_notStarted = SetTreeModule_notStarted;
exports.SetTreeModule_alreadyFinished = SetTreeModule_alreadyFinished;
exports.SetTreeModule_current = SetTreeModule_current;
exports.SetTreeModule_moveNext = SetTreeModule_moveNext;
exports.SetTreeModule_mkIEnumerator = SetTreeModule_mkIEnumerator;
exports.SetTreeModule_compareStacks = SetTreeModule_compareStacks;
exports.SetTreeModule_compare = SetTreeModule_compare;
exports.SetTreeModule_choose = SetTreeModule_choose;
exports.SetTreeModule_toList = SetTreeModule_toList;
exports.SetTreeModule_copyToArray = SetTreeModule_copyToArray;
exports.SetTreeModule_toArray = SetTreeModule_toArray;
exports.SetTreeModule_mkFromEnumerator = SetTreeModule_mkFromEnumerator;
exports.SetTreeModule_ofSeq = SetTreeModule_ofSeq;
exports.SetTreeModule_ofArray = SetTreeModule_ofArray;
exports.FSharpSet$reflection = FSharpSet$reflection;
exports.FSharpSet_$ctor = FSharpSet_$ctor;
exports.FSharpSet__get_Comparer = FSharpSet__get_Comparer;
exports.FSharpSet__get_Tree = FSharpSet__get_Tree;
exports.FSharpSet_Empty = FSharpSet_Empty;
exports.FSharpSet__Add = FSharpSet__Add;
exports.FSharpSet__Remove = FSharpSet__Remove;
exports.FSharpSet__get_Count = FSharpSet__get_Count;
exports.FSharpSet__Contains = FSharpSet__Contains;
exports.FSharpSet__Iterate = FSharpSet__Iterate;
exports.FSharpSet__Fold = FSharpSet__Fold;
exports.FSharpSet__get_IsEmpty = FSharpSet__get_IsEmpty;
exports.FSharpSet__Partition = FSharpSet__Partition;
exports.FSharpSet__Filter = FSharpSet__Filter;
exports.FSharpSet__Map = FSharpSet__Map;
exports.FSharpSet__Exists = FSharpSet__Exists;
exports.FSharpSet__ForAll = FSharpSet__ForAll;
exports.FSharpSet_op_Subtraction = FSharpSet_op_Subtraction;
exports.FSharpSet_op_Addition = FSharpSet_op_Addition;
exports.FSharpSet_Intersection = FSharpSet_Intersection;
exports.FSharpSet_IntersectionMany = FSharpSet_IntersectionMany;
exports.FSharpSet_Equality = FSharpSet_Equality;
exports.FSharpSet_Compare = FSharpSet_Compare;
exports.FSharpSet__get_Choose = FSharpSet__get_Choose;
exports.FSharpSet__get_MinimumElement = FSharpSet__get_MinimumElement;
exports.FSharpSet__get_MaximumElement = FSharpSet__get_MaximumElement;
exports.FSharpSet__IsSubsetOf = FSharpSet__IsSubsetOf;
exports.FSharpSet__IsSupersetOf = FSharpSet__IsSupersetOf;
exports.FSharpSet__IsProperSubsetOf = FSharpSet__IsProperSubsetOf;
exports.FSharpSet__IsProperSupersetOf = FSharpSet__IsProperSupersetOf;
exports.FSharpSet__ToList = FSharpSet__ToList;
exports.FSharpSet__ToArray = FSharpSet__ToArray;
exports.FSharpSet__ComputeHashCode = FSharpSet__ComputeHashCode;
exports.isEmpty = isEmpty;
exports.contains = contains;
exports.add = add;
exports.singleton = singleton;
exports.remove = remove;
exports.union = union;
exports.unionMany = unionMany;
exports.intersect = intersect;
exports.intersectMany = intersectMany;
exports.iterate = iterate;
exports.empty = empty;
exports.forAll = forAll;
exports.exists = exists;
exports.filter = filter;
exports.partition = partition;
exports.fold = fold;
exports.foldBack = foldBack;
exports.map = map;
exports.count = count;
exports.ofList = ofList;
exports.ofArray = ofArray;
exports.toList = toList;
exports.toArray = toArray;
exports.toSeq = toSeq;
exports.ofSeq = ofSeq;
exports.difference = difference;
exports.isSubset = isSubset;
exports.isSuperset = isSuperset;
exports.isProperSubset = isProperSubset;
exports.isProperSuperset = isProperSuperset;
exports.minElement = minElement;
exports.maxElement = maxElement;
exports.createMutable = createMutable;
exports.distinct = distinct;
exports.distinctBy = distinctBy;
exports.unionWith = unionWith;
exports.intersectWith = intersectWith;
exports.exceptWith = exceptWith;
exports.isSubsetOf = isSubsetOf;
exports.isSupersetOf = isSupersetOf;
exports.isProperSubsetOf = isProperSubsetOf;
exports.isProperSupersetOf = isProperSupersetOf;
exports.FSharpSet = exports.SetTreeModule_SetIterator$1 = exports.SetTreeNode$1 = exports.SetTreeLeaf$1 = void 0;

var _Reflection = require("./Reflection.js");

var _Option = require("./Option.js");

var _Types = require("./Types.js");

var _Seq = require("./Seq.js");

var _Array = require("./Array.js");

var _String = require("./String.js");

var _Util = require("./Util.js");

var _MutableSet = require("./MutableSet.js");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SetTreeLeaf$1 = function SetTreeLeaf$1(k) {
  _classCallCheck(this, SetTreeLeaf$1);

  this.k = k;
};

exports.SetTreeLeaf$1 = SetTreeLeaf$1;

function SetTreeLeaf$1$reflection(gen0) {
  return (0, _Reflection.class_type)("Set.SetTreeLeaf`1", [gen0], SetTreeLeaf$1);
}

function SetTreeLeaf$1_$ctor_2B595(k) {
  return new SetTreeLeaf$1(k);
}

function SetTreeLeaf$1__get_Key(_) {
  return _.k;
}

var SetTreeNode$1 = /*#__PURE__*/function (_SetTreeLeaf$) {
  _inherits(SetTreeNode$1, _SetTreeLeaf$);

  var _super = _createSuper(SetTreeNode$1);

  function SetTreeNode$1(v, left, right, h) {
    var _this;

    _classCallCheck(this, SetTreeNode$1);

    _this = _super.call(this, v);
    _this.left = left;
    _this.right = right;
    _this.h = h;
    return _this;
  }

  return SetTreeNode$1;
}(SetTreeLeaf$1);

exports.SetTreeNode$1 = SetTreeNode$1;

function SetTreeNode$1$reflection(gen0) {
  return (0, _Reflection.class_type)("Set.SetTreeNode`1", [gen0], SetTreeNode$1, SetTreeLeaf$1$reflection(gen0));
}

function SetTreeNode$1_$ctor_Z6E7BE5F7(v, left, right, h) {
  return new SetTreeNode$1(v, left, right, h);
}

function SetTreeNode$1__get_Left(_) {
  return _.left;
}

function SetTreeNode$1__get_Right(_) {
  return _.right;
}

function SetTreeNode$1__get_Height(_) {
  return _.h;
}

function SetTreeModule_empty() {
  return void 0;
}

function SetTreeModule_countAux(t_mut, acc_mut) {
  SetTreeModule_countAux: while (true) {
    var t = t_mut,
        acc = acc_mut;

    if (t != null) {
      var t2 = t;

      if (t2 instanceof SetTreeNode$1) {
        t_mut = SetTreeNode$1__get_Left(t2);
        acc_mut = SetTreeModule_countAux(SetTreeNode$1__get_Right(t2), acc + 1);
        continue SetTreeModule_countAux;
      } else {
        return acc + 1 | 0;
      }
    } else {
      return acc | 0;
    }

    break;
  }
}

function SetTreeModule_count(s) {
  return SetTreeModule_countAux(s, 0);
}

function SetTreeModule_mk(l, k, r) {
  var hl;
  var t = l;

  if (t != null) {
    var t2 = t;
    hl = t2 instanceof SetTreeNode$1 ? SetTreeNode$1__get_Height(t2) : 1;
  } else {
    hl = 0;
  }

  var hr;
  var t_1 = r;

  if (t_1 != null) {
    var t2_1 = t_1;
    hr = t2_1 instanceof SetTreeNode$1 ? SetTreeNode$1__get_Height(t2_1) : 1;
  } else {
    hr = 0;
  }

  var m = (hl < hr ? hr : hl) | 0;

  if (m === 0) {
    return SetTreeLeaf$1_$ctor_2B595(k);
  } else {
    return SetTreeNode$1_$ctor_Z6E7BE5F7(k, l, r, m + 1);
  }
}

function SetTreeModule_rebalance(t1, v, t2) {
  var t_2, t2_3, t_3, t2_4;
  var t1h;
  var t = t1;

  if (t != null) {
    var t2_1 = t;
    t1h = t2_1 instanceof SetTreeNode$1 ? SetTreeNode$1__get_Height(t2_1) : 1;
  } else {
    t1h = 0;
  }

  var t2h;
  var t_1 = t2;

  if (t_1 != null) {
    var t2_2 = t_1;
    t2h = t2_2 instanceof SetTreeNode$1 ? SetTreeNode$1__get_Height(t2_2) : 1;
  } else {
    t2h = 0;
  }

  if (t2h > t1h + 2) {
    var matchValue = t2;

    if (matchValue instanceof SetTreeNode$1) {
      if ((t_2 = SetTreeNode$1__get_Left(matchValue), t_2 != null ? (t2_3 = t_2, t2_3 instanceof SetTreeNode$1 ? SetTreeNode$1__get_Height(t2_3) : 1) : 0) > t1h + 1) {
        var matchValue_1 = SetTreeNode$1__get_Left(matchValue);

        if (matchValue_1 instanceof SetTreeNode$1) {
          return SetTreeModule_mk(SetTreeModule_mk(t1, v, SetTreeNode$1__get_Left(matchValue_1)), SetTreeLeaf$1__get_Key(matchValue_1), SetTreeModule_mk(SetTreeNode$1__get_Right(matchValue_1), SetTreeLeaf$1__get_Key(matchValue), SetTreeNode$1__get_Right(matchValue)));
        } else {
          throw new Error("internal error: Set.rebalance");
        }
      } else {
        return SetTreeModule_mk(SetTreeModule_mk(t1, v, SetTreeNode$1__get_Left(matchValue)), SetTreeLeaf$1__get_Key(matchValue), SetTreeNode$1__get_Right(matchValue));
      }
    } else {
      throw new Error("internal error: Set.rebalance");
    }
  } else if (t1h > t2h + 2) {
    var matchValue_2 = t1;

    if (matchValue_2 instanceof SetTreeNode$1) {
      if ((t_3 = SetTreeNode$1__get_Right(matchValue_2), t_3 != null ? (t2_4 = t_3, t2_4 instanceof SetTreeNode$1 ? SetTreeNode$1__get_Height(t2_4) : 1) : 0) > t2h + 1) {
        var matchValue_3 = SetTreeNode$1__get_Right(matchValue_2);

        if (matchValue_3 instanceof SetTreeNode$1) {
          return SetTreeModule_mk(SetTreeModule_mk(SetTreeNode$1__get_Left(matchValue_2), SetTreeLeaf$1__get_Key(matchValue_2), SetTreeNode$1__get_Left(matchValue_3)), SetTreeLeaf$1__get_Key(matchValue_3), SetTreeModule_mk(SetTreeNode$1__get_Right(matchValue_3), v, t2));
        } else {
          throw new Error("internal error: Set.rebalance");
        }
      } else {
        return SetTreeModule_mk(SetTreeNode$1__get_Left(matchValue_2), SetTreeLeaf$1__get_Key(matchValue_2), SetTreeModule_mk(SetTreeNode$1__get_Right(matchValue_2), v, t2));
      }
    } else {
      throw new Error("internal error: Set.rebalance");
    }
  } else {
    return SetTreeModule_mk(t1, v, t2);
  }
}

function SetTreeModule_add(comparer, k, t) {
  if (t != null) {
    var t2 = t;
    var c = comparer.Compare(k, SetTreeLeaf$1__get_Key(t2)) | 0;

    if (t2 instanceof SetTreeNode$1) {
      if (c < 0) {
        return SetTreeModule_rebalance(SetTreeModule_add(comparer, k, SetTreeNode$1__get_Left(t2)), SetTreeLeaf$1__get_Key(t2), SetTreeNode$1__get_Right(t2));
      } else if (c === 0) {
        return t;
      } else {
        return SetTreeModule_rebalance(SetTreeNode$1__get_Left(t2), SetTreeLeaf$1__get_Key(t2), SetTreeModule_add(comparer, k, SetTreeNode$1__get_Right(t2)));
      }
    } else {
      var c_1 = comparer.Compare(k, SetTreeLeaf$1__get_Key(t2)) | 0;

      if (c_1 < 0) {
        return SetTreeNode$1_$ctor_Z6E7BE5F7(k, SetTreeModule_empty(), t, 2);
      } else if (c_1 === 0) {
        return t;
      } else {
        return SetTreeNode$1_$ctor_Z6E7BE5F7(k, t, SetTreeModule_empty(), 2);
      }
    }
  } else {
    return SetTreeLeaf$1_$ctor_2B595(k);
  }
}

function SetTreeModule_balance(comparer, t1, k, t2) {
  if (t1 != null) {
    var t1$0027 = t1;

    if (t2 != null) {
      var t2$0027 = t2;

      if (t1$0027 instanceof SetTreeNode$1) {
        if (t2$0027 instanceof SetTreeNode$1) {
          if (SetTreeNode$1__get_Height(t1$0027) + 2 < SetTreeNode$1__get_Height(t2$0027)) {
            return SetTreeModule_rebalance(SetTreeModule_balance(comparer, t1, k, SetTreeNode$1__get_Left(t2$0027)), SetTreeLeaf$1__get_Key(t2$0027), SetTreeNode$1__get_Right(t2$0027));
          } else if (SetTreeNode$1__get_Height(t2$0027) + 2 < SetTreeNode$1__get_Height(t1$0027)) {
            return SetTreeModule_rebalance(SetTreeNode$1__get_Left(t1$0027), SetTreeLeaf$1__get_Key(t1$0027), SetTreeModule_balance(comparer, SetTreeNode$1__get_Right(t1$0027), k, t2));
          } else {
            return SetTreeModule_mk(t1, k, t2);
          }
        } else {
          return SetTreeModule_add(comparer, k, SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2$0027), t1));
        }
      } else {
        return SetTreeModule_add(comparer, k, SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t1$0027), t2));
      }
    } else {
      return SetTreeModule_add(comparer, k, t1);
    }
  } else {
    return SetTreeModule_add(comparer, k, t2);
  }
}

function SetTreeModule_split(comparer, pivot, t) {
  if (t != null) {
    var t2 = t;

    if (t2 instanceof SetTreeNode$1) {
      var c = comparer.Compare(pivot, SetTreeLeaf$1__get_Key(t2)) | 0;

      if (c < 0) {
        var patternInput = SetTreeModule_split(comparer, pivot, SetTreeNode$1__get_Left(t2));
        return [patternInput[0], patternInput[1], SetTreeModule_balance(comparer, patternInput[2], SetTreeLeaf$1__get_Key(t2), SetTreeNode$1__get_Right(t2))];
      } else if (c === 0) {
        return [SetTreeNode$1__get_Left(t2), true, SetTreeNode$1__get_Right(t2)];
      } else {
        var patternInput_1 = SetTreeModule_split(comparer, pivot, SetTreeNode$1__get_Right(t2));
        return [SetTreeModule_balance(comparer, SetTreeNode$1__get_Left(t2), SetTreeLeaf$1__get_Key(t2), patternInput_1[0]), patternInput_1[1], patternInput_1[2]];
      }
    } else {
      var c_1 = comparer.Compare(SetTreeLeaf$1__get_Key(t2), pivot) | 0;

      if (c_1 < 0) {
        return [t, false, SetTreeModule_empty()];
      } else if (c_1 === 0) {
        return [SetTreeModule_empty(), true, SetTreeModule_empty()];
      } else {
        return [SetTreeModule_empty(), false, t];
      }
    }
  } else {
    return [SetTreeModule_empty(), false, SetTreeModule_empty()];
  }
}

function SetTreeModule_spliceOutSuccessor(t) {
  if (t != null) {
    var t2 = t;

    if (t2 instanceof SetTreeNode$1) {
      if (SetTreeNode$1__get_Left(t2) == null) {
        return [SetTreeLeaf$1__get_Key(t2), SetTreeNode$1__get_Right(t2)];
      } else {
        var patternInput = SetTreeModule_spliceOutSuccessor(SetTreeNode$1__get_Left(t2));
        return [patternInput[0], SetTreeModule_mk(patternInput[1], SetTreeLeaf$1__get_Key(t2), SetTreeNode$1__get_Right(t2))];
      }
    } else {
      return [SetTreeLeaf$1__get_Key(t2), SetTreeModule_empty()];
    }
  } else {
    throw new Error("internal error: Set.spliceOutSuccessor");
  }
}

function SetTreeModule_remove(comparer, k, t) {
  if (t != null) {
    var t2 = t;
    var c = comparer.Compare(k, SetTreeLeaf$1__get_Key(t2)) | 0;

    if (t2 instanceof SetTreeNode$1) {
      if (c < 0) {
        return SetTreeModule_rebalance(SetTreeModule_remove(comparer, k, SetTreeNode$1__get_Left(t2)), SetTreeLeaf$1__get_Key(t2), SetTreeNode$1__get_Right(t2));
      } else if (c === 0) {
        if (SetTreeNode$1__get_Left(t2) == null) {
          return SetTreeNode$1__get_Right(t2);
        } else if (SetTreeNode$1__get_Right(t2) == null) {
          return SetTreeNode$1__get_Left(t2);
        } else {
          var patternInput = SetTreeModule_spliceOutSuccessor(SetTreeNode$1__get_Right(t2));
          return SetTreeModule_mk(SetTreeNode$1__get_Left(t2), patternInput[0], patternInput[1]);
        }
      } else {
        return SetTreeModule_rebalance(SetTreeNode$1__get_Left(t2), SetTreeLeaf$1__get_Key(t2), SetTreeModule_remove(comparer, k, SetTreeNode$1__get_Right(t2)));
      }
    } else if (c === 0) {
      return SetTreeModule_empty();
    } else {
      return t;
    }
  } else {
    return t;
  }
}

function SetTreeModule_mem(comparer_mut, k_mut, t_mut) {
  SetTreeModule_mem: while (true) {
    var comparer = comparer_mut,
        k = k_mut,
        t = t_mut;

    if (t != null) {
      var t2 = t;
      var c = comparer.Compare(k, SetTreeLeaf$1__get_Key(t2)) | 0;

      if (t2 instanceof SetTreeNode$1) {
        if (c < 0) {
          comparer_mut = comparer;
          k_mut = k;
          t_mut = SetTreeNode$1__get_Left(t2);
          continue SetTreeModule_mem;
        } else if (c === 0) {
          return true;
        } else {
          comparer_mut = comparer;
          k_mut = k;
          t_mut = SetTreeNode$1__get_Right(t2);
          continue SetTreeModule_mem;
        }
      } else {
        return c === 0;
      }
    } else {
      return false;
    }

    break;
  }
}

function SetTreeModule_iter(f_mut, t_mut) {
  SetTreeModule_iter: while (true) {
    var f = f_mut,
        t = t_mut;

    if (t != null) {
      var t2 = t;

      if (t2 instanceof SetTreeNode$1) {
        SetTreeModule_iter(f, SetTreeNode$1__get_Left(t2));
        f(SetTreeLeaf$1__get_Key(t2));
        f_mut = f;
        t_mut = SetTreeNode$1__get_Right(t2);
        continue SetTreeModule_iter;
      } else {
        f(SetTreeLeaf$1__get_Key(t2));
      }
    }

    break;
  }
}

function SetTreeModule_foldBackOpt(f_mut, t_mut, x_mut) {
  SetTreeModule_foldBackOpt: while (true) {
    var f = f_mut,
        t = t_mut,
        x = x_mut;

    if (t != null) {
      var t2 = t;

      if (t2 instanceof SetTreeNode$1) {
        f_mut = f;
        t_mut = SetTreeNode$1__get_Left(t2);
        x_mut = f(SetTreeLeaf$1__get_Key(t2), SetTreeModule_foldBackOpt(f, SetTreeNode$1__get_Right(t2), x));
        continue SetTreeModule_foldBackOpt;
      } else {
        return f(SetTreeLeaf$1__get_Key(t2), x);
      }
    } else {
      return x;
    }

    break;
  }
}

function SetTreeModule_foldBack(f, m, x) {
  return SetTreeModule_foldBackOpt(f, m, x);
}

function SetTreeModule_foldOpt(f_mut, x_mut, t_mut) {
  SetTreeModule_foldOpt: while (true) {
    var f = f_mut,
        x = x_mut,
        t = t_mut;

    if (t != null) {
      var t2 = t;

      if (t2 instanceof SetTreeNode$1) {
        f_mut = f;
        x_mut = f(SetTreeModule_foldOpt(f, x, SetTreeNode$1__get_Left(t2)), SetTreeLeaf$1__get_Key(t2));
        t_mut = SetTreeNode$1__get_Right(t2);
        continue SetTreeModule_foldOpt;
      } else {
        return f(x, SetTreeLeaf$1__get_Key(t2));
      }
    } else {
      return x;
    }

    break;
  }
}

function SetTreeModule_fold(f, x, m) {
  return SetTreeModule_foldOpt(f, x, m);
}

function SetTreeModule_forall(f_mut, t_mut) {
  SetTreeModule_forall: while (true) {
    var f = f_mut,
        t = t_mut;

    if (t != null) {
      var t2 = t;

      if (t2 instanceof SetTreeNode$1) {
        if (f(SetTreeLeaf$1__get_Key(t2)) ? SetTreeModule_forall(f, SetTreeNode$1__get_Left(t2)) : false) {
          f_mut = f;
          t_mut = SetTreeNode$1__get_Right(t2);
          continue SetTreeModule_forall;
        } else {
          return false;
        }
      } else {
        return f(SetTreeLeaf$1__get_Key(t2));
      }
    } else {
      return true;
    }

    break;
  }
}

function SetTreeModule_exists(f_mut, t_mut) {
  SetTreeModule_exists: while (true) {
    var f = f_mut,
        t = t_mut;

    if (t != null) {
      var t2 = t;

      if (t2 instanceof SetTreeNode$1) {
        if (f(SetTreeLeaf$1__get_Key(t2)) ? true : SetTreeModule_exists(f, SetTreeNode$1__get_Left(t2))) {
          return true;
        } else {
          f_mut = f;
          t_mut = SetTreeNode$1__get_Right(t2);
          continue SetTreeModule_exists;
        }
      } else {
        return f(SetTreeLeaf$1__get_Key(t2));
      }
    } else {
      return false;
    }

    break;
  }
}

function SetTreeModule_subset(comparer, a, b) {
  return SetTreeModule_forall(function (x) {
    return SetTreeModule_mem(comparer, x, b);
  }, a);
}

function SetTreeModule_properSubset(comparer, a, b) {
  if (SetTreeModule_forall(function (x) {
    return SetTreeModule_mem(comparer, x, b);
  }, a)) {
    return SetTreeModule_exists(function (x_1) {
      return !SetTreeModule_mem(comparer, x_1, a);
    }, b);
  } else {
    return false;
  }
}

function SetTreeModule_filterAux(comparer_mut, f_mut, t_mut, acc_mut) {
  SetTreeModule_filterAux: while (true) {
    var comparer = comparer_mut,
        f = f_mut,
        t = t_mut,
        acc = acc_mut;

    if (t != null) {
      var t2 = t;

      if (t2 instanceof SetTreeNode$1) {
        var acc_1 = f(SetTreeLeaf$1__get_Key(t2)) ? SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2), acc) : acc;
        comparer_mut = comparer;
        f_mut = f;
        t_mut = SetTreeNode$1__get_Left(t2);
        acc_mut = SetTreeModule_filterAux(comparer, f, SetTreeNode$1__get_Right(t2), acc_1);
        continue SetTreeModule_filterAux;
      } else if (f(SetTreeLeaf$1__get_Key(t2))) {
        return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2), acc);
      } else {
        return acc;
      }
    } else {
      return acc;
    }

    break;
  }
}

function SetTreeModule_filter(comparer, f, s) {
  return SetTreeModule_filterAux(comparer, f, s, SetTreeModule_empty());
}

function SetTreeModule_diffAux(comparer_mut, t_mut, acc_mut) {
  SetTreeModule_diffAux: while (true) {
    var comparer = comparer_mut,
        t = t_mut,
        acc = acc_mut;

    if (acc == null) {
      return acc;
    } else if (t != null) {
      var t2 = t;

      if (t2 instanceof SetTreeNode$1) {
        comparer_mut = comparer;
        t_mut = SetTreeNode$1__get_Left(t2);
        acc_mut = SetTreeModule_diffAux(comparer, SetTreeNode$1__get_Right(t2), SetTreeModule_remove(comparer, SetTreeLeaf$1__get_Key(t2), acc));
        continue SetTreeModule_diffAux;
      } else {
        return SetTreeModule_remove(comparer, SetTreeLeaf$1__get_Key(t2), acc);
      }
    } else {
      return acc;
    }

    break;
  }
}

function SetTreeModule_diff(comparer, a, b) {
  return SetTreeModule_diffAux(comparer, b, a);
}

function SetTreeModule_union(comparer, t1, t2) {
  if (t1 != null) {
    var t1$0027 = t1;

    if (t2 != null) {
      var t2$0027 = t2;

      if (t1$0027 instanceof SetTreeNode$1) {
        if (t2$0027 instanceof SetTreeNode$1) {
          if (SetTreeNode$1__get_Height(t1$0027) > SetTreeNode$1__get_Height(t2$0027)) {
            var patternInput = SetTreeModule_split(comparer, SetTreeLeaf$1__get_Key(t1$0027), t2);
            return SetTreeModule_balance(comparer, SetTreeModule_union(comparer, SetTreeNode$1__get_Left(t1$0027), patternInput[0]), SetTreeLeaf$1__get_Key(t1$0027), SetTreeModule_union(comparer, SetTreeNode$1__get_Right(t1$0027), patternInput[2]));
          } else {
            var patternInput_1 = SetTreeModule_split(comparer, SetTreeLeaf$1__get_Key(t2$0027), t1);
            return SetTreeModule_balance(comparer, SetTreeModule_union(comparer, SetTreeNode$1__get_Left(t2$0027), patternInput_1[0]), SetTreeLeaf$1__get_Key(t2$0027), SetTreeModule_union(comparer, SetTreeNode$1__get_Right(t2$0027), patternInput_1[2]));
          }
        } else {
          return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2$0027), t1);
        }
      } else {
        return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t1$0027), t2);
      }
    } else {
      return t1;
    }
  } else {
    return t2;
  }
}

function SetTreeModule_intersectionAux(comparer_mut, b_mut, t_mut, acc_mut) {
  SetTreeModule_intersectionAux: while (true) {
    var comparer = comparer_mut,
        b = b_mut,
        t = t_mut,
        acc = acc_mut;

    if (t != null) {
      var t2 = t;

      if (t2 instanceof SetTreeNode$1) {
        var acc_1 = SetTreeModule_intersectionAux(comparer, b, SetTreeNode$1__get_Right(t2), acc);
        var acc_2 = SetTreeModule_mem(comparer, SetTreeLeaf$1__get_Key(t2), b) ? SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2), acc_1) : acc_1;
        comparer_mut = comparer;
        b_mut = b;
        t_mut = SetTreeNode$1__get_Left(t2);
        acc_mut = acc_2;
        continue SetTreeModule_intersectionAux;
      } else if (SetTreeModule_mem(comparer, SetTreeLeaf$1__get_Key(t2), b)) {
        return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2), acc);
      } else {
        return acc;
      }
    } else {
      return acc;
    }

    break;
  }
}

function SetTreeModule_intersection(comparer, a, b) {
  return SetTreeModule_intersectionAux(comparer, b, a, SetTreeModule_empty());
}

function SetTreeModule_partition1(comparer, f, k, acc1, acc2) {
  if (f(k)) {
    return [SetTreeModule_add(comparer, k, acc1), acc2];
  } else {
    return [acc1, SetTreeModule_add(comparer, k, acc2)];
  }
}

function SetTreeModule_partitionAux(comparer_mut, f_mut, t_mut, acc_0_mut, acc_1_mut) {
  SetTreeModule_partitionAux: while (true) {
    var comparer = comparer_mut,
        f = f_mut,
        t = t_mut,
        acc_0 = acc_0_mut,
        acc_1 = acc_1_mut;
    var acc = [acc_0, acc_1];

    if (t != null) {
      var t2 = t;

      if (t2 instanceof SetTreeNode$1) {
        var acc_2 = SetTreeModule_partitionAux(comparer, f, SetTreeNode$1__get_Right(t2), acc[0], acc[1]);
        var acc_3 = SetTreeModule_partition1(comparer, f, SetTreeLeaf$1__get_Key(t2), acc_2[0], acc_2[1]);
        comparer_mut = comparer;
        f_mut = f;
        t_mut = SetTreeNode$1__get_Left(t2);
        acc_0_mut = acc_3[0];
        acc_1_mut = acc_3[1];
        continue SetTreeModule_partitionAux;
      } else {
        return SetTreeModule_partition1(comparer, f, SetTreeLeaf$1__get_Key(t2), acc[0], acc[1]);
      }
    } else {
      return acc;
    }

    break;
  }
}

function SetTreeModule_partition(comparer, f, s) {
  return SetTreeModule_partitionAux(comparer, f, s, SetTreeModule_empty(), SetTreeModule_empty());
}

function SetTreeModule_minimumElementAux(t_mut, n_mut) {
  SetTreeModule_minimumElementAux: while (true) {
    var t = t_mut,
        n = n_mut;

    if (t != null) {
      var t2 = t;

      if (t2 instanceof SetTreeNode$1) {
        t_mut = SetTreeNode$1__get_Left(t2);
        n_mut = SetTreeLeaf$1__get_Key(t2);
        continue SetTreeModule_minimumElementAux;
      } else {
        return SetTreeLeaf$1__get_Key(t2);
      }
    } else {
      return n;
    }

    break;
  }
}

function SetTreeModule_minimumElementOpt(t) {
  if (t != null) {
    var t2 = t;

    if (t2 instanceof SetTreeNode$1) {
      return (0, _Option.some)(SetTreeModule_minimumElementAux(SetTreeNode$1__get_Left(t2), SetTreeLeaf$1__get_Key(t2)));
    } else {
      return (0, _Option.some)(SetTreeLeaf$1__get_Key(t2));
    }
  } else {
    return void 0;
  }
}

function SetTreeModule_maximumElementAux(t_mut, n_mut) {
  SetTreeModule_maximumElementAux: while (true) {
    var t = t_mut,
        n = n_mut;

    if (t != null) {
      var t2 = t;

      if (t2 instanceof SetTreeNode$1) {
        t_mut = SetTreeNode$1__get_Right(t2);
        n_mut = SetTreeLeaf$1__get_Key(t2);
        continue SetTreeModule_maximumElementAux;
      } else {
        return SetTreeLeaf$1__get_Key(t2);
      }
    } else {
      return n;
    }

    break;
  }
}

function SetTreeModule_maximumElementOpt(t) {
  if (t != null) {
    var t2 = t;

    if (t2 instanceof SetTreeNode$1) {
      return (0, _Option.some)(SetTreeModule_maximumElementAux(SetTreeNode$1__get_Right(t2), SetTreeLeaf$1__get_Key(t2)));
    } else {
      return (0, _Option.some)(SetTreeLeaf$1__get_Key(t2));
    }
  } else {
    return void 0;
  }
}

function SetTreeModule_minimumElement(s) {
  var matchValue = SetTreeModule_minimumElementOpt(s);

  if (matchValue == null) {
    throw new Error("Set contains no elements");
  } else {
    return (0, _Option.value)(matchValue);
  }
}

function SetTreeModule_maximumElement(s) {
  var matchValue = SetTreeModule_maximumElementOpt(s);

  if (matchValue == null) {
    throw new Error("Set contains no elements");
  } else {
    return (0, _Option.value)(matchValue);
  }
}

var SetTreeModule_SetIterator$1 = /*#__PURE__*/function (_Record) {
  _inherits(SetTreeModule_SetIterator$1, _Record);

  var _super2 = _createSuper(SetTreeModule_SetIterator$1);

  function SetTreeModule_SetIterator$1(stack, started) {
    var _this2;

    _classCallCheck(this, SetTreeModule_SetIterator$1);

    _this2 = _super2.call(this);
    _this2.stack = stack;
    _this2.started = started;
    return _this2;
  }

  return SetTreeModule_SetIterator$1;
}(_Types.Record);

exports.SetTreeModule_SetIterator$1 = SetTreeModule_SetIterator$1;

function SetTreeModule_SetIterator$1$reflection(gen0) {
  return (0, _Reflection.record_type)("Set.SetTreeModule.SetIterator`1", [gen0], SetTreeModule_SetIterator$1, function () {
    return [["stack", (0, _Reflection.list_type)((0, _Reflection.option_type)(SetTreeLeaf$1$reflection(gen0)))], ["started", _Reflection.bool_type]];
  });
}

function SetTreeModule_collapseLHS(stack_mut) {
  SetTreeModule_collapseLHS: while (true) {
    var stack = stack_mut;

    if (stack.tail != null) {
      var x = stack.head;
      var rest = stack.tail;

      if (x != null) {
        var x2 = x;

        if (x2 instanceof SetTreeNode$1) {
          stack_mut = new _Types.List(SetTreeNode$1__get_Left(x2), new _Types.List(SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2)), new _Types.List(SetTreeNode$1__get_Right(x2), rest)));
          continue SetTreeModule_collapseLHS;
        } else {
          return stack;
        }
      } else {
        stack_mut = rest;
        continue SetTreeModule_collapseLHS;
      }
    } else {
      return new _Types.List();
    }

    break;
  }
}

function SetTreeModule_mkIterator(s) {
  return new SetTreeModule_SetIterator$1(SetTreeModule_collapseLHS(new _Types.List(s, new _Types.List())), false);
}

function SetTreeModule_notStarted() {
  throw new Error("Enumeration not started");
}

function SetTreeModule_alreadyFinished() {
  throw new Error("Enumeration already started");
}

function SetTreeModule_current(i) {
  if (i.started) {
    var matchValue = i.stack;

    if (matchValue.tail == null) {
      return SetTreeModule_alreadyFinished();
    } else if (matchValue.head != null) {
      var t = matchValue.head;
      return SetTreeLeaf$1__get_Key(t);
    } else {
      throw new Error("Please report error: Set iterator, unexpected stack for current");
    }
  } else {
    return SetTreeModule_notStarted();
  }
}

function SetTreeModule_moveNext(i) {
  if (i.started) {
    var matchValue = i.stack;

    if (matchValue.tail != null) {
      if (matchValue.head != null) {
        var t = matchValue.head;

        if (t instanceof SetTreeNode$1) {
          throw new Error("Please report error: Set iterator, unexpected stack for moveNext");
        } else {
          i.stack = SetTreeModule_collapseLHS(matchValue.tail);
          return !(i.stack.tail == null);
        }
      } else {
        throw new Error("Please report error: Set iterator, unexpected stack for moveNext");
      }
    } else {
      return false;
    }
  } else {
    i.started = true;
    return !(i.stack.tail == null);
  }
}

function SetTreeModule_mkIEnumerator(s) {
  var _ref;

  var i = SetTreeModule_mkIterator(s);
  return _ref = {}, _defineProperty(_ref, "System.Collections.Generic.IEnumerator`1.get_Current", function SystemCollectionsGenericIEnumerator1Get_Current() {
    return SetTreeModule_current(i);
  }), _defineProperty(_ref, "System.Collections.IEnumerator.get_Current", function SystemCollectionsIEnumeratorGet_Current() {
    return SetTreeModule_current(i);
  }), _defineProperty(_ref, "System.Collections.IEnumerator.MoveNext", function SystemCollectionsIEnumeratorMoveNext() {
    return SetTreeModule_moveNext(i);
  }), _defineProperty(_ref, "System.Collections.IEnumerator.Reset", function SystemCollectionsIEnumeratorReset() {
    i = SetTreeModule_mkIterator(s);
  }), _defineProperty(_ref, "Dispose", function Dispose() {}), _ref;
}

function SetTreeModule_compareStacks(comparer_mut, l1_mut, l2_mut) {
  SetTreeModule_compareStacks: while (true) {
    var comparer = comparer_mut,
        l1 = l1_mut,
        l2 = l2_mut;
    var matchValue = [l1, l2];

    if (matchValue[0].tail != null) {
      if (matchValue[1].tail != null) {
        if (matchValue[1].head != null) {
          if (matchValue[0].head != null) {
            var x1_3 = matchValue[0].head;
            var x2_3 = matchValue[1].head;

            if (x1_3 instanceof SetTreeNode$1) {
              if (SetTreeNode$1__get_Left(x1_3) == null) {
                if (x2_3 instanceof SetTreeNode$1) {
                  if (SetTreeNode$1__get_Left(x2_3) == null) {
                    var c = comparer.Compare(SetTreeLeaf$1__get_Key(x1_3), SetTreeLeaf$1__get_Key(x2_3)) | 0;

                    if (c !== 0) {
                      return c | 0;
                    } else {
                      comparer_mut = comparer;
                      l1_mut = new _Types.List(SetTreeNode$1__get_Right(x1_3), matchValue[0].tail);
                      l2_mut = new _Types.List(SetTreeNode$1__get_Right(x2_3), matchValue[1].tail);
                      continue SetTreeModule_compareStacks;
                    }
                  } else {
                    var matchValue_3 = [l1, l2];
                    var pattern_matching_result = void 0,
                        t1_6 = void 0,
                        x1_4 = void 0,
                        t2_6 = void 0,
                        x2_4 = void 0;

                    if (matchValue_3[0].tail != null) {
                      if (matchValue_3[0].head != null) {
                        pattern_matching_result = 0;
                        t1_6 = matchValue_3[0].tail;
                        x1_4 = matchValue_3[0].head;
                      } else if (matchValue_3[1].tail != null) {
                        if (matchValue_3[1].head != null) {
                          pattern_matching_result = 1;
                          t2_6 = matchValue_3[1].tail;
                          x2_4 = matchValue_3[1].head;
                        } else {
                          pattern_matching_result = 2;
                        }
                      } else {
                        pattern_matching_result = 2;
                      }
                    } else if (matchValue_3[1].tail != null) {
                      if (matchValue_3[1].head != null) {
                        pattern_matching_result = 1;
                        t2_6 = matchValue_3[1].tail;
                        x2_4 = matchValue_3[1].head;
                      } else {
                        pattern_matching_result = 2;
                      }
                    } else {
                      pattern_matching_result = 2;
                    }

                    switch (pattern_matching_result) {
                      case 0:
                        {
                          if (x1_4 instanceof SetTreeNode$1) {
                            comparer_mut = comparer;
                            l1_mut = new _Types.List(SetTreeNode$1__get_Left(x1_4), new _Types.List(SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1_4), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1_4), 0), t1_6));
                            l2_mut = l2;
                            continue SetTreeModule_compareStacks;
                          } else {
                            comparer_mut = comparer;
                            l1_mut = new _Types.List(SetTreeModule_empty(), new _Types.List(SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_4)), t1_6));
                            l2_mut = l2;
                            continue SetTreeModule_compareStacks;
                          }
                        }

                      case 1:
                        {
                          if (x2_4 instanceof SetTreeNode$1) {
                            comparer_mut = comparer;
                            l1_mut = l1;
                            l2_mut = new _Types.List(SetTreeNode$1__get_Left(x2_4), new _Types.List(SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_4), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_4), 0), t2_6));
                            continue SetTreeModule_compareStacks;
                          } else {
                            comparer_mut = comparer;
                            l1_mut = l1;
                            l2_mut = new _Types.List(SetTreeModule_empty(), new _Types.List(SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_4)), t2_6));
                            continue SetTreeModule_compareStacks;
                          }
                        }

                      case 2:
                        {
                          throw new Error("unexpected state in SetTree.compareStacks");
                        }
                    }
                  }
                } else {
                  var c_1 = comparer.Compare(SetTreeLeaf$1__get_Key(x1_3), SetTreeLeaf$1__get_Key(x2_3)) | 0;

                  if (c_1 !== 0) {
                    return c_1 | 0;
                  } else {
                    comparer_mut = comparer;
                    l1_mut = new _Types.List(SetTreeNode$1__get_Right(x1_3), matchValue[0].tail);
                    l2_mut = new _Types.List(SetTreeModule_empty(), matchValue[1].tail);
                    continue SetTreeModule_compareStacks;
                  }
                }
              } else {
                var matchValue_4 = [l1, l2];
                var pattern_matching_result_1 = void 0,
                    t1_7 = void 0,
                    x1_5 = void 0,
                    t2_7 = void 0,
                    x2_5 = void 0;

                if (matchValue_4[0].tail != null) {
                  if (matchValue_4[0].head != null) {
                    pattern_matching_result_1 = 0;
                    t1_7 = matchValue_4[0].tail;
                    x1_5 = matchValue_4[0].head;
                  } else if (matchValue_4[1].tail != null) {
                    if (matchValue_4[1].head != null) {
                      pattern_matching_result_1 = 1;
                      t2_7 = matchValue_4[1].tail;
                      x2_5 = matchValue_4[1].head;
                    } else {
                      pattern_matching_result_1 = 2;
                    }
                  } else {
                    pattern_matching_result_1 = 2;
                  }
                } else if (matchValue_4[1].tail != null) {
                  if (matchValue_4[1].head != null) {
                    pattern_matching_result_1 = 1;
                    t2_7 = matchValue_4[1].tail;
                    x2_5 = matchValue_4[1].head;
                  } else {
                    pattern_matching_result_1 = 2;
                  }
                } else {
                  pattern_matching_result_1 = 2;
                }

                switch (pattern_matching_result_1) {
                  case 0:
                    {
                      if (x1_5 instanceof SetTreeNode$1) {
                        comparer_mut = comparer;
                        l1_mut = new _Types.List(SetTreeNode$1__get_Left(x1_5), new _Types.List(SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1_5), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1_5), 0), t1_7));
                        l2_mut = l2;
                        continue SetTreeModule_compareStacks;
                      } else {
                        comparer_mut = comparer;
                        l1_mut = new _Types.List(SetTreeModule_empty(), new _Types.List(SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_5)), t1_7));
                        l2_mut = l2;
                        continue SetTreeModule_compareStacks;
                      }
                    }

                  case 1:
                    {
                      if (x2_5 instanceof SetTreeNode$1) {
                        comparer_mut = comparer;
                        l1_mut = l1;
                        l2_mut = new _Types.List(SetTreeNode$1__get_Left(x2_5), new _Types.List(SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_5), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_5), 0), t2_7));
                        continue SetTreeModule_compareStacks;
                      } else {
                        comparer_mut = comparer;
                        l1_mut = l1;
                        l2_mut = new _Types.List(SetTreeModule_empty(), new _Types.List(SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_5)), t2_7));
                        continue SetTreeModule_compareStacks;
                      }
                    }

                  case 2:
                    {
                      throw new Error("unexpected state in SetTree.compareStacks");
                    }
                }
              }
            } else if (x2_3 instanceof SetTreeNode$1) {
              if (SetTreeNode$1__get_Left(x2_3) == null) {
                var c_2 = comparer.Compare(SetTreeLeaf$1__get_Key(x1_3), SetTreeLeaf$1__get_Key(x2_3)) | 0;

                if (c_2 !== 0) {
                  return c_2 | 0;
                } else {
                  comparer_mut = comparer;
                  l1_mut = new _Types.List(SetTreeModule_empty(), matchValue[0].tail);
                  l2_mut = new _Types.List(SetTreeNode$1__get_Right(x2_3), matchValue[1].tail);
                  continue SetTreeModule_compareStacks;
                }
              } else {
                var matchValue_5 = [l1, l2];
                var pattern_matching_result_2 = void 0,
                    t1_8 = void 0,
                    x1_6 = void 0,
                    t2_8 = void 0,
                    x2_6 = void 0;

                if (matchValue_5[0].tail != null) {
                  if (matchValue_5[0].head != null) {
                    pattern_matching_result_2 = 0;
                    t1_8 = matchValue_5[0].tail;
                    x1_6 = matchValue_5[0].head;
                  } else if (matchValue_5[1].tail != null) {
                    if (matchValue_5[1].head != null) {
                      pattern_matching_result_2 = 1;
                      t2_8 = matchValue_5[1].tail;
                      x2_6 = matchValue_5[1].head;
                    } else {
                      pattern_matching_result_2 = 2;
                    }
                  } else {
                    pattern_matching_result_2 = 2;
                  }
                } else if (matchValue_5[1].tail != null) {
                  if (matchValue_5[1].head != null) {
                    pattern_matching_result_2 = 1;
                    t2_8 = matchValue_5[1].tail;
                    x2_6 = matchValue_5[1].head;
                  } else {
                    pattern_matching_result_2 = 2;
                  }
                } else {
                  pattern_matching_result_2 = 2;
                }

                switch (pattern_matching_result_2) {
                  case 0:
                    {
                      if (x1_6 instanceof SetTreeNode$1) {
                        comparer_mut = comparer;
                        l1_mut = new _Types.List(SetTreeNode$1__get_Left(x1_6), new _Types.List(SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1_6), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1_6), 0), t1_8));
                        l2_mut = l2;
                        continue SetTreeModule_compareStacks;
                      } else {
                        comparer_mut = comparer;
                        l1_mut = new _Types.List(SetTreeModule_empty(), new _Types.List(SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_6)), t1_8));
                        l2_mut = l2;
                        continue SetTreeModule_compareStacks;
                      }
                    }

                  case 1:
                    {
                      if (x2_6 instanceof SetTreeNode$1) {
                        comparer_mut = comparer;
                        l1_mut = l1;
                        l2_mut = new _Types.List(SetTreeNode$1__get_Left(x2_6), new _Types.List(SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_6), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_6), 0), t2_8));
                        continue SetTreeModule_compareStacks;
                      } else {
                        comparer_mut = comparer;
                        l1_mut = l1;
                        l2_mut = new _Types.List(SetTreeModule_empty(), new _Types.List(SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_6)), t2_8));
                        continue SetTreeModule_compareStacks;
                      }
                    }

                  case 2:
                    {
                      throw new Error("unexpected state in SetTree.compareStacks");
                    }
                }
              }
            } else {
              var c_3 = comparer.Compare(SetTreeLeaf$1__get_Key(x1_3), SetTreeLeaf$1__get_Key(x2_3)) | 0;

              if (c_3 !== 0) {
                return c_3 | 0;
              } else {
                comparer_mut = comparer;
                l1_mut = matchValue[0].tail;
                l2_mut = matchValue[1].tail;
                continue SetTreeModule_compareStacks;
              }
            }
          } else {
            var x2 = matchValue[1].head;
            var matchValue_1 = [l1, l2];
            var pattern_matching_result_3 = void 0,
                t1_2 = void 0,
                x1 = void 0,
                t2_2 = void 0,
                x2_1 = void 0;

            if (matchValue_1[0].tail != null) {
              if (matchValue_1[0].head != null) {
                pattern_matching_result_3 = 0;
                t1_2 = matchValue_1[0].tail;
                x1 = matchValue_1[0].head;
              } else if (matchValue_1[1].tail != null) {
                if (matchValue_1[1].head != null) {
                  pattern_matching_result_3 = 1;
                  t2_2 = matchValue_1[1].tail;
                  x2_1 = matchValue_1[1].head;
                } else {
                  pattern_matching_result_3 = 2;
                }
              } else {
                pattern_matching_result_3 = 2;
              }
            } else if (matchValue_1[1].tail != null) {
              if (matchValue_1[1].head != null) {
                pattern_matching_result_3 = 1;
                t2_2 = matchValue_1[1].tail;
                x2_1 = matchValue_1[1].head;
              } else {
                pattern_matching_result_3 = 2;
              }
            } else {
              pattern_matching_result_3 = 2;
            }

            switch (pattern_matching_result_3) {
              case 0:
                {
                  if (x1 instanceof SetTreeNode$1) {
                    comparer_mut = comparer;
                    l1_mut = new _Types.List(SetTreeNode$1__get_Left(x1), new _Types.List(SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1), 0), t1_2));
                    l2_mut = l2;
                    continue SetTreeModule_compareStacks;
                  } else {
                    comparer_mut = comparer;
                    l1_mut = new _Types.List(SetTreeModule_empty(), new _Types.List(SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1)), t1_2));
                    l2_mut = l2;
                    continue SetTreeModule_compareStacks;
                  }
                }

              case 1:
                {
                  if (x2_1 instanceof SetTreeNode$1) {
                    comparer_mut = comparer;
                    l1_mut = l1;
                    l2_mut = new _Types.List(SetTreeNode$1__get_Left(x2_1), new _Types.List(SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_1), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_1), 0), t2_2));
                    continue SetTreeModule_compareStacks;
                  } else {
                    comparer_mut = comparer;
                    l1_mut = l1;
                    l2_mut = new _Types.List(SetTreeModule_empty(), new _Types.List(SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_1)), t2_2));
                    continue SetTreeModule_compareStacks;
                  }
                }

              case 2:
                {
                  throw new Error("unexpected state in SetTree.compareStacks");
                }
            }
          }
        } else if (matchValue[0].head != null) {
          var x1_1 = matchValue[0].head;
          var matchValue_2 = [l1, l2];
          var pattern_matching_result_4 = void 0,
              t1_4 = void 0,
              x1_2 = void 0,
              t2_4 = void 0,
              x2_2 = void 0;

          if (matchValue_2[0].tail != null) {
            if (matchValue_2[0].head != null) {
              pattern_matching_result_4 = 0;
              t1_4 = matchValue_2[0].tail;
              x1_2 = matchValue_2[0].head;
            } else if (matchValue_2[1].tail != null) {
              if (matchValue_2[1].head != null) {
                pattern_matching_result_4 = 1;
                t2_4 = matchValue_2[1].tail;
                x2_2 = matchValue_2[1].head;
              } else {
                pattern_matching_result_4 = 2;
              }
            } else {
              pattern_matching_result_4 = 2;
            }
          } else if (matchValue_2[1].tail != null) {
            if (matchValue_2[1].head != null) {
              pattern_matching_result_4 = 1;
              t2_4 = matchValue_2[1].tail;
              x2_2 = matchValue_2[1].head;
            } else {
              pattern_matching_result_4 = 2;
            }
          } else {
            pattern_matching_result_4 = 2;
          }

          switch (pattern_matching_result_4) {
            case 0:
              {
                if (x1_2 instanceof SetTreeNode$1) {
                  comparer_mut = comparer;
                  l1_mut = new _Types.List(SetTreeNode$1__get_Left(x1_2), new _Types.List(SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1_2), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1_2), 0), t1_4));
                  l2_mut = l2;
                  continue SetTreeModule_compareStacks;
                } else {
                  comparer_mut = comparer;
                  l1_mut = new _Types.List(SetTreeModule_empty(), new _Types.List(SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_2)), t1_4));
                  l2_mut = l2;
                  continue SetTreeModule_compareStacks;
                }
              }

            case 1:
              {
                if (x2_2 instanceof SetTreeNode$1) {
                  comparer_mut = comparer;
                  l1_mut = l1;
                  l2_mut = new _Types.List(SetTreeNode$1__get_Left(x2_2), new _Types.List(SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_2), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_2), 0), t2_4));
                  continue SetTreeModule_compareStacks;
                } else {
                  comparer_mut = comparer;
                  l1_mut = l1;
                  l2_mut = new _Types.List(SetTreeModule_empty(), new _Types.List(SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_2)), t2_4));
                  continue SetTreeModule_compareStacks;
                }
              }

            case 2:
              {
                throw new Error("unexpected state in SetTree.compareStacks");
              }
          }
        } else {
          comparer_mut = comparer;
          l1_mut = matchValue[0].tail;
          l2_mut = matchValue[1].tail;
          continue SetTreeModule_compareStacks;
        }
      } else {
        return 1;
      }
    } else if (matchValue[1].tail == null) {
      return 0;
    } else {
      return -1;
    }

    break;
  }
}

function SetTreeModule_compare(comparer, t1, t2) {
  if (t1 == null) {
    if (t2 == null) {
      return 0;
    } else {
      return -1;
    }
  } else if (t2 == null) {
    return 1;
  } else {
    return SetTreeModule_compareStacks(comparer, new _Types.List(t1, new _Types.List()), new _Types.List(t2, new _Types.List())) | 0;
  }
}

function SetTreeModule_choose(s) {
  return SetTreeModule_minimumElement(s);
}

function SetTreeModule_toList(t) {
  var loop = function loop(t$0027_mut, acc_mut) {
    loop: while (true) {
      var t$0027 = t$0027_mut,
          acc = acc_mut;

      if (t$0027 != null) {
        var t2 = t$0027;

        if (t2 instanceof SetTreeNode$1) {
          t$0027_mut = SetTreeNode$1__get_Left(t2);
          acc_mut = new _Types.List(SetTreeLeaf$1__get_Key(t2), loop(SetTreeNode$1__get_Right(t2), acc));
          continue loop;
        } else {
          return new _Types.List(SetTreeLeaf$1__get_Key(t2), acc);
        }
      } else {
        return acc;
      }

      break;
    }
  };

  return loop(t, new _Types.List());
}

function SetTreeModule_copyToArray(s, arr, i) {
  var j = i | 0;
  SetTreeModule_iter(function (x) {
    arr[j] = x;
    j = j + 1;
  }, s);
}

function SetTreeModule_toArray(s) {
  var n = SetTreeModule_count(s) | 0;
  var res = new Array(n);
  SetTreeModule_copyToArray(s, res, 0);
  return res;
}

function SetTreeModule_mkFromEnumerator(comparer_mut, acc_mut, e_mut) {
  SetTreeModule_mkFromEnumerator: while (true) {
    var comparer = comparer_mut,
        acc = acc_mut,
        e = e_mut;

    if (e["System.Collections.IEnumerator.MoveNext"]()) {
      comparer_mut = comparer;
      acc_mut = SetTreeModule_add(comparer, e["System.Collections.Generic.IEnumerator`1.get_Current"](), acc);
      e_mut = e;
      continue SetTreeModule_mkFromEnumerator;
    } else {
      return acc;
    }

    break;
  }
}

function SetTreeModule_ofSeq(comparer, c) {
  var ie = (0, _Seq.getEnumerator)(c);

  try {
    return SetTreeModule_mkFromEnumerator(comparer, SetTreeModule_empty(), ie);
  } finally {
    ie.Dispose();
  }
}

function SetTreeModule_ofArray(comparer, l) {
  return (0, _Array.fold)(function (acc, k) {
    return SetTreeModule_add(comparer, k, acc);
  }, SetTreeModule_empty(), l);
}

var FSharpSet = /*#__PURE__*/function () {
  function FSharpSet(comparer, tree) {
    _classCallCheck(this, FSharpSet);

    this.comparer = comparer;
    this.tree = tree;
  }

  _createClass(FSharpSet, [{
    key: "GetHashCode",
    value: function GetHashCode() {
      var this$ = this;
      return FSharpSet__ComputeHashCode(this$) | 0;
    }
  }, {
    key: "Equals",
    value: function Equals(that) {
      var this$ = this;
      return that instanceof FSharpSet ? SetTreeModule_compare(FSharpSet__get_Comparer(this$), FSharpSet__get_Tree(this$), FSharpSet__get_Tree(that)) === 0 : false;
    }
  }, {
    key: "toString",
    value: function toString() {
      var this$ = this;
      return "set [" + (0, _String.join)("; ", (0, _Seq.map)(function (x) {
        var copyOfStruct = x;
        return (0, _Types.toString)(copyOfStruct);
      }, this$)) + "]";
    }
  }, {
    key: "CompareTo",
    value: function CompareTo(that) {
      var s = this;
      return SetTreeModule_compare(FSharpSet__get_Comparer(s), FSharpSet__get_Tree(s), FSharpSet__get_Tree(that)) | 0;
    }
  }, {
    key: "System.Collections.Generic.ICollection`1.Add2B595",
    value: function SystemCollectionsGenericICollection1Add2B595(x) {
      void x;
      throw new Error("ReadOnlyCollection");
    }
  }, {
    key: "System.Collections.Generic.ICollection`1.Clear",
    value: function SystemCollectionsGenericICollection1Clear() {
      throw new Error("ReadOnlyCollection");
    }
  }, {
    key: "System.Collections.Generic.ICollection`1.Remove2B595",
    value: function SystemCollectionsGenericICollection1Remove2B595(x) {
      void x;
      throw new Error("ReadOnlyCollection");
    }
  }, {
    key: "System.Collections.Generic.ICollection`1.Contains2B595",
    value: function SystemCollectionsGenericICollection1Contains2B595(x) {
      var s = this;
      return SetTreeModule_mem(FSharpSet__get_Comparer(s), x, FSharpSet__get_Tree(s));
    }
  }, {
    key: "System.Collections.Generic.ICollection`1.CopyToZ2E171D71",
    value: function SystemCollectionsGenericICollection1CopyToZ2E171D71(arr, i) {
      var s = this;
      SetTreeModule_copyToArray(FSharpSet__get_Tree(s), arr, i);
    }
  }, {
    key: "System.Collections.Generic.ICollection`1.get_IsReadOnly",
    value: function SystemCollectionsGenericICollection1Get_IsReadOnly() {
      return true;
    }
  }, {
    key: "System.Collections.Generic.ICollection`1.get_Count",
    value: function SystemCollectionsGenericICollection1Get_Count() {
      var s = this;
      return FSharpSet__get_Count(s) | 0;
    }
  }, {
    key: "System.Collections.Generic.IReadOnlyCollection`1.get_Count",
    value: function SystemCollectionsGenericIReadOnlyCollection1Get_Count() {
      var s = this;
      return FSharpSet__get_Count(s) | 0;
    }
  }, {
    key: "GetEnumerator",
    value: function GetEnumerator() {
      var s = this;
      return SetTreeModule_mkIEnumerator(FSharpSet__get_Tree(s));
    }
  }, {
    key: Symbol.iterator,
    value: function value() {
      return (0, _Seq.toIterator)(this.GetEnumerator());
    }
  }, {
    key: "System.Collections.IEnumerable.GetEnumerator",
    value: function SystemCollectionsIEnumerableGetEnumerator() {
      var s = this;
      return SetTreeModule_mkIEnumerator(FSharpSet__get_Tree(s));
    }
  }, {
    key: "add",
    value: function add(k) {
      var s = this;
      throw new Error("Set cannot be mutated");
      return s;
    }
  }, {
    key: "clear",
    value: function clear() {
      throw new Error("Set cannot be mutated");
    }
  }, {
    key: "delete",
    value: function _delete(k) {
      throw new Error("Set cannot be mutated");
      return false;
    }
  }, {
    key: "has",
    value: function has(k) {
      var s = this;
      return FSharpSet__Contains(s, k);
    }
  }, {
    key: "keys",
    value: function keys() {
      var s = this;
      return (0, _Seq.map)(function (x) {
        return x;
      }, s);
    }
  }, {
    key: "values",
    value: function values() {
      var s = this;
      return (0, _Seq.map)(function (x) {
        return x;
      }, s);
    }
  }, {
    key: "entries",
    value: function entries() {
      var s = this;
      return (0, _Seq.map)(function (v) {
        return [v, v];
      }, s);
    }
  }, {
    key: "forEach",
    value: function forEach(f, thisArg) {
      var s = this;
      (0, _Seq.iterate)(function (x) {
        f(x, x, s);
      }, s);
    }
  }, {
    key: Symbol.toStringTag,
    get: function get() {
      return "FSharpSet";
    }
  }, {
    key: "size",
    get: function get() {
      var s = this;
      return FSharpSet__get_Count(s) | 0;
    }
  }]);

  return FSharpSet;
}();

exports.FSharpSet = FSharpSet;

function FSharpSet$reflection(gen0) {
  return (0, _Reflection.class_type)("Set.FSharpSet", [gen0], FSharpSet);
}

function FSharpSet_$ctor(comparer, tree) {
  return new FSharpSet(comparer, tree);
}

function FSharpSet__get_Comparer(set$) {
  return set$.comparer;
}

function FSharpSet__get_Tree(set$) {
  return set$.tree;
}

function FSharpSet_Empty(comparer) {
  return FSharpSet_$ctor(comparer, SetTreeModule_empty());
}

function FSharpSet__Add(s, value) {
  return FSharpSet_$ctor(FSharpSet__get_Comparer(s), SetTreeModule_add(FSharpSet__get_Comparer(s), value, FSharpSet__get_Tree(s)));
}

function FSharpSet__Remove(s, value) {
  return FSharpSet_$ctor(FSharpSet__get_Comparer(s), SetTreeModule_remove(FSharpSet__get_Comparer(s), value, FSharpSet__get_Tree(s)));
}

function FSharpSet__get_Count(s) {
  return SetTreeModule_count(FSharpSet__get_Tree(s));
}

function FSharpSet__Contains(s, value) {
  return SetTreeModule_mem(FSharpSet__get_Comparer(s), value, FSharpSet__get_Tree(s));
}

function FSharpSet__Iterate(s, x) {
  SetTreeModule_iter(x, FSharpSet__get_Tree(s));
}

function FSharpSet__Fold(s, f, z) {
  var f_1 = f;
  return SetTreeModule_fold(function (x, z_1) {
    return f_1(z_1, x);
  }, z, FSharpSet__get_Tree(s));
}

function FSharpSet__get_IsEmpty(s) {
  return FSharpSet__get_Tree(s) == null;
}

function FSharpSet__Partition(s, f) {
  if (FSharpSet__get_Tree(s) == null) {
    return [s, s];
  } else {
    var patternInput = SetTreeModule_partition(FSharpSet__get_Comparer(s), f, FSharpSet__get_Tree(s));
    return [FSharpSet_$ctor(FSharpSet__get_Comparer(s), patternInput[0]), FSharpSet_$ctor(FSharpSet__get_Comparer(s), patternInput[1])];
  }
}

function FSharpSet__Filter(s, f) {
  if (FSharpSet__get_Tree(s) == null) {
    return s;
  } else {
    return FSharpSet_$ctor(FSharpSet__get_Comparer(s), SetTreeModule_filter(FSharpSet__get_Comparer(s), f, FSharpSet__get_Tree(s)));
  }
}

function FSharpSet__Map(s, f, comparer) {
  return FSharpSet_$ctor(comparer, SetTreeModule_fold(function (acc, k) {
    return SetTreeModule_add(comparer, f(k), acc);
  }, SetTreeModule_empty(), FSharpSet__get_Tree(s)));
}

function FSharpSet__Exists(s, f) {
  return SetTreeModule_exists(f, FSharpSet__get_Tree(s));
}

function FSharpSet__ForAll(s, f) {
  return SetTreeModule_forall(f, FSharpSet__get_Tree(s));
}

function FSharpSet_op_Subtraction(set1, set2) {
  if (FSharpSet__get_Tree(set1) == null) {
    return set1;
  } else if (FSharpSet__get_Tree(set2) == null) {
    return set1;
  } else {
    return FSharpSet_$ctor(FSharpSet__get_Comparer(set1), SetTreeModule_diff(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2)));
  }
}

function FSharpSet_op_Addition(set1, set2) {
  if (FSharpSet__get_Tree(set2) == null) {
    return set1;
  } else if (FSharpSet__get_Tree(set1) == null) {
    return set2;
  } else {
    return FSharpSet_$ctor(FSharpSet__get_Comparer(set1), SetTreeModule_union(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2)));
  }
}

function FSharpSet_Intersection(a, b) {
  if (FSharpSet__get_Tree(b) == null) {
    return b;
  } else if (FSharpSet__get_Tree(a) == null) {
    return a;
  } else {
    return FSharpSet_$ctor(FSharpSet__get_Comparer(a), SetTreeModule_intersection(FSharpSet__get_Comparer(a), FSharpSet__get_Tree(a), FSharpSet__get_Tree(b)));
  }
}

function FSharpSet_IntersectionMany(sets) {
  return (0, _Seq.reduce)(FSharpSet_Intersection, sets);
}

function FSharpSet_Equality(a, b) {
  return SetTreeModule_compare(FSharpSet__get_Comparer(a), FSharpSet__get_Tree(a), FSharpSet__get_Tree(b)) === 0;
}

function FSharpSet_Compare(a, b) {
  return SetTreeModule_compare(FSharpSet__get_Comparer(a), FSharpSet__get_Tree(a), FSharpSet__get_Tree(b));
}

function FSharpSet__get_Choose(x) {
  return SetTreeModule_choose(FSharpSet__get_Tree(x));
}

function FSharpSet__get_MinimumElement(x) {
  return SetTreeModule_minimumElement(FSharpSet__get_Tree(x));
}

function FSharpSet__get_MaximumElement(x) {
  return SetTreeModule_maximumElement(FSharpSet__get_Tree(x));
}

function FSharpSet__IsSubsetOf(x, otherSet) {
  return SetTreeModule_subset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(x), FSharpSet__get_Tree(otherSet));
}

function FSharpSet__IsSupersetOf(x, otherSet) {
  return SetTreeModule_subset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(otherSet), FSharpSet__get_Tree(x));
}

function FSharpSet__IsProperSubsetOf(x, otherSet) {
  return SetTreeModule_properSubset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(x), FSharpSet__get_Tree(otherSet));
}

function FSharpSet__IsProperSupersetOf(x, otherSet) {
  return SetTreeModule_properSubset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(otherSet), FSharpSet__get_Tree(x));
}

function FSharpSet__ToList(x) {
  return SetTreeModule_toList(FSharpSet__get_Tree(x));
}

function FSharpSet__ToArray(x) {
  return SetTreeModule_toArray(FSharpSet__get_Tree(x));
}

function FSharpSet__ComputeHashCode(this$) {
  var res = 0;
  var enumerator = (0, _Seq.getEnumerator)(this$);

  try {
    while (enumerator["System.Collections.IEnumerator.MoveNext"]()) {
      var x_1 = enumerator["System.Collections.Generic.IEnumerator`1.get_Current"]();
      res = (res << 1) + (0, _Util.structuralHash)(x_1) + 631;
    }
  } finally {
    enumerator.Dispose();
  }

  return Math.abs(res) | 0;
}

function isEmpty(set$) {
  return FSharpSet__get_IsEmpty(set$);
}

function contains(element, set$) {
  return FSharpSet__Contains(set$, element);
}

function add(value, set$) {
  return FSharpSet__Add(set$, value);
}

function singleton(value, comparer) {
  return FSharpSet__Add(FSharpSet_Empty(comparer), value);
}

function remove(value, set$) {
  return FSharpSet__Remove(set$, value);
}

function union(set1, set2) {
  return FSharpSet_op_Addition(set1, set2);
}

function unionMany(sets, comparer) {
  return (0, _Seq.fold)(FSharpSet_op_Addition, FSharpSet_Empty(comparer), sets);
}

function intersect(set1, set2) {
  return FSharpSet_Intersection(set1, set2);
}

function intersectMany(sets) {
  return FSharpSet_IntersectionMany(sets);
}

function iterate(action, set$) {
  FSharpSet__Iterate(set$, action);
}

function empty(comparer) {
  return FSharpSet_Empty(comparer);
}

function forAll(predicate, set$) {
  return FSharpSet__ForAll(set$, predicate);
}

function exists(predicate, set$) {
  return FSharpSet__Exists(set$, predicate);
}

function filter(predicate, set$) {
  return FSharpSet__Filter(set$, predicate);
}

function partition(predicate, set$) {
  return FSharpSet__Partition(set$, predicate);
}

function fold(folder, state, set$) {
  return SetTreeModule_fold(folder, state, FSharpSet__get_Tree(set$));
}

function foldBack(folder, set$, state) {
  return SetTreeModule_foldBack(folder, FSharpSet__get_Tree(set$), state);
}

function map(mapping, set$, comparer) {
  return FSharpSet__Map(set$, mapping, comparer);
}

function count(set$) {
  return FSharpSet__get_Count(set$);
}

function ofList(elements, comparer) {
  return FSharpSet_$ctor(comparer, SetTreeModule_ofSeq(comparer, elements));
}

function ofArray(array, comparer) {
  return FSharpSet_$ctor(comparer, SetTreeModule_ofArray(comparer, array));
}

function toList(set$) {
  return FSharpSet__ToList(set$);
}

function toArray(set$) {
  return FSharpSet__ToArray(set$);
}

function toSeq(set$) {
  return (0, _Seq.map)(function (x) {
    return x;
  }, set$);
}

function ofSeq(elements, comparer) {
  return FSharpSet_$ctor(comparer, SetTreeModule_ofSeq(comparer, elements));
}

function difference(set1, set2) {
  return FSharpSet_op_Subtraction(set1, set2);
}

function isSubset(set1, set2) {
  return SetTreeModule_subset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2));
}

function isSuperset(set1, set2) {
  return SetTreeModule_subset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set2), FSharpSet__get_Tree(set1));
}

function isProperSubset(set1, set2) {
  return SetTreeModule_properSubset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2));
}

function isProperSuperset(set1, set2) {
  return SetTreeModule_properSubset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set2), FSharpSet__get_Tree(set1));
}

function minElement(set$) {
  return FSharpSet__get_MinimumElement(set$);
}

function maxElement(set$) {
  return FSharpSet__get_MaximumElement(set$);
}

function createMutable(source, comparer) {
  return (0, _MutableSet.HashSet_$ctor_Z6150332D)(source, comparer);
}

function distinct(xs, comparer) {
  return (0, _Seq.delay)(function () {
    var set$ = (0, _MutableSet.HashSet_$ctor_Z6150332D)((0, _Seq.empty)(), comparer);
    return (0, _Seq.collect)(function (x) {
      return (0, _MutableSet.HashSet__Add_2B595)(set$, x) ? (0, _Seq.singleton)(x) : (0, _Seq.empty)();
    }, xs);
  });
}

function distinctBy(projection, xs, comparer) {
  return (0, _Seq.delay)(function () {
    var set$ = (0, _MutableSet.HashSet_$ctor_Z6150332D)((0, _Seq.empty)(), comparer);
    return (0, _Seq.collect)(function (x) {
      return (0, _MutableSet.HashSet__Add_2B595)(set$, projection(x)) ? (0, _Seq.singleton)(x) : (0, _Seq.empty)();
    }, xs);
  });
}

function unionWith(s1, s2) {
  return (0, _Seq.fold)(function (acc, x) {
    return acc.add(x);
  }, s1, s2);
}

function intersectWith(s1, s2, comparer) {
  var s2_1 = ofSeq(s2, comparer);
  var enumerator = (0, _Seq.getEnumerator)(s1.keys());

  try {
    while (enumerator["System.Collections.IEnumerator.MoveNext"]()) {
      var x = enumerator["System.Collections.Generic.IEnumerator`1.get_Current"]();

      if (!FSharpSet__Contains(s2_1, x)) {
        var value = s1.delete(x);
        void value;
      }
    }
  } finally {
    enumerator.Dispose();
  }
}

function exceptWith(s1, s2) {
  var enumerator = (0, _Seq.getEnumerator)(s2);

  try {
    while (enumerator["System.Collections.IEnumerator.MoveNext"]()) {
      var value = s1.delete(enumerator["System.Collections.Generic.IEnumerator`1.get_Current"]());
      void value;
    }
  } finally {
    enumerator.Dispose();
  }
}

function isSubsetOf(s1, s2, comparer) {
  return isSubset(ofSeq(s1.values(), comparer), ofSeq(s2, comparer));
}

function isSupersetOf(s1, s2, comparer) {
  return isSuperset(ofSeq(s1.values(), comparer), ofSeq(s2, comparer));
}

function isProperSubsetOf(s1, s2, comparer) {
  return isProperSubset(ofSeq(s1.values(), comparer), ofSeq(s2, comparer));
}

function isProperSupersetOf(s1, s2, comparer) {
  return isProperSuperset(ofSeq(s1.values(), comparer), ofSeq(s2, comparer));
}
},{"./Reflection.js":"../src/.fable/fable-library.3.0.0/Reflection.js","./Option.js":"../src/.fable/fable-library.3.0.0/Option.js","./Types.js":"../src/.fable/fable-library.3.0.0/Types.js","./Seq.js":"../src/.fable/fable-library.3.0.0/Seq.js","./Array.js":"../src/.fable/fable-library.3.0.0/Array.js","./String.js":"../src/.fable/fable-library.3.0.0/String.js","./Util.js":"../src/.fable/fable-library.3.0.0/Util.js","./MutableSet.js":"../src/.fable/fable-library.3.0.0/MutableSet.js"}],"../src/webgl_shader_utils.fs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ShaderSources$reflection = ShaderSources$reflection;
exports.ShaderSources_$ctor = ShaderSources_$ctor;
exports.ShaderSources__get_VertexSources = ShaderSources__get_VertexSources;
exports.ShaderSources__get_FragmentSources = ShaderSources__get_FragmentSources;
exports.ShaderSources__get_VertexSource_Z721C83C5 = ShaderSources__get_VertexSource_Z721C83C5;
exports.ShaderSources__get_FragmentSource_Z721C83C5 = ShaderSources__get_FragmentSource_Z721C83C5;
exports.ShaderSources__AddVertexSource_Z384F8060 = ShaderSources__AddVertexSource_Z384F8060;
exports.ShaderSources__AddFragmentSource_Z384F8060 = ShaderSources__AddFragmentSource_Z384F8060;
exports.addShaderInclude = addShaderInclude;
exports.removeShaderInclude = removeShaderInclude;
exports.getShaderInclude = getShaderInclude;
exports.processIncludes = processIncludes;
exports.addVertexShaderSource = addVertexShaderSource;
exports.addFragmentShaderSource = addFragmentShaderSource;
exports.getVertexShaderSource = getVertexShaderSource;
exports.getFragmentShaderSource = getFragmentShaderSource;
exports.createShader = createShader;
exports.ShaderSources = void 0;

var _Map = require("./.fable/fable-library.3.0.0/Map.js");

var _Util = require("./.fable/fable-library.3.0.0/Util.js");

var _Reflection = require("./.fable/fable-library.3.0.0/Reflection.js");

var _String = require("./.fable/fable-library.3.0.0/String.js");

var _utilsFs = require("./utils.fs.js");

var _Set = require("./.fable/fable-library.3.0.0/Set.js");

var _RegExp = require("./.fable/fable-library.3.0.0/RegExp.js");

var _List = require("./.fable/fable-library.3.0.0/List.js");

var _Seq = require("./.fable/fable-library.3.0.0/Seq.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ShaderSources = function ShaderSources() {
  _classCallCheck(this, ShaderSources);

  this.vertexSources = (0, _Map.ofSeq)([], {
    Compare: _Util.comparePrimitives
  });
  this.fragmentSources = (0, _Map.ofSeq)([], {
    Compare: _Util.comparePrimitives
  });
};

exports.ShaderSources = ShaderSources;

function ShaderSources$reflection() {
  return (0, _Reflection.class_type)("WebGLShaderUtils.ShaderSources", void 0, ShaderSources);
}

function ShaderSources_$ctor() {
  return new ShaderSources();
}

function ShaderSources__get_VertexSources(_) {
  return _.vertexSources;
}

function ShaderSources__get_FragmentSources(_) {
  return _.fragmentSources;
}

function ShaderSources__get_VertexSource_Z721C83C5(_, name) {
  var matchValue = (0, _Map.tryFind)(name, _.vertexSources);

  if (matchValue == null) {
    throw new Error((0, _String.toText)((0, _String.interpolate)("Vertex source '%P()' has not been registered", [name])));
  } else {
    var source = matchValue;
    return source;
  }
}

function ShaderSources__get_FragmentSource_Z721C83C5(_, name) {
  var matchValue = (0, _Map.tryFind)(name, _.fragmentSources);

  if (matchValue == null) {
    throw new Error((0, _String.toText)((0, _String.interpolate)("Fragment source '%P()' has not been registered", [name])));
  } else {
    var source = matchValue;
    return source;
  }
}

function ShaderSources__AddVertexSource_Z384F8060(_, name, source) {
  _.vertexSources = (0, _Map.FSharpMap__Add)(_.vertexSources, name, source);
}

function ShaderSources__AddFragmentSource_Z384F8060(_, name, source) {
  _.fragmentSources = (0, _Map.FSharpMap__Add)(_.fragmentSources, name, source);
}

var shaderIncludes = (0, _Map.empty)();

function addShaderInclude(name, text) {
  shaderIncludes = (0, _Map.FSharpMap__Add)(shaderIncludes, name, text);
}

function removeShaderInclude(name) {
  shaderIncludes = (0, _Map.FSharpMap__Remove)(shaderIncludes, name);
}

function getShaderInclude(name) {
  var matchValue = (0, _Map.tryFind)(name, shaderIncludes);

  if (matchValue == null) {
    return (0, _utilsFs.throw$)((0, _String.toText)((0, _String.interpolate)("Shader include '%P()' not found", [name])));
  } else {
    var text = matchValue;
    return text;
  }
}

function processIncludes(text) {
  var replaced = (0, _Set.ofSeq)([], {
    Compare: _Util.comparePrimitives
  });

  var loop = function loop(text_1) {
    var replaceInclude = function replaceInclude(m) {
      var name = m[1] || "";

      if ((0, _Set.FSharpSet__Contains)(replaced, name)) {
        return "";
      } else {
        replaced = (0, _Set.FSharpSet__Add)(replaced, name);
        return loop(getShaderInclude(name));
      }
    };

    return (0, _RegExp.replace)(text_1, "^#include\\s+(.+)", replaceInclude, 2);
  };

  return loop(text);
}

var shaderSources = ShaderSources_$ctor();

function addVertexShaderSource(name, source) {
  ShaderSources__AddVertexSource_Z384F8060(shaderSources, name, source);
}

function addFragmentShaderSource(name, source) {
  ShaderSources__AddFragmentSource_Z384F8060(shaderSources, name, source);
}

function getVertexShaderSource(name) {
  return processIncludes(ShaderSources__get_VertexSource_Z721C83C5(shaderSources, name));
}

function getFragmentShaderSource(name) {
  return processIncludes(ShaderSources__get_FragmentSource_Z721C83C5(shaderSources, name));
}

function createShader(gl, typ, source) {
  var shader = gl.createShader(typ);
  gl.shaderSource(shader, source);
  gl.compileShader(shader);
  var success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);

  if (success) {
    return shader;
  } else {
    var msg;
    var arg10 = gl.getShaderInfoLog(shader);
    msg = (0, _String.toText)((0, _String.printf)("%s"))(arg10);
    gl.deleteShader(shader);
    var exn = new Error(msg);
    throw exn;
  }
}

function DefaultValues_addInclude(key, source) {
  addShaderInclude(key, source);
}

function DefaultValues_addVertex(key, source) {
  addVertexShaderSource(key, source);
}

function DefaultValues_addFragment(key, source) {
  addFragmentShaderSource(key, source);
}

(0, _List.iterate)(function (tupledArg) {
  DefaultValues_addInclude(tupledArg[0], tupledArg[1]);
}, (0, _List.ofArray)([["coordinate-conversion-vertex", "\r\nvec4 toVec4(vec2 p) { return vec4(p, 0.0, 1.0); }\r\nvec4 modelToClip(vec2 p) { return projMat * viewMat * modelMat * toVec4(p); }\r\nvec3 clipToNDC(vec4 p) { return p.xyz / p.w; }\r\nvec3 modelToNDC(vec2 p) { return clipToNDC(modelToClip(p)); }\r\nvec4 modelToWorld(vec2 p) { return modelMat * toVec4(p); }\r\nvec4 modelToEye(vec2 p) { return viewMat * modelMat * toVec4(p); }\r\n\r\nvec2 ndcToScreen(vec3 p) { return (p.xy * 0.5 + 0.5) * viewport.zw + viewport.xy; }\r\nvec2 modelToScreen(vec2 p) { return ndcToScreen(modelToNDC(p)); }\r\nvec2 clipToScreen(vec4 p) { return ndcToScreen(clipToNDC(p)); }"], ["mixes", "\r\nint mix(int a, int b, float t) { return int(mix(float(a), float(b), t)); }\r\nbool mix(bool a, bool b, float t) { return bool(mix(float(a), float(b), t)); }"], ["vec2", "\r\nvec2 scale(vec2 v, float s) { return v * s; }\r\nvec2 perp(vec2 v) { return vec2(-v.y, v.x); }\r\nfloat cross(vec2 v1, vec2 v2) { return v1.x * v2.y - v1.y * v2.x; }\r\nfloat isLeftOf(vec2 v1, vec2 v2) { return float(cross(v1, v2) < 0.0); }\r\nfloat isRightOf(vec2 v1, vec2 v2) { return float(cross(v1, v2) > 0.0); }\r\n\r\nvec2 perpToward(vec2 v, vec2 toward) {\r\n  float sgn = sign(cross(toward, v));\r\n  return vec2(sgn * v.y, -sgn * v.x);\r\n}"], ["comparisons", "\r\n// step(edge, value)\r\n//   if value < edge then 0 else 1\r\n//   if value >= edge then 1 else 0\r\n//\r\n//   if edge > value then 0 else 1\r\n//   if edge <= value then 1 else 0\r\n//\r\nfloat isGreater(float value, float base) { return 1.0 - step(value, base); }\r\nfloat isGreater(int value, int base) { return 1.0 - step(float(value), float(base)); }\r\n\r\nfloat isGreaterOrEqual(float value, float base) { return step(base, value); }\r\nfloat isGreaterOrEqual(int value, int base) { return step(float(base), float(value)); }\r\n\r\nfloat isLess(float value, float base) { return 1.0 - step(base, value); }\r\nfloat isLess(int value, int base) { return 1.0 - step(float(base), float(value)); }\r\n\r\nfloat isLessOrEqual(float value, float base) { return step(value, base); }\r\nfloat isLessOrEqual(int value, int base) { return step(float(value), float(base)); }\r\n\r\nfloat isEqual(float value, float base) { return step(base, value) * step(value, base); }\r\nfloat isEqual(int value, int base) { return step(float(base), float(value)) * step(float(value), float(base)); }"], ["conditionals", "\r\nfloat ifThenElse(bool condition, float thenValue, float elseValue) { return mix(elseValue, thenValue, float(condition)); }\r\nvec2 ifThenElse(bool condition, vec2 thenValue, vec2 elseValue) { return mix(elseValue, thenValue, float(condition)); }\r\nvec3 ifThenElse(bool condition, vec3 thenValue, vec3 elseValue) { return mix(elseValue, thenValue, float(condition)); }\r\nvec4 ifThenElse(bool condition, vec4 thenValue, vec4 elseValue) { return mix(elseValue, thenValue, float(condition)); }\r\n\r\nfloat ifThenElse(float condition, float thenValue, float elseValue) { return mix(elseValue, thenValue, condition); }\r\nvec2 ifThenElse(float condition, vec2 thenValue, vec2 elseValue) { return mix(elseValue, thenValue, condition); }\r\nvec3 ifThenElse(float condition, vec3 thenValue, vec3 elseValue) { return mix(elseValue, thenValue, condition); }\r\nvec4 ifThenElse(float condition, vec4 thenValue, vec4 elseValue) { return mix(elseValue, thenValue, condition); }\r\n\r\nfloat iif(bool condition, float thenValue, float elseValue) { return mix(elseValue, thenValue, float(condition)); }\r\nvec2 iif(bool condition, vec2 thenValue, vec2 elseValue) { return mix(elseValue, thenValue, float(condition)); }\r\nvec3 iif(bool condition, vec3 thenValue, vec3 elseValue) { return mix(elseValue, thenValue, float(condition)); }\r\nvec4 iif(bool condition, vec4 thenValue, vec4 elseValue) { return mix(elseValue, thenValue, float(condition)); }\r\n\r\nfloat iif(float condition, float thenValue, float elseValue) { return mix(elseValue, thenValue, condition); }\r\nvec2 iif(float condition, vec2 thenValue, vec2 elseValue) { return mix(elseValue, thenValue, condition); }\r\nvec3 iif(float condition, vec3 thenValue, vec3 elseValue) { return mix(elseValue, thenValue, condition); }\r\nvec4 iif(float condition, vec4 thenValue, vec4 elseValue) { return mix(elseValue, thenValue, condition); }"], ["conditionals-mix", "\r\nbool ifThenElse(bool condition, bool thenValue, bool elseValue) { return mix(elseValue, thenValue, float(condition)); }\r\nint ifThenElse(bool condition, int thenValue, int elseValue) { return mix(elseValue, thenValue, float(condition)); }\r\n\r\nbool ifThenElse(float condition, bool thenValue, bool elseValue) { return mix(elseValue, thenValue, condition); }\r\nint ifThenElse(float condition, int thenValue, int elseValue) { return mix(elseValue, thenValue, condition); }\r\n\r\nbool iif(bool condition, bool thenValue, bool elseValue) { return mix(elseValue, thenValue, float(condition)); }\r\nint iif(bool condition, int thenValue, int elseValue) { return mix(elseValue, thenValue, float(condition)); }\r\n\r\nbool iif(float condition, bool thenValue, bool elseValue) { return mix(elseValue, thenValue, condition); }\r\nint iif(float condition, int thenValue, int elseValue) { return mix(elseValue, thenValue, condition); }"], ["circle-outvars", "\r\nout float v_isCircle;\r\nout float v_isSemicircle;\r\nout vec2 v_center;\r\nout vec2 v_radiusDirection;"], ["circle-invars", "\r\nin float v_isCircle;\r\nin float v_isSemicircle;\r\nin vec2 v_center;\r\nin vec2 v_radiusDirection;"], ["plots-fragment", "\r\nfloat plotPct(float targetY, float y, float width) {\r\n  return step(abs(targetY - y), width);\r\n}\r\n\r\nfloat smoothPlotPct(float targetY, float y, float width) {\r\n  return smoothstep(targetY - width, targetY, y) - smoothstep(targetY, targetY + width,  y);\r\n}\r\n\r\nfloat innerEdge(in float radius, in float width, in float dist) {\r\n  return step(radius - width, dist);\r\n}\r\n\r\nfloat smoothEdge(in float radius, in float width, in float dist) {\r\n  return smoothstep(radius - width, radius + width, dist);\r\n}\r\n\r\nfloat smoothInnerEdge(in float radius, in float width, in float dist) {\r\n  return smoothstep(radius - width, radius, dist);\r\n}\r\n\r\nfloat smoothOuterEdge(in float radius, in float width, in float dist) {\r\n  return smoothstep(radius, radius + width, dist);\r\n}"], ["circles-fragment", "\r\nfloat circleDist(in vec2 center, in float radius, in vec2 p){\r\n  vec2 cp = p - center;\r\n\t// return dot(cp, cp) * 4.0;\r\n  return length(cp);\r\n}\r\n\r\nvec4 semicircle(vec2 center, vec2 radiusDirection, vec4 fillColor, vec2 p) {\r\n  float radius = length(radiusDirection);\r\n  vec2 fragDirection = p - center;\r\n  float dist = length(fragDirection);\r\n  float pct = smoothEdge(radius, fwidth(dist), dist);\r\n  vec4 color = mix(fillColor, transparent, pct);\r\n  color = mix(transparent, color, step(0.0, dot(fragDirection, radiusDirection)));\r\n  return color;\r\n}\r\n\r\nvec4 circle(vec2 center, float radius, vec4 fillColor, vec2 p) {\r\n  float dist = circleDist(center, radius, p);\r\n  float pct = smoothEdge(radius, fwidth(dist), dist);\r\n  vec4 color = mix(fillColor, transparent, pct);\r\n  return color;\r\n}\r\n\r\nvec4 circle(vec2 center, float radius, float strokeWidth, vec4 fillColor, vec4 strokeColor, vec2 p) {\r\n  vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);\r\n  float bw = max(strokeWidth, 0.0001);\r\n  float dist = circleDist(center, radius, p);\r\n  float fillPct = innerEdge(radius, bw, dist);\r\n  float bmult = step(radius, dist);\r\n  vec4 fill = mix(fillColor, strokeColor, fillPct);\r\n  return mix(fill, transparent, bmult);\r\n}\r\n\r\nvec4 smoothCircle(vec2 center, float radius, float strokeWidth, vec4 fillColor, vec4 strokeColor, vec2 p) {\r\n  vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);\r\n  float bw = max(strokeWidth, 0.0001);\r\n  float iw = bw * 0.01;\r\n  float ow = bw * 0.02;\r\n  float ir = radius - bw + iw;\r\n  float or = radius - ow;\r\n  float dist = circleDist(center, radius, p);\r\n  float fillPct = smoothInnerEdge(ir, iw, dist);\r\n  float bordPct = smoothOuterEdge(or, ow, dist);\r\n  vec4 fill = mix(fillColor, strokeColor, fillPct);\r\n  vec4 bord = mix(strokeColor, transparent, bordPct);\r\n  float bmult = 1.0 - step(bordPct, 0.0);\r\n  return mix(fill, bord, bmult);\r\n}"], ["semicircle-color-fragment", "\r\n  vec4 semicircleColor = semicircle(v_center, v_radiusDirection, v_fillColor, gl_FragCoord.xy);\r\n  color = mix(color, semicircleColor, v_isSemicircle);"], ["circle-color-fragment", "\r\n  vec4 circleColor = circle(v_center, length(v_radiusDirection), v_fillColor, gl_FragCoord.xy);\r\n  color = mix(color, circleColor, v_isCircle);"], ["lines2d-vertex", "\r\n#include vec2\r\n#include coordinate-conversion-vertex\r\nconst int CAP_BUTT = 0;\r\nconst int CAP_ROUND = 1;\r\nconst int CAP_SQUARE = 2;\r\nconst int JOIN_ROUND = 1;\r\nconst int JOIN_BEVEL = 3;\r\nconst int JOIN_MITER = 4;\r\n\r\nconst int CAP_LINE = 5;\r\n\r\nconst vec2 emptyVertex = vec2(0.0);\r\n\r\nfloat capFlags[] = float[6](0.0, 0.0, 0.0, 0.0, 0.0, 0.0);\r\n\r\nconst vec2 lineTemplate[] = vec2[18](\r\n  // Start\r\n  vec2(0.5, -0.5),\r\n  vec2(0.0, -0.5),\r\n  vec2(0.0,  0.5),\r\n\r\n  vec2(0.5, -0.5),\r\n  vec2(0.0,  0.5),\r\n  vec2(0.5,  0.5),\r\n\r\n  // Line\r\n  vec2(0.0, -0.5),\r\n  vec2(1.0, -0.5),\r\n  vec2(1.0,  0.5),\r\n\r\n  vec2(0.0, -0.5),\r\n  vec2(1.0,  0.5),\r\n  vec2(0.0,  0.5),\r\n\r\n  // End\r\n  vec2(0.0, -0.5),\r\n  vec2(0.5, -0.5),\r\n  vec2(0.5,  0.5),\r\n\r\n  vec2(0.0, -0.5),\r\n  vec2(0.5,  0.5),\r\n  vec2(0.0,  0.5)\r\n);\r\n\r\nvoid setCapFlag(int cap, float value) {\r\n  capFlags[CAP_SQUARE] = 0.0;\r\n  capFlags[CAP_ROUND] = 0.0;\r\n  capFlags[JOIN_BEVEL] = 0.0;\r\n  capFlags[JOIN_MITER] = 0.0;\r\n  capFlags[CAP_LINE] = 0.0;\r\n  capFlags[cap] = value;\r\n}\r\n\r\nvec2 addSquareCap(vec2 point, vec2 direction, vec2 leftNormal, float lineWidth, int vertexIndex) {\r\n  vec2 offset = lineTemplate[vertexIndex];\r\n  vec2 vertex = point + direction * (lineWidth * offset.x) + leftNormal * (lineWidth * offset.y);\r\n  return vertex * capFlags[CAP_SQUARE];\r\n}\r\n\r\nvec2 addRoundCap(vec2 point, vec2 direction, vec2 leftNormal, float lineWidth, int vertexIndex, inout float isSemicircle, inout vec2 center, inout vec2 radiusDir) {\r\n  vec2 sCircleEdge = modelToScreen(point + direction * (lineWidth * 0.5));\r\n  isSemicircle = mix(isSemicircle, 1.0, capFlags[CAP_ROUND]);\r\n  center = mix(center, modelToScreen(point), capFlags[CAP_ROUND]);\r\n  radiusDir = mix(radiusDir, sCircleEdge - center, capFlags[CAP_ROUND]);\r\n  vec2 offset = lineTemplate[vertexIndex];\r\n  vec2 vertex = point + direction * (lineWidth * offset.x) + leftNormal * (lineWidth * offset.y);\r\n  return vertex * capFlags[CAP_ROUND];\r\n}\r\n\r\nvec2 addBevel(vec2 b, vec2 c, vec2 direction, float lineWidth, int vertexIndex) {\r\n  int id = vertexIndex % 6;\r\n\r\n  vec2 ab = direction;\r\n  vec2 cb = b - c;\r\n  vec2 joinDirection = ab + cb;\r\n  float abAsSecondPoint = float(id == 1);\r\n\r\n  // Make sure correct winding in case face culling is enabled.\r\n  abAsSecondPoint = mix(1.0 - abAsSecondPoint, abAsSecondPoint, isLeftOf(ab, cb));\r\n\r\n  vec2 edge = mix(cb, ab, abAsSecondPoint);\r\n  vec2 normal = normalize(perpToward(edge, joinDirection));\r\n  vec2 vertex = mix(b + normal * lineWidth * 0.5, b, float(id == 0));\r\n  return vertex * capFlags[JOIN_BEVEL] * float(id < 3); // Only using first triangle.\r\n}\r\n\r\nvec2 addMiter(vec2 a, vec2 b, vec2 c, float lineWidth, float miterLimit, int miterFallback, int vertexIndex) {\r\n  int vertexID = vertexIndex % 6;\r\n  int id = vertexID % 3;              // Vertex index for the current triangle.\r\n  float isFirstTriangle = float(vertexID < 3);\r\n\r\n  vec2 ab = b - a;\r\n  vec2 cb = b - c;\r\n  vec2 abDirection = normalize(ab);\r\n  vec2 joinDirection = ab + cb;\r\n  vec2 abNormal = perpToward(abDirection, joinDirection);\r\n  vec2 cbNormal = perpToward(normalize(cb), joinDirection);\r\n  vec2 d = b + abNormal * (lineWidth * 0.5);\r\n  vec2 e = b + cbNormal * (lineWidth * 0.5);\r\n  vec2 bd = d - b;\r\n  vec2 be = e - b;\r\n  vec2 miter = normalize(bd + be);\r\n\r\n  // Find the intersection of miter and the segment (2D plane) going through d.\r\n  float determinant = cross(abDirection, miter);\r\n  float t = cross(abDirection, bd) / determinant;\r\n  vec2 miterPoint = b + miter * t;\r\n\r\n  float useFallback = float(t > miterLimit);\r\n  capFlags[miterFallback] = mix(capFlags[miterFallback], 1.0, useFallback * capFlags[JOIN_MITER]);\r\n  capFlags[JOIN_MITER] = mix(capFlags[JOIN_MITER], 0.0, useFallback);\r\n\r\n  vec2 p2 = mix(e, d, isFirstTriangle);\r\n  vec2 edge = mix(be, bd, isFirstTriangle);\r\n  float miterAsP2 = isRightOf(miter, edge);\r\n\r\n  vec2 p[] = vec2[3]( b, mix(p2, miterPoint, miterAsP2), mix(miterPoint, p2, miterAsP2) );\r\n  return p[id] * capFlags[JOIN_MITER];\r\n}\r\n\r\nvec2 addCap(int cap, vec2 point, vec2 direction, vec2 leftNormal, float lineWidth, int vertexIndex, inout float isSemicircle, inout vec2 center, inout vec2 radiusDir) {\r\n  return addSquareCap(point, direction, leftNormal, lineWidth, vertexIndex)\r\n    + addRoundCap(point, direction, leftNormal, lineWidth, vertexIndex, isSemicircle, center, radiusDir);\r\n}\r\n\r\nvec2 addCap(int cap, float miterLimit, int miterFallback, vec2 point, vec2 a, vec2 b, vec2 c, vec2 direction, vec2 leftNormal, float lineWidth, int vertexIndex, out float isSemicircle, out vec2 center, out vec2 radiusDir) {\r\n  return addMiter(a, b, c, lineWidth, miterLimit, miterFallback, vertexIndex)\r\n    + addSquareCap(point, direction, leftNormal, lineWidth, vertexIndex)\r\n    + addRoundCap(point, direction, leftNormal, lineWidth, vertexIndex, isSemicircle, center, radiusDir)\r\n    + addBevel(point, c, direction, lineWidth, vertexIndex);\r\n}\r\n\r\nvec2 line2d(vec2 a, vec2 direction, vec2 leftNormal, float lineWidth, int vertexID) {\r\n  vec2 offset = lineTemplate[vertexID + 6];\r\n  vec2 vertex = a + direction * offset.x + leftNormal * (lineWidth * offset.y);\r\n  return vertex;\r\n}\r\n\r\nvec2 _line2d(vec2 a, vec2 direction, vec2 leftNormal, float lineWidth, int vertexID) {\r\n  vec2 vertex = line2d(a, direction, leftNormal, lineWidth, vertexID);\r\n  return vertex * capFlags[CAP_LINE];\r\n}\r\n\r\nvec2 line2d(vec2 a, vec2 b, float lineWidth, int cap, int vertexIndex, inout float isSemicircle, inout vec2 center, inout vec2 radiusDir) {\r\n  int section = vertexIndex / 6;\r\n  int vertexID = vertexIndex % 6;\r\n\r\n  vec2 direction = b - a;\r\n  vec2 normalizedDirection = normalize(direction);\r\n  vec2 leftNormal = perp(normalizedDirection);\r\n  setCapFlag(cap, float(section == 0));\r\n  vec2 startVertex = addCap(cap, a, -normalizedDirection, leftNormal, lineWidth, vertexIndex, isSemicircle, center,radiusDir);\r\n  setCapFlag(CAP_LINE, float(section == 1));\r\n  vec2 lineVertex = _line2d(a, direction, leftNormal, lineWidth, vertexID);\r\n  setCapFlag(cap, float(section == 2));\r\n  vec2 endVertex = addCap(cap, b, normalizedDirection, leftNormal, lineWidth, vertexIndex, isSemicircle, center, radiusDir);\r\n  return startVertex + lineVertex + endVertex;\r\n}\r\n\r\nvec2 linepath2d(vec2 a, vec2 b, vec2 c, float lineWidth, int lineCap, int lineJoin, float miterLimit, int miterFallback, int instance, int instanceCount, int vertexIndex, inout float isSemicircle, inout vec2 center, inout vec2 radiusDir) {\r\n  int section = vertexIndex / 6;\r\n  int vertexID = vertexIndex % 6;\r\n\r\n  int startCap = int(mix(float(CAP_BUTT), float(lineCap), float(instance == 0)));\r\n  int endCap = int(mix(float(lineJoin), float(lineCap), float(instance == instanceCount - 1)));\r\n\r\n  vec2 direction = b - a;\r\n  vec2 normalizedDirection = normalize(direction);\r\n  vec2 leftNormal = perp(normalizedDirection);\r\n  setCapFlag(startCap, float(section == 0));\r\n  vec2 startVertex = addCap(startCap, miterLimit, miterFallback, a, a, b, c, -normalizedDirection, leftNormal, lineWidth, vertexIndex, isSemicircle, center, radiusDir);\r\n  setCapFlag(CAP_LINE, float(section == 1));\r\n  vec2 lineVertex = line2d(a, direction, leftNormal, lineWidth, vertexID) * capFlags[CAP_LINE];\r\n  setCapFlag(endCap, float(section == 2));\r\n  vec2 endVertex = addCap(endCap, miterLimit, miterFallback, b, a, b, c, normalizedDirection, leftNormal, lineWidth, vertexIndex, isSemicircle, center, radiusDir);\r\n  return startVertex + lineVertex + endVertex;\r\n}"], ["vector2d", "\r\n#include vec2\r\n#include coordinate-conversion-vertex\r\n\r\nconst vec2 vecTemplate[] = vec2[9](\r\n  vec2(0.0, -0.5),\r\n  vec2(0.85, -0.5),\r\n  vec2(0.85,  0.5),\r\n\r\n  vec2(0.85,  0.5),\r\n  vec2(0.0,  0.5),\r\n  vec2(0.0, -0.5),\r\n\r\n  vec2(0.85, -1.0),\r\n  vec2(1.0,  0.0),\r\n  vec2(0.85,  1.0)\r\n);\r\n\r\nvec2 vector2d(vec2 vec, float lineWidth, int vertexID, out float isTip) {\r\n  isTip = step(7.0, float(gl_VertexID));\r\n  vec2 leftNormal = normalize(perp(vec));\r\n  vec2 offset = vecTemplate[vertexID];\r\n  return vec2(0.0) + vec * offset.x + leftNormal * (lineWidth * offset.y);\r\n }"], ["precision", "\r\nprecision mediump float;"], ["math-consts", "\r\n#define PI = 3.14156265358979323846\r\n#define TWO_PI = 6.28318530718"], ["transparent-color", "\r\nvec4 transparent = vec4(0.0);"], ["path-outvars", "\r\nout vec4 v_fillColor;\r\nout vec4 v_strokeColor;\r\nout float v_strokeWidth;"], ["path-invars", "\r\nin vec4 v_fillColor;\r\nin vec4 v_strokeColor;\r\nin float v_strokeWidth;"], ["out-color-fragment", "\r\nout vec4 glFragColor;"], ["init-color", "\r\n  vec4 color = v_fillColor;"], ["set-out-color", "\r\n  glFragColor = color;"], ["camera-ubo", "\r\nuniform camera {\r\n  vec4 canvasBounds; // x, y: upper left corner. z, w: width and height.\r\n  vec4 viewport;     // x, y: upper left corner. z, w: width and height.\r\n  mat4 projMat;\r\n  mat4 viewMat;\r\n};"], ["model-params", "\r\nuniform model {\r\n  mat4 modelMat;\r\n};\r\n// uniform mat4 modelMat;"], ["time", "\r\nuniform float uTime;"], ["use-time-vertex", "\r\n  gl_Position *= uTime / uTime;"], ["use-time-fragment", "\r\n  glFragColor *= uTime;"], ["", "\r\n    "]]));
var DefaultValues_shaderIncludeVertexTexture2d0 = "\r\nin vec2 a_texCoords0;\r\nout vec2 v_texCoords0;\r\n";
var DefaultValues_shaderIncludeUseVertexTexture2d0 = "\r\n  gl_Position *= vec4(a_texCoords0 / a_texCoords0, 1.0, 1.0);\r\n";
var DefaultValues_shaderIncludeFragmentTexture2d0 = "\r\nuniform sampler2D u_texture0;\r\nin vec2 v_texCoords0;\r\n";
var DefaultValues_shaderIncludeUseFragmentTexture2d0 = "\r\n  glFragColor *= texture(u_texture0, v_texCoords0);\r\n";

(function () {
  var enumerator = (0, _Seq.getEnumerator)((0, _List.ofSeq)((0, _Seq.rangeNumber)(0, 1, 15)));

  try {
    while (enumerator["System.Collections.IEnumerator.MoveNext"]()) {
      var i = enumerator["System.Collections.Generic.IEnumerator`1.get_Current"]() | 0;
      addShaderInclude((0, _String.toText)((0, _String.interpolate)("vertex-texture2d%P()", [i])), (0, _String.replace)(DefaultValues_shaderIncludeVertexTexture2d0, "0", (0, _String.toText)((0, _String.interpolate)("%P()", [i]))));
      addShaderInclude((0, _String.toText)((0, _String.interpolate)("use-vertex-texture2d%P()", [i])), (0, _String.replace)(DefaultValues_shaderIncludeUseVertexTexture2d0, "0", (0, _String.toText)((0, _String.interpolate)("%P()", [i]))));
      addShaderInclude((0, _String.toText)((0, _String.interpolate)("fragment-texture2d%P()", [i])), (0, _String.replace)(DefaultValues_shaderIncludeFragmentTexture2d0, "0", (0, _String.toText)((0, _String.interpolate)("%P()", [i]))));
      addShaderInclude((0, _String.toText)((0, _String.interpolate)("use-fragment-texture2d%P()", [i])), (0, _String.replace)(DefaultValues_shaderIncludeUseFragmentTexture2d0, "0", (0, _String.toText)((0, _String.interpolate)("%P()", [i]))));
    }
  } finally {
    enumerator.Dispose();
  }
})();

(0, _List.iterate)(function (tupledArg) {
  DefaultValues_addVertex(tupledArg[0], tupledArg[1]);
}, (0, _List.ofArray)([["emptyVertex", "#version 300 es\r\nvoid main() {\r\n  gl_Position = vec4(0.0, 0.0, 0.0, 0.0);\r\n}"], ["sharedCameraVertex2d", "#version 300 es\r\n#include precision\r\n#include camera-ubo\r\n\r\nvoid main() {\r\n  gl_Position = projMat * viewMat * vec4(0.0, 0.0, 0.0, 0.0);\r\n}"], ["", "\r\n    "]]));
(0, _List.iterate)(function (tupledArg) {
  DefaultValues_addFragment(tupledArg[0], tupledArg[1]);
}, (0, _List.ofArray)([["emptyFragment", "#version 300 es\r\nprecision mediump float;\r\n#include out-color-fragment\r\n\r\nvoid main() {\r\n  glFragColor = vec4(0.0, 0.0, 0.0, 0.0);\r\n}"], ["simpleFragment2d", "#version 300 es\r\n#include precision\r\n#include path-invars\r\n#include out-color-fragment\r\n\r\nvoid main() {\r\n  glFragColor = v_fillColor;\r\n}"], ["sharedFragment2d", "#version 300 es\r\n#include precision\r\n#include out-color-fragment\r\n\r\nvoid main() {\r\n  glFragColor = vec4(0.0, 0.0, 0.0, 0.0);\r\n}"], ["semicircleFragment2d", "#version 300 es\r\n#include precision\r\n#include transparent-color\r\n#include path-invars\r\n#include out-color-fragment\r\n#include circle-invars\r\n#include plots-fragment\r\n#include circles-fragment\r\n\r\nvoid main() {\r\n#include init-color\r\n#include semicircle-color-fragment\r\n#include set-out-color\r\n}"]]));
},{"./.fable/fable-library.3.0.0/Map.js":"../src/.fable/fable-library.3.0.0/Map.js","./.fable/fable-library.3.0.0/Util.js":"../src/.fable/fable-library.3.0.0/Util.js","./.fable/fable-library.3.0.0/Reflection.js":"../src/.fable/fable-library.3.0.0/Reflection.js","./.fable/fable-library.3.0.0/String.js":"../src/.fable/fable-library.3.0.0/String.js","./utils.fs.js":"../src/utils.fs.js","./.fable/fable-library.3.0.0/Set.js":"../src/.fable/fable-library.3.0.0/Set.js","./.fable/fable-library.3.0.0/RegExp.js":"../src/.fable/fable-library.3.0.0/RegExp.js","./.fable/fable-library.3.0.0/List.js":"../src/.fable/fable-library.3.0.0/List.js","./.fable/fable-library.3.0.0/Seq.js":"../src/.fable/fable-library.3.0.0/Seq.js"}],"../src/webgl_program_utils.fs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GlUniformInfo$reflection = GlUniformInfo$reflection;
exports.GlUboInfo$reflection = GlUboInfo$reflection;
exports.GlAttributeInfo$reflection = GlAttributeInfo$reflection;
exports.GlShader$reflection = GlShader$reflection;
exports.GlShaderSet$reflection = GlShaderSet$reflection;
exports.GlProgramInfo$reflection = GlProgramInfo$reflection;
exports.getRootName = getRootName;
exports.Utils_createProgramFromShaders = Utils_createProgramFromShaders;
exports.Utils_createProgram = Utils_createProgram;
exports.Utils_getVertexShader = Utils_getVertexShader;
exports.Utils_getFragmentShader = Utils_getFragmentShader;
exports.Utils_deleteVertexShader = Utils_deleteVertexShader;
exports.Utils_deleteFragmentShader = Utils_deleteFragmentShader;
exports.Utils_getShaderSet = Utils_getShaderSet;
exports.Utils_deleteShaderSet = Utils_deleteShaderSet;
exports.createProgramInfo = createProgramInfo;
exports.deleteProgramInfo = deleteProgramInfo;
exports.emptyProgramInfo = emptyProgramInfo;
exports.emptyUniformInfo = emptyUniformInfo;
exports.emptyUboInfo = emptyUboInfo;
exports.emptyAttributeInfo = emptyAttributeInfo;
exports.getUniform = getUniform;
exports.getUbo = getUbo;
exports.getAttribute = getAttribute;
exports.getUniformOrDefault = getUniformOrDefault;
exports.getUboOrDefault = getUboOrDefault;
exports.getAttributeOrDefault = getAttributeOrDefault;
exports.GlProgramInfo = exports.GlShaderSet = exports.GlShader = exports.GlAttributeInfo = exports.GlUboInfo = exports.GlUniformInfo = void 0;

var _Types = require("./.fable/fable-library.3.0.0/Types.js");

var _Reflection = require("./.fable/fable-library.3.0.0/Reflection.js");

var _webgl_typesFs = require("./webgl_types.fs.js");

var _Map = require("./.fable/fable-library.3.0.0/Map.js");

var _String = require("./.fable/fable-library.3.0.0/String.js");

var _webgl_shader_utilsFs = require("./webgl_shader_utils.fs.js");

var _Seq = require("./.fable/fable-library.3.0.0/Seq.js");

var _Array = require("./.fable/fable-library.3.0.0/Array.js");

var _Util = require("./.fable/fable-library.3.0.0/Util.js");

var _optionexFs = require("./optionex.fs.js");

var _List = require("./.fable/fable-library.3.0.0/List.js");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var GlUniformInfo = /*#__PURE__*/function (_Record) {
  _inherits(GlUniformInfo, _Record);

  var _super = _createSuper(GlUniformInfo);

  function GlUniformInfo(Index, Name, RootName, Location, Type, TypeInfo, ElementCount, ByteSize, Length, ArrayIndex, StartIndex, IsArray, BlockIndex, Offset, ArrayStride, MatrixStride, IsRowMajor, Children) {
    var _this;

    _classCallCheck(this, GlUniformInfo);

    _this = _super.call(this);
    _this.Index = Index | 0;
    _this.Name = Name;
    _this.RootName = RootName;
    _this.Location = Location;
    _this.Type = Type | 0;
    _this.TypeInfo = TypeInfo;
    _this.ElementCount = ElementCount | 0;
    _this.ByteSize = ByteSize | 0;
    _this.Length = Length | 0;
    _this.ArrayIndex = ArrayIndex | 0;
    _this.StartIndex = StartIndex | 0;
    _this.IsArray = IsArray;
    _this.BlockIndex = BlockIndex | 0;
    _this.Offset = Offset | 0;
    _this.ArrayStride = ArrayStride | 0;
    _this.MatrixStride = MatrixStride | 0;
    _this.IsRowMajor = IsRowMajor;
    _this.Children = Children;
    return _this;
  }

  return GlUniformInfo;
}(_Types.Record);

exports.GlUniformInfo = GlUniformInfo;

function GlUniformInfo$reflection() {
  return (0, _Reflection.record_type)("GlProgram.GlUniformInfo", [], GlUniformInfo, function () {
    return [["Index", _Reflection.int32_type], ["Name", _Reflection.string_type], ["RootName", _Reflection.string_type], ["Location", (0, _Reflection.class_type)("Browser.Types.WebGLUniformLocation")], ["Type", (0, _Reflection.enum_type)("WebGLTypes.GlType", _Reflection.int32_type, [["Unknown", 0], ["BYTE", 5120], ["SHORT", 5122], ["BOOL", 35670], ["BOOL_VEC2", 35671], ["BOOL_VEC3", 35672], ["BOOL_VEC4", 35673], ["FLOAT", 5126], ["HALF_FLOAT", 5131], ["FLOAT_MAT2x3", 35685], ["FLOAT_MAT2", 35674], ["FLOAT_MAT2x4", 35686], ["FLOAT_MAT3", 35675], ["FLOAT_MAT3x2", 35687], ["FLOAT_MAT3x4", 35688], ["FLOAT_MAT4", 35676], ["FLOAT_MAT4x2", 35689], ["FLOAT_MAT4x3", 35690], ["FLOAT_VEC2", 35664], ["FLOAT_VEC3", 35665], ["FLOAT_VEC4", 35666], ["INT", 5124], ["INT_VEC2", 35667], ["INT_VEC3", 35668], ["INT_VEC4", 35669], ["INT_SAMPLER_2D", 36298], ["INT_SAMPLER_2D_ARRAY", 36303], ["INT_SAMPLER_3D", 36299], ["INT_SAMPLER_CUBE", 36300], ["UNSIGNED_BYTE", 5121], ["UNSIGNED_SHORT", 5123], ["UNSIGNED_INT", 5125], ["UNSIGNED_INT_24_8", 34042], ["UNSIGNED_INT_SAMPLER_2D", 36306], ["UNSIGNED_INT_SAMPLER_2D_ARRAY", 36311], ["UNSIGNED_INT_SAMPLER_3D", 36307], ["UNSIGNED_INT_SAMPLER_CUBE", 36308], ["UNSIGNED_INT_VEC2", 36294], ["UNSIGNED_INT_VEC3", 36295], ["UNSIGNED_INT_VEC4", 36296], ["SAMPLER_2D", 35678], ["SAMPLER_2D_ARRAY", 36289], ["SAMPLER_2D_ARRAY_SHADOW", 36292], ["SAMPLER_2D_SHADOW", 35682], ["SAMPLER_3D", 35679], ["SAMPLER_CUBE", 35680], ["SAMPLER_CUBE_SHADOW", 36293]])], ["TypeInfo", (0, _webgl_typesFs.GlTypeInfo$reflection)()], ["ElementCount", _Reflection.int32_type], ["ByteSize", _Reflection.int32_type], ["Length", _Reflection.int32_type], ["ArrayIndex", _Reflection.int32_type], ["StartIndex", _Reflection.int32_type], ["IsArray", _Reflection.bool_type], ["BlockIndex", _Reflection.int32_type], ["Offset", _Reflection.int32_type], ["ArrayStride", _Reflection.int32_type], ["MatrixStride", _Reflection.int32_type], ["IsRowMajor", _Reflection.bool_type], ["Children", (0, _Reflection.array_type)(GlUniformInfo$reflection())]];
  });
}

var GlUboInfo = /*#__PURE__*/function (_Record2) {
  _inherits(GlUboInfo, _Record2);

  var _super2 = _createSuper(GlUboInfo);

  function GlUboInfo(Name, BlockIndex, ByteSize, InVertexShader, InFragmentShader, Uniforms) {
    var _this2;

    _classCallCheck(this, GlUboInfo);

    _this2 = _super2.call(this);
    _this2.Name = Name;
    _this2.BlockIndex = BlockIndex | 0;
    _this2.ByteSize = ByteSize | 0;
    _this2.InVertexShader = InVertexShader;
    _this2.InFragmentShader = InFragmentShader;
    _this2.Uniforms = Uniforms;
    return _this2;
  }

  return GlUboInfo;
}(_Types.Record);

exports.GlUboInfo = GlUboInfo;

function GlUboInfo$reflection() {
  return (0, _Reflection.record_type)("GlProgram.GlUboInfo", [], GlUboInfo, function () {
    return [["Name", _Reflection.string_type], ["BlockIndex", _Reflection.int32_type], ["ByteSize", _Reflection.int32_type], ["InVertexShader", _Reflection.bool_type], ["InFragmentShader", _Reflection.bool_type], ["Uniforms", (0, _Reflection.list_type)(GlUniformInfo$reflection())]];
  });
}

var GlAttributeInfo = /*#__PURE__*/function (_Record3) {
  _inherits(GlAttributeInfo, _Record3);

  var _super3 = _createSuper(GlAttributeInfo);

  function GlAttributeInfo(Index, Name, Location, Type, TypeInfo) {
    var _this3;

    _classCallCheck(this, GlAttributeInfo);

    _this3 = _super3.call(this);
    _this3.Index = Index | 0;
    _this3.Name = Name;
    _this3.Location = Location | 0;
    _this3.Type = Type | 0;
    _this3.TypeInfo = TypeInfo;
    return _this3;
  }

  return GlAttributeInfo;
}(_Types.Record);

exports.GlAttributeInfo = GlAttributeInfo;

function GlAttributeInfo$reflection() {
  return (0, _Reflection.record_type)("GlProgram.GlAttributeInfo", [], GlAttributeInfo, function () {
    return [["Index", _Reflection.int32_type], ["Name", _Reflection.string_type], ["Location", _Reflection.int32_type], ["Type", (0, _Reflection.enum_type)("WebGLTypes.GlType", _Reflection.int32_type, [["Unknown", 0], ["BYTE", 5120], ["SHORT", 5122], ["BOOL", 35670], ["BOOL_VEC2", 35671], ["BOOL_VEC3", 35672], ["BOOL_VEC4", 35673], ["FLOAT", 5126], ["HALF_FLOAT", 5131], ["FLOAT_MAT2x3", 35685], ["FLOAT_MAT2", 35674], ["FLOAT_MAT2x4", 35686], ["FLOAT_MAT3", 35675], ["FLOAT_MAT3x2", 35687], ["FLOAT_MAT3x4", 35688], ["FLOAT_MAT4", 35676], ["FLOAT_MAT4x2", 35689], ["FLOAT_MAT4x3", 35690], ["FLOAT_VEC2", 35664], ["FLOAT_VEC3", 35665], ["FLOAT_VEC4", 35666], ["INT", 5124], ["INT_VEC2", 35667], ["INT_VEC3", 35668], ["INT_VEC4", 35669], ["INT_SAMPLER_2D", 36298], ["INT_SAMPLER_2D_ARRAY", 36303], ["INT_SAMPLER_3D", 36299], ["INT_SAMPLER_CUBE", 36300], ["UNSIGNED_BYTE", 5121], ["UNSIGNED_SHORT", 5123], ["UNSIGNED_INT", 5125], ["UNSIGNED_INT_24_8", 34042], ["UNSIGNED_INT_SAMPLER_2D", 36306], ["UNSIGNED_INT_SAMPLER_2D_ARRAY", 36311], ["UNSIGNED_INT_SAMPLER_3D", 36307], ["UNSIGNED_INT_SAMPLER_CUBE", 36308], ["UNSIGNED_INT_VEC2", 36294], ["UNSIGNED_INT_VEC3", 36295], ["UNSIGNED_INT_VEC4", 36296], ["SAMPLER_2D", 35678], ["SAMPLER_2D_ARRAY", 36289], ["SAMPLER_2D_ARRAY_SHADOW", 36292], ["SAMPLER_2D_SHADOW", 35682], ["SAMPLER_3D", 35679], ["SAMPLER_CUBE", 35680], ["SAMPLER_CUBE_SHADOW", 36293]])], ["TypeInfo", (0, _webgl_typesFs.GlTypeInfo$reflection)()]];
  });
}

var GlShader = /*#__PURE__*/function (_Record4) {
  _inherits(GlShader, _Record4);

  var _super4 = _createSuper(GlShader);

  function GlShader(ShaderId, Shader, ReferenceCount) {
    var _this4;

    _classCallCheck(this, GlShader);

    _this4 = _super4.call(this);
    _this4.ShaderId = ShaderId;
    _this4.Shader = Shader;
    _this4.ReferenceCount = ReferenceCount | 0;
    return _this4;
  }

  return GlShader;
}(_Types.Record);

exports.GlShader = GlShader;

function GlShader$reflection() {
  return (0, _Reflection.record_type)("GlProgram.GlShader", [], GlShader, function () {
    return [["ShaderId", _Reflection.string_type], ["Shader", (0, _Reflection.class_type)("Browser.Types.WebGLShader")], ["ReferenceCount", _Reflection.int32_type]];
  });
}

var GlShaderSet = /*#__PURE__*/function (_Record5) {
  _inherits(GlShaderSet, _Record5);

  var _super5 = _createSuper(GlShaderSet);

  function GlShaderSet(VertexShaderId, FragmentShaderId, VertexShader, FragmentShader, Uniforms, Ubos, Attributes, ReferenceCount) {
    var _this5;

    _classCallCheck(this, GlShaderSet);

    _this5 = _super5.call(this);
    _this5.VertexShaderId = VertexShaderId;
    _this5.FragmentShaderId = FragmentShaderId;
    _this5.VertexShader = VertexShader;
    _this5.FragmentShader = FragmentShader;
    _this5.Uniforms = Uniforms;
    _this5.Ubos = Ubos;
    _this5.Attributes = Attributes;
    _this5.ReferenceCount = ReferenceCount | 0;
    return _this5;
  }

  return GlShaderSet;
}(_Types.Record);

exports.GlShaderSet = GlShaderSet;

function GlShaderSet$reflection() {
  return (0, _Reflection.record_type)("GlProgram.GlShaderSet", [], GlShaderSet, function () {
    return [["VertexShaderId", _Reflection.string_type], ["FragmentShaderId", _Reflection.string_type], ["VertexShader", GlShader$reflection()], ["FragmentShader", GlShader$reflection()], ["Uniforms", (0, _Reflection.list_type)(GlUniformInfo$reflection())], ["Ubos", (0, _Reflection.list_type)(GlUboInfo$reflection())], ["Attributes", (0, _Reflection.list_type)(GlAttributeInfo$reflection())], ["ReferenceCount", _Reflection.int32_type]];
  });
}

var GlProgramInfo = /*#__PURE__*/function (_Record6) {
  _inherits(GlProgramInfo, _Record6);

  var _super6 = _createSuper(GlProgramInfo);

  function GlProgramInfo(Gl, Program, ShaderSet, Uniforms, Ubos, Attributes) {
    var _this6;

    _classCallCheck(this, GlProgramInfo);

    _this6 = _super6.call(this);
    _this6.Gl = Gl;
    _this6.Program = Program;
    _this6.ShaderSet = ShaderSet;
    _this6.Uniforms = Uniforms;
    _this6.Ubos = Ubos;
    _this6.Attributes = Attributes;
    return _this6;
  }

  return GlProgramInfo;
}(_Types.Record);

exports.GlProgramInfo = GlProgramInfo;

function GlProgramInfo$reflection() {
  return (0, _Reflection.record_type)("GlProgram.GlProgramInfo", [], GlProgramInfo, function () {
    return [["Gl", (0, _Reflection.class_type)("Browser.Types.WebGLRenderingContext")], ["Program", (0, _Reflection.class_type)("Browser.Types.WebGLProgram")], ["ShaderSet", GlShaderSet$reflection()], ["Uniforms", (0, _Reflection.list_type)(GlUniformInfo$reflection())], ["Ubos", (0, _Reflection.list_type)(GlUboInfo$reflection())], ["Attributes", (0, _Reflection.list_type)(GlAttributeInfo$reflection())]];
  });
}

var _emptyProgramInfo = void 0;

var vertexShaders = (0, _Map.empty)();
var fragmentShaders = (0, _Map.empty)();
var shaderSets = (0, _Map.empty)();

function getRootName(name) {
  var matchValue = name.indexOf("[") | 0;

  if (matchValue === -1) {
    return name;
  } else {
    var index = matchValue | 0;
    return name.slice(0, index - 1 + 1);
  }
}

function Utils_createShaderSetKey(vertexId, fragmentId) {
  return (0, _String.toText)((0, _String.interpolate)("%P()_%P()", [vertexId, fragmentId]));
}

function Utils_createProgramFromShaders(gl, vertexShader, fragmentShader) {
  var program = gl.createProgram();
  gl.attachShader(program, vertexShader);
  gl.attachShader(program, fragmentShader);
  gl.linkProgram(program);
  var success = gl.getProgramParameter(program, gl.LINK_STATUS);

  if (success) {
    return program;
  } else {
    var msg = gl.getProgramInfoLog(program);
    gl.deleteProgram(program);
    var exn = new Error(msg);
    throw exn;
  }
}

function Utils_createProgram(gl, vertexSource, fragmentSource) {
  var vertexShader = (0, _webgl_shader_utilsFs.createShader)(gl, gl.VERTEX_SHADER, vertexSource);
  var fragmentShader = (0, _webgl_shader_utilsFs.createShader)(gl, gl.FRAGMENT_SHADER, fragmentSource);
  return Utils_createProgramFromShaders(gl, vertexShader, fragmentShader);
}

function Utils_createUniformInfos(gl, program) {
  var count = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
  var indicies = Int32Array.from((0, _Seq.rangeNumber)(0, 1, count - 1));

  var getValues = function getValues(pname) {
    return gl.getActiveUniforms(program, indicies, pname);
  };

  var blockIndicies = getValues(35386);
  var offsets = getValues(35387);
  var arrayStrides = getValues(35388);
  var matrixStrides = getValues(35389);
  var rowMajors = getValues(35390);

  var createInfo = function createInfo(index) {
    var unitVar;
    var uniform = gl.getActiveUniform(program, index);
    var uniformType = ~~uniform.type | 0;
    var ti = (0, _webgl_typesFs.getGlTypeInfo)(uniformType);
    var isArray = uniform.size > 1;
    var blockIndex = blockIndicies[index] | 0;
    var arrayStride = arrayStrides[index] | 0;
    var matrixStride = matrixStrides[index] | 0;
    var length = ~~uniform.size | 0;
    var byteSize = (blockIndex < 0 ? ti.ByteSize * length : isArray ? arrayStride * length : ti.IsMatrix ? ti.MatrixColCount * matrixStride : ti.ByteSize) | 0;
    return new GlUniformInfo(index, uniform.name, getRootName(uniform.name), gl.getUniformLocation(program, uniform.name), uniformType, ti, ti.ElementCount, byteSize, length, -1, -1, isArray, blockIndex, offsets[index], arrayStride, matrixStride, (unitVar = rowMajors[index], false), []);
  };

  var createMatrixColumn = function createMatrixColumn(info, index_1) {
    var matchValue, offset;
    var name = (0, _String.toText)((0, _String.interpolate)("%P()Col%P()", [info.RootName, index_1]));
    var ti_1 = info.TypeInfo;
    var bti = (0, _webgl_typesFs.getGlTypeInfo)(info.TypeInfo.BaseType);
    return new GlUniformInfo(info.Index, name, info.RootName, gl.getUniformLocation(program, name), ti_1.BaseType, bti, ti_1.MatrixRowCount, bti.ByteSize * ti_1.MatrixRowCount, 1, index_1, index_1 * ti_1.MatrixRowCount, false, info.BlockIndex, (matchValue = info.Offset | 0, matchValue === -1 ? info.Offset : (offset = matchValue | 0, offset + info.MatrixStride * index_1)), info.ArrayStride, info.MatrixStride, info.IsRowMajor, info.Children);
  };

  var createMatrixColumns = function createMatrixColumns(info_1) {
    var array = Int32Array.from((0, _Seq.rangeNumber)(0, 1, info_1.TypeInfo.MatrixColCount - 1));
    return (0, _Array.map)((0, _Util.partialApply)(1, createMatrixColumn, [info_1]), array);
  };

  var addMatrixChildren = function addMatrixChildren(info_2) {
    if (info_2.TypeInfo.IsMatrix) {
      return new GlUniformInfo(info_2.Index, info_2.Name, info_2.RootName, info_2.Location, info_2.Type, info_2.TypeInfo, info_2.ElementCount, info_2.ByteSize, info_2.Length, info_2.ArrayIndex, info_2.StartIndex, info_2.IsArray, info_2.BlockIndex, info_2.Offset, info_2.ArrayStride, info_2.MatrixStride, info_2.IsRowMajor, createMatrixColumns(info_2));
    } else {
      return info_2;
    }
  };

  var createArrayElement = function createArrayElement(info_3, index_2) {
    var matchValue_1, offset_1;
    var name_1 = (0, _String.toText)((0, _String.interpolate)("%P()[%P()]", [info_3.RootName, index_2]));
    var ti_2 = info_3.TypeInfo;
    var bti_1 = (0, _webgl_typesFs.getGlTypeInfo)(info_3.TypeInfo.BaseType);
    return new GlUniformInfo(info_3.Index, name_1, info_3.RootName, gl.getUniformLocation(program, name_1), ti_2.BaseType, bti_1, info_3.ElementCount, info_3.TypeInfo.ByteSize, 1, index_2, index_2 * info_3.ElementCount, false, info_3.BlockIndex, (matchValue_1 = info_3.Offset | 0, matchValue_1 === -1 ? info_3.Offset : (offset_1 = matchValue_1 | 0, offset_1 + info_3.ArrayStride * index_2)), info_3.ArrayStride, info_3.MatrixStride, info_3.IsRowMajor, info_3.Children);
  };

  var adjustStartIndicies = function adjustStartIndicies(info_4) {
    var loop = function loop(parent, info_5) {
      var parentStartIndex = (0, _optionexFs.executeDefault)(0, function (p) {
        return p.StartIndex;
      }, parent) | 0;
      var info_6 = new GlUniformInfo(info_5.Index, info_5.Name, info_5.RootName, info_5.Location, info_5.Type, info_5.TypeInfo, info_5.ElementCount, info_5.ByteSize, info_5.Length, info_5.ArrayIndex, info_5.ArrayIndex * info_5.ElementCount + parentStartIndex, info_5.IsArray, info_5.BlockIndex, info_5.Offset, info_5.ArrayStride, info_5.MatrixStride, info_5.IsRowMajor, info_5.Children);

      if (info_6.Children.length > 0) {
        var parent_1 = info_6;
        return new GlUniformInfo(info_6.Index, info_6.Name, info_6.RootName, info_6.Location, info_6.Type, info_6.TypeInfo, info_6.ElementCount, info_6.ByteSize, info_6.Length, info_6.ArrayIndex, info_6.StartIndex, info_6.IsArray, info_6.BlockIndex, info_6.Offset, info_6.ArrayStride, info_6.MatrixStride, info_6.IsRowMajor, (0, _Array.map)((0, _Util.partialApply)(1, loop, [parent_1]), info_6.Children));
      } else {
        return info_6;
      }
    };

    return loop(void 0, info_4);
  };

  var adjustOffsets = function adjustOffsets(info_7) {
    var adjustChild = function adjustChild(root, indexer, info_8) {
      return new GlUniformInfo(info_8.Index, info_8.Name, info_8.RootName, info_8.Location, info_8.Type, info_8.TypeInfo, info_8.ElementCount, info_8.ByteSize, info_8.Length, info_8.ArrayIndex, info_8.StartIndex, info_8.IsArray, info_8.BlockIndex, info_8.Offset - root.Offset + indexer.Offset, info_8.ArrayStride, info_8.MatrixStride, info_8.IsRowMajor, (0, _Array.map)((0, _Util.partialApply)(1, adjustChild, [root, indexer]), info_8.Children));
    };

    var adjustIndexer = function adjustIndexer(root_1, indexer_1) {
      return new GlUniformInfo(indexer_1.Index, indexer_1.Name, indexer_1.RootName, indexer_1.Location, indexer_1.Type, indexer_1.TypeInfo, indexer_1.ElementCount, indexer_1.ByteSize, indexer_1.Length, indexer_1.ArrayIndex, indexer_1.StartIndex, indexer_1.IsArray, indexer_1.BlockIndex, indexer_1.Offset, indexer_1.ArrayStride, indexer_1.MatrixStride, indexer_1.IsRowMajor, (0, _Array.map)((0, _Util.partialApply)(1, adjustChild, [root_1, indexer_1]), indexer_1.Children));
    };

    return new GlUniformInfo(info_7.Index, info_7.Name, info_7.RootName, info_7.Location, info_7.Type, info_7.TypeInfo, info_7.ElementCount, info_7.ByteSize, info_7.Length, info_7.ArrayIndex, info_7.StartIndex, info_7.IsArray, info_7.BlockIndex, info_7.Offset, info_7.ArrayStride, info_7.MatrixStride, info_7.IsRowMajor, (0, _Array.map)((0, _Util.partialApply)(1, adjustIndexer, [info_7]), info_7.Children));
  };

  var createArrayElements = function createArrayElements(info_9) {
    var array_5 = Int32Array.from((0, _Seq.rangeNumber)(0, 1, info_9.Length - 1));
    return (0, _Array.map)((0, _Util.partialApply)(1, createArrayElement, [info_9]), array_5);
  };

  var addArrayChildren = function addArrayChildren(info_10) {
    var info_11 = new GlUniformInfo(info_10.Index, info_10.Name, info_10.RootName, info_10.Location, info_10.Type, info_10.TypeInfo, info_10.ElementCount, info_10.ByteSize, info_10.Length, 0, 0, info_10.IsArray, info_10.BlockIndex, info_10.Offset, info_10.ArrayStride, info_10.MatrixStride, info_10.IsRowMajor, info_10.Children);

    if (info_11.IsArray) {
      return adjustOffsets(adjustStartIndicies(new GlUniformInfo(info_11.Index, info_11.Name, info_11.RootName, info_11.Location, info_11.Type, info_11.TypeInfo, info_11.ElementCount, info_11.ByteSize, info_11.Length, info_11.ArrayIndex, info_11.StartIndex, info_11.IsArray, info_11.BlockIndex, info_11.Offset, info_11.ArrayStride, info_11.MatrixStride, info_11.IsRowMajor, createArrayElements(info_11))));
    } else {
      return info_11;
    }
  };

  return (0, _Array.map)(function (arg_1) {
    return addArrayChildren(addMatrixChildren(createInfo(arg_1)));
  }, indicies);
}

function Utils_getUboInfos(gl, program, uniforms) {
  var createInfo = function createInfo(i) {
    var getParam = function getParam(pname) {
      return gl.getActiveUniformBlockParameter(program, i, pname);
    };

    return new GlUboInfo(gl.getActiveUniformBlockName(program, i), i, getParam(35392), getParam(35396), getParam(35398), (0, _List.ofArray)(uniforms.filter(function (x) {
      return x.BlockIndex === i;
    })));
  };

  var loop = function loop(ubos_mut, i_1_mut) {
    loop: while (true) {
      var ubos = ubos_mut,
          i_1 = i_1_mut;

      if (i_1 === 0) {
        return ubos;
      } else {
        var i_2 = i_1 | 0;
        ubos_mut = (0, _List.cons)(createInfo(i_2 - 1), ubos);
        i_1_mut = i_2 - 1;
        continue loop;
      }

      break;
    }
  };

  var count = gl.getProgramParameter(program, 35382);
  return loop((0, _List.empty)(), count);
}

function Utils_getAttributeInfos(gl, program) {
  var createInfo = function createInfo(i) {
    var attrib = gl.getActiveAttrib(program, i);
    var attributeType = ~~attrib.type | 0;
    return new GlAttributeInfo(~~i, attrib.name, ~~gl.getAttribLocation(program, attrib.name), attributeType, (0, _webgl_typesFs.getGlTypeInfo)(attributeType));
  };

  var count = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);
  return (0, _List.where)(function (info) {
    return !(info.Name.indexOf("gl_") === 0);
  }, (0, _List.map)(createInfo, (0, _List.ofSeq)((0, _Seq.rangeNumber)(0, 1, count - 1))));
}

function Utils_getVertexShader(gl, shaderId) {
  var matchValue = (0, _Map.tryFind)(shaderId, vertexShaders);

  if (matchValue == null) {
    var source = (0, _webgl_shader_utilsFs.getVertexShaderSource)(shaderId);
    var shader_1 = new GlShader(shaderId, (0, _webgl_shader_utilsFs.createShader)(gl, gl.VERTEX_SHADER, source), 0);
    vertexShaders = (0, _Map.FSharpMap__Add)(vertexShaders, shaderId, shader_1);
    return shader_1;
  } else {
    var shader = matchValue;
    return shader;
  }
}

function Utils_getFragmentShader(gl, shaderId) {
  var matchValue = (0, _Map.tryFind)(shaderId, fragmentShaders);

  if (matchValue == null) {
    var source = (0, _webgl_shader_utilsFs.getFragmentShaderSource)(shaderId);
    var shader_1 = new GlShader(shaderId, (0, _webgl_shader_utilsFs.createShader)(gl, gl.FRAGMENT_SHADER, source), 0);
    fragmentShaders = (0, _Map.FSharpMap__Add)(fragmentShaders, shaderId, shader_1);
    return shader_1;
  } else {
    var shader = matchValue;
    return shader;
  }
}

function Utils_deleteVertexShader(gl, shader) {
  shader.ReferenceCount = shader.ReferenceCount - 1;

  if (shader.ReferenceCount <= 0) {
    vertexShaders = (0, _Map.FSharpMap__Remove)(vertexShaders, shader.ShaderId);
    gl.deleteShader(shader.Shader);
  }
}

function Utils_deleteFragmentShader(gl, shader) {
  shader.ReferenceCount = shader.ReferenceCount - 1;

  if (shader.ReferenceCount <= 0) {
    fragmentShaders = (0, _Map.FSharpMap__Remove)(fragmentShaders, shader.ShaderId);
    gl.deleteShader(shader.Shader);
  }
}

function Utils_getShaderSet(gl, vertexId, fragmentId) {
  var key = Utils_createShaderSetKey(vertexId, fragmentId);
  var matchValue = (0, _Map.tryFind)(key, shaderSets);

  if (matchValue == null) {
    var vertex = Utils_getVertexShader(gl, vertexId);
    var fragment = Utils_getFragmentShader(gl, fragmentId);
    var program = Utils_createProgramFromShaders(gl, vertex.Shader, fragment.Shader);
    var uniforms = Utils_createUniformInfos(gl, program);
    var shaderSet_1 = new GlShaderSet(vertexId, fragmentId, vertex, fragment, (0, _List.ofArray)(uniforms), Utils_getUboInfos(gl, program, uniforms), Utils_getAttributeInfos(gl, program), 1);
    gl.deleteProgram(program);
    shaderSets = (0, _Map.FSharpMap__Add)(shaderSets, key, shaderSet_1);
    return shaderSet_1;
  } else {
    var shaderSet = matchValue;
    shaderSet.ReferenceCount = shaderSet.ReferenceCount + 1;
    return shaderSet;
  }
}

function Utils_deleteShaderSet(gl, shaderSet) {
  shaderSet.ReferenceCount = shaderSet.ReferenceCount - 1;

  if (shaderSet.ReferenceCount <= 0) {
    Utils_deleteVertexShader(gl, shaderSet.VertexShader);
    Utils_deleteFragmentShader(gl, shaderSet.FragmentShader);
    var key = Utils_createShaderSetKey(shaderSet.VertexShaderId, shaderSet.FragmentShaderId);
    shaderSets = (0, _Map.FSharpMap__Remove)(shaderSets, key);
  }
}

function createProgramInfo(gl, vertexId, fragmentId) {
  var updateUniformLocation = function updateUniformLocation(program, uniform) {
    return new GlUniformInfo(uniform.Index, uniform.Name, uniform.RootName, gl.getUniformLocation(program, uniform.Name), uniform.Type, uniform.TypeInfo, uniform.ElementCount, uniform.ByteSize, uniform.Length, uniform.ArrayIndex, uniform.StartIndex, uniform.IsArray, uniform.BlockIndex, uniform.Offset, uniform.ArrayStride, uniform.MatrixStride, uniform.IsRowMajor, (0, _Array.map)((0, _Util.partialApply)(1, updateUniformLocation, [program]), uniform.Children));
  };

  var updateUboUniform = function updateUboUniform(uniforms, ubo) {
    return new GlUboInfo(ubo.Name, ubo.BlockIndex, ubo.ByteSize, ubo.InVertexShader, ubo.InFragmentShader, (0, _List.filter)(function (x) {
      return x.BlockIndex === ubo.BlockIndex;
    }, uniforms));
  };

  var updateAttributeLocation = function updateAttributeLocation(program_1, attribute) {
    return new GlAttributeInfo(attribute.Index, attribute.Name, ~~gl.getAttribLocation(program_1, attribute.Name), attribute.Type, attribute.TypeInfo);
  };

  var vertexSource = (0, _webgl_shader_utilsFs.getVertexShaderSource)(vertexId);
  var fragmentSource = (0, _webgl_shader_utilsFs.getFragmentShaderSource)(fragmentId);
  var program_2 = Utils_createProgram(gl, vertexSource, fragmentSource);
  var shaderSet = Utils_getShaderSet(gl, vertexId, fragmentId);
  shaderSet.VertexShader.ReferenceCount = shaderSet.VertexShader.ReferenceCount + 1;
  shaderSet.FragmentShader.ReferenceCount = shaderSet.FragmentShader.ReferenceCount + 1;
  var uniforms_1 = (0, _List.map)((0, _Util.partialApply)(1, updateUniformLocation, [program_2]), shaderSet.Uniforms);
  return new GlProgramInfo(gl, program_2, shaderSet, (0, _List.filter)(function (u) {
    return u.BlockIndex < 0;
  }, uniforms_1), (0, _List.map)((0, _Util.partialApply)(1, updateUboUniform, [uniforms_1]), shaderSet.Ubos), (0, _List.map)((0, _Util.partialApply)(1, updateAttributeLocation, [program_2]), shaderSet.Attributes));
}

function deleteProgramInfo(info) {
  var isEmpty;

  if (_emptyProgramInfo != null) {
    var empty = _emptyProgramInfo;
    isEmpty = (0, _Util.equalsSafe)(info, empty);
  } else {
    isEmpty = false;
  }

  if (!isEmpty) {
    Utils_deleteShaderSet(info.Gl, info.ShaderSet);
    info.Gl.deleteProgram(info.Program);
  }
}

function initEmptyProgramInfo(gl) {
  var programInfo = createProgramInfo(gl, "emptyVertex", "emptyFragment");
  _emptyProgramInfo = programInfo;
  return programInfo;
}

function emptyProgramInfo(gl) {
  if (_emptyProgramInfo == null) {
    return initEmptyProgramInfo(gl);
  } else {
    var programInfo = _emptyProgramInfo;
    return programInfo;
  }
}

function emptyUniformInfo(name) {
  return new GlUniformInfo(-1, name, getRootName(name), null, 0, (0, _webgl_typesFs.getGlTypeInfo)(5126), -1, -1, -1, -1, -1, false, -1, -1, -1, -1, false, []);
}

function emptyUboInfo(name) {
  return new GlUboInfo(name, -1, -1, false, false, (0, _List.empty)());
}

function emptyAttributeInfo(name) {
  return new GlAttributeInfo(-1, name, -1, 0, (0, _webgl_typesFs.getGlTypeInfo)(5126));
}

function allUniforms(info) {
  return (0, _Seq.delay)(function () {
    return (0, _Seq.append)(info.Uniforms, (0, _Seq.delay)(function () {
      return (0, _Seq.collect)(function (ubo) {
        return ubo.Uniforms;
      }, info.Ubos);
    }));
  });
}

function getUniform(name, info) {
  return (0, _Seq.tryFind)(function (i) {
    return i.Name === name;
  }, allUniforms(info));
}

function getUbo(name, info) {
  return (0, _List.tryFind)(function (i) {
    return i.Name === name;
  }, info.Ubos);
}

function getAttribute(name, info) {
  return (0, _List.tryFind)(function (i) {
    return i.Name === name;
  }, info.Attributes);
}

function getUniformOrDefault(name, info) {
  var matchValue = getUniform(name, info);

  if (matchValue == null) {
    return emptyUniformInfo(name);
  } else {
    var result = matchValue;
    return result;
  }
}

function getUboOrDefault(name, info) {
  var matchValue = getUbo(name, info);

  if (matchValue == null) {
    return emptyUboInfo(name);
  } else {
    var result = matchValue;
    return result;
  }
}

function getAttributeOrDefault(name, info) {
  var matchValue = getAttribute(name, info);

  if (matchValue == null) {
    return emptyAttributeInfo(name);
  } else {
    var result = matchValue;
    return result;
  }
}
},{"./.fable/fable-library.3.0.0/Types.js":"../src/.fable/fable-library.3.0.0/Types.js","./.fable/fable-library.3.0.0/Reflection.js":"../src/.fable/fable-library.3.0.0/Reflection.js","./webgl_types.fs.js":"../src/webgl_types.fs.js","./.fable/fable-library.3.0.0/Map.js":"../src/.fable/fable-library.3.0.0/Map.js","./.fable/fable-library.3.0.0/String.js":"../src/.fable/fable-library.3.0.0/String.js","./webgl_shader_utils.fs.js":"../src/webgl_shader_utils.fs.js","./.fable/fable-library.3.0.0/Seq.js":"../src/.fable/fable-library.3.0.0/Seq.js","./.fable/fable-library.3.0.0/Array.js":"../src/.fable/fable-library.3.0.0/Array.js","./.fable/fable-library.3.0.0/Util.js":"../src/.fable/fable-library.3.0.0/Util.js","./optionex.fs.js":"../src/optionex.fs.js","./.fable/fable-library.3.0.0/List.js":"../src/.fable/fable-library.3.0.0/List.js"}],"../src/glbuffer.fs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GlBuffer$reflection = GlBuffer$reflection;
exports.GlBuffer_$ctor_10C6D16C = GlBuffer_$ctor_10C6D16C;
exports.GlBuffer__get_BufferKind = GlBuffer__get_BufferKind;
exports.GlBuffer__get_Usage = GlBuffer__get_Usage;
exports.GlBuffer__get_Data = GlBuffer__get_Data;
exports.GlBuffer__get_AutoClean = GlBuffer__get_AutoClean;
exports.GlBuffer__set_AutoClean_Z1FBCCD16 = GlBuffer__set_AutoClean_Z1FBCCD16;
exports.GlBuffer__Init_Z6E89302B = GlBuffer__Init_Z6E89302B;
exports.GlBuffer__Delete = GlBuffer__Delete;
exports.GlBuffer__Clean_Z1FBCCD16 = GlBuffer__Clean_Z1FBCCD16;
exports.GlBuffer__DirtyRange_Z37302880 = GlBuffer__DirtyRange_Z37302880;
exports.GlBuffer__SetLength_Z524259A4 = GlBuffer__SetLength_Z524259A4;
exports.GlBuffer__Bind = GlBuffer__Bind;
exports.GlBuffer__BindBase_Z524259A4 = GlBuffer__BindBase_Z524259A4;
exports.GlBuffer__SetValuesRange_Z3EAA4E5D = GlBuffer__SetValuesRange_Z3EAA4E5D;
exports.GlBuffer__SetValuesOffset_Z59CA6BE1 = GlBuffer__SetValuesOffset_Z59CA6BE1;
exports.GlBuffer__SetValues_Z3EAA4E5D = GlBuffer__SetValues_Z3EAA4E5D;
exports.GlBuffer__SetValues_5975E3 = GlBuffer__SetValues_5975E3;
exports.GlBuffer__Update = GlBuffer__Update;
exports.GlBuffer = void 0;

var _typedarray_utilsFs = require("./typedarray_utils.fs.js");

var _webgl_typesFs = require("./webgl_types.fs.js");

var _Reflection = require("./.fable/fable-library.3.0.0/Reflection.js");

var _Util = require("./.fable/fable-library.3.0.0/Util.js");

var _Seq = require("./.fable/fable-library.3.0.0/Seq.js");

var _List = require("./.fable/fable-library.3.0.0/List.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GlBuffer = function GlBuffer(gl) {
  _classCallCheck(this, GlBuffer);

  this.gl = gl;
  this.isBuffered = false;
  this.dirtyOffset = 2147483647;
  this.dirtyEndOffset = -1;
  this.target = 34962;
  this.usage = 35044;
  this.factory = _typedarray_utilsFs.float32ArrayFactory;
  this.data = this.factory.Create(0);
  this.buffer = (0, _webgl_typesFs.GlCommon_getEmptyBuffer)(this.gl);
  this["BufferKind@"] = this.target;
  this["Usage@"] = this.usage;
  this["AutoClean@"] = true;
};

exports.GlBuffer = GlBuffer;

function GlBuffer$reflection() {
  return (0, _Reflection.class_type)("WebGLBuilders.GlBuffer", void 0, GlBuffer);
}

function GlBuffer_$ctor_10C6D16C(gl) {
  return new GlBuffer(gl);
}

function GlBuffer__get_BufferKind(__) {
  return __["BufferKind@"];
}

function GlBuffer__get_Usage(__) {
  return __["Usage@"];
}

function GlBuffer__get_Data(_) {
  return _.data;
}

function GlBuffer__get_AutoClean(__) {
  return __["AutoClean@"];
}

function GlBuffer__set_AutoClean_Z1FBCCD16(__, v) {
  __["AutoClean@"] = v;
}

function GlBuffer__Init_Z6E89302B(_, bufferTarget, bufferUsage, arrayFactory) {
  _.target = bufferTarget;
  _.usage = bufferUsage;
  _.factory = arrayFactory;
  _.buffer = _.gl.createBuffer();
}

function GlBuffer__Delete(_) {
  var empty = (0, _webgl_typesFs.GlCommon_getEmptyBuffer)(_.gl);

  if (!(0, _Util.equals)(_.buffer, empty)) {
    _.gl.deleteBuffer(_.buffer);
  }
}

function GlBuffer__Clean_Z1FBCCD16(_, buffered) {
  _.dirtyOffset = 2147483647;
  _.dirtyEndOffset = -1;
  _.isBuffered = buffered;
}

function GlBuffer__DirtyRange_Z37302880(_, startOffset, endOffset) {
  _.dirtyOffset = (0, _Util.min)(_Util.comparePrimitives, startOffset, _.dirtyOffset);
  _.dirtyEndOffset = (0, _Util.max)(_Util.comparePrimitives, endOffset, _.dirtyEndOffset);
  _.dirtyOffset = (0, _Util.max)(_Util.comparePrimitives, _.dirtyOffset, 0);
  _.dirtyEndOffset = (0, _Util.min)(_Util.comparePrimitives, _.dirtyEndOffset, _.data.length - 1);
}

function GlBuffer__SetLength_Z524259A4(this$, length) {
  if (length !== this$.data.length) {
    var length_1 = (0, _Util.max)(_Util.comparePrimitives, length, 0) | 0;
    this$.data = this$.factory.Create(length_1);
    this$.isBuffered = false;
    GlBuffer__DirtyRange_Z37302880(this$, 0, length_1 - 1);
  }
}

function GlBuffer__Bind(_) {
  (0, _webgl_typesFs.GlCommon_bindBuffer)(_.gl, _.target, _.buffer);
}

function GlBuffer__BindBase_Z524259A4(_, location) {
  (0, _webgl_typesFs.GlCommon_bindBufferBase)(_.gl, _.target, location, _.buffer);
}

function GlBuffer__SetValuesRange_Z3EAA4E5D(this$, values, startOffset, endOffset) {
  GlBuffer__DirtyRange_Z37302880(this$, startOffset, endOffset);
  var dataArray = this$.data;
  var enumerator = (0, _Seq.getEnumerator)((0, _List.ofSeq)((0, _Seq.rangeNumber)(startOffset, 1, endOffset)));

  try {
    while (enumerator["System.Collections.IEnumerator.MoveNext"]()) {
      var i = enumerator["System.Collections.Generic.IEnumerator`1.get_Current"]() | 0;
      dataArray[i] = values[i];
    }
  } finally {
    enumerator.Dispose();
  }
}

function GlBuffer__SetValuesOffset_Z59CA6BE1(this$, values, startOffset) {
  GlBuffer__DirtyRange_Z37302880(this$, startOffset, startOffset + values.length - 1);
  var value = this$.data.set(values, startOffset);
  void value;
}

function GlBuffer__SetValues_Z3EAA4E5D(this$, values, startOffset, endOffset) {
  if (this$.data.length !== values.length) {
    this$.data = this$.factory.Create(values);
    this$.isBuffered = false;
  } else {
    var value = this$.data.set(values);
    void value;
  }

  GlBuffer__DirtyRange_Z37302880(this$, startOffset, endOffset);
}

function GlBuffer__SetValues_5975E3(this$, values) {
  GlBuffer__SetValues_Z3EAA4E5D(this$, values, 0, values.length - 1);
}

function GlBuffer__Update(this$) {
  if (this$.dirtyEndOffset >= 0) {
    if (this$.isBuffered) {
      var dirtyLength = this$.dirtyEndOffset - this$.dirtyOffset + 1 | 0;
      var bytesPerIndex = ~~(this$.data.byteLength / this$.data.length) | 0;
      var startOffset = this$.dirtyOffset * bytesPerIndex | 0;
      (0, _webgl_typesFs.GlCommon_bufferSubData)(this$.gl, this$.target, startOffset, this$.data, this$.dirtyOffset, dirtyLength);
    } else {
      this$.isBuffered = GlBuffer__get_AutoClean(this$);
      (0, _webgl_typesFs.GlCommon_bufferData)(this$.gl, this$.target, this$.data, this$.usage);
    }
  }

  if (GlBuffer__get_AutoClean(this$)) {
    GlBuffer__Clean_Z1FBCCD16(this$, true);
  }
}
},{"./typedarray_utils.fs.js":"../src/typedarray_utils.fs.js","./webgl_types.fs.js":"../src/webgl_types.fs.js","./.fable/fable-library.3.0.0/Reflection.js":"../src/.fable/fable-library.3.0.0/Reflection.js","./.fable/fable-library.3.0.0/Util.js":"../src/.fable/fable-library.3.0.0/Util.js","./.fable/fable-library.3.0.0/Seq.js":"../src/.fable/fable-library.3.0.0/Seq.js","./.fable/fable-library.3.0.0/List.js":"../src/.fable/fable-library.3.0.0/List.js"}],"../src/matricies.fs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Mat2$reflection = Mat2$reflection;
exports.Mat2_$ctor_Z14AF5965 = Mat2_$ctor_Z14AF5965;
exports.Mat2_get_Identity = Mat2_get_Identity;
exports.Mat2_Create = Mat2_Create;
exports.Mat2__get_Values = Mat2__get_Values;
exports.Mat2__SetToIdentity = Mat2__SetToIdentity;
exports.Mat2__Set_Z33A93963 = Mat2__Set_Z33A93963;
exports.Mat2__RotationTrig_Z5A6DFDC9 = Mat2__RotationTrig_Z5A6DFDC9;
exports.Mat2__Rotation_41C9C3A4 = Mat2__Rotation_41C9C3A4;
exports.Mat2__RotationTrigReverse_Z5A6DFDC9 = Mat2__RotationTrigReverse_Z5A6DFDC9;
exports.Mat2__RotationReverse_41C9C3A4 = Mat2__RotationReverse_41C9C3A4;
exports.Mat2__Transpose_53ED06D7 = Mat2__Transpose_53ED06D7;
exports.Mat2__TransposeM = Mat2__TransposeM;
exports.Mat2__Mult_73BB86F5 = Mat2__Mult_73BB86F5;
exports.Mat2__MultM_6D9603E2 = Mat2__MultM_6D9603E2;
exports.Mat2__Transform_62A868F5 = Mat2__Transform_62A868F5;
exports.Mat2__TransformInverse_62A868F5 = Mat2__TransformInverse_62A868F5;
exports.Mat2D$reflection = Mat2D$reflection;
exports.Mat2D_$ctor_Z14AF5965 = Mat2D_$ctor_Z14AF5965;
exports.Mat2D_get_Identity = Mat2D_get_Identity;
exports.Mat2D_Create = Mat2D_Create;
exports.Mat2D__get_Values = Mat2D__get_Values;
exports.Mat2D__SetToIdentity = Mat2D__SetToIdentity;
exports.Mat2D__Set_Z33A93963 = Mat2D__Set_Z33A93963;
exports.Mat2D__Translation_27F2E433 = Mat2D__Translation_27F2E433;
exports.Mat2D__RotationTrig_27F2E433 = Mat2D__RotationTrig_27F2E433;
exports.Mat2D__Rotation_Z3C56DA60 = Mat2D__Rotation_Z3C56DA60;
exports.Mat2D__RotationTrigReverse_27F2E433 = Mat2D__RotationTrigReverse_27F2E433;
exports.Mat2D__RotationReverse_Z3C56DA60 = Mat2D__RotationReverse_Z3C56DA60;
exports.Mat2D__Mult_Z554920B = Mat2D__Mult_Z554920B;
exports.Mat2D__MultM_20568066 = Mat2D__MultM_20568066;
exports.Mat2D__Translate_27F2E433 = Mat2D__Translate_27F2E433;
exports.Mat2D__TranslateM_2E41E8E0 = Mat2D__TranslateM_2E41E8E0;
exports.Mat2D__RotateTrig_27F2E433 = Mat2D__RotateTrig_27F2E433;
exports.Mat2D__RotateTrigM_2E41E8E0 = Mat2D__RotateTrigM_2E41E8E0;
exports.Mat2D__Rotate_Z3C56DA60 = Mat2D__Rotate_Z3C56DA60;
exports.Mat2D__RotateM_2F186313 = Mat2D__RotateM_2F186313;
exports.Mat2D__RotateTrigReverse_27F2E433 = Mat2D__RotateTrigReverse_27F2E433;
exports.Mat2D__RotateTrigReverseM_2E41E8E0 = Mat2D__RotateTrigReverseM_2E41E8E0;
exports.Mat2D__RotateReverse_Z3C56DA60 = Mat2D__RotateReverse_Z3C56DA60;
exports.Mat2D__RotateReverseM_2F186313 = Mat2D__RotateReverseM_2F186313;
exports.Mat2D__Transform_62A868F5 = Mat2D__Transform_62A868F5;
exports.Mat3$reflection = Mat3$reflection;
exports.Mat3_$ctor_Z14AF5965 = Mat3_$ctor_Z14AF5965;
exports.Mat3_get_Identity = Mat3_get_Identity;
exports.Mat3_Create = Mat3_Create;
exports.Mat3__get_Values = Mat3__get_Values;
exports.Mat3__SetToIdentity = Mat3__SetToIdentity;
exports.Mat3__Set_Z33A93963 = Mat3__Set_Z33A93963;
exports.Mat3__Projection_Z5A6DFDEA = Mat3__Projection_Z5A6DFDEA;
exports.Mat3__ProjectionM_2E41E8E0 = Mat3__ProjectionM_2E41E8E0;
exports.Mat4$reflection = Mat4$reflection;
exports.Mat4_$ctor_Z14AF5965 = Mat4_$ctor_Z14AF5965;
exports.Mat4_get_Identity = Mat4_get_Identity;
exports.Mat4_Create = Mat4_Create;
exports.Mat4__get_Values = Mat4__get_Values;
exports.Mat4__SetToIdentity = Mat4__SetToIdentity;
exports.Mat4__Set_Z33A93963 = Mat4__Set_Z33A93963;
exports.Mat4__Projection_7563536C = Mat4__Projection_7563536C;
exports.Mat4__ProjectionM_8ED0A5D = Mat4__ProjectionM_8ED0A5D;
exports.Mat4__LookAt_640D2B8F = Mat4__LookAt_640D2B8F;
exports.Mat4__LookAtM_Z441FFEA2 = Mat4__LookAtM_Z441FFEA2;
exports.Mat4__Ortho_Z493F1E4F = Mat4__Ortho_Z493F1E4F;
exports.Mat4__OrthoM_357D8320 = Mat4__OrthoM_357D8320;
exports.Mat4__Perspective_Z175DF647 = Mat4__Perspective_Z175DF647;
exports.Mat4__PerspectiveM_Z576A35D8 = Mat4__PerspectiveM_Z576A35D8;
exports.Mat4__Translation_7563536C = Mat4__Translation_7563536C;
exports.Mat4__Scaled_7563536C = Mat4__Scaled_7563536C;
exports.Mat4__RotationTrigZ_Z5A6DFD8F = Mat4__RotationTrigZ_Z5A6DFD8F;
exports.Mat4__RotationZ_41C9C3E2 = Mat4__RotationZ_41C9C3E2;
exports.Mat4__Mult_73BB86F5 = Mat4__Mult_73BB86F5;
exports.Mat4__MultM_6D9603E4 = Mat4__MultM_6D9603E4;
exports.Mat4__Translate_7563536C = Mat4__Translate_7563536C;
exports.Mat4__TranslateM_8ED0A5D = Mat4__TranslateM_8ED0A5D;
exports.Mat4__Scale_7563536C = Mat4__Scale_7563536C;
exports.Mat4__ScaleM_8ED0A5D = Mat4__ScaleM_8ED0A5D;
exports.Mat4__RotateTrigZ_Z5A6DFD8F = Mat4__RotateTrigZ_Z5A6DFD8F;
exports.Mat4__RotateTrigZM_2E41E8E0 = Mat4__RotateTrigZM_2E41E8E0;
exports.Mat4__RotateZ_41C9C3E2 = Mat4__RotateZ_41C9C3E2;
exports.Mat4__RotateZM_2F186313 = Mat4__RotateZM_2F186313;
exports.Mat4__Inverse_53ED0691 = Mat4__Inverse_53ED0691;
exports.Mat4__InverseM = Mat4__InverseM;
exports.Mat4 = exports.Mat3 = exports.Mat2D = exports.Mat2 = void 0;

var _String = require("./.fable/fable-library.3.0.0/String.js");

var _Types = require("./.fable/fable-library.3.0.0/Types.js");

var _Reflection = require("./.fable/fable-library.3.0.0/Reflection.js");

var _optionexFs = require("./optionex.fs.js");

var _vectorsFs = require("./vectors.fs.js");

var _Option = require("./.fable/fable-library.3.0.0/Option.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Mat2 = /*#__PURE__*/function () {
  function Mat2(values) {
    _classCallCheck(this, Mat2);

    this.m = new _Types.FSharpRef(null);
    var m = this.m;
    this.values = values;
    this.m.contents = this;
    this["Values@"] = this.values;
    this["init@7-3"] = 1;
  }

  _createClass(Mat2, [{
    key: "toString",
    value: function toString() {
      var arg20, arg10, arg20_1, arg10_1;

      var _ = this;

      var v = _.values;
      return (arg20 = v[1], (arg10 = v[0], (0, _String.toText)((0, _String.printf)("%10.2f %10.2f\n"))(arg10)(arg20))) + (arg20_1 = v[3], (arg10_1 = v[2], (0, _String.toText)((0, _String.printf)("%10.2f %10.2f"))(arg10_1)(arg20_1)));
    }
  }]);

  return Mat2;
}();

exports.Mat2 = Mat2;

function Mat2$reflection() {
  return (0, _Reflection.class_type)("Wil.Matricies.Mat2", void 0, Mat2);
}

function Mat2_$ctor_Z14AF5965(values) {
  return new Mat2(values);
}

function Mat2_get_Identity() {
  return new Float64Array([1, 0, 0, 1]);
}

function Mat2_Create() {
  return Mat2_$ctor_Z14AF5965(Mat2_get_Identity());
}

function Mat2__get_Values(__) {
  return __["Values@"];
}

function Mat2__SetToIdentity(_) {
  _.values[0] = 1;
  _.values[1] = 0;
  _.values[2] = 0;
  _.values[3] = 1;
}

function Mat2__Set_Z33A93963(_, newValues) {
  _.values[0] = newValues[0];
  _.values[1] = newValues[1];
  _.values[2] = newValues[2];
  _.values[3] = newValues[3];
  return _.m.contents;
}

function Mat2__RotationTrig_Z5A6DFDC9(_, cos, sin, result) {
  var result_1 = Mat2__optionalMat_53ED06D7(_, result);
  var values = Mat2__get_Values(result_1);
  values[0] = cos;
  values[1] = -sin;
  values[2] = sin;
  values[3] = cos;
  return result_1;
}

function Mat2__Rotation_41C9C3A4(_, angle, result) {
  var ang = angle;
  return Mat2__RotationTrig_Z5A6DFDC9(_.m.contents, Math.cos(ang), Math.sin(ang), result);
}

function Mat2__RotationTrigReverse_Z5A6DFDC9(_, cos, sin, result) {
  var result_1 = Mat2__optionalMat_53ED06D7(_, result);
  var values = Mat2__get_Values(result_1);
  values[0] = cos;
  values[1] = sin;
  values[2] = -sin;
  values[3] = cos;
  return result_1;
}

function Mat2__RotationReverse_41C9C3A4(_, angle, result) {
  var ang = angle;
  return Mat2__RotationTrigReverse_Z5A6DFDC9(_.m.contents, Math.cos(ang), Math.sin(ang), result);
}

function Mat2__Transpose_53ED06D7(_, result) {
  var result_1 = Mat2__optionalMat_53ED06D7(_, result);
  var values = Mat2__get_Values(result_1);
  var v1 = values[1];
  var v2 = values[2];
  values[0] = values[0];
  values[1] = v2;
  values[2] = v1;
  values[3] = values[3];
  return result_1;
}

function Mat2__TransposeM(_) {
  var value = Mat2__Transpose_53ED06D7(_.m.contents, _.m.contents);
  void value;
}

function Mat2__Mult_73BB86F5(_, other, result) {
  var result_1 = Mat2__optionalMat_53ED06D7(_, result);
  var values = Mat2__get_Values(result_1);
  var ovalues = Mat2__get_Values(other);
  var v0 = values[0];
  var v1 = values[1];
  var v2 = values[2];
  var v3 = values[3];
  var o0 = ovalues[0];
  var o1 = ovalues[1];
  var o2 = ovalues[2];
  var o3 = ovalues[3];
  values[0] = v0 * o0 + v1 * o2;
  values[1] = v0 * o1 + v1 * o3;
  values[2] = v2 * o0 + v3 * o2;
  values[3] = v2 * o1 + v3 * o3;
  return result_1;
}

function Mat2__MultM_6D9603E2(_, other) {
  var value = Mat2__Mult_73BB86F5(_.m.contents, other, _.m.contents);
  void value;
}

function Mat2__Transform_62A868F5(_, v, result) {
  var result_1 = (0, _optionexFs.calcDef)(_vectorsFs.Vec2_Create, result);
  var value = _.values[0] * v.values[0] + _.values[1] * v.values[1];
  result_1.values[0] = value;
  var value_1 = _.values[2] * v.values[0] + _.values[3] * v.values[1];
  result_1.values[1] = value_1;
  return result_1;
}

function Mat2__TransformInverse_62A868F5(_, v, result) {
  var result_1 = (0, _optionexFs.calcDef)(_vectorsFs.Vec2_Create, result);
  var value = _.values[0] * v.values[0] + _.values[2] * v.values[1];
  result_1.values[0] = value;
  var value_1 = _.values[1] * v.values[0] + _.values[3] * v.values[1];
  result_1.values[1] = value_1;
  return result_1;
}

function Mat2__optionalMat_53ED06D7(this$, mat) {
  return (0, _Option.defaultArg)(mat, this$.m.contents);
}

var Mat2D = /*#__PURE__*/function () {
  function Mat2D(values) {
    _classCallCheck(this, Mat2D);

    this.m = new _Types.FSharpRef(null);
    var m = this.m;
    this.values = values;
    this.m.contents = this;
    this["Values@"] = this.values;
    this["init@108-4"] = 1;
  }

  _createClass(Mat2D, [{
    key: "toString",
    value: function toString() {
      var arg20, arg10, arg20_1, arg10_1, arg20_2, arg10_2;

      var _ = this;

      var v = _.values;
      return (arg20 = v[1], (arg10 = v[0], (0, _String.toText)((0, _String.printf)("%10.2f %10.2f\n"))(arg10)(arg20))) + (arg20_1 = v[3], (arg10_1 = v[2], (0, _String.toText)((0, _String.printf)("%10.2f %10.2f\n"))(arg10_1)(arg20_1))) + (arg20_2 = v[4], (arg10_2 = v[4], (0, _String.toText)((0, _String.printf)("%10.2f %10.2f"))(arg10_2)(arg20_2)));
    }
  }]);

  return Mat2D;
}();

exports.Mat2D = Mat2D;

function Mat2D$reflection() {
  return (0, _Reflection.class_type)("Wil.Matricies.Mat2D", void 0, Mat2D);
}

function Mat2D_$ctor_Z14AF5965(values) {
  return new Mat2D(values);
}

function Mat2D_get_Identity() {
  return new Float64Array([1, 0, 0, 1, 0, 0]);
}

function Mat2D_Create() {
  return Mat2D_$ctor_Z14AF5965(Mat2D_get_Identity());
}

function Mat2D__get_Values(__) {
  return __["Values@"];
}

function Mat2D__SetToIdentity(_) {
  _.values[0] = 1;
  _.values[1] = 0;
  _.values[2] = 0;
  _.values[3] = 1;
  _.values[4] = 0;
  _.values[5] = 0;
}

function Mat2D__Set_Z33A93963(_, newValues) {
  _.values[0] = newValues[0];
  _.values[1] = newValues[1];
  _.values[2] = newValues[2];
  _.values[3] = newValues[3];
  _.values[4] = newValues[4];
  _.values[5] = newValues[5];
  return _.m.contents;
}

function Mat2D__Translation_27F2E433(_, x, y, result) {
  var result_1 = Mat2D__optionalMat_Z2E721F2D(_, result);
  var values = Mat2D__get_Values(result_1);
  values[0] = 1;
  values[1] = 0;
  values[2] = 0;
  values[3] = 1;
  values[4] = x;
  values[5] = y;
  return result_1;
}

function Mat2D__RotationTrig_27F2E433(_, cos, sin, result) {
  var result_1 = Mat2D__optionalMat_Z2E721F2D(_, result);
  var values = Mat2D__get_Values(result_1);
  values[0] = cos;
  values[1] = -sin;
  values[2] = sin;
  values[3] = cos;
  values[4] = 0;
  values[5] = 0;
  return result_1;
}

function Mat2D__Rotation_Z3C56DA60(_, angle, result) {
  var ang = angle;
  return Mat2D__RotationTrig_27F2E433(_.m.contents, Math.cos(ang), Math.sin(ang), result);
}

function Mat2D__RotationTrigReverse_27F2E433(_, cos, sin, result) {
  var result_1 = Mat2D__optionalMat_Z2E721F2D(_, result);
  var values = Mat2D__get_Values(result_1);
  values[0] = cos;
  values[1] = sin;
  values[2] = -sin;
  values[3] = cos;
  values[4] = 0;
  values[5] = 0;
  return result_1;
}

function Mat2D__RotationReverse_Z3C56DA60(_, angle, result) {
  var ang = angle;
  return Mat2D__RotationTrigReverse_27F2E433(_.m.contents, Math.cos(ang), Math.sin(ang), result);
}

function Mat2D__Mult_Z554920B(_, other, result) {
  var result_1 = Mat2D__optionalMat_Z2E721F2D(_, result);
  var values = Mat2D__get_Values(result_1);
  var ovalues = Mat2D__get_Values(other);
  var v0 = values[0];
  var v1 = values[1];
  var v2 = values[2];
  var v3 = values[3];
  var v4 = values[4];
  var v5 = values[5];
  var o0 = ovalues[0];
  var o1 = ovalues[1];
  var o2 = ovalues[2];
  var o3 = ovalues[3];
  values[0] = v0 * o0 + v1 * o2;
  values[1] = v0 * o1 + v1 * o3;
  values[2] = v2 * o0 + v3 * o2;
  values[3] = v2 * o1 + v3 * o3;
  values[4] = v4 * o0 + v5 * o2 + v4;
  values[5] = v4 * o1 + v5 * o3 + v5;
  return result_1;
}

function Mat2D__MultM_20568066(_, other) {
  var value = Mat2D__Mult_Z554920B(_.m.contents, other, _.m.contents);
  void value;
}

function Mat2D__Translate_27F2E433(_, x, y, result) {
  var temp = Mat2D_Create();
  return Mat2D__Mult_Z554920B(_.m.contents, Mat2D__Translation_27F2E433(_.m.contents, x, y, temp), result);
}

function Mat2D__TranslateM_2E41E8E0(_, x, y) {
  var value = Mat2D__Translate_27F2E433(_.m.contents, x, y, _.m.contents);
  void value;
}

function Mat2D__RotateTrig_27F2E433(_, cos, sin, result) {
  var temp = Mat2D_Create();
  return Mat2D__Mult_Z554920B(_.m.contents, Mat2D__RotationTrig_27F2E433(_.m.contents, cos, sin, temp), result);
}

function Mat2D__RotateTrigM_2E41E8E0(_, cos, sin) {
  var value = Mat2D__RotateTrig_27F2E433(_.m.contents, cos, sin, _.m.contents);
  void value;
}

function Mat2D__Rotate_Z3C56DA60(_, angle, result) {
  var ang = angle;
  return Mat2D__RotateTrig_27F2E433(_.m.contents, Math.cos(ang), Math.sin(ang), result);
}

function Mat2D__RotateM_2F186313(_, angle) {
  var value = Mat2D__Rotate_Z3C56DA60(_.m.contents, angle, _.m.contents);
  void value;
}

function Mat2D__RotateTrigReverse_27F2E433(_, cos, sin, result) {
  var temp = Mat2D_Create();
  return Mat2D__Mult_Z554920B(_.m.contents, Mat2D__RotationTrigReverse_27F2E433(_.m.contents, cos, sin, temp), result);
}

function Mat2D__RotateTrigReverseM_2E41E8E0(_, cos, sin) {
  var value = Mat2D__RotateTrigReverse_27F2E433(_.m.contents, cos, sin, _.m.contents);
  void value;
}

function Mat2D__RotateReverse_Z3C56DA60(_, angle, result) {
  var ang = angle;
  return Mat2D__RotateTrigReverse_27F2E433(_.m.contents, Math.cos(ang), Math.sin(ang), result);
}

function Mat2D__RotateReverseM_2F186313(_, angle) {
  var value = Mat2D__RotateReverse_Z3C56DA60(_.m.contents, angle, _.m.contents);
  void value;
}

function Mat2D__Transform_62A868F5(_, v, result) {
  var result_1 = (0, _optionexFs.calcDef)(_vectorsFs.Vec2_Create, result);
  var value = _.values[0] * v.values[0] + _.values[1] * v.values[1] + _.values[4];
  result_1.values[0] = value;
  var value_1 = _.values[2] * v.values[0] + _.values[3] * v.values[1] + _.values[5];
  result_1.values[1] = value_1;
  return result_1;
}

function Mat2D__optionalMat_Z2E721F2D(this$, mat) {
  return (0, _Option.defaultArg)(mat, this$.m.contents);
}

var Mat3 = /*#__PURE__*/function () {
  function Mat3(values) {
    _classCallCheck(this, Mat3);

    this.m = new _Types.FSharpRef(null);
    var m = this.m;
    this.values = values;
    this.m.contents = this;
    this["Values@"] = this.values;
    this["init@247-5"] = 1;
  }

  _createClass(Mat3, [{
    key: "toString",
    value: function toString() {
      var arg30, arg20, arg10, arg30_1, arg20_1, arg10_1, arg30_2, arg20_2, arg10_2;

      var _ = this;

      var v = _.values;
      return (arg30 = v[2], (arg20 = v[1], (arg10 = v[0], (0, _String.toText)((0, _String.printf)("%10.2f %10.2f %10.2f\n"))(arg10)(arg20)(arg30)))) + (arg30_1 = v[5], (arg20_1 = v[4], (arg10_1 = v[3], (0, _String.toText)((0, _String.printf)("%10.2f %10.2f %10.2f\n"))(arg10_1)(arg20_1)(arg30_1)))) + (arg30_2 = v[8], (arg20_2 = v[7], (arg10_2 = v[6], (0, _String.toText)((0, _String.printf)("%10.2f %10.2f %10.2f"))(arg10_2)(arg20_2)(arg30_2))));
    }
  }]);

  return Mat3;
}();

exports.Mat3 = Mat3;

function Mat3$reflection() {
  return (0, _Reflection.class_type)("Wil.Matricies.Mat3", void 0, Mat3);
}

function Mat3_$ctor_Z14AF5965(values) {
  return new Mat3(values);
}

function Mat3_get_Identity() {
  return new Float64Array([1, 0, 0, 0, 1, 0, 0, 0, 1]);
}

function Mat3_Create() {
  return Mat3_$ctor_Z14AF5965(Mat3_get_Identity());
}

function Mat3__get_Values(__) {
  return __["Values@"];
}

function Mat3__SetToIdentity(_) {
  _.values[0] = 1;
  _.values[1] = 0;
  _.values[2] = 0;
  _.values[3] = 0;
  _.values[4] = 1;
  _.values[5] = 0;
  _.values[6] = 0;
  _.values[7] = 0;
  _.values[8] = 1;
}

function Mat3__Set_Z33A93963(_, newValues) {
  _.values[0] = newValues[0];
  _.values[1] = newValues[1];
  _.values[2] = newValues[2];
  _.values[3] = newValues[3];
  _.values[4] = newValues[4];
  _.values[5] = newValues[5];
  _.values[6] = newValues[6];
  _.values[7] = newValues[7];
  _.values[8] = newValues[8];
  return _.m.contents;
}

function Mat3__Projection_Z5A6DFDEA(_, width, height, result) {
  var result_1 = Mat3__optionalMat_53ED06F6(_, result);
  var values = Mat3__get_Values(result_1);
  values[0] = 2 / width;
  values[1] = 0;
  values[2] = 0;
  values[3] = 0;
  values[4] = -2 / height;
  values[5] = 0;
  values[6] = -1;
  values[7] = 1;
  values[8] = 1;
  return result_1;
}

function Mat3__ProjectionM_2E41E8E0(_, width, height) {
  var value = Mat3__Projection_Z5A6DFDEA(_.m.contents, width, height, _.m.contents);
  void value;
}

function Mat3__optionalMat_53ED06F6(this$, mat) {
  return (0, _Option.defaultArg)(mat, this$.m.contents);
}

var Mat4 = /*#__PURE__*/function () {
  function Mat4(values) {
    _classCallCheck(this, Mat4);

    this.m = new _Types.FSharpRef(null);
    var m = this.m;
    this.values = values;
    this.m.contents = this;
    this["Values@"] = this.values;
    this["init@306-6"] = 1;
  }

  _createClass(Mat4, [{
    key: "toString",
    value: function toString() {
      var arg40, arg30, arg20, arg10, arg40_1, arg30_1, arg20_1, arg10_1, arg40_2, arg30_2, arg20_2, arg10_2, arg40_3, arg30_3, arg20_3, arg10_3;

      var _ = this;

      var v = _.values;
      return (arg40 = v[3], (arg30 = v[2], (arg20 = v[1], (arg10 = v[0], (0, _String.toText)((0, _String.printf)("%10.2f %10.2f %10.2f %10.2f\n"))(arg10)(arg20)(arg30)(arg40))))) + (arg40_1 = v[7], (arg30_1 = v[6], (arg20_1 = v[5], (arg10_1 = v[4], (0, _String.toText)((0, _String.printf)("%10.2f %10.2f %10.2f %10.2f\n"))(arg10_1)(arg20_1)(arg30_1)(arg40_1))))) + (arg40_2 = v[11], (arg30_2 = v[10], (arg20_2 = v[9], (arg10_2 = v[8], (0, _String.toText)((0, _String.printf)("%10.2f %10.2f %10.2f %10.2f\n"))(arg10_2)(arg20_2)(arg30_2)(arg40_2))))) + (arg40_3 = v[15], (arg30_3 = v[14], (arg20_3 = v[13], (arg10_3 = v[12], (0, _String.toText)((0, _String.printf)("%10.2f %10.2f %10.2f %10.2f"))(arg10_3)(arg20_3)(arg30_3)(arg40_3)))));
    }
  }]);

  return Mat4;
}();

exports.Mat4 = Mat4;

function Mat4$reflection() {
  return (0, _Reflection.class_type)("Wil.Matricies.Mat4", void 0, Mat4);
}

function Mat4_$ctor_Z14AF5965(values) {
  return new Mat4(values);
}

function Mat4_get_Identity() {
  return new Float64Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);
}

function Mat4_Create() {
  return Mat4_$ctor_Z14AF5965(Mat4_get_Identity());
}

function Mat4__get_Values(__) {
  return __["Values@"];
}

function Mat4__SetToIdentity(_) {
  _.values[0] = 1;
  _.values[1] = 0;
  _.values[2] = 0;
  _.values[3] = 0;
  _.values[4] = 0;
  _.values[5] = 1;
  _.values[6] = 0;
  _.values[7] = 0;
  _.values[8] = 0;
  _.values[9] = 0;
  _.values[10] = 1;
  _.values[11] = 0;
  _.values[12] = 0;
  _.values[13] = 0;
  _.values[14] = 0;
  _.values[15] = 1;
}

function Mat4__Set_Z33A93963(_, newValues) {
  _.values[0] = newValues[0];
  _.values[1] = newValues[1];
  _.values[2] = newValues[2];
  _.values[3] = newValues[3];
  _.values[4] = newValues[4];
  _.values[5] = newValues[5];
  _.values[6] = newValues[6];
  _.values[7] = newValues[7];
  _.values[8] = newValues[8];
  _.values[9] = newValues[9];
  _.values[10] = newValues[10];
  _.values[11] = newValues[11];
  _.values[12] = newValues[12];
  _.values[13] = newValues[13];
  _.values[14] = newValues[14];
  _.values[15] = newValues[15];
}

function Mat4__Projection_7563536C(_, width, height, depth, result) {
  var result_1 = Mat4__optionalMat_53ED0691(_, result);
  var values = Mat4__get_Values(result_1);
  values[0] = 2 / width;
  values[1] = 0;
  values[2] = 0;
  values[3] = 0;
  values[4] = 0;
  values[5] = -2 / height;
  values[6] = 0;
  values[7] = 0;
  values[8] = 0;
  values[9] = 0;
  values[10] = 2 / depth;
  values[11] = 0;
  values[12] = -1;
  values[13] = 1;
  values[14] = 0;
  values[15] = 1;
  return result_1;
}

function Mat4__ProjectionM_8ED0A5D(_, width, height, depth) {
  var value = Mat4__Projection_7563536C(_.m.contents, width, height, depth, _.m.contents);
  void value;
}

function Mat4__LookAt_640D2B8F(_, cameraPosition, target, up, result) {
  var camera = cameraPosition;
  var zAxis = (0, _vectorsFs.Vec3_op_BangBang_Z66910A62)((0, _vectorsFs.Vec3_op_Subtraction_5E235CC0)(camera, target));
  var xAxis = (0, _vectorsFs.Vec3_op_BangBang_Z66910A62)((0, _vectorsFs.Vec3_op_PlusMultiply_5E235CC0)(up, zAxis));
  var yAxis = (0, _vectorsFs.Vec3_op_BangBang_Z66910A62)((0, _vectorsFs.Vec3_op_PlusMultiply_5E235CC0)(zAxis, xAxis));
  var result_1 = Mat4__optionalMat_53ED0691(_, result);
  var values = Mat4__get_Values(result_1);
  values[0] = xAxis.values[0];
  values[1] = xAxis.values[1];
  values[2] = xAxis.values[2];
  values[3] = 0;
  values[4] = yAxis.values[0];
  values[5] = yAxis.values[1];
  values[6] = yAxis.values[2];
  values[7] = 0;
  values[8] = zAxis.values[0];
  values[9] = zAxis.values[1];
  values[10] = zAxis.values[2];
  values[11] = 0;
  values[12] = -camera.values[0];
  values[13] = -camera.values[1];
  values[14] = -camera.values[2];
  values[15] = 1;
  return result_1;
}

function Mat4__LookAtM_Z441FFEA2(_, cameraPosition, target, up) {
  var value = Mat4__LookAt_640D2B8F(_.m.contents, cameraPosition, target, up, _.m.contents);
  void value;
}

function Mat4__Ortho_Z493F1E4F(_, left, right, bottom, top, near, far, result) {
  var result_1 = Mat4__optionalMat_53ED0691(_, result);
  var values = Mat4__get_Values(result_1);
  values[0] = 2 / (right - left);
  values[1] = 0;
  values[2] = 0;
  values[3] = 0;
  values[4] = 0;
  values[5] = 2 / (top - bottom);
  values[6] = 0;
  values[7] = 0;
  values[8] = 0;
  values[9] = 0;
  values[10] = 2 / (near - far);
  values[11] = 0;
  values[12] = (left + right) / (left - right);
  values[13] = (bottom + top) / (bottom - top);
  values[14] = (near + far) / (near - far);
  values[15] = 1;
  return result_1;
}

function Mat4__OrthoM_357D8320(_, left, right, bottom, top, near, far) {
  var value = Mat4__Ortho_Z493F1E4F(_.m.contents, left, right, bottom, top, near, far, _.m.contents);
  void value;
}

function Mat4__Perspective_Z175DF647(_, fov, aspect, near, far, result) {
  var result_1 = Mat4__optionalMat_53ED0691(_, result);
  var values = Mat4__get_Values(result_1);
  var f = Math.tan(3.141592653589793 * 0.5 - fov * 0.5);
  var rangeInv = 1 / (near - far);
  values[0] = f / aspect;
  values[1] = 0;
  values[2] = 0;
  values[3] = 0;
  values[4] = 0;
  values[5] = f;
  values[6] = 0;
  values[7] = 0;
  values[8] = 0;
  values[9] = 0;
  values[10] = (near + far) * rangeInv;
  values[11] = -1;
  values[12] = 0;
  values[13] = 0;
  values[14] = near * far * rangeInv * 2;
  values[15] = 0;
  return result_1;
}

function Mat4__PerspectiveM_Z576A35D8(_, fov, aspect, near, far) {
  var value = Mat4__Perspective_Z175DF647(_.m.contents, fov, aspect, near, far, _.m.contents);
  void value;
}

function Mat4__Translation_7563536C(_, x, y, z, result) {
  var result_1 = Mat4__optionalMat_53ED0691(_, result);
  var values = Mat4__get_Values(result_1);
  values[0] = 1;
  values[1] = 0;
  values[2] = 0;
  values[3] = 0;
  values[4] = 0;
  values[5] = 1;
  values[6] = 0;
  values[7] = 0;
  values[8] = 0;
  values[9] = 0;
  values[10] = 1;
  values[11] = 0;
  values[12] = x;
  values[13] = y;
  values[14] = z;
  values[15] = 1;
  return result_1;
}

function Mat4__Scaled_7563536C(_, x, y, z, result) {
  var result_1 = Mat4__optionalMat_53ED0691(_, result);
  var values = Mat4__get_Values(result_1);
  values[0] = x;
  values[1] = 0;
  values[2] = 0;
  values[3] = 0;
  values[4] = 0;
  values[5] = y;
  values[6] = 0;
  values[7] = 0;
  values[8] = 0;
  values[9] = 0;
  values[10] = z;
  values[11] = 0;
  values[12] = 0;
  values[13] = 0;
  values[14] = 0;
  values[15] = 1;
  return result_1;
}

function Mat4__RotationTrigZ_Z5A6DFD8F(_, cos, sin, result) {
  var result_1 = Mat4__optionalMat_53ED0691(_, result);
  var values = Mat4__get_Values(result_1);
  values[0] = cos;
  values[1] = sin;
  values[2] = 0;
  values[3] = 0;
  values[4] = -sin;
  values[5] = cos;
  values[6] = 0;
  values[7] = 0;
  values[8] = 0;
  values[9] = 0;
  values[10] = 1;
  values[11] = 0;
  values[12] = 0;
  values[13] = 0;
  values[14] = 0;
  values[15] = 1;
  return result_1;
}

function Mat4__RotationZ_41C9C3E2(_, angle, result) {
  var ang = angle;
  return Mat4__RotationTrigZ_Z5A6DFD8F(_.m.contents, Math.cos(ang), Math.sin(ang), result);
}

function Mat4__Mult_73BB86F5(_, other, result) {
  var result_1 = Mat4__optionalMat_53ED0691(_, result);
  var a = _.values;
  var b = Mat4__get_Values(other);
  var values = Mat4__get_Values(result_1);
  var a00 = a[0];
  var a01 = a[1];
  var a02 = a[2];
  var a03 = a[3];
  var a10 = a[4];
  var a11 = a[5];
  var a12 = a[6];
  var a13 = a[7];
  var a20 = a[8];
  var a21 = a[9];
  var a22 = a[10];
  var a23 = a[11];
  var a30 = a[12];
  var a31 = a[13];
  var a32 = a[14];
  var a33 = a[15];
  var b00 = b[0];
  var b01 = b[1];
  var b02 = b[2];
  var b03 = b[3];
  var b10 = b[4];
  var b11 = b[5];
  var b12 = b[6];
  var b13 = b[7];
  var b20 = b[8];
  var b21 = b[9];
  var b22 = b[10];
  var b23 = b[11];
  var b30 = b[12];
  var b31 = b[13];
  var b32 = b[14];
  var b33 = b[15];
  values[0] = b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30;
  values[1] = b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31;
  values[2] = b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32;
  values[3] = b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33;
  values[4] = b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30;
  values[5] = b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31;
  values[6] = b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32;
  values[7] = b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33;
  values[8] = b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30;
  values[9] = b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31;
  values[10] = b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32;
  values[11] = b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33;
  values[12] = b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30;
  values[13] = b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31;
  values[14] = b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32;
  values[15] = b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33;
  return result_1;
}

function Mat4__MultM_6D9603E4(_, other) {
  var value = Mat4__Mult_73BB86F5(_.m.contents, other, _.m.contents);
  void value;
}

function Mat4__Translate_7563536C(_, x, y, z, result) {
  var temp = Mat4_Create();
  return Mat4__Mult_73BB86F5(_.m.contents, Mat4__Translation_7563536C(_.m.contents, x, y, z, temp), result);
}

function Mat4__TranslateM_8ED0A5D(_, x, y, z) {
  var value = Mat4__Translate_7563536C(_.m.contents, x, y, z, _.m.contents);
  void value;
}

function Mat4__Scale_7563536C(_, x, y, z, result) {
  var temp = Mat4_Create();
  return Mat4__Mult_73BB86F5(_.m.contents, Mat4__Scaled_7563536C(_.m.contents, x, y, z, temp), result);
}

function Mat4__ScaleM_8ED0A5D(_, x, y, z) {
  var value = Mat4__Scale_7563536C(_.m.contents, x, y, z, _.m.contents);
  void value;
}

function Mat4__RotateTrigZ_Z5A6DFD8F(_, cos, sin, result) {
  var temp = Mat4_Create();
  return Mat4__Mult_73BB86F5(_.m.contents, Mat4__RotationTrigZ_Z5A6DFD8F(_.m.contents, cos, sin, temp), result);
}

function Mat4__RotateTrigZM_2E41E8E0(_, cos, sin) {
  var value = Mat4__RotateTrigZ_Z5A6DFD8F(_.m.contents, cos, sin, _.m.contents);
  void value;
}

function Mat4__RotateZ_41C9C3E2(_, angle, result) {
  var ang = angle;
  return Mat4__RotateTrigZ_Z5A6DFD8F(_.m.contents, Math.cos(ang), Math.sin(ang), result);
}

function Mat4__RotateZM_2F186313(_, angle) {
  var value = Mat4__RotateZ_41C9C3E2(_.m.contents, angle, _.m.contents);
  void value;
}

function Mat4__Inverse_53ED0691(_, result) {
  var result_1 = (0, _Option.defaultArgWith)(result, Mat4_Create);
  var m00 = _.values[0];
  var m01 = _.values[1];
  var m02 = _.values[2];
  var m03 = _.values[3];
  var m10 = _.values[4];
  var m11 = _.values[5];
  var m12 = _.values[6];
  var m13 = _.values[7];
  var m20 = _.values[8];
  var m21 = _.values[9];
  var m22 = _.values[10];
  var m23 = _.values[11];
  var m30 = _.values[12];
  var m31 = _.values[13];
  var m32 = _.values[14];
  var m33 = _.values[15];
  var tmp00 = m22 * m33;
  var tmp01 = m32 * m23;
  var tmp02 = m12 * m33;
  var tmp03 = m32 * m13;
  var tmp04 = m12 * m23;
  var tmp05 = m22 * m13;
  var tmp06 = m02 * m33;
  var tmp07 = m32 * m03;
  var tmp08 = m02 * m23;
  var tmp09 = m22 * m03;
  var tmp10 = m02 * m13;
  var tmp11 = m12 * m03;
  var tmp12 = m20 * m31;
  var tmp13 = m30 * m21;
  var tmp14 = m10 * m31;
  var tmp15 = m30 * m11;
  var tmp16 = m10 * m21;
  var tmp17 = m20 * m11;
  var tmp18 = m00 * m31;
  var tmp19 = m30 * m01;
  var tmp20 = m00 * m21;
  var tmp21 = m20 * m01;
  var tmp22 = m00 * m11;
  var tmp23 = m10 * m01;
  var t0 = tmp00 * m11 + tmp03 * m21 + tmp04 * m31 - (tmp01 * m11 + tmp02 * m21 + tmp05 * m31);
  var t1 = tmp01 * m01 + tmp06 * m21 + tmp09 * m31 - (tmp00 * m01 + tmp07 * m21 + tmp08 * m31);
  var t2 = tmp02 * m01 + tmp07 * m11 + tmp10 * m31 - (tmp03 * m01 + tmp06 * m11 + tmp11 * m31);
  var t3 = tmp05 * m01 + tmp08 * m11 + tmp11 * m21 - (tmp04 * m01 + tmp09 * m11 + tmp10 * m21);
  var d = 1 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);
  var values = Mat4__get_Values(result_1);
  values[0] = t0 * d;
  values[1] = t1 * d;
  values[2] = t2 * d;
  values[3] = t3 * d;
  values[4] = (tmp01 * m10 + tmp02 * m20 + tmp05 * m30 - (tmp00 * m10 + tmp03 * m20 + tmp04 * m30)) * d;
  values[5] = (tmp00 * m00 + tmp07 * m20 + tmp08 * m30 - (tmp01 * m00 + tmp06 * m20 + tmp09 * m30)) * d;
  values[6] = (tmp03 * m00 + tmp06 * m10 + tmp11 * m30 - (tmp02 * m00 + tmp07 * m10 + tmp10 * m30)) * d;
  values[7] = (tmp04 * m00 + tmp09 * m10 + tmp10 * m20 - (tmp05 * m00 + tmp08 * m10 + tmp11 * m20)) * d;
  values[8] = (tmp12 * m13 + tmp15 * m23 + tmp16 * m33 - (tmp13 * m13 + tmp14 * m23 + tmp17 * m33)) * d;
  values[9] = (tmp13 * m03 + tmp18 * m23 + tmp21 * m33 - (tmp12 * m03 + tmp19 * m23 + tmp20 * m33)) * d;
  values[10] = (tmp14 * m03 + tmp19 * m13 + tmp22 * m33 - (tmp15 * m03 + tmp18 * m13 + tmp23 * m33)) * d;
  values[11] = (tmp17 * m03 + tmp20 * m13 + tmp23 * m23 - (tmp16 * m03 + tmp21 * m13 + tmp22 * m23)) * d;
  values[12] = (tmp14 * m22 + tmp17 * m32 + tmp13 * m12 - (tmp16 * m32 + tmp12 * m12 + tmp15 * m22)) * d;
  values[13] = (tmp20 * m32 + tmp12 * m02 + tmp19 * m22 - (tmp18 * m22 + tmp21 * m32 + tmp13 * m02)) * d;
  values[14] = (tmp18 * m12 + tmp23 * m32 + tmp15 * m02 - (tmp22 * m32 + tmp14 * m02 + tmp19 * m12)) * d;
  values[15] = (tmp22 * m22 + tmp16 * m02 + tmp21 * m12 - (tmp20 * m12 + tmp23 * m22 + tmp17 * m02)) * d;
  return result_1;
}

function Mat4__InverseM(_) {
  var value = Mat4__Inverse_53ED0691(_.m.contents, _.m.contents);
  void value;
}

function Mat4__optionalMat_53ED0691(this$, mat) {
  return (0, _Option.defaultArg)(mat, this$.m.contents);
}
},{"./.fable/fable-library.3.0.0/String.js":"../src/.fable/fable-library.3.0.0/String.js","./.fable/fable-library.3.0.0/Types.js":"../src/.fable/fable-library.3.0.0/Types.js","./.fable/fable-library.3.0.0/Reflection.js":"../src/.fable/fable-library.3.0.0/Reflection.js","./optionex.fs.js":"../src/optionex.fs.js","./vectors.fs.js":"../src/vectors.fs.js","./.fable/fable-library.3.0.0/Option.js":"../src/.fable/fable-library.3.0.0/Option.js"}],"../src/glcanvasparams.fs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CanvasConfig$reflection = CanvasConfig$reflection;
exports.GlCanvasParams$reflection = GlCanvasParams$reflection;
exports.GlCanvasParams_$ctor = GlCanvasParams_$ctor;
exports.GlCanvasParams__get_LineWidth = GlCanvasParams__get_LineWidth;
exports.GlCanvasParams__set_LineWidth_5E38073B = GlCanvasParams__set_LineWidth_5E38073B;
exports.GlCanvasParams__get_MiterLimit = GlCanvasParams__get_MiterLimit;
exports.GlCanvasParams__set_MiterLimit_5E38073B = GlCanvasParams__set_MiterLimit_5E38073B;
exports.GlCanvasParams__get_LineCap = GlCanvasParams__get_LineCap;
exports.GlCanvasParams__set_LineCap_7B1263D0 = GlCanvasParams__set_LineCap_7B1263D0;
exports.GlCanvasParams__get_LineJoin = GlCanvasParams__get_LineJoin;
exports.GlCanvasParams__set_LineJoin_Z229C3C20 = GlCanvasParams__set_LineJoin_Z229C3C20;
exports.GlCanvasParams__get_MiterFallback = GlCanvasParams__get_MiterFallback;
exports.GlCanvasParams__set_MiterFallback_Z229C3C20 = GlCanvasParams__set_MiterFallback_Z229C3C20;
exports.GlCanvasParams__get_StrokeColor = GlCanvasParams__get_StrokeColor;
exports.GlCanvasParams__set_StrokeColor_Z66910A67 = GlCanvasParams__set_StrokeColor_Z66910A67;
exports.GlCanvasParams__get_FillColor = GlCanvasParams__get_FillColor;
exports.GlCanvasParams__set_FillColor_Z66910A67 = GlCanvasParams__set_FillColor_Z66910A67;
exports.GlCanvasParams = exports.CanvasConfig = void 0;

var _Types = require("./.fable/fable-library.3.0.0/Types.js");

var _Reflection = require("./.fable/fable-library.3.0.0/Reflection.js");

var _vectorsFs = require("./vectors.fs.js");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var CanvasConfig = /*#__PURE__*/function (_Record) {
  _inherits(CanvasConfig, _Record);

  var _super = _createSuper(CanvasConfig);

  function CanvasConfig(LineWidth, MiterLimit, LineCap, LineJoin, MiterFallback, StrokeColor, FillColor) {
    var _this;

    _classCallCheck(this, CanvasConfig);

    _this = _super.call(this);
    _this.LineWidth = LineWidth;
    _this.MiterLimit = MiterLimit;
    _this.LineCap = LineCap | 0;
    _this.LineJoin = LineJoin | 0;
    _this.MiterFallback = MiterFallback | 0;
    _this.StrokeColor = StrokeColor;
    _this.FillColor = FillColor;
    return _this;
  }

  return CanvasConfig;
}(_Types.Record);

exports.CanvasConfig = CanvasConfig;

function CanvasConfig$reflection() {
  return (0, _Reflection.record_type)("Wil.Webgl.CanvasConfig", [], CanvasConfig, function () {
    return [["LineWidth", _Reflection.float64_type], ["MiterLimit", _Reflection.float64_type], ["LineCap", (0, _Reflection.enum_type)("Wil.Webgl.LineCap", _Reflection.int32_type, [["Butt", 0], ["Round", 1], ["Square", 2]])], ["LineJoin", (0, _Reflection.enum_type)("Wil.Webgl.LineJoin", _Reflection.int32_type, [["Round", 1], ["Bevel", 3], ["Miter", 4]])], ["MiterFallback", (0, _Reflection.enum_type)("Wil.Webgl.LineJoin", _Reflection.int32_type, [["Round", 1], ["Bevel", 3], ["Miter", 4]])], ["StrokeColor", (0, _vectorsFs.Vec4$reflection)()], ["FillColor", (0, _vectorsFs.Vec4$reflection)()]];
  });
}

var GlCanvasParams = function GlCanvasParams() {
  _classCallCheck(this, GlCanvasParams);

  this.config = new CanvasConfig(1, 10, 0, 3, 3, (0, _vectorsFs.Vec4Module_vec4)(0, 0, 0, 1), (0, _vectorsFs.Vec4Module_vec4)(0, 0, 0, 1));
};

exports.GlCanvasParams = GlCanvasParams;

function GlCanvasParams$reflection() {
  return (0, _Reflection.class_type)("Wil.Webgl.GlCanvasParams", void 0, GlCanvasParams);
}

function GlCanvasParams_$ctor() {
  return new GlCanvasParams();
}

function GlCanvasParams__get_LineWidth(_) {
  return _.config.LineWidth;
}

function GlCanvasParams__set_LineWidth_5E38073B(_, value) {
  var inputRecord = _.config;
  _.config = new CanvasConfig(value, inputRecord.MiterLimit, inputRecord.LineCap, inputRecord.LineJoin, inputRecord.MiterFallback, inputRecord.StrokeColor, inputRecord.FillColor);
}

function GlCanvasParams__get_MiterLimit(_) {
  return _.config.MiterLimit;
}

function GlCanvasParams__set_MiterLimit_5E38073B(_, value) {
  var inputRecord = _.config;
  _.config = new CanvasConfig(inputRecord.LineWidth, value, inputRecord.LineCap, inputRecord.LineJoin, inputRecord.MiterFallback, inputRecord.StrokeColor, inputRecord.FillColor);
}

function GlCanvasParams__get_LineCap(_) {
  return _.config.LineCap;
}

function GlCanvasParams__set_LineCap_7B1263D0(_, value) {
  var inputRecord = _.config;
  _.config = new CanvasConfig(inputRecord.LineWidth, inputRecord.MiterLimit, value, inputRecord.LineJoin, inputRecord.MiterFallback, inputRecord.StrokeColor, inputRecord.FillColor);
}

function GlCanvasParams__get_LineJoin(_) {
  return _.config.LineJoin;
}

function GlCanvasParams__set_LineJoin_Z229C3C20(_, value) {
  var inputRecord = _.config;
  _.config = new CanvasConfig(inputRecord.LineWidth, inputRecord.MiterLimit, inputRecord.LineCap, value, inputRecord.MiterFallback, inputRecord.StrokeColor, inputRecord.FillColor);
}

function GlCanvasParams__get_MiterFallback(_) {
  return _.config.MiterFallback;
}

function GlCanvasParams__set_MiterFallback_Z229C3C20(_, value) {
  var inputRecord = _.config;
  _.config = new CanvasConfig(inputRecord.LineWidth, inputRecord.MiterLimit, inputRecord.LineCap, inputRecord.LineJoin, value, inputRecord.StrokeColor, inputRecord.FillColor);
}

function GlCanvasParams__get_StrokeColor(_) {
  return (0, _vectorsFs.Vec4__Clone)(_.config.StrokeColor);
}

function GlCanvasParams__set_StrokeColor_Z66910A67(_, value) {
  var inputRecord = _.config;
  _.config = new CanvasConfig(inputRecord.LineWidth, inputRecord.MiterLimit, inputRecord.LineCap, inputRecord.LineJoin, inputRecord.MiterFallback, (0, _vectorsFs.Vec4__Clone)(value), inputRecord.FillColor);
}

function GlCanvasParams__get_FillColor(_) {
  return _.config.FillColor;
}

function GlCanvasParams__set_FillColor_Z66910A67(_, value) {
  var inputRecord = _.config;
  _.config = new CanvasConfig(inputRecord.LineWidth, inputRecord.MiterLimit, inputRecord.LineCap, inputRecord.LineJoin, inputRecord.MiterFallback, inputRecord.StrokeColor, (0, _vectorsFs.Vec4__Clone)(value));
}
},{"./.fable/fable-library.3.0.0/Types.js":"../src/.fable/fable-library.3.0.0/Types.js","./.fable/fable-library.3.0.0/Reflection.js":"../src/.fable/fable-library.3.0.0/Reflection.js","./vectors.fs.js":"../src/vectors.fs.js"}],"../src/seqex.fs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.of1 = of1;

var _Seq = require("./.fable/fable-library.3.0.0/Seq.js");

function of1(x) {
  return (0, _Seq.delay)(function () {
    return (0, _Seq.singleton)(x);
  });
}
},{"./.fable/fable-library.3.0.0/Seq.js":"../src/.fable/fable-library.3.0.0/Seq.js"}],"C:/Users/Blaine/AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/base64-js/index.js":[function(require,module,exports) {
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],"C:/Users/Blaine/AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/ieee754/index.js":[function(require,module,exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],"C:/Users/Blaine/AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/isarray/index.js":[function(require,module,exports) {
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],"C:/Users/Blaine/AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/buffer/index.js":[function(require,module,exports) {

var global = arguments[3];
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

},{"base64-js":"C:/Users/Blaine/AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/base64-js/index.js","ieee754":"C:/Users/Blaine/AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/ieee754/index.js","isarray":"C:/Users/Blaine/AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/isarray/index.js","buffer":"C:/Users/Blaine/AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"../src/webgl_builder_interfaces.fs.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GlUniformKind$reflection = GlUniformKind$reflection;
exports.GlAttributeKind$reflection = GlAttributeKind$reflection;
exports.GlCameraKind$reflection = GlCameraKind$reflection;
exports.GlTextureKind$reflection = GlTextureKind$reflection;
exports.GlPixelStorage$reflection = GlPixelStorage$reflection;
exports.GlTexturePixels$reflection = GlTexturePixels$reflection;
exports.GlUniformData$reflection = GlUniformData$reflection;
exports.GlUboData$reflection = GlUboData$reflection;
exports.GlIndiciesData$reflection = GlIndiciesData$reflection;
exports.GlAttributeData$reflection = GlAttributeData$reflection;
exports.GlRootAttribute$reflection = GlRootAttribute$reflection;
exports.GlTextureData$reflection = GlTextureData$reflection;
exports.GlObjData$reflection = GlObjData$reflection;
exports.GlCameraData$reflection = GlCameraData$reflection;
exports.GlLayerData$reflection = GlLayerData$reflection;
exports.GlSceneData$reflection = GlSceneData$reflection;
exports.GlCanvasData$reflection = GlCanvasData$reflection;
exports.GlUniformData__get_Name = GlUniformData__get_Name;
exports.GlUboData__get_Name = GlUboData__get_Name;
exports.GlAttributeData__get_Name = GlAttributeData__get_Name;
exports.GlUniformProp$reflection = GlUniformProp$reflection;
exports.GlUboProp$reflection = GlUboProp$reflection;
exports.GlAttrProp$reflection = GlAttrProp$reflection;
exports.GlIndiciesProp$reflection = GlIndiciesProp$reflection;
exports.GlObjProp$reflection = GlObjProp$reflection;
exports.GlTextureProp$reflection = GlTextureProp$reflection;
exports.GlCamProp$reflection = GlCamProp$reflection;
exports.GlSceneProp$reflection = GlSceneProp$reflection;
exports.WebglProp$reflection = WebglProp$reflection;
exports.GlCommon_splitName = GlCommon_splitName;
exports.GlCommon_getAttributeData = GlCommon_getAttributeData;
exports.GlCommon_getUbo = GlCommon_getUbo;
exports.GlCommon_tryGetUbo = GlCommon_tryGetUbo;
exports.GlCommon_allUniforms = GlCommon_allUniforms;
exports.GlCommon_allAttributes = GlCommon_allAttributes;
exports.GlCommon_getUniform = GlCommon_getUniform;
exports.GlCommon_tryGetUniform = GlCommon_tryGetUniform;
exports.GlCommon_getAttribute = GlCommon_getAttribute;
exports.GlCommon_tryGetAttribute = GlCommon_tryGetAttribute;
exports.GlCommon_getTexture = GlCommon_getTexture;
exports.GlCommon_tryGetTexture = GlCommon_tryGetTexture;
exports.GlCommon_objects = GlCommon_objects;
exports.GlCommon_getCamera = GlCommon_getCamera;
exports.GlCommon_tryGetCamera = GlCommon_tryGetCamera;
exports.GlCommon_getObject = GlCommon_getObject;
exports.GlCommon_tryGetObject = GlCommon_tryGetObject;
exports.GlCommon_dirtyScene = GlCommon_dirtyScene;
exports.GlCommon_dirtyObject = GlCommon_dirtyObject;
exports.GlCommon_dirtyModel = GlCommon_dirtyModel;
exports.GlCommon_dirtyParallax = GlCommon_dirtyParallax;
exports.GlCommon_objectRecalcNeeded = GlCommon_objectRecalcNeeded;
exports.GlCommon_nextUboBufferIndex = GlCommon_nextUboBufferIndex;
exports.GlCommon_nextTextureIndex = GlCommon_nextTextureIndex;
exports.GlCommon_addScene = GlCommon_addScene;
exports.GlCommon_removeScene = GlCommon_removeScene;
exports.GlCommon_addCamera = GlCommon_addCamera;
exports.GlCommon_removeCamera = GlCommon_removeCamera;
exports.GlCommon_addObject = GlCommon_addObject;
exports.GlCommon_removeObject = GlCommon_removeObject;
exports.GlCommon_addUbo = GlCommon_addUbo;
exports.GlCommon_addUniform = GlCommon_addUniform;
exports.GlCommon_addAttribute = GlCommon_addAttribute;
exports.GlCommon_addTexture = GlCommon_addTexture;
exports.GlCommon_addUboUniform = GlCommon_addUboUniform;
exports.GlCommon_objectDebugName = GlCommon_objectDebugName;
exports.GlAttribCommon_defaultData = GlAttribCommon_defaultData;
exports.GlAttribCommon_updateCommonData = GlAttribCommon_updateCommonData;
exports.GlAttribCommon_clean = GlAttribCommon_clean;
exports.GlAttribCommon_dirty = GlAttribCommon_dirty;
exports.GlAttribCommon_dirtyLinkedChildren = GlAttribCommon_dirtyLinkedChildren;
exports.GlAttribCommon_enableNeeded = GlAttribCommon_enableNeeded;
exports.GlAttribCommon_linkedChildrenEnableNeeded = GlAttribCommon_linkedChildrenEnableNeeded;
exports.GlAttribCommon_recalcNeeded = GlAttribCommon_recalcNeeded;
exports.GlAttribCommon_linkedChildrenRecalcNeeded = GlAttribCommon_linkedChildrenRecalcNeeded;
exports.GlAttribCommon_childrenDirty = GlAttribCommon_childrenDirty;
exports.GlAttribCommon_childrenEnableNeeded = GlAttribCommon_childrenEnableNeeded;
exports.GlAttribCommon_childrenRecalcNeeded = GlAttribCommon_childrenRecalcNeeded;
exports.GlAttribCommon_createLinked = GlAttribCommon_createLinked;
exports.GlDebug_logUniformData = GlDebug_logUniformData;
exports.GlDebug_logUboData = GlDebug_logUboData;
exports.GlDebug_logSingleAttributeData = GlDebug_logSingleAttributeData;
exports.GlDebug_logIndexAttributeData = GlDebug_logIndexAttributeData;
exports.GlDebug_logInterleaveAttributeData = GlDebug_logInterleaveAttributeData;
exports.GlDebug_logInterleaveChilAttributeData = GlDebug_logInterleaveChilAttributeData;
exports.GlDebug_logRootAttribute = GlDebug_logRootAttribute;
exports.GlDebug_logTextureData = GlDebug_logTextureData;
exports.GlDebug_logUniforms = GlDebug_logUniforms;
exports.GlDebug_logUbos = GlDebug_logUbos;
exports.GlDebug_logAttributes = GlDebug_logAttributes;
exports.GlDebug_logIndicies = GlDebug_logIndicies;
exports.GlDebug_logTextures = GlDebug_logTextures;
exports.GlDebug_tableUniforms = GlDebug_tableUniforms;
exports.GlDebug_tableUbos = GlDebug_tableUbos;
exports.GlDebug_tableUbosAndUniforms = GlDebug_tableUbosAndUniforms;
exports.GlDebug_tableAttributes = GlDebug_tableAttributes;
exports.GlDebug_tableIndicies = GlDebug_tableIndicies;
exports.GlDebug_tableAttributesAndIndicies = GlDebug_tableAttributesAndIndicies;
exports.GlDebug_tableTextures = GlDebug_tableTextures;
exports.GlDebug_logUniformInfoTree = GlDebug_logUniformInfoTree;
exports.GlDebug_logUboInfoTree = GlDebug_logUboInfoTree;
exports.GlDebug_logUniformTree = GlDebug_logUniformTree;
exports.GlDebug_logUboTree = GlDebug_logUboTree;
exports.GlDebug_logUniformInfosTree = GlDebug_logUniformInfosTree;
exports.GlDebug_logUboInfosTree = GlDebug_logUboInfosTree;
exports.GlDebug_logUniformsTree = GlDebug_logUniformsTree;
exports.GlDebug_logUbosTree = GlDebug_logUbosTree;
exports.GlDebug_logObjDef = GlDebug_logObjDef;
exports.GlDebug_tableObjDef = GlDebug_tableObjDef;
exports.GlDebug_tableObjDefAndContents = GlDebug_tableObjDefAndContents;
exports.WebglProp = exports.GlSceneProp = exports.GlCamProp = exports.GlTextureProp = exports.GlObjProp = exports.GlIndiciesProp = exports.GlAttrProp = exports.GlUboProp = exports.GlUniformProp = exports.GlCanvasData = exports.GlSceneData = exports.GlLayerData = exports.GlCameraData = exports.GlObjData = exports.GlTextureData = exports.GlRootAttribute = exports.GlAttributeData = exports.GlIndiciesData = exports.GlUboData = exports.GlUniformData = exports.GlTexturePixels = exports.GlPixelStorage = exports.GlTextureKind = exports.GlCameraKind = exports.GlAttributeKind = exports.GlUniformKind = void 0;

var _Types = require("./.fable/fable-library.3.0.0/Types.js");

var _Reflection = require("./.fable/fable-library.3.0.0/Reflection.js");

var _webgl_program_utilsFs = require("./webgl_program_utils.fs.js");

var _glbufferFs = require("./glbuffer.fs.js");

var _webgl_typesFs = require("./webgl_types.fs.js");

var _vectorsFs = require("./vectors.fs.js");

var _matriciesFs = require("./matricies.fs.js");

var _boundsFs = require("./bounds.fs.js");

var _utilsFs = require("./utils.fs.js");

var _glcanvasparamsFs = require("./glcanvasparams.fs.js");

var _String = require("./.fable/fable-library.3.0.0/String.js");

var _List = require("./.fable/fable-library.3.0.0/List.js");

var _Seq = require("./.fable/fable-library.3.0.0/Seq.js");

var _Util = require("./.fable/fable-library.3.0.0/Util.js");

var _Array = require("./.fable/fable-library.3.0.0/Array.js");

var _typedarray_utilsFs = require("./typedarray_utils.fs.js");

var _Option = require("./.fable/fable-library.3.0.0/Option.js");

var _optionexFs = require("./optionex.fs.js");

var _seqexFs = require("./seqex.fs.js");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var GlUniformKind = /*#__PURE__*/function (_Union) {
  _inherits(GlUniformKind, _Union);

  var _super = _createSuper(GlUniformKind);

  function GlUniformKind(tag) {
    var _this;

    _classCallCheck(this, GlUniformKind);

    _this = _super.call(this);
    _this.tag = tag | 0;

    for (var _len = arguments.length, fields = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      fields[_key - 1] = arguments[_key];
    }

    _this.fields = fields;
    return _this;
  }

  _createClass(GlUniformKind, [{
    key: "cases",
    value: function cases() {
      return ["Single", "Array", "ArrayChild"];
    }
  }]);

  return GlUniformKind;
}(_Types.Union);

exports.GlUniformKind = GlUniformKind;

function GlUniformKind$reflection() {
  return (0, _Reflection.union_type)("WebGLBuilderInterfaces.GlUniformKind", [], GlUniformKind, function () {
    return [[], [], []];
  });
}

var GlAttributeKind = /*#__PURE__*/function (_Union2) {
  _inherits(GlAttributeKind, _Union2);

  var _super2 = _createSuper(GlAttributeKind);

  function GlAttributeKind(tag) {
    var _this2;

    _classCallCheck(this, GlAttributeKind);

    _this2 = _super2.call(this);
    _this2.tag = tag | 0;

    for (var _len2 = arguments.length, fields = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      fields[_key2 - 1] = arguments[_key2];
    }

    _this2.fields = fields;
    return _this2;
  }

  _createClass(GlAttributeKind, [{
    key: "cases",
    value: function cases() {
      return ["Single", "Interleave", "InterleaveChild"];
    }
  }]);

  return GlAttributeKind;
}(_Types.Union);

exports.GlAttributeKind = GlAttributeKind;

function GlAttributeKind$reflection() {
  return (0, _Reflection.union_type)("WebGLBuilderInterfaces.GlAttributeKind", [], GlAttributeKind, function () {
    return [[], [], []];
  });
}

var GlCameraKind = /*#__PURE__*/function (_Union3) {
  _inherits(GlCameraKind, _Union3);

  var _super3 = _createSuper(GlCameraKind);

  function GlCameraKind(tag) {
    var _this3;

    _classCallCheck(this, GlCameraKind);

    _this3 = _super3.call(this);
    _this3.tag = tag | 0;

    for (var _len3 = arguments.length, fields = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      fields[_key3 - 1] = arguments[_key3];
    }

    _this3.fields = fields;
    return _this3;
  }

  _createClass(GlCameraKind, [{
    key: "cases",
    value: function cases() {
      return ["Ortho2D", "Perspective"];
    }
  }]);

  return GlCameraKind;
}(_Types.Union);

exports.GlCameraKind = GlCameraKind;

function GlCameraKind$reflection() {
  return (0, _Reflection.union_type)("WebGLBuilderInterfaces.GlCameraKind", [], GlCameraKind, function () {
    return [[], []];
  });
}

var GlTextureKind = /*#__PURE__*/function (_Union4) {
  _inherits(GlTextureKind, _Union4);

  var _super4 = _createSuper(GlTextureKind);

  function GlTextureKind(tag) {
    var _this4;

    _classCallCheck(this, GlTextureKind);

    _this4 = _super4.call(this);
    _this4.tag = tag | 0;

    for (var _len4 = arguments.length, fields = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
      fields[_key4 - 1] = arguments[_key4];
    }

    _this4.fields = fields;
    return _this4;
  }

  _createClass(GlTextureKind, [{
    key: "cases",
    value: function cases() {
      return ["DataTexture", "ImageTexture"];
    }
  }]);

  return GlTextureKind;
}(_Types.Union);

exports.GlTextureKind = GlTextureKind;

function GlTextureKind$reflection() {
  return (0, _Reflection.union_type)("WebGLBuilderInterfaces.GlTextureKind", [], GlTextureKind, function () {
    return [[], []];
  });
}

var GlPixelStorage = /*#__PURE__*/function (_Union5) {
  _inherits(GlPixelStorage, _Union5);

  var _super5 = _createSuper(GlPixelStorage);

  function GlPixelStorage(tag) {
    var _this5;

    _classCallCheck(this, GlPixelStorage);

    _this5 = _super5.call(this);
    _this5.tag = tag | 0;

    for (var _len5 = arguments.length, fields = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
      fields[_key5 - 1] = arguments[_key5];
    }

    _this5.fields = fields;
    return _this5;
  }

  _createClass(GlPixelStorage, [{
    key: "cases",
    value: function cases() {
      return ["PACK_ALIGNMENT", "UNPACK_ALIGNMENT", "UNPACK_FLIP_Y_WEBGL", "UNPACK_PREMULTIPLY_ALPHA_WEBGL", "UNPACK_COLORSPACE_CONVERSION_WEBGL", "PACK_ROW_LENGTH", "PACK_SKIP_PIXELS", "PACK_SKIP_ROWS", "UNPACK_ROW_LENGTH", "UNPACK_IMAGE_HEIGHT", "UNPACK_SKIP_PIXELS", "UNPACK_SKIP_ROWS", "UNPACK_SKIP_IMAGES"];
    }
  }]);

  return GlPixelStorage;
}(_Types.Union);

exports.GlPixelStorage = GlPixelStorage;

function GlPixelStorage$reflection() {
  return (0, _Reflection.union_type)("WebGLBuilderInterfaces.GlPixelStorage", [], GlPixelStorage, function () {
    return [[["Item", (0, _Reflection.enum_type)("WebGLTypes.GlPixelAlign", _Reflection.int32_type, [["ONE", 1], ["TWO", 2], ["FOUR", 4], ["EIGHT", 8]])]], [["Item", (0, _Reflection.enum_type)("WebGLTypes.GlPixelAlign", _Reflection.int32_type, [["ONE", 1], ["TWO", 2], ["FOUR", 4], ["EIGHT", 8]])]], [], [], [["Item", (0, _Reflection.enum_type)("WebGLTypes.GlPixelConversion", _Reflection.int32_type, [["NONE", 0], ["BROWSER_DEFAULT_WEBGL", 37444]])]], [["Item", _Reflection.int32_type]], [["Item", _Reflection.int32_type]], [["Item", _Reflection.int32_type]], [["Item", _Reflection.int32_type]], [["Item", _Reflection.int32_type]], [["Item", _Reflection.int32_type]], [["Item", _Reflection.int32_type]], [["Item", _Reflection.int32_type]]];
  });
}

var GlTexturePixels = /*#__PURE__*/function (_Union6) {
  _inherits(GlTexturePixels, _Union6);

  var _super6 = _createSuper(GlTexturePixels);

  function GlTexturePixels(tag) {
    var _this6;

    _classCallCheck(this, GlTexturePixels);

    _this6 = _super6.call(this);
    _this6.tag = tag | 0;

    for (var _len6 = arguments.length, fields = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
      fields[_key6 - 1] = arguments[_key6];
    }

    _this6.fields = fields;
    return _this6;
  }

  _createClass(GlTexturePixels, [{
    key: "cases",
    value: function cases() {
      return ["PixelData", "PixelImageData", "PixelHtmlImage", "PixelCanvas", "PixelVideo", "PixelBitmap"];
    }
  }]);

  return GlTexturePixels;
}(_Types.Union);

exports.GlTexturePixels = GlTexturePixels;

function GlTexturePixels$reflection() {
  return (0, _Reflection.union_type)("WebGLBuilderInterfaces.GlTexturePixels", [], GlTexturePixels, function () {
    return [[["Item", (0, _Reflection.class_type)("Fable.Core.JS.TypedArray")]], [["Item", (0, _Reflection.class_type)("Browser.Types.ImageData")]], [["Item", (0, _Reflection.class_type)("Browser.Types.HTMLImageElement")]], [["Item", (0, _Reflection.class_type)("Browser.Types.HTMLCanvasElement")]], [["Item", (0, _Reflection.class_type)("Browser.Types.HTMLVideoElement")]], [["Item", (0, _Reflection.class_type)("WebGLTypes.ImageBitmap")]]];
  });
}

var GlUniformData = /*#__PURE__*/function (_Record) {
  _inherits(GlUniformData, _Record);

  var _super7 = _createSuper(GlUniformData);

  function GlUniformData(Id, Info, IsDirty, Data, Value, ParentObject, ParentUbo, RootUniform, ChildUniforms, Link, LinkedChildren) {
    var _this7;

    _classCallCheck(this, GlUniformData);

    _this7 = _super7.call(this);
    _this7.Id = Id | 0;
    _this7.Info = Info;
    _this7.IsDirty = IsDirty;
    _this7.Data = Data;
    _this7.Value = Value;
    _this7.ParentObject = ParentObject;
    _this7.ParentUbo = ParentUbo;
    _this7.RootUniform = RootUniform;
    _this7.ChildUniforms = ChildUniforms;
    _this7.Link = Link;
    _this7.LinkedChildren = LinkedChildren;
    return _this7;
  }

  return GlUniformData;
}(_Types.Record);

exports.GlUniformData = GlUniformData;

function GlUniformData$reflection() {
  return (0, _Reflection.record_type)("WebGLBuilderInterfaces.GlUniformData", [], GlUniformData, function () {
    return [["Id", _Reflection.int32_type], ["Info", (0, _webgl_program_utilsFs.GlUniformInfo$reflection)()], ["IsDirty", _Reflection.bool_type], ["Data", (0, _Reflection.class_type)("Fable.Core.JS.TypedArray")], ["Value", _Reflection.obj_type], ["ParentObject", GlObjData$reflection()], ["ParentUbo", (0, _Reflection.option_type)(GlUboData$reflection())], ["RootUniform", (0, _Reflection.option_type)(GlUniformData$reflection())], ["ChildUniforms", (0, _Reflection.array_type)(GlUniformData$reflection())], ["Link", (0, _Reflection.option_type)(GlUniformData$reflection())], ["LinkedChildren", (0, _Reflection.list_type)(GlUniformData$reflection())]];
  });
}

var GlUboData = /*#__PURE__*/function (_Record2) {
  _inherits(GlUboData, _Record2);

  var _super8 = _createSuper(GlUboData);

  function GlUboData(Id, Info, IsDirty, Location, Uniforms, Buffer, Data, ParentObject, Link, LinkedChildren) {
    var _this8;

    _classCallCheck(this, GlUboData);

    _this8 = _super8.call(this);
    _this8.Id = Id | 0;
    _this8.Info = Info;
    _this8.IsDirty = IsDirty;
    _this8.Location = Location | 0;
    _this8.Uniforms = Uniforms;
    _this8.Buffer = Buffer;
    _this8.Data = Data;
    _this8.ParentObject = ParentObject;
    _this8.Link = Link;
    _this8.LinkedChildren = LinkedChildren;
    return _this8;
  }

  return GlUboData;
}(_Types.Record);

exports.GlUboData = GlUboData;

function GlUboData$reflection() {
  return (0, _Reflection.record_type)("WebGLBuilderInterfaces.GlUboData", [], GlUboData, function () {
    return [["Id", _Reflection.int32_type], ["Info", (0, _webgl_program_utilsFs.GlUboInfo$reflection)()], ["IsDirty", _Reflection.bool_type], ["Location", _Reflection.int32_type], ["Uniforms", (0, _Reflection.list_type)(GlUniformData$reflection())], ["Buffer", (0, _glbufferFs.GlBuffer$reflection)()], ["Data", (0, _Reflection.class_type)("Fable.Core.JS.TypedArray`1", [_Reflection.uint8_type])], ["ParentObject", GlObjData$reflection()], ["Link", (0, _Reflection.option_type)(GlUboData$reflection())], ["LinkedChildren", (0, _Reflection.list_type)(GlUboData$reflection())]];
  });
}

var GlIndiciesData = /*#__PURE__*/function (_Record3) {
  _inherits(GlIndiciesData, _Record3);

  var _super9 = _createSuper(GlIndiciesData);

  function GlIndiciesData(Name, IsDirty, IndiciesType, ArrayCreator, Offset, Values, DataCount, BufferUsage, Buffer, ParentObject, Link, LinkedChildren, RecalcNeeded, CalcDataCount) {
    var _this9;

    _classCallCheck(this, GlIndiciesData);

    _this9 = _super9.call(this);
    _this9.Name = Name;
    _this9.IsDirty = IsDirty;
    _this9.IndiciesType = IndiciesType | 0;
    _this9.ArrayCreator = ArrayCreator;
    _this9.Offset = Offset | 0;
    _this9.Values = Values;
    _this9.DataCount = DataCount | 0;
    _this9.BufferUsage = BufferUsage | 0;
    _this9.Buffer = Buffer;
    _this9.ParentObject = ParentObject;
    _this9.Link = Link;
    _this9.LinkedChildren = LinkedChildren;
    _this9.RecalcNeeded = RecalcNeeded;
    _this9.CalcDataCount = CalcDataCount;
    return _this9;
  }

  return GlIndiciesData;
}(_Types.Record);

exports.GlIndiciesData = GlIndiciesData;

function GlIndiciesData$reflection() {
  return (0, _Reflection.record_type)("WebGLBuilderInterfaces.GlIndiciesData", [], GlIndiciesData, function () {
    return [["Name", _Reflection.string_type], ["IsDirty", _Reflection.bool_type], ["IndiciesType", (0, _Reflection.enum_type)("WebGLTypes.GlIndiciesType", _Reflection.int32_type, [["UNSIGNED_BYTE", 5121], ["UNSIGNED_SHORT", 5123], ["UNSIGNED_INT", 5125]])], ["ArrayCreator", (0, _Reflection.class_type)("TypedArrayUtils.ITypedArrayFactory")], ["Offset", _Reflection.int32_type], ["Values", (0, _Reflection.array_type)(_Reflection.int32_type)], ["DataCount", _Reflection.int32_type], ["BufferUsage", (0, _Reflection.enum_type)("WebGLTypes.GlBufferUsage", _Reflection.int32_type, [["STREAM_DRAW", 35040], ["STATIC_DRAW", 35044], ["DYNAMIC_DRAW", 35048]])], ["Buffer", (0, _glbufferFs.GlBuffer$reflection)()], ["ParentObject", GlObjData$reflection()], ["Link", (0, _Reflection.option_type)(GlIndiciesData$reflection())], ["LinkedChildren", (0, _Reflection.list_type)(GlIndiciesData$reflection())], ["RecalcNeeded", _Reflection.bool_type], ["CalcDataCount", _Reflection.bool_type]];
  });
}

var GlAttributeData = /*#__PURE__*/function (_Record4) {
  _inherits(GlAttributeData, _Record4);

  var _super10 = _createSuper(GlAttributeData);

  function GlAttributeData(Id, Kind, Info, IsDirty, BaseType, ArrayCreator, RecordSize, ByteSize, DataLength, BaseTypeInfo, Normalize, StartIndex, IndexStride, Stride, Offset, Values, DataCount, BufferUsage, DeterminesVertexCount, DeterminesInstanceCount, Divisor, Buffer, ChildAttributes, ParentObject, ParentAttribute, Link, LinkedChildren, CanSingleCopy, EnableNeeded, RecalcNeeded, CalcDataCount, CalcStride, CalcOffset) {
    var _this10;

    _classCallCheck(this, GlAttributeData);

    _this10 = _super10.call(this);
    _this10.Id = Id | 0;
    _this10.Kind = Kind;
    _this10.Info = Info;
    _this10.IsDirty = IsDirty;
    _this10.BaseType = BaseType | 0;
    _this10.ArrayCreator = ArrayCreator;
    _this10.RecordSize = RecordSize | 0;
    _this10.ByteSize = ByteSize | 0;
    _this10.DataLength = DataLength | 0;
    _this10.BaseTypeInfo = BaseTypeInfo;
    _this10.Normalize = Normalize;
    _this10.StartIndex = StartIndex | 0;
    _this10.IndexStride = IndexStride | 0;
    _this10.Stride = Stride | 0;
    _this10.Offset = Offset | 0;
    _this10.Values = Values;
    _this10.DataCount = DataCount | 0;
    _this10.BufferUsage = BufferUsage | 0;
    _this10.DeterminesVertexCount = DeterminesVertexCount;
    _this10.DeterminesInstanceCount = DeterminesInstanceCount;
    _this10.Divisor = Divisor | 0;
    _this10.Buffer = Buffer;
    _this10.ChildAttributes = ChildAttributes;
    _this10.ParentObject = ParentObject;
    _this10.ParentAttribute = ParentAttribute;
    _this10.Link = Link;
    _this10.LinkedChildren = LinkedChildren;
    _this10.CanSingleCopy = CanSingleCopy;
    _this10.EnableNeeded = EnableNeeded;
    _this10.RecalcNeeded = RecalcNeeded;
    _this10.CalcDataCount = CalcDataCount;
    _this10.CalcStride = CalcStride;
    _this10.CalcOffset = CalcOffset;
    return _this10;
  }

  return GlAttributeData;
}(_Types.Record);

exports.GlAttributeData = GlAttributeData;

function GlAttributeData$reflection() {
  return (0, _Reflection.record_type)("WebGLBuilderInterfaces.GlAttributeData", [], GlAttributeData, function () {
    return [["Id", _Reflection.int32_type], ["Kind", GlAttributeKind$reflection()], ["Info", (0, _webgl_program_utilsFs.GlAttributeInfo$reflection)()], ["IsDirty", _Reflection.bool_type], ["BaseType", (0, _Reflection.enum_type)("WebGLTypes.GlType", _Reflection.int32_type, [["Unknown", 0], ["BYTE", 5120], ["SHORT", 5122], ["BOOL", 35670], ["BOOL_VEC2", 35671], ["BOOL_VEC3", 35672], ["BOOL_VEC4", 35673], ["FLOAT", 5126], ["HALF_FLOAT", 5131], ["FLOAT_MAT2x3", 35685], ["FLOAT_MAT2", 35674], ["FLOAT_MAT2x4", 35686], ["FLOAT_MAT3", 35675], ["FLOAT_MAT3x2", 35687], ["FLOAT_MAT3x4", 35688], ["FLOAT_MAT4", 35676], ["FLOAT_MAT4x2", 35689], ["FLOAT_MAT4x3", 35690], ["FLOAT_VEC2", 35664], ["FLOAT_VEC3", 35665], ["FLOAT_VEC4", 35666], ["INT", 5124], ["INT_VEC2", 35667], ["INT_VEC3", 35668], ["INT_VEC4", 35669], ["INT_SAMPLER_2D", 36298], ["INT_SAMPLER_2D_ARRAY", 36303], ["INT_SAMPLER_3D", 36299], ["INT_SAMPLER_CUBE", 36300], ["UNSIGNED_BYTE", 5121], ["UNSIGNED_SHORT", 5123], ["UNSIGNED_INT", 5125], ["UNSIGNED_INT_24_8", 34042], ["UNSIGNED_INT_SAMPLER_2D", 36306], ["UNSIGNED_INT_SAMPLER_2D_ARRAY", 36311], ["UNSIGNED_INT_SAMPLER_3D", 36307], ["UNSIGNED_INT_SAMPLER_CUBE", 36308], ["UNSIGNED_INT_VEC2", 36294], ["UNSIGNED_INT_VEC3", 36295], ["UNSIGNED_INT_VEC4", 36296], ["SAMPLER_2D", 35678], ["SAMPLER_2D_ARRAY", 36289], ["SAMPLER_2D_ARRAY_SHADOW", 36292], ["SAMPLER_2D_SHADOW", 35682], ["SAMPLER_3D", 35679], ["SAMPLER_CUBE", 35680], ["SAMPLER_CUBE_SHADOW", 36293]])], ["ArrayCreator", (0, _Reflection.class_type)("TypedArrayUtils.ITypedArrayFactory")], ["RecordSize", _Reflection.int32_type], ["ByteSize", _Reflection.int32_type], ["DataLength", _Reflection.int32_type], ["BaseTypeInfo", (0, _webgl_typesFs.GlTypeInfo$reflection)()], ["Normalize", _Reflection.bool_type], ["StartIndex", _Reflection.int32_type], ["IndexStride", _Reflection.int32_type], ["Stride", _Reflection.int32_type], ["Offset", _Reflection.int32_type], ["Values", (0, _Reflection.array_type)(_Reflection.float64_type)], ["DataCount", _Reflection.int32_type], ["BufferUsage", (0, _Reflection.enum_type)("WebGLTypes.GlBufferUsage", _Reflection.int32_type, [["STREAM_DRAW", 35040], ["STATIC_DRAW", 35044], ["DYNAMIC_DRAW", 35048]])], ["DeterminesVertexCount", _Reflection.bool_type], ["DeterminesInstanceCount", _Reflection.bool_type], ["Divisor", _Reflection.int32_type], ["Buffer", (0, _glbufferFs.GlBuffer$reflection)()], ["ChildAttributes", (0, _Reflection.list_type)(GlAttributeData$reflection())], ["ParentObject", GlObjData$reflection()], ["ParentAttribute", (0, _Reflection.option_type)(GlAttributeData$reflection())], ["Link", (0, _Reflection.option_type)(GlAttributeData$reflection())], ["LinkedChildren", (0, _Reflection.list_type)(GlAttributeData$reflection())], ["CanSingleCopy", _Reflection.bool_type], ["EnableNeeded", _Reflection.bool_type], ["RecalcNeeded", _Reflection.bool_type], ["CalcDataCount", _Reflection.bool_type], ["CalcStride", _Reflection.bool_type], ["CalcOffset", _Reflection.bool_type]];
  });
}

var GlRootAttribute = /*#__PURE__*/function (_Union7) {
  _inherits(GlRootAttribute, _Union7);

  var _super11 = _createSuper(GlRootAttribute);

  function GlRootAttribute(tag) {
    var _this11;

    _classCallCheck(this, GlRootAttribute);

    _this11 = _super11.call(this);
    _this11.tag = tag | 0;

    for (var _len7 = arguments.length, fields = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
      fields[_key7 - 1] = arguments[_key7];
    }

    _this11.fields = fields;
    return _this11;
  }

  _createClass(GlRootAttribute, [{
    key: "cases",
    value: function cases() {
      return ["SingleAttribute", "InterleaveAttribute"];
    }
  }]);

  return GlRootAttribute;
}(_Types.Union);

exports.GlRootAttribute = GlRootAttribute;

function GlRootAttribute$reflection() {
  return (0, _Reflection.union_type)("WebGLBuilderInterfaces.GlRootAttribute", [], GlRootAttribute, function () {
    return [[["Item", GlAttributeData$reflection()]], [["Item", GlAttributeData$reflection()]]];
  });
}

var GlTextureData = /*#__PURE__*/function (_Record5) {
  _inherits(GlTextureData, _Record5);

  var _super12 = _createSuper(GlTextureData);

  function GlTextureData(Id, Name, IsDirty, Target, TextureId, Index, Level, InternalFormat, Width, Height, Format, DataType, Pixels, Offset, MagFilter, MinFilter, WrapS, WrapT, WrapR, BaseLevel, CompareFunc, CompareMode, MaxLevel, MaxLod, MinLod, ParentObject, Link, LinkedChildren) {
    var _this12;

    _classCallCheck(this, GlTextureData);

    _this12 = _super12.call(this);
    _this12.Id = Id | 0;
    _this12.Name = Name;
    _this12.IsDirty = IsDirty;
    _this12.Target = Target | 0;
    _this12.TextureId = TextureId;
    _this12.Index = Index | 0;
    _this12.Level = Level | 0;
    _this12.InternalFormat = InternalFormat | 0;
    _this12.Width = Width;
    _this12.Height = Height;
    _this12.Format = Format | 0;
    _this12.DataType = DataType | 0;
    _this12.Pixels = Pixels;
    _this12.Offset = Offset | 0;
    _this12.MagFilter = MagFilter;
    _this12.MinFilter = MinFilter;
    _this12.WrapS = WrapS;
    _this12.WrapT = WrapT;
    _this12.WrapR = WrapR;
    _this12.BaseLevel = BaseLevel;
    _this12.CompareFunc = CompareFunc;
    _this12.CompareMode = CompareMode;
    _this12.MaxLevel = MaxLevel;
    _this12.MaxLod = MaxLod;
    _this12.MinLod = MinLod;
    _this12.ParentObject = ParentObject;
    _this12.Link = Link;
    _this12.LinkedChildren = LinkedChildren;
    return _this12;
  }

  return GlTextureData;
}(_Types.Record);

exports.GlTextureData = GlTextureData;

function GlTextureData$reflection() {
  return (0, _Reflection.record_type)("WebGLBuilderInterfaces.GlTextureData", [], GlTextureData, function () {
    return [["Id", _Reflection.int32_type], ["Name", _Reflection.string_type], ["IsDirty", _Reflection.bool_type], ["Target", (0, _Reflection.enum_type)("WebGLTypes.GlTextureTarget", _Reflection.int32_type, [["TEXTURE_2D", 3553], ["TEXTURE_CUBE_MAP_POSITIVE_X", 34069], ["TEXTURE_CUBE_MAP_NEGATIVE_X", 34070], ["TEXTURE_CUBE_MAP_POSITIVE_Y", 34071], ["TEXTURE_CUBE_MAP_NEGATIVE_Y", 34072], ["TEXTURE_CUBE_MAP_POSITIVE_Z", 34073], ["TEXTURE_CUBE_MAP_NEGATIVE_Z", 34074]])], ["TextureId", (0, _Reflection.class_type)("Browser.Types.WebGLTexture")], ["Index", _Reflection.int32_type], ["Level", _Reflection.int32_type], ["InternalFormat", (0, _Reflection.enum_type)("WebGLTypes.GlColorFormat", _Reflection.int32_type, [["RGB", 6407], ["RGBA", 6408], ["LUMINANCE", 6409], ["LUMINANCE_ALPHA", 6410], ["ALPHA", 6406], ["R8", 33321], ["R8_SNORM", 36756], ["RG8", 33323], ["RG8_SNORM", 36757], ["RGB8", 32849], ["RGB8_SNORM", 36758], ["RGB565", 36194], ["RGBA4", 32854], ["RGB5_A1", 32855], ["RGBA8", 32856], ["RGBA8_SNORM", 36759], ["RGB10_A2", 32857], ["RGB10_A2UI", 36975], ["SRGB8", 35905], ["SRGB8_ALPHA8", 35907], ["R16F", 33325], ["RG16F", 33327], ["RGB16F", 34843], ["RGBA16F", 34842], ["R32F", 33326], ["RG32F", 33328], ["RGB32F", 34837], ["RGBA32F", 34836], ["R11F_G11F_B10F", 35898], ["RGB9_E5", 35901], ["R8I", 33329], ["R8UI", 33330], ["R16I", 33331], ["R16UI", 33332], ["R32I", 33333], ["R32UI", 33334], ["RG8I", 33335], ["RG8UI", 33336], ["RG16I", 33337], ["RG16UI", 33338], ["RG32I", 33339], ["RG32UI", 33340], ["RGB8UI", 36221], ["RGB16I", 36233], ["RGB16UI", 36215], ["RGB32I", 36227], ["RGB32UI", 36209], ["RGBA8I", 36238], ["RGBA8UI", 36220], ["RGBA16I", 36232], ["RGBA16UI", 36214], ["RGBA32I", 36226], ["RGBA32UI", 36208]])], ["Width", _Reflection.float64_type], ["Height", _Reflection.float64_type], ["Format", (0, _Reflection.enum_type)("WebGLTypes.GlColorFormat", _Reflection.int32_type, [["RGB", 6407], ["RGBA", 6408], ["LUMINANCE", 6409], ["LUMINANCE_ALPHA", 6410], ["ALPHA", 6406], ["R8", 33321], ["R8_SNORM", 36756], ["RG8", 33323], ["RG8_SNORM", 36757], ["RGB8", 32849], ["RGB8_SNORM", 36758], ["RGB565", 36194], ["RGBA4", 32854], ["RGB5_A1", 32855], ["RGBA8", 32856], ["RGBA8_SNORM", 36759], ["RGB10_A2", 32857], ["RGB10_A2UI", 36975], ["SRGB8", 35905], ["SRGB8_ALPHA8", 35907], ["R16F", 33325], ["RG16F", 33327], ["RGB16F", 34843], ["RGBA16F", 34842], ["R32F", 33326], ["RG32F", 33328], ["RGB32F", 34837], ["RGBA32F", 34836], ["R11F_G11F_B10F", 35898], ["RGB9_E5", 35901], ["R8I", 33329], ["R8UI", 33330], ["R16I", 33331], ["R16UI", 33332], ["R32I", 33333], ["R32UI", 33334], ["RG8I", 33335], ["RG8UI", 33336], ["RG16I", 33337], ["RG16UI", 33338], ["RG32I", 33339], ["RG32UI", 33340], ["RGB8UI", 36221], ["RGB16I", 36233], ["RGB16UI", 36215], ["RGB32I", 36227], ["RGB32UI", 36209], ["RGBA8I", 36238], ["RGBA8UI", 36220], ["RGBA16I", 36232], ["RGBA16UI", 36214], ["RGBA32I", 36226], ["RGBA32UI", 36208]])], ["DataType", (0, _Reflection.enum_type)("WebGLTypes.GlTextureType", _Reflection.int32_type, [["UNSIGNED_BYTE", 5121], ["UNSIGNED_SHORT_4_4_4_4", 32819], ["UNSIGNED_SHORT_5_5_5_1", 32820], ["UNSIGNED_SHORT_5_6_5", 33635], ["UNSIGNED_SHORT", 5123], ["UNSIGNED_INT", 5125], ["UNSIGNED_INT_24_8", 34042], ["FLOAT", 5126], ["HALF_FLOAT", 5131], ["BYTE", 5120], ["SHORT", 5122], ["INT", 5124], ["UNSIGNED_INT_2_10_10_10_REV", 33640], ["UNSIGNED_INT_10F_11F_11F_REV", 35899], ["UNSIGNED_INT_5_9_9_9_REV", 35902], ["FLOAT_32_UNSIGNED_INT_24_8_REV", 36269]])], ["Pixels", GlTexturePixels$reflection()], ["Offset", _Reflection.int32_type], ["MagFilter", (0, _Reflection.option_type)((0, _Reflection.enum_type)("WebGLTypes.GlMagFilter", _Reflection.int32_type, [["NEAREST", 9728], ["LINEAR", 9729]]))], ["MinFilter", (0, _Reflection.option_type)((0, _Reflection.enum_type)("WebGLTypes.GlMinFilter", _Reflection.int32_type, [["NEAREST", 9728], ["LINEAR", 9729], ["NEAREST_MIPMAP_NEAREST", 9984], ["LINEAR_MIPMAP_NEAREST", 9985], ["NEAREST_MIPMAP_LINEAR", 9986], ["LINEAR_MIPMAP_LINEAR", 9987]]))], ["WrapS", (0, _Reflection.option_type)((0, _Reflection.enum_type)("WebGLTypes.GlWrapMode", _Reflection.int32_type, [["REPEAT", 10497], ["CLAMP_TO_EDGE", 33071], ["MIRRORED_REPEAT", 33648]]))], ["WrapT", (0, _Reflection.option_type)((0, _Reflection.enum_type)("WebGLTypes.GlWrapMode", _Reflection.int32_type, [["REPEAT", 10497], ["CLAMP_TO_EDGE", 33071], ["MIRRORED_REPEAT", 33648]]))], ["WrapR", (0, _Reflection.option_type)((0, _Reflection.enum_type)("WebGLTypes.GlWrapMode", _Reflection.int32_type, [["REPEAT", 10497], ["CLAMP_TO_EDGE", 33071], ["MIRRORED_REPEAT", 33648]]))], ["BaseLevel", (0, _Reflection.option_type)(_Reflection.int32_type)], ["CompareFunc", (0, _Reflection.option_type)((0, _Reflection.enum_type)("WebGLTypes.GlCompareFunc", _Reflection.int32_type, [["NEVER", 512], ["LESS", 513], ["EQUAL", 514], ["LEQUAL", 515], ["GREATER", 516], ["NOTEQUAL", 517], ["GEQUAL", 518], ["ALWAYS", 519]]))], ["CompareMode", (0, _Reflection.option_type)((0, _Reflection.enum_type)("WebGLTypes.GlCompareMode", _Reflection.int32_type, [["NONE", 0], ["COMPARE_REF_TO_TEXTURE", 34894]]))], ["MaxLevel", (0, _Reflection.option_type)(_Reflection.int32_type)], ["MaxLod", (0, _Reflection.option_type)(_Reflection.float64_type)], ["MinLod", (0, _Reflection.option_type)(_Reflection.float64_type)], ["ParentObject", GlObjData$reflection()], ["Link", (0, _Reflection.option_type)(GlTextureData$reflection())], ["LinkedChildren", (0, _Reflection.list_type)(GlTextureData$reflection())]];
  });
}

var GlObjData = /*#__PURE__*/function (_Record6) {
  _inherits(GlObjData, _Record6);

  var _super13 = _createSuper(GlObjData);

  function GlObjData(Id, Name, ProgramInfo, IsDirty, Scene, DrawMethod, DrawPrimitive, VertexCount, VertexOffset, VertexCountOffset, InstanceCount, InstanceOffset, InstanceCountOffset, IndiciesOffset, Capabilities, Uniforms, Ubos, Attributes, Indicies, Textures, VertexCountAttributes, InstanceCountAttributes, Vao, ProcessLinked, Layer, ParallaxCamera, ParallaxDistance, ParallaxOffset, ParallaxLastPosition, Angle, Position, Scale, ModelMatrix, ParallaxMatrix, Parent, Link, LinkedChildren, IsModelDirty, IsParallaxDirty, RecalcNeeded, CalcDrawMethod, CalcVertexCount, CalcInstanceCount) {
    var _this13;

    _classCallCheck(this, GlObjData);

    _this13 = _super13.call(this);
    _this13.Id = Id | 0;
    _this13.Name = Name;
    _this13.ProgramInfo = ProgramInfo;
    _this13.IsDirty = IsDirty;
    _this13.Scene = Scene;
    _this13.DrawMethod = DrawMethod;
    _this13.DrawPrimitive = DrawPrimitive | 0;
    _this13.VertexCount = VertexCount | 0;
    _this13.VertexOffset = VertexOffset | 0;
    _this13.VertexCountOffset = VertexCountOffset | 0;
    _this13.InstanceCount = InstanceCount | 0;
    _this13.InstanceOffset = InstanceOffset | 0;
    _this13.InstanceCountOffset = InstanceCountOffset | 0;
    _this13.IndiciesOffset = IndiciesOffset | 0;
    _this13.Capabilities = Capabilities;
    _this13.Uniforms = Uniforms;
    _this13.Ubos = Ubos;
    _this13.Attributes = Attributes;
    _this13.Indicies = Indicies;
    _this13.Textures = Textures;
    _this13.VertexCountAttributes = VertexCountAttributes;
    _this13.InstanceCountAttributes = InstanceCountAttributes;
    _this13.Vao = Vao;
    _this13.ProcessLinked = ProcessLinked;
    _this13.Layer = Layer | 0;
    _this13.ParallaxCamera = ParallaxCamera;
    _this13.ParallaxDistance = ParallaxDistance;
    _this13.ParallaxOffset = ParallaxOffset;
    _this13.ParallaxLastPosition = ParallaxLastPosition;
    _this13.Angle = Angle;
    _this13.Position = Position;
    _this13.Scale = Scale;
    _this13.ModelMatrix = ModelMatrix;
    _this13.ParallaxMatrix = ParallaxMatrix;
    _this13.Parent = Parent;
    _this13.Link = Link;
    _this13.LinkedChildren = LinkedChildren;
    _this13.IsModelDirty = IsModelDirty;
    _this13.IsParallaxDirty = IsParallaxDirty;
    _this13.RecalcNeeded = RecalcNeeded;
    _this13.CalcDrawMethod = CalcDrawMethod;
    _this13.CalcVertexCount = CalcVertexCount;
    _this13.CalcInstanceCount = CalcInstanceCount;
    return _this13;
  }

  return GlObjData;
}(_Types.Record);

exports.GlObjData = GlObjData;

function GlObjData$reflection() {
  return (0, _Reflection.record_type)("WebGLBuilderInterfaces.GlObjData", [], GlObjData, function () {
    return [["Id", _Reflection.int32_type], ["Name", _Reflection.string_type], ["ProgramInfo", (0, _webgl_program_utilsFs.GlProgramInfo$reflection)()], ["IsDirty", _Reflection.bool_type], ["Scene", GlSceneData$reflection()], ["DrawMethod", (0, _webgl_typesFs.GlDrawMethod$reflection)()], ["DrawPrimitive", (0, _Reflection.enum_type)("WebGLTypes.GlDrawPrimitive", _Reflection.int32_type, [["POINTS", 0], ["LINES", 1], ["LINE_LOOP", 2], ["LINE_STRIP", 3], ["TRIANGLES", 4], ["TRIANGLE_STRIP", 5], ["TRIANGLE_FAN", 6]])], ["VertexCount", _Reflection.int32_type], ["VertexOffset", _Reflection.int32_type], ["VertexCountOffset", _Reflection.int32_type], ["InstanceCount", _Reflection.int32_type], ["InstanceOffset", _Reflection.int32_type], ["InstanceCountOffset", _Reflection.int32_type], ["IndiciesOffset", _Reflection.int32_type], ["Capabilities", (0, _Reflection.list_type)((0, _Reflection.lambda_type)((0, _Reflection.class_type)("Browser.Types.WebGLRenderingContext"), _Reflection.unit_type))], ["Uniforms", (0, _Reflection.list_type)(GlUniformData$reflection())], ["Ubos", (0, _Reflection.list_type)(GlUboData$reflection())], ["Attributes", (0, _Reflection.list_type)(GlRootAttribute$reflection())], ["Indicies", (0, _Reflection.option_type)(GlIndiciesData$reflection())], ["Textures", (0, _Reflection.list_type)(GlTextureData$reflection())], ["VertexCountAttributes", (0, _Reflection.list_type)(GlAttributeData$reflection())], ["InstanceCountAttributes", (0, _Reflection.list_type)(GlAttributeData$reflection())], ["Vao", (0, _Reflection.class_type)("WebGLTypes.WebGLVAO")], ["ProcessLinked", _Reflection.bool_type], ["Layer", _Reflection.int32_type], ["ParallaxCamera", (0, _Reflection.option_type)(GlCameraData$reflection())], ["ParallaxDistance", _Reflection.float64_type], ["ParallaxOffset", (0, _vectorsFs.Vec3$reflection)()], ["ParallaxLastPosition", (0, _vectorsFs.Vec3$reflection)()], ["Angle", (0, _vectorsFs.Vec3$reflection)()], ["Position", (0, _vectorsFs.Vec3$reflection)()], ["Scale", _Reflection.float64_type], ["ModelMatrix", (0, _matriciesFs.Mat4$reflection)()], ["ParallaxMatrix", (0, _Reflection.option_type)((0, _matriciesFs.Mat4$reflection)())], ["Parent", (0, _Reflection.option_type)(GlObjData$reflection())], ["Link", (0, _Reflection.option_type)(GlObjData$reflection())], ["LinkedChildren", (0, _Reflection.list_type)(GlObjData$reflection())], ["IsModelDirty", _Reflection.bool_type], ["IsParallaxDirty", _Reflection.bool_type], ["RecalcNeeded", _Reflection.bool_type], ["CalcDrawMethod", _Reflection.bool_type], ["CalcVertexCount", _Reflection.bool_type], ["CalcInstanceCount", _Reflection.bool_type]];
  });
}

var GlCameraData = /*#__PURE__*/function (_Record7) {
  _inherits(GlCameraData, _Record7);

  var _super14 = _createSuper(GlCameraData);

  function GlCameraData(Id, Kind, Name, IsDirty, Scene, ClearViewport, CameraBackground, ClearMask, BorderWidth, AutoSizeViewport, UseViewSizeAspect, AutoPosition, Position, LookAt, ViewSize, ViewportBounds, Up, Near, Far, Aspect, Fov, ProjectionMatrix, ViewMatrix) {
    var _this14;

    _classCallCheck(this, GlCameraData);

    _this14 = _super14.call(this);
    _this14.Id = Id | 0;
    _this14.Kind = Kind;
    _this14.Name = Name;
    _this14.IsDirty = IsDirty;
    _this14.Scene = Scene;
    _this14.ClearViewport = ClearViewport;
    _this14.CameraBackground = CameraBackground;
    _this14.ClearMask = ClearMask | 0;
    _this14.BorderWidth = BorderWidth;
    _this14.AutoSizeViewport = AutoSizeViewport;
    _this14.UseViewSizeAspect = UseViewSizeAspect;
    _this14.AutoPosition = AutoPosition;
    _this14.Position = Position;
    _this14.LookAt = LookAt;
    _this14.ViewSize = ViewSize;
    _this14.ViewportBounds = ViewportBounds;
    _this14.Up = Up;
    _this14.Near = Near;
    _this14.Far = Far;
    _this14.Aspect = Aspect;
    _this14.Fov = Fov;
    _this14.ProjectionMatrix = ProjectionMatrix;
    _this14.ViewMatrix = ViewMatrix;
    return _this14;
  }

  return GlCameraData;
}(_Types.Record);

exports.GlCameraData = GlCameraData;

function GlCameraData$reflection() {
  return (0, _Reflection.record_type)("WebGLBuilderInterfaces.GlCameraData", [], GlCameraData, function () {
    return [["Id", _Reflection.int32_type], ["Kind", GlCameraKind$reflection()], ["Name", _Reflection.string_type], ["IsDirty", _Reflection.bool_type], ["Scene", GlSceneData$reflection()], ["ClearViewport", _Reflection.bool_type], ["CameraBackground", (0, _vectorsFs.Vec4$reflection)()], ["ClearMask", (0, _Reflection.enum_type)("WebGLTypes.GlClearBit", _Reflection.int32_type, [["COLOR_BUFFER_BIT", 16384], ["DEPTH_BUFFER_BIT", 256], ["STENCIL_BUFFER_BIT", 1024]])], ["BorderWidth", _Reflection.float64_type], ["AutoSizeViewport", _Reflection.bool_type], ["UseViewSizeAspect", _Reflection.bool_type], ["AutoPosition", _Reflection.bool_type], ["Position", (0, _vectorsFs.Vec3$reflection)()], ["LookAt", (0, _vectorsFs.Vec3$reflection)()], ["ViewSize", (0, _vectorsFs.Vec2$reflection)()], ["ViewportBounds", (0, _boundsFs.Bounds$reflection)()], ["Up", (0, _vectorsFs.Vec3$reflection)()], ["Near", _Reflection.float64_type], ["Far", _Reflection.float64_type], ["Aspect", _Reflection.float64_type], ["Fov", _Reflection.float64_type], ["ProjectionMatrix", (0, _matriciesFs.Mat4$reflection)()], ["ViewMatrix", (0, _matriciesFs.Mat4$reflection)()]];
  });
}

var GlLayerData = /*#__PURE__*/function (_Record8) {
  _inherits(GlLayerData, _Record8);

  var _super15 = _createSuper(GlLayerData);

  function GlLayerData(Index, Objects) {
    var _this15;

    _classCallCheck(this, GlLayerData);

    _this15 = _super15.call(this);
    _this15.Index = Index | 0;
    _this15.Objects = Objects;
    return _this15;
  }

  return GlLayerData;
}(_Types.Record);

exports.GlLayerData = GlLayerData;

function GlLayerData$reflection() {
  return (0, _Reflection.record_type)("WebGLBuilderInterfaces.GlLayerData", [], GlLayerData, function () {
    return [["Index", _Reflection.int32_type], ["Objects", (0, _Reflection.list_type)(GlObjData$reflection())]];
  });
}

var GlSceneData = /*#__PURE__*/function (_Record9) {
  _inherits(GlSceneData, _Record9);

  var _super16 = _createSuper(GlSceneData);

  function GlSceneData(Id, Name, IsDirty, Canvas, SceneBackground, ClearMask, WorldBounds, SceneBounds, WorldScale, LineWidthScale, ClearSceneBackground, Layers, DefaultLayer, Shared, Cameras) {
    var _this16;

    _classCallCheck(this, GlSceneData);

    _this16 = _super16.call(this);
    _this16.Id = Id | 0;
    _this16.Name = Name;
    _this16.IsDirty = IsDirty;
    _this16.Canvas = Canvas;
    _this16.SceneBackground = SceneBackground;
    _this16.ClearMask = ClearMask | 0;
    _this16.WorldBounds = WorldBounds;
    _this16.SceneBounds = SceneBounds;
    _this16.WorldScale = WorldScale;
    _this16.LineWidthScale = LineWidthScale;
    _this16.ClearSceneBackground = ClearSceneBackground;
    _this16.Layers = Layers;
    _this16.DefaultLayer = DefaultLayer | 0;
    _this16.Shared = Shared;
    _this16.Cameras = Cameras;
    return _this16;
  }

  return GlSceneData;
}(_Types.Record);

exports.GlSceneData = GlSceneData;

function GlSceneData$reflection() {
  return (0, _Reflection.record_type)("WebGLBuilderInterfaces.GlSceneData", [], GlSceneData, function () {
    return [["Id", _Reflection.int32_type], ["Name", _Reflection.string_type], ["IsDirty", _Reflection.bool_type], ["Canvas", GlCanvasData$reflection()], ["SceneBackground", (0, _vectorsFs.Vec4$reflection)()], ["ClearMask", (0, _Reflection.enum_type)("WebGLTypes.GlClearBit", _Reflection.int32_type, [["COLOR_BUFFER_BIT", 16384], ["DEPTH_BUFFER_BIT", 256], ["STENCIL_BUFFER_BIT", 1024]])], ["WorldBounds", (0, _boundsFs.Bounds$reflection)()], ["SceneBounds", (0, _boundsFs.Bounds$reflection)()], ["WorldScale", _Reflection.float64_type], ["LineWidthScale", _Reflection.float64_type], ["ClearSceneBackground", _Reflection.bool_type], ["Layers", (0, _Reflection.array_type)(GlLayerData$reflection())], ["DefaultLayer", _Reflection.int32_type], ["Shared", (0, _Reflection.option_type)(GlObjData$reflection())], ["Cameras", (0, _Reflection.list_type)(GlCameraData$reflection())]];
  });
}

var GlCanvasData = /*#__PURE__*/function (_Record10) {
  _inherits(GlCanvasData, _Record10);

  var _super17 = _createSuper(GlCanvasData);

  function GlCanvasData(Name, IsDirty, Context, Attributes, Params, PixelStorageParams, CanvasBackground, ClearMask, ClearCanvas, WorldBounds, CanvasBounds, Scenes) {
    var _this17;

    _classCallCheck(this, GlCanvasData);

    _this17 = _super17.call(this);
    _this17.Name = Name;
    _this17.IsDirty = IsDirty;
    _this17.Context = Context;
    _this17.Attributes = Attributes;
    _this17.Params = Params;
    _this17.PixelStorageParams = PixelStorageParams;
    _this17.CanvasBackground = CanvasBackground;
    _this17.ClearMask = ClearMask | 0;
    _this17.ClearCanvas = ClearCanvas;
    _this17.WorldBounds = WorldBounds;
    _this17.CanvasBounds = CanvasBounds;
    _this17.Scenes = Scenes;
    return _this17;
  }

  return GlCanvasData;
}(_Types.Record);

exports.GlCanvasData = GlCanvasData;

function GlCanvasData$reflection() {
  return (0, _Reflection.record_type)("WebGLBuilderInterfaces.GlCanvasData", [], GlCanvasData, function () {
    return [["Name", _Reflection.string_type], ["IsDirty", _Reflection.bool_type], ["Context", (0, _Reflection.class_type)("Browser.Types.WebGLRenderingContext")], ["Attributes", (0, _utilsFs.WebglContextAttributes$reflection)()], ["Params", (0, _glcanvasparamsFs.GlCanvasParams$reflection)()], ["PixelStorageParams", (0, _Reflection.list_type)(GlPixelStorage$reflection())], ["CanvasBackground", (0, _vectorsFs.Vec4$reflection)()], ["ClearMask", (0, _Reflection.enum_type)("WebGLTypes.GlClearBit", _Reflection.int32_type, [["COLOR_BUFFER_BIT", 16384], ["DEPTH_BUFFER_BIT", 256], ["STENCIL_BUFFER_BIT", 1024]])], ["ClearCanvas", _Reflection.bool_type], ["WorldBounds", (0, _boundsFs.Bounds$reflection)()], ["CanvasBounds", (0, _boundsFs.Bounds$reflection)()], ["Scenes", (0, _Reflection.array_type)(GlSceneData$reflection())]];
  });
}

function GlUniformData__get_Name(this$) {
  return this$.Info.Name;
}

function GlUboData__get_Name(this$) {
  return this$.Info.Name;
}

function GlAttributeData__get_Name(this$) {
  return this$.Info.Name;
}

var GlUniformProp = /*#__PURE__*/function (_Union8) {
  _inherits(GlUniformProp, _Union8);

  var _super18 = _createSuper(GlUniformProp);

  function GlUniformProp(tag) {
    var _this18;

    _classCallCheck(this, GlUniformProp);

    _this18 = _super18.call(this);
    _this18.tag = tag | 0;

    for (var _len8 = arguments.length, fields = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {
      fields[_key8 - 1] = arguments[_key8];
    }

    _this18.fields = fields;
    return _this18;
  }

  _createClass(GlUniformProp, [{
    key: "cases",
    value: function cases() {
      return ["Value", "UniformLink"];
    }
  }]);

  return GlUniformProp;
}(_Types.Union);

exports.GlUniformProp = GlUniformProp;

function GlUniformProp$reflection() {
  return (0, _Reflection.union_type)("WebGLBuilderInterfaces.GlUniformProp", [], GlUniformProp, function () {
    return [[["Item", _Reflection.obj_type]], [["Item", _Reflection.string_type]]];
  });
}

var GlUboProp = /*#__PURE__*/function (_Union9) {
  _inherits(GlUboProp, _Union9);

  var _super19 = _createSuper(GlUboProp);

  function GlUboProp(tag) {
    var _this19;

    _classCallCheck(this, GlUboProp);

    _this19 = _super19.call(this);
    _this19.tag = tag | 0;

    for (var _len9 = arguments.length, fields = new Array(_len9 > 1 ? _len9 - 1 : 0), _key9 = 1; _key9 < _len9; _key9++) {
      fields[_key9 - 1] = arguments[_key9];
    }

    _this19.fields = fields;
    return _this19;
  }

  _createClass(GlUboProp, [{
    key: "cases",
    value: function cases() {
      return ["BufferIndex", "UboUniform", "UboLink"];
    }
  }]);

  return GlUboProp;
}(_Types.Union);

exports.GlUboProp = GlUboProp;

function GlUboProp$reflection() {
  return (0, _Reflection.union_type)("WebGLBuilderInterfaces.GlUboProp", [], GlUboProp, function () {
    return [[["Item", _Reflection.int32_type]], [["Item", (0, _Reflection.lambda_type)(GlUboData$reflection(), (0, _Reflection.lambda_type)(GlObjData$reflection(), GlUniformData$reflection()))]], [["Item", _Reflection.string_type]]];
  });
}

var GlAttrProp = /*#__PURE__*/function (_Union10) {
  _inherits(GlAttrProp, _Union10);

  var _super20 = _createSuper(GlAttrProp);

  function GlAttrProp(tag) {
    var _this20;

    _classCallCheck(this, GlAttrProp);

    _this20 = _super20.call(this);
    _this20.tag = tag | 0;

    for (var _len10 = arguments.length, fields = new Array(_len10 > 1 ? _len10 - 1 : 0), _key10 = 1; _key10 < _len10; _key10++) {
      fields[_key10 - 1] = arguments[_key10];
    }

    _this20.fields = fields;
    return _this20;
  }

  _createClass(GlAttrProp, [{
    key: "cases",
    value: function cases() {
      return ["BaseType", "Normalize", "Stride", "Offset", "Values", "DataCount", "BufferUsage", "DeterminesVertexCount", "DeterminesInstanceCount", "Divisor", "ChildAttribute", "AttributeLink"];
    }
  }]);

  return GlAttrProp;
}(_Types.Union);

exports.GlAttrProp = GlAttrProp;

function GlAttrProp$reflection() {
  return (0, _Reflection.union_type)("WebGLBuilderInterfaces.GlAttrProp", [], GlAttrProp, function () {
    return [[["Item", (0, _Reflection.enum_type)("WebGLTypes.GlType", _Reflection.int32_type, [["Unknown", 0], ["BYTE", 5120], ["SHORT", 5122], ["BOOL", 35670], ["BOOL_VEC2", 35671], ["BOOL_VEC3", 35672], ["BOOL_VEC4", 35673], ["FLOAT", 5126], ["HALF_FLOAT", 5131], ["FLOAT_MAT2x3", 35685], ["FLOAT_MAT2", 35674], ["FLOAT_MAT2x4", 35686], ["FLOAT_MAT3", 35675], ["FLOAT_MAT3x2", 35687], ["FLOAT_MAT3x4", 35688], ["FLOAT_MAT4", 35676], ["FLOAT_MAT4x2", 35689], ["FLOAT_MAT4x3", 35690], ["FLOAT_VEC2", 35664], ["FLOAT_VEC3", 35665], ["FLOAT_VEC4", 35666], ["INT", 5124], ["INT_VEC2", 35667], ["INT_VEC3", 35668], ["INT_VEC4", 35669], ["INT_SAMPLER_2D", 36298], ["INT_SAMPLER_2D_ARRAY", 36303], ["INT_SAMPLER_3D", 36299], ["INT_SAMPLER_CUBE", 36300], ["UNSIGNED_BYTE", 5121], ["UNSIGNED_SHORT", 5123], ["UNSIGNED_INT", 5125], ["UNSIGNED_INT_24_8", 34042], ["UNSIGNED_INT_SAMPLER_2D", 36306], ["UNSIGNED_INT_SAMPLER_2D_ARRAY", 36311], ["UNSIGNED_INT_SAMPLER_3D", 36307], ["UNSIGNED_INT_SAMPLER_CUBE", 36308], ["UNSIGNED_INT_VEC2", 36294], ["UNSIGNED_INT_VEC3", 36295], ["UNSIGNED_INT_VEC4", 36296], ["SAMPLER_2D", 35678], ["SAMPLER_2D_ARRAY", 36289], ["SAMPLER_2D_ARRAY_SHADOW", 36292], ["SAMPLER_2D_SHADOW", 35682], ["SAMPLER_3D", 35679], ["SAMPLER_CUBE", 35680], ["SAMPLER_CUBE_SHADOW", 36293]])]], [], [["Item", _Reflection.int32_type]], [["Item", _Reflection.int32_type]], [["Item", (0, _Reflection.array_type)(_Reflection.float64_type)]], [["Item", _Reflection.int32_type]], [["Item", (0, _Reflection.enum_type)("WebGLTypes.GlBufferUsage", _Reflection.int32_type, [["STREAM_DRAW", 35040], ["STATIC_DRAW", 35044], ["DYNAMIC_DRAW", 35048]])]], [], [], [["Item", _Reflection.int32_type]], [["Item", (0, _Reflection.lambda_type)(GlAttributeData$reflection(), (0, _Reflection.lambda_type)(GlObjData$reflection(), GlAttributeData$reflection()))]], [["Item", _Reflection.string_type]]];
  });
}

var GlIndiciesProp = /*#__PURE__*/function (_Union11) {
  _inherits(GlIndiciesProp, _Union11);

  var _super21 = _createSuper(GlIndiciesProp);

  function GlIndiciesProp(tag) {
    var _this21;

    _classCallCheck(this, GlIndiciesProp);

    _this21 = _super21.call(this);
    _this21.tag = tag | 0;

    for (var _len11 = arguments.length, fields = new Array(_len11 > 1 ? _len11 - 1 : 0), _key11 = 1; _key11 < _len11; _key11++) {
      fields[_key11 - 1] = arguments[_key11];
    }

    _this21.fields = fields;
    return _this21;
  }

  _createClass(GlIndiciesProp, [{
    key: "cases",
    value: function cases() {
      return ["IndexType", "IndexOffset", "IndexValues", "IndexBufferUsage", "IndiciesLink"];
    }
  }]);

  return GlIndiciesProp;
}(_Types.Union);

exports.GlIndiciesProp = GlIndiciesProp;

function GlIndiciesProp$reflection() {
  return (0, _Reflection.union_type)("WebGLBuilderInterfaces.GlIndiciesProp", [], GlIndiciesProp, function () {
    return [[["Item", (0, _Reflection.enum_type)("WebGLTypes.GlIndiciesType", _Reflection.int32_type, [["UNSIGNED_BYTE", 5121], ["UNSIGNED_SHORT", 5123], ["UNSIGNED_INT", 5125]])]], [["Item", _Reflection.int32_type]], [["Item", (0, _Reflection.array_type)(_Reflection.int32_type)]], [["Item", (0, _Reflection.enum_type)("WebGLTypes.GlBufferUsage", _Reflection.int32_type, [["STREAM_DRAW", 35040], ["STATIC_DRAW", 35044], ["DYNAMIC_DRAW", 35048]])]], [["Item", _Reflection.string_type]]];
  });
}

var GlObjProp = /*#__PURE__*/function (_Union12) {
  _inherits(GlObjProp, _Union12);

  var _super22 = _createSuper(GlObjProp);

  function GlObjProp(tag) {
    var _this22;

    _classCallCheck(this, GlObjProp);

    _this22 = _super22.call(this);
    _this22.tag = tag | 0;

    for (var _len12 = arguments.length, fields = new Array(_len12 > 1 ? _len12 - 1 : 0), _key12 = 1; _key12 < _len12; _key12++) {
      fields[_key12 - 1] = arguments[_key12];
    }

    _this22.fields = fields;
    return _this22;
  }

  _createClass(GlObjProp, [{
    key: "cases",
    value: function cases() {
      return ["ObjectName", "DrawMethod", "DrawPrimitive", "VertexCount", "VertexOffset", "VertexCountOffset", "InstanceCount", "InstanceOffset", "InstanceCountOffset", "IndiciesOffset", "Uniform", "Ubo", "Attribute", "Indicies", "Texture", "Capability", "ProcessLinked", "ParallaxCamera", "ParallaxDistance", "Layer", "Angle", "AngleDegrees", "AngleZ", "AngleDegreesZ", "Position", "Scale", "ObjectLink"];
    }
  }]);

  return GlObjProp;
}(_Types.Union);

exports.GlObjProp = GlObjProp;

function GlObjProp$reflection() {
  return (0, _Reflection.union_type)("WebGLBuilderInterfaces.GlObjProp", [], GlObjProp, function () {
    return [[["Item", _Reflection.string_type]], [["Item", (0, _webgl_typesFs.GlDrawMethod$reflection)()]], [["Item", (0, _Reflection.enum_type)("WebGLTypes.GlDrawPrimitive", _Reflection.int32_type, [["POINTS", 0], ["LINES", 1], ["LINE_LOOP", 2], ["LINE_STRIP", 3], ["TRIANGLES", 4], ["TRIANGLE_STRIP", 5], ["TRIANGLE_FAN", 6]])]], [["Item", _Reflection.int32_type]], [["Item", _Reflection.int32_type]], [["Item", _Reflection.int32_type]], [["Item", _Reflection.int32_type]], [["Item", _Reflection.int32_type]], [["Item", _Reflection.int32_type]], [["Item", _Reflection.int32_type]], [["Item", (0, _Reflection.lambda_type)(GlObjData$reflection(), GlUniformData$reflection())]], [["Item", (0, _Reflection.lambda_type)(GlObjData$reflection(), GlUboData$reflection())]], [["Item", (0, _Reflection.lambda_type)(GlObjData$reflection(), GlRootAttribute$reflection())]], [["Item", (0, _Reflection.lambda_type)(GlObjData$reflection(), GlIndiciesData$reflection())]], [["Item", (0, _Reflection.lambda_type)(GlObjData$reflection(), GlTextureData$reflection())]], [["Item", (0, _Reflection.lambda_type)((0, _Reflection.class_type)("Browser.Types.WebGLRenderingContext"), _Reflection.unit_type)]], [["Item", _Reflection.bool_type]], [["Item", _Reflection.string_type]], [["Item", _Reflection.float64_type]], [["Item", _Reflection.int32_type]], [["Item", (0, _vectorsFs.Vec3$reflection)()]], [["Item", (0, _vectorsFs.Vec3$reflection)()]], [["Item", _Reflection.float64_type]], [["Item", _Reflection.float64_type]], [["Item", (0, _vectorsFs.Vec3$reflection)()]], [["Item", _Reflection.float64_type]], [["Item", _Reflection.string_type]]];
  });
}

var GlTextureProp = /*#__PURE__*/function (_Union13) {
  _inherits(GlTextureProp, _Union13);

  var _super23 = _createSuper(GlTextureProp);

  function GlTextureProp(tag) {
    var _this23;

    _classCallCheck(this, GlTextureProp);

    _this23 = _super23.call(this);
    _this23.tag = tag | 0;

    for (var _len13 = arguments.length, fields = new Array(_len13 > 1 ? _len13 - 1 : 0), _key13 = 1; _key13 < _len13; _key13++) {
      fields[_key13 - 1] = arguments[_key13];
    }

    _this23.fields = fields;
    return _this23;
  }

  _createClass(GlTextureProp, [{
    key: "cases",
    value: function cases() {
      return ["TextureName", "TextureTarget", "TextureIndex", "Level", "InternalFormat", "TextureWidth", "TextureHeight", "Format", "TextureDataType", "Pixels", "ByteOffset", "MagFilter", "MinFilter", "WrapS", "WrapT", "WrapR", "BaseLevel", "CompareFunc", "CompareMode", "MaxLevel", "MaxLod", "MinLod", "TextureLink"];
    }
  }]);

  return GlTextureProp;
}(_Types.Union);

exports.GlTextureProp = GlTextureProp;

function GlTextureProp$reflection() {
  return (0, _Reflection.union_type)("WebGLBuilderInterfaces.GlTextureProp", [], GlTextureProp, function () {
    return [[["Item", _Reflection.string_type]], [["Item", (0, _Reflection.enum_type)("WebGLTypes.GlTextureTarget", _Reflection.int32_type, [["TEXTURE_2D", 3553], ["TEXTURE_CUBE_MAP_POSITIVE_X", 34069], ["TEXTURE_CUBE_MAP_NEGATIVE_X", 34070], ["TEXTURE_CUBE_MAP_POSITIVE_Y", 34071], ["TEXTURE_CUBE_MAP_NEGATIVE_Y", 34072], ["TEXTURE_CUBE_MAP_POSITIVE_Z", 34073], ["TEXTURE_CUBE_MAP_NEGATIVE_Z", 34074]])]], [["Item", _Reflection.int32_type]], [["Item", _Reflection.int32_type]], [["Item", (0, _Reflection.enum_type)("WebGLTypes.GlColorFormat", _Reflection.int32_type, [["RGB", 6407], ["RGBA", 6408], ["LUMINANCE", 6409], ["LUMINANCE_ALPHA", 6410], ["ALPHA", 6406], ["R8", 33321], ["R8_SNORM", 36756], ["RG8", 33323], ["RG8_SNORM", 36757], ["RGB8", 32849], ["RGB8_SNORM", 36758], ["RGB565", 36194], ["RGBA4", 32854], ["RGB5_A1", 32855], ["RGBA8", 32856], ["RGBA8_SNORM", 36759], ["RGB10_A2", 32857], ["RGB10_A2UI", 36975], ["SRGB8", 35905], ["SRGB8_ALPHA8", 35907], ["R16F", 33325], ["RG16F", 33327], ["RGB16F", 34843], ["RGBA16F", 34842], ["R32F", 33326], ["RG32F", 33328], ["RGB32F", 34837], ["RGBA32F", 34836], ["R11F_G11F_B10F", 35898], ["RGB9_E5", 35901], ["R8I", 33329], ["R8UI", 33330], ["R16I", 33331], ["R16UI", 33332], ["R32I", 33333], ["R32UI", 33334], ["RG8I", 33335], ["RG8UI", 33336], ["RG16I", 33337], ["RG16UI", 33338], ["RG32I", 33339], ["RG32UI", 33340], ["RGB8UI", 36221], ["RGB16I", 36233], ["RGB16UI", 36215], ["RGB32I", 36227], ["RGB32UI", 36209], ["RGBA8I", 36238], ["RGBA8UI", 36220], ["RGBA16I", 36232], ["RGBA16UI", 36214], ["RGBA32I", 36226], ["RGBA32UI", 36208]])]], [["Item", _Reflection.float64_type]], [["Item", _Reflection.float64_type]], [["Item", (0, _Reflection.enum_type)("WebGLTypes.GlColorFormat", _Reflection.int32_type, [["RGB", 6407], ["RGBA", 6408], ["LUMINANCE", 6409], ["LUMINANCE_ALPHA", 6410], ["ALPHA", 6406], ["R8", 33321], ["R8_SNORM", 36756], ["RG8", 33323], ["RG8_SNORM", 36757], ["RGB8", 32849], ["RGB8_SNORM", 36758], ["RGB565", 36194], ["RGBA4", 32854], ["RGB5_A1", 32855], ["RGBA8", 32856], ["RGBA8_SNORM", 36759], ["RGB10_A2", 32857], ["RGB10_A2UI", 36975], ["SRGB8", 35905], ["SRGB8_ALPHA8", 35907], ["R16F", 33325], ["RG16F", 33327], ["RGB16F", 34843], ["RGBA16F", 34842], ["R32F", 33326], ["RG32F", 33328], ["RGB32F", 34837], ["RGBA32F", 34836], ["R11F_G11F_B10F", 35898], ["RGB9_E5", 35901], ["R8I", 33329], ["R8UI", 33330], ["R16I", 33331], ["R16UI", 33332], ["R32I", 33333], ["R32UI", 33334], ["RG8I", 33335], ["RG8UI", 33336], ["RG16I", 33337], ["RG16UI", 33338], ["RG32I", 33339], ["RG32UI", 33340], ["RGB8UI", 36221], ["RGB16I", 36233], ["RGB16UI", 36215], ["RGB32I", 36227], ["RGB32UI", 36209], ["RGBA8I", 36238], ["RGBA8UI", 36220], ["RGBA16I", 36232], ["RGBA16UI", 36214], ["RGBA32I", 36226], ["RGBA32UI", 36208]])]], [["Item", (0, _Reflection.enum_type)("WebGLTypes.GlTextureType", _Reflection.int32_type, [["UNSIGNED_BYTE", 5121], ["UNSIGNED_SHORT_4_4_4_4", 32819], ["UNSIGNED_SHORT_5_5_5_1", 32820], ["UNSIGNED_SHORT_5_6_5", 33635], ["UNSIGNED_SHORT", 5123], ["UNSIGNED_INT", 5125], ["UNSIGNED_INT_24_8", 34042], ["FLOAT", 5126], ["HALF_FLOAT", 5131], ["BYTE", 5120], ["SHORT", 5122], ["INT", 5124], ["UNSIGNED_INT_2_10_10_10_REV", 33640], ["UNSIGNED_INT_10F_11F_11F_REV", 35899], ["UNSIGNED_INT_5_9_9_9_REV", 35902], ["FLOAT_32_UNSIGNED_INT_24_8_REV", 36269]])]], [["Item", GlTexturePixels$reflection()]], [["Item", _Reflection.int32_type]], [["Item", (0, _Reflection.enum_type)("WebGLTypes.GlMagFilter", _Reflection.int32_type, [["NEAREST", 9728], ["LINEAR", 9729]])]], [["Item", (0, _Reflection.enum_type)("WebGLTypes.GlMinFilter", _Reflection.int32_type, [["NEAREST", 9728], ["LINEAR", 9729], ["NEAREST_MIPMAP_NEAREST", 9984], ["LINEAR_MIPMAP_NEAREST", 9985], ["NEAREST_MIPMAP_LINEAR", 9986], ["LINEAR_MIPMAP_LINEAR", 9987]])]], [["Item", (0, _Reflection.enum_type)("WebGLTypes.GlWrapMode", _Reflection.int32_type, [["REPEAT", 10497], ["CLAMP_TO_EDGE", 33071], ["MIRRORED_REPEAT", 33648]])]], [["Item", (0, _Reflection.enum_type)("WebGLTypes.GlWrapMode", _Reflection.int32_type, [["REPEAT", 10497], ["CLAMP_TO_EDGE", 33071], ["MIRRORED_REPEAT", 33648]])]], [["Item", (0, _Reflection.enum_type)("WebGLTypes.GlWrapMode", _Reflection.int32_type, [["REPEAT", 10497], ["CLAMP_TO_EDGE", 33071], ["MIRRORED_REPEAT", 33648]])]], [["Item", _Reflection.int32_type]], [["Item", (0, _Reflection.enum_type)("WebGLTypes.GlCompareFunc", _Reflection.int32_type, [["NEVER", 512], ["LESS", 513], ["EQUAL", 514], ["LEQUAL", 515], ["GREATER", 516], ["NOTEQUAL", 517], ["GEQUAL", 518], ["ALWAYS", 519]])]], [["Item", (0, _Reflection.enum_type)("WebGLTypes.GlCompareMode", _Reflection.int32_type, [["NONE", 0], ["COMPARE_REF_TO_TEXTURE", 34894]])]], [["Item", _Reflection.int32_type]], [["Item", _Reflection.float64_type]], [["Item", _Reflection.float64_type]], [["Item", _Reflection.string_type]]];
  });
}

var GlCamProp = /*#__PURE__*/function (_Union14) {
  _inherits(GlCamProp, _Union14);

  var _super24 = _createSuper(GlCamProp);

  function GlCamProp(tag) {
    var _this24;

    _classCallCheck(this, GlCamProp);

    _this24 = _super24.call(this);
    _this24.tag = tag | 0;

    for (var _len14 = arguments.length, fields = new Array(_len14 > 1 ? _len14 - 1 : 0), _key14 = 1; _key14 < _len14; _key14++) {
      fields[_key14 - 1] = arguments[_key14];
    }

    _this24.fields = fields;
    return _this24;
  }

  _createClass(GlCamProp, [{
    key: "cases",
    value: function cases() {
      return ["CameraName", "DontClearViewport", "CameraBackground", "ClearColorBuffer", "ClearDepthBuffer", "ClearStencilBuffer", "ClearMask", "BorderWidth", "DontAutoSizeViewport", "DontUseViewSizeAspect", "DontAutoPosition", "CameraPosition", "LookAt", "ViewSize", "ViewportBounds", "Up", "Near", "Far", "Aspect", "Fov"];
    }
  }]);

  return GlCamProp;
}(_Types.Union);

exports.GlCamProp = GlCamProp;

function GlCamProp$reflection() {
  return (0, _Reflection.union_type)("WebGLBuilderInterfaces.GlCamProp", [], GlCamProp, function () {
    return [[["Item", _Reflection.string_type]], [], [["Item", (0, _vectorsFs.Vec4$reflection)()]], [], [], [], [["Item", (0, _Reflection.enum_type)("WebGLTypes.GlClearBit", _Reflection.int32_type, [["COLOR_BUFFER_BIT", 16384], ["DEPTH_BUFFER_BIT", 256], ["STENCIL_BUFFER_BIT", 1024]])]], [["Item", _Reflection.float64_type]], [], [], [], [["Item", (0, _vectorsFs.Vec3$reflection)()]], [["Item", (0, _vectorsFs.Vec3$reflection)()]], [["Item", (0, _vectorsFs.Vec2$reflection)()]], [["Item", (0, _boundsFs.Bounds$reflection)()]], [["Item", (0, _vectorsFs.Vec3$reflection)()]], [["Item", _Reflection.float64_type]], [["Item", _Reflection.float64_type]], [["Item", _Reflection.float64_type]], [["Item", _Reflection.float64_type]]];
  });
}

var GlSceneProp = /*#__PURE__*/function (_Union15) {
  _inherits(GlSceneProp, _Union15);

  var _super25 = _createSuper(GlSceneProp);

  function GlSceneProp(tag) {
    var _this25;

    _classCallCheck(this, GlSceneProp);

    _this25 = _super25.call(this);
    _this25.tag = tag | 0;

    for (var _len15 = arguments.length, fields = new Array(_len15 > 1 ? _len15 - 1 : 0), _key15 = 1; _key15 < _len15; _key15++) {
      fields[_key15 - 1] = arguments[_key15];
    }

    _this25.fields = fields;
    return _this25;
  }

  _createClass(GlSceneProp, [{
    key: "cases",
    value: function cases() {
      return ["SceneName", "Layers", "DefaultLayer", "SceneBackground", "ClearColorBuffer", "ClearDepthBuffer", "ClearStencilBuffer", "ClearMask", "SceneWorldBounds", "SceneBounds", "WorldScale", "DontClearSceneBackground", "Camera", "Shared", "SceneObject"];
    }
  }]);

  return GlSceneProp;
}(_Types.Union);

exports.GlSceneProp = GlSceneProp;

function GlSceneProp$reflection() {
  return (0, _Reflection.union_type)("WebGLBuilderInterfaces.GlSceneProp", [], GlSceneProp, function () {
    return [[["Item", _Reflection.string_type]], [["Item", _Reflection.int32_type]], [["Item", _Reflection.int32_type]], [["Item", (0, _vectorsFs.Vec4$reflection)()]], [], [], [], [["Item", (0, _Reflection.enum_type)("WebGLTypes.GlClearBit", _Reflection.int32_type, [["COLOR_BUFFER_BIT", 16384], ["DEPTH_BUFFER_BIT", 256], ["STENCIL_BUFFER_BIT", 1024]])]], [["Item", (0, _boundsFs.Bounds$reflection)()]], [["Item", (0, _boundsFs.Bounds$reflection)()]], [["Item", _Reflection.float64_type]], [], [["Item", (0, _Reflection.lambda_type)(GlSceneData$reflection(), GlCameraData$reflection())]], [["Item", (0, _Reflection.lambda_type)(GlSceneData$reflection(), GlObjData$reflection())]], [["Item", (0, _Reflection.lambda_type)(GlSceneData$reflection(), GlObjData$reflection())]]];
  });
}

var WebglProp = /*#__PURE__*/function (_Union16) {
  _inherits(WebglProp, _Union16);

  var _super26 = _createSuper(WebglProp);

  function WebglProp(tag) {
    var _this26;

    _classCallCheck(this, WebglProp);

    _this26 = _super26.call(this);
    _this26.tag = tag | 0;

    for (var _len16 = arguments.length, fields = new Array(_len16 > 1 ? _len16 - 1 : 0), _key16 = 1; _key16 < _len16; _key16++) {
      fields[_key16 - 1] = arguments[_key16];
    }

    _this26.fields = fields;
    return _this26;
  }

  _createClass(WebglProp, [{
    key: "cases",
    value: function cases() {
      return ["WebglName", "CanvasBounds", "Width", "Height", "Size", "WorldBounds", "PixelStorage", "CanvasBackground", "ClearColorBuffer", "ClearDepthBuffer", "ClearStencilBuffer", "ClearMask", "DontClearCanvas", "Scene", "NoAlpha", "Desynchronized", "NoAntialias", "NoDepth", "FailIfMajorPerformanceCaveat", "NoPremultipliedAlpha", "PreserveDrawingBuffer", "Stencil", "PowerPreferenceDefault", "PowerPreferenceHighPerformance", "PowerPreferenceLowPower"];
    }
  }]);

  return WebglProp;
}(_Types.Union);

exports.WebglProp = WebglProp;

function WebglProp$reflection() {
  return (0, _Reflection.union_type)("WebGLBuilderInterfaces.WebglProp", [], WebglProp, function () {
    return [[["Item", _Reflection.string_type]], [["Item", (0, _boundsFs.Bounds$reflection)()]], [["Item", _Reflection.float64_type]], [["Item", _Reflection.float64_type]], [["Item", (0, _vectorsFs.Vec2$reflection)()]], [["Item", (0, _boundsFs.Bounds$reflection)()]], [["Item", GlPixelStorage$reflection()]], [["Item", (0, _vectorsFs.Vec4$reflection)()]], [], [], [], [["Item", (0, _Reflection.enum_type)("WebGLTypes.GlClearBit", _Reflection.int32_type, [["COLOR_BUFFER_BIT", 16384], ["DEPTH_BUFFER_BIT", 256], ["STENCIL_BUFFER_BIT", 1024]])]], [], [["Item", (0, _Reflection.lambda_type)(GlCanvasData$reflection(), GlSceneData$reflection())]], [], [], [], [], [], [], [], [], [], [], []];
  });
}

function GlCommon_splitName(name) {
  var pair = (0, _String.split)(name, ["."], null, 0);
  return [pair[0], pair[1]];
}

function GlCommon_getAttributeData(attribute) {
  var pattern_matching_result, a;

  if (attribute.tag === 1) {
    pattern_matching_result = 0;
    a = attribute.fields[0];
  } else {
    pattern_matching_result = 0;
    a = attribute.fields[0];
  }

  switch (pattern_matching_result) {
    case 0:
      {
        return a;
      }
  }
}

function GlCommon_getUbo(name, data) {
  var matchValue = (0, _List.tryFind)(function (u) {
    return GlUboData__get_Name(u) === name;
  }, data.Ubos);

  if (matchValue == null) {
    throw new Error((0, _String.toText)((0, _String.interpolate)("Ubo '%P()' not found", [name])));
  } else {
    var ubo = matchValue;
    return ubo;
  }
}

function GlCommon_tryGetUbo(name, data) {
  return (0, _List.tryFind)(function (u) {
    return GlUboData__get_Name(u) === name;
  }, data.Ubos);
}

function GlCommon_allUniforms(data) {
  return (0, _Seq.delay)(function () {
    return (0, _Seq.append)(data.Uniforms, (0, _Seq.delay)(function () {
      return (0, _Seq.collect)(function (ubo) {
        return ubo.Uniforms;
      }, data.Ubos);
    }));
  });
}

function GlCommon_allAttributes(data) {
  var getAttributes = function getAttributes(attr) {
    return (0, _Seq.delay)(function () {
      var a = GlCommon_getAttributeData(attr);
      return (0, _Seq.append)((0, _Seq.singleton)(a), (0, _Seq.delay)(function () {
        return a.ChildAttributes;
      }));
    });
  };

  return (0, _Seq.collect)(getAttributes, data.Attributes);
}

function GlCommon_getUniform(name, data) {
  var matchValue = (0, _Seq.tryFind)(function (u) {
    return GlUniformData__get_Name(u) === name;
  }, GlCommon_allUniforms(data));

  if (matchValue == null) {
    throw new Error((0, _String.toText)((0, _String.interpolate)("Uniform '%P()' not found", [name])));
  } else {
    var uniform = matchValue;
    return uniform;
  }
}

function GlCommon_tryGetUniform(name, data) {
  return (0, _Seq.tryFind)(function (u) {
    return GlUniformData__get_Name(u) === name;
  }, GlCommon_allUniforms(data));
}

function GlCommon_getAttribute(name, data) {
  var matchValue = (0, _Seq.tryFind)(function (u) {
    return GlAttributeData__get_Name(u) === name;
  }, GlCommon_allAttributes(data));

  if (matchValue == null) {
    throw new Error((0, _String.toText)((0, _String.interpolate)("Attribute '%P()' not found", [name])));
  } else {
    var attribute = matchValue;
    return attribute;
  }
}

function GlCommon_tryGetAttribute(name, data) {
  return (0, _Seq.tryFind)(function (u) {
    return GlAttributeData__get_Name(u) === name;
  }, GlCommon_allAttributes(data));
}

function GlCommon_getTexture(name, data) {
  var matchValue = (0, _List.tryFind)(function (u) {
    return u.Name === name;
  }, data.Textures);

  if (matchValue == null) {
    throw new Error((0, _String.toText)((0, _String.interpolate)("Texture '%P()' not found", [name])));
  } else {
    var texture = matchValue;
    return texture;
  }
}

function GlCommon_tryGetTexture(name, data) {
  return (0, _List.tryFind)(function (u) {
    return u.Name === name;
  }, data.Textures);
}

function GlCommon_objects(data) {
  return (0, _Seq.delay)(function () {
    return (0, _Seq.collect)(function (l) {
      return l.Objects;
    }, (0, _Seq.reverse)(data.Layers));
  });
}

function GlCommon_getCamera(name, data) {
  var matchValue = (0, _List.tryFind)(function (o) {
    return o.Name === name;
  }, data.Cameras);

  if (matchValue == null) {
    return (0, _utilsFs.throw$)((0, _String.toText)((0, _String.interpolate)("Camera '%P()' not found", [name])));
  } else {
    var camera = matchValue;
    return camera;
  }
}

function GlCommon_tryGetCamera(name, data) {
  return (0, _List.tryFind)(function (u) {
    return u.Name === name;
  }, data.Cameras);
}

function GlCommon_getObject(name, data) {
  var matchValue = (0, _Seq.tryFind)(function (o) {
    return o.Name === name;
  }, GlCommon_objects(data));

  if (matchValue == null) {
    return (0, _utilsFs.throw$)((0, _String.toText)((0, _String.interpolate)("Object '%P()' not found", [name])));
  } else {
    var object = matchValue;
    return object;
  }
}

function GlCommon_tryGetObject(name, data) {
  return (0, _Seq.tryFind)(function (u) {
    return u.Name === name;
  }, GlCommon_objects(data));
}

function GlCommon_dirtyScene(data) {
  data.IsDirty = true;
  data.Canvas.IsDirty = true;
}

function GlCommon_dirtyObject(data) {
  data.IsDirty = true;
  GlCommon_dirtyScene(data.Scene);
}

function GlCommon_dirtyModel(data) {
  data.IsModelDirty = true;
  GlCommon_dirtyObject(data);
}

function GlCommon_dirtyParallax(data) {
  if (data.ParallaxCamera != null) {
    data.IsParallaxDirty = true;
    GlCommon_dirtyObject(data);
  }
}

function GlCommon_objectRecalcNeeded(data) {
  data.RecalcNeeded = true;
  GlCommon_dirtyObject(data);
}

function GlCommon_nextUboBufferIndex(data) {
  var loop = function loop(i_mut, ubos_mut) {
    loop: while (true) {
      var i = i_mut,
          ubos = ubos_mut;

      if (ubos.tail != null) {
        var t = ubos.tail;
        var h = ubos.head;

        if (i < h.Location) {
          return i | 0;
        } else {
          i_mut = i + 1;
          ubos_mut = t;
          continue loop;
        }
      } else {
        return i | 0;
      }

      break;
    }
  };

  return loop(0, (0, _List.sortBy)(function (u) {
    return u.Location;
  }, data.Ubos, {
    Compare: _Util.comparePrimitives
  })) | 0;
}

function GlCommon_nextTextureIndex(data) {
  var loop = function loop(i_mut, ubos_mut) {
    loop: while (true) {
      var i = i_mut,
          ubos = ubos_mut;

      if (ubos.tail != null) {
        var t = ubos.tail;
        var h = ubos.head;

        if (i < h.Index) {
          return i | 0;
        } else {
          i_mut = i + 1;
          ubos_mut = t;
          continue loop;
        }
      } else {
        return i | 0;
      }

      break;
    }
  };

  return loop(0, (0, _List.sortBy)(function (u) {
    return u.Index;
  }, data.Textures, {
    Compare: _Util.comparePrimitives
  })) | 0;
}

function GlCommon_addScene(creator, data) {
  var sceneData = creator(data);
  data.Scenes = (0, _Array.append)(data.Scenes, [sceneData]);
  return sceneData;
}

function GlCommon_removeScene(scene, data) {
  data.Scenes = data.Scenes.filter(function (o) {
    return !(o === scene);
  });
  data.IsDirty = true;
  return data;
}

function GlCommon_addCamera(creator, data) {
  var camData = creator(data);
  data.Cameras = (0, _List.append)(data.Cameras, (0, _List.singleton)(camData));
  GlCommon_dirtyScene(data);
  return camData;
}

function GlCommon_removeCamera(cam, data) {
  data.Cameras = (0, _List.filter)(function (o) {
    return !(o === cam);
  }, data.Cameras);
  GlCommon_dirtyScene(data);
  return data;
}

function GlCommon_addObject(creator, data) {
  var objData = creator(data);
  var layer = data.Layers[objData.Layer];
  layer.Objects = (0, _List.append)(layer.Objects, (0, _List.singleton)(objData));
  GlCommon_dirtyScene(data);
  return objData;
}

function GlCommon_removeObject(globj, data) {
  var layer = data.Layers[globj.Layer];
  layer.Objects = (0, _List.filter)(function (o) {
    return !(o === globj);
  }, layer.Objects);
  GlCommon_dirtyScene(data);
  return data;
}

function GlCommon_addUbo(creator, data) {
  var uboData = creator(data);
  data.Ubos = (0, _List.append)(data.Ubos, (0, _List.singleton)(uboData));
  GlCommon_dirtyObject(data);
  return uboData;
}

function GlCommon_addUniform(creator, data) {
  var uniformData = creator(data);
  data.Uniforms = (0, _List.append)(data.Uniforms, (0, _List.singleton)(uniformData));
  GlCommon_dirtyObject(data);
  return uniformData;
}

function GlCommon_addAttribute(creator, data) {
  var attributeData = creator(data);
  data.Attributes = (0, _List.append)(data.Attributes, (0, _List.singleton)(attributeData));
  GlCommon_dirtyObject(data);
  return attributeData;
}

function GlCommon_addTexture(creator, data) {
  var textureData = creator(data);
  data.Textures = (0, _List.append)(data.Textures, (0, _List.singleton)(textureData));
  GlCommon_dirtyObject(data);
  return textureData;
}

function GlCommon_addUboUniform(creator, data) {
  var uniformData = creator(data, data.ParentObject);
  data.Uniforms = (0, _List.cons)(uniformData, data.Uniforms);
  return uniformData;
}

function GlCommon_objectDebugName(globj) {
  if (!(0, _String.isNullOrWhiteSpace)(globj.Name)) {
    return globj.Name;
  } else if (globj.Parent == null) {
    return "shared";
  } else {
    return "";
  }
}

function GlAttribCommon_defaultData(info, kind, parentObject) {
  return new GlAttributeData(0, kind, info, true, 0, _typedarray_utilsFs.float32ArrayFactory, -1, -1, -1, (0, _webgl_typesFs.getGlTypeInfo)(5126), false, 0, -1, -1, -1, new Float64Array([]), -1, 35044, false, false, -1, (0, _glbufferFs.GlBuffer_$ctor_10C6D16C)(parentObject.Scene.Canvas.Context), (0, _List.empty)(), parentObject, void 0, void 0, (0, _List.empty)(), false, true, true, true, true, true);
}

function GlAttribCommon_addLinkedChild(parent, data) {
  parent.LinkedChildren = (0, _List.cons)(data, parent.LinkedChildren);
  return data;
}

function GlAttribCommon_linkTo(parent, data) {
  (0, _glbufferFs.GlBuffer__set_AutoClean_Z1FBCCD16)(parent.Buffer, false);
  return GlAttribCommon_addLinkedChild(parent, new GlAttributeData(data.Id, data.Kind, data.Info, data.IsDirty, data.BaseType, data.ArrayCreator, data.RecordSize, data.ByteSize, data.DataLength, data.BaseTypeInfo, data.Normalize, data.StartIndex, data.IndexStride, data.Stride, data.Offset, new Float64Array([]), data.DataCount, data.BufferUsage, data.DeterminesVertexCount, data.DeterminesInstanceCount, data.Divisor, data.Buffer, data.ChildAttributes, data.ParentObject, data.ParentAttribute, parent, data.LinkedChildren, data.CanSingleCopy, data.EnableNeeded, data.RecalcNeeded, data.CalcDataCount, data.CalcStride, data.CalcOffset));
}

function GlAttribCommon_processLink(name, data) {
  var patternInput = GlCommon_splitName(name);
  var objectName = patternInput[0];
  var attributeName = patternInput[1];
  var globj = GlCommon_getObject(objectName, data.ParentObject.Scene);
  var attribute = GlCommon_getAttribute(attributeName, globj);
  return GlAttribCommon_linkTo(attribute, data);
}

function GlAttribCommon_updateCommonData(props, data) {
  var updateCommon = function updateCommon(data_1) {
    var baseType = (data_1.BaseType === 0 ? data_1.Info.TypeInfo.BaseType : data_1.BaseType) | 0;
    var baseTypeInfo = (0, _webgl_typesFs.getGlTypeInfo)(baseType);
    var res = new GlAttributeData(data_1.Id, data_1.Kind, data_1.Info, data_1.IsDirty, baseType, data_1.Info.TypeInfo.TypeArrayCreator, data_1.Info.TypeInfo.ElementCount * baseTypeInfo.ByteSize, data_1.ByteSize, data_1.DataLength, baseTypeInfo, data_1.Normalize, data_1.StartIndex, data_1.IndexStride, data_1.Stride, data_1.Offset, data_1.Values, data_1.DataCount, data_1.BufferUsage, data_1.DeterminesVertexCount, data_1.DeterminesInstanceCount, data_1.Divisor, data_1.Buffer, data_1.ChildAttributes, data_1.ParentObject, data_1.ParentAttribute, data_1.Link, data_1.LinkedChildren, data_1.CanSingleCopy, data_1.EnableNeeded, data_1.RecalcNeeded, data_1.CalcDataCount, data_1.CalcStride, data_1.CalcOffset);
    console.log((0, _Option.some)((0, _String.toText)((0, _String.interpolate)("%P() finished updateCommon", [GlAttributeData__get_Name(data_1)]))));
    return res;
  };

  var createChildren = function createChildren(childCreators, parent, parentObject) {
    console.group((0, _String.toText)((0, _String.interpolate)("creating children %P()", [GlAttributeData__get_Name(parent)])));
    var res_1 = (0, _List.map)((0, _Util.mapCurriedArgs)(function (creator) {
      return creator(parent, parentObject);
    }, [[0, 2]]), childCreators);
    console.groupEnd();
    return res_1;
  };

  var apply = function apply(props_1, data_2) {
    var loop = function loop(props_2_mut, children_mut, data_3_mut) {
      loop: while (true) {
        var props_2 = props_2_mut,
            children = children_mut,
            data_3 = data_3_mut;

        if (props_2.tail != null) {
          var t = props_2.tail;
          var h = props_2.head;

          switch (h.tag) {
            case 1:
              {
                props_2_mut = t;
                children_mut = children;
                data_3_mut = new GlAttributeData(data_3.Id, data_3.Kind, data_3.Info, data_3.IsDirty, data_3.BaseType, data_3.ArrayCreator, data_3.RecordSize, data_3.ByteSize, data_3.DataLength, data_3.BaseTypeInfo, true, data_3.StartIndex, data_3.IndexStride, data_3.Stride, data_3.Offset, data_3.Values, data_3.DataCount, data_3.BufferUsage, data_3.DeterminesVertexCount, data_3.DeterminesInstanceCount, data_3.Divisor, data_3.Buffer, data_3.ChildAttributes, data_3.ParentObject, data_3.ParentAttribute, data_3.Link, data_3.LinkedChildren, data_3.CanSingleCopy, data_3.EnableNeeded, data_3.RecalcNeeded, data_3.CalcDataCount, data_3.CalcStride, data_3.CalcOffset);
                continue loop;
              }

            case 2:
              {
                var x_1 = h.fields[0] | 0;
                props_2_mut = t;
                children_mut = children;
                data_3_mut = new GlAttributeData(data_3.Id, data_3.Kind, data_3.Info, data_3.IsDirty, data_3.BaseType, data_3.ArrayCreator, data_3.RecordSize, data_3.ByteSize, data_3.DataLength, data_3.BaseTypeInfo, data_3.Normalize, data_3.StartIndex, data_3.IndexStride, x_1, data_3.Offset, data_3.Values, data_3.DataCount, data_3.BufferUsage, data_3.DeterminesVertexCount, data_3.DeterminesInstanceCount, data_3.Divisor, data_3.Buffer, data_3.ChildAttributes, data_3.ParentObject, data_3.ParentAttribute, data_3.Link, data_3.LinkedChildren, data_3.CanSingleCopy, data_3.EnableNeeded, data_3.RecalcNeeded, data_3.CalcDataCount, data_3.CalcStride, data_3.CalcOffset);
                continue loop;
              }

            case 3:
              {
                var x_2 = h.fields[0] | 0;
                props_2_mut = t;
                children_mut = children;
                data_3_mut = new GlAttributeData(data_3.Id, data_3.Kind, data_3.Info, data_3.IsDirty, data_3.BaseType, data_3.ArrayCreator, data_3.RecordSize, data_3.ByteSize, data_3.DataLength, data_3.BaseTypeInfo, data_3.Normalize, data_3.StartIndex, data_3.IndexStride, data_3.Stride, x_2, data_3.Values, data_3.DataCount, data_3.BufferUsage, data_3.DeterminesVertexCount, data_3.DeterminesInstanceCount, data_3.Divisor, data_3.Buffer, data_3.ChildAttributes, data_3.ParentObject, data_3.ParentAttribute, data_3.Link, data_3.LinkedChildren, data_3.CanSingleCopy, data_3.EnableNeeded, data_3.RecalcNeeded, data_3.CalcDataCount, data_3.CalcStride, data_3.CalcOffset);
                continue loop;
              }

            case 4:
              {
                var x_3 = h.fields[0];
                props_2_mut = t;
                children_mut = children;
                data_3_mut = new GlAttributeData(data_3.Id, data_3.Kind, data_3.Info, data_3.IsDirty, data_3.BaseType, data_3.ArrayCreator, data_3.RecordSize, data_3.ByteSize, data_3.DataLength, data_3.BaseTypeInfo, data_3.Normalize, data_3.StartIndex, data_3.IndexStride, data_3.Stride, data_3.Offset, x_3, data_3.DataCount, data_3.BufferUsage, data_3.DeterminesVertexCount, data_3.DeterminesInstanceCount, data_3.Divisor, data_3.Buffer, data_3.ChildAttributes, data_3.ParentObject, data_3.ParentAttribute, data_3.Link, data_3.LinkedChildren, data_3.CanSingleCopy, data_3.EnableNeeded, data_3.RecalcNeeded, data_3.CalcDataCount, data_3.CalcStride, data_3.CalcOffset);
                continue loop;
              }

            case 5:
              {
                var x_4 = h.fields[0] | 0;
                props_2_mut = t;
                children_mut = children;
                data_3_mut = new GlAttributeData(data_3.Id, data_3.Kind, data_3.Info, data_3.IsDirty, data_3.BaseType, data_3.ArrayCreator, data_3.RecordSize, data_3.ByteSize, data_3.DataLength, data_3.BaseTypeInfo, data_3.Normalize, data_3.StartIndex, data_3.IndexStride, data_3.Stride, data_3.Offset, data_3.Values, x_4, data_3.BufferUsage, data_3.DeterminesVertexCount, data_3.DeterminesInstanceCount, data_3.Divisor, data_3.Buffer, data_3.ChildAttributes, data_3.ParentObject, data_3.ParentAttribute, data_3.Link, data_3.LinkedChildren, data_3.CanSingleCopy, data_3.EnableNeeded, data_3.RecalcNeeded, data_3.CalcDataCount, data_3.CalcStride, data_3.CalcOffset);
                continue loop;
              }

            case 6:
              {
                var x_5 = h.fields[0] | 0;
                props_2_mut = t;
                children_mut = children;
                data_3_mut = new GlAttributeData(data_3.Id, data_3.Kind, data_3.Info, data_3.IsDirty, data_3.BaseType, data_3.ArrayCreator, data_3.RecordSize, data_3.ByteSize, data_3.DataLength, data_3.BaseTypeInfo, data_3.Normalize, data_3.StartIndex, data_3.IndexStride, data_3.Stride, data_3.Offset, data_3.Values, data_3.DataCount, x_5, data_3.DeterminesVertexCount, data_3.DeterminesInstanceCount, data_3.Divisor, data_3.Buffer, data_3.ChildAttributes, data_3.ParentObject, data_3.ParentAttribute, data_3.Link, data_3.LinkedChildren, data_3.CanSingleCopy, data_3.EnableNeeded, data_3.RecalcNeeded, data_3.CalcDataCount, data_3.CalcStride, data_3.CalcOffset);
                continue loop;
              }

            case 7:
              {
                props_2_mut = t;
                children_mut = children;
                data_3_mut = new GlAttributeData(data_3.Id, data_3.Kind, data_3.Info, data_3.IsDirty, data_3.BaseType, data_3.ArrayCreator, data_3.RecordSize, data_3.ByteSize, data_3.DataLength, data_3.BaseTypeInfo, data_3.Normalize, data_3.StartIndex, data_3.IndexStride, data_3.Stride, data_3.Offset, data_3.Values, data_3.DataCount, data_3.BufferUsage, true, data_3.DeterminesInstanceCount, data_3.Divisor, data_3.Buffer, data_3.ChildAttributes, data_3.ParentObject, data_3.ParentAttribute, data_3.Link, data_3.LinkedChildren, data_3.CanSingleCopy, data_3.EnableNeeded, data_3.RecalcNeeded, data_3.CalcDataCount, data_3.CalcStride, data_3.CalcOffset);
                continue loop;
              }

            case 8:
              {
                props_2_mut = t;
                children_mut = children;
                data_3_mut = new GlAttributeData(data_3.Id, data_3.Kind, data_3.Info, data_3.IsDirty, data_3.BaseType, data_3.ArrayCreator, data_3.RecordSize, data_3.ByteSize, data_3.DataLength, data_3.BaseTypeInfo, data_3.Normalize, data_3.StartIndex, data_3.IndexStride, data_3.Stride, data_3.Offset, data_3.Values, data_3.DataCount, data_3.BufferUsage, data_3.DeterminesVertexCount, true, data_3.Divisor, data_3.Buffer, data_3.ChildAttributes, data_3.ParentObject, data_3.ParentAttribute, data_3.Link, data_3.LinkedChildren, data_3.CanSingleCopy, data_3.EnableNeeded, data_3.RecalcNeeded, data_3.CalcDataCount, data_3.CalcStride, data_3.CalcOffset);
                continue loop;
              }

            case 9:
              {
                var x_6 = h.fields[0] | 0;
                props_2_mut = t;
                children_mut = children;
                data_3_mut = new GlAttributeData(data_3.Id, data_3.Kind, data_3.Info, data_3.IsDirty, data_3.BaseType, data_3.ArrayCreator, data_3.RecordSize, data_3.ByteSize, data_3.DataLength, data_3.BaseTypeInfo, data_3.Normalize, data_3.StartIndex, data_3.IndexStride, data_3.Stride, data_3.Offset, data_3.Values, data_3.DataCount, data_3.BufferUsage, data_3.DeterminesVertexCount, data_3.DeterminesInstanceCount, x_6, data_3.Buffer, data_3.ChildAttributes, data_3.ParentObject, data_3.ParentAttribute, data_3.Link, data_3.LinkedChildren, data_3.CanSingleCopy, data_3.EnableNeeded, data_3.RecalcNeeded, data_3.CalcDataCount, data_3.CalcStride, data_3.CalcOffset);
                continue loop;
              }

            case 10:
              {
                var x_7 = h.fields[0];
                props_2_mut = t;
                children_mut = (0, _List.cons)((0, _Util.curry)(2, x_7), children);
                data_3_mut = data_3;
                continue loop;
              }

            case 11:
              {
                var x_8 = h.fields[0];
                props_2_mut = t;
                children_mut = children;
                data_3_mut = GlAttribCommon_processLink(x_8, data_3);
                continue loop;
              }

            default:
              {
                var x = h.fields[0] | 0;
                props_2_mut = t;
                children_mut = children;
                data_3_mut = new GlAttributeData(data_3.Id, data_3.Kind, data_3.Info, data_3.IsDirty, x, data_3.ArrayCreator, data_3.RecordSize, data_3.ByteSize, data_3.DataLength, data_3.BaseTypeInfo, data_3.Normalize, data_3.StartIndex, data_3.IndexStride, data_3.Stride, data_3.Offset, data_3.Values, data_3.DataCount, data_3.BufferUsage, data_3.DeterminesVertexCount, data_3.DeterminesInstanceCount, data_3.Divisor, data_3.Buffer, data_3.ChildAttributes, data_3.ParentObject, data_3.ParentAttribute, data_3.Link, data_3.LinkedChildren, data_3.CanSingleCopy, data_3.EnableNeeded, data_3.RecalcNeeded, data_3.CalcDataCount, data_3.CalcStride, data_3.CalcOffset);
                continue loop;
              }
          }
        } else {
          var childAttributes = createChildren((0, _List.reverse)(children), data_3, data_3.ParentObject);
          console.log((0, _Option.some)((0, _String.toText)((0, _String.interpolate)("%P().apply children count %P()", [GlAttributeData__get_Name(data_3), (0, _List.length)(childAttributes)]))));
          return new GlAttributeData(data_3.Id, data_3.Kind, data_3.Info, data_3.IsDirty, data_3.BaseType, data_3.ArrayCreator, data_3.RecordSize, data_3.ByteSize, data_3.DataLength, data_3.BaseTypeInfo, data_3.Normalize, data_3.StartIndex, data_3.IndexStride, data_3.Stride, data_3.Offset, data_3.Values, data_3.DataCount, data_3.BufferUsage, data_3.DeterminesVertexCount, data_3.DeterminesInstanceCount, data_3.Divisor, data_3.Buffer, childAttributes, data_3.ParentObject, data_3.ParentAttribute, data_3.Link, data_3.LinkedChildren, data_3.CanSingleCopy, data_3.EnableNeeded, data_3.RecalcNeeded, data_3.CalcDataCount, data_3.CalcStride, data_3.CalcOffset);
        }

        break;
      }
    };

    return loop(props_1, (0, _List.empty)(), data_2);
  };

  return updateCommon(apply(props, data));
}

function GlAttribCommon_clean(data) {
  data.IsDirty = false;
  data.RecalcNeeded = false;
  data.EnableNeeded = false;
}

function GlAttribCommon_dirty(data) {
  data.IsDirty = true;
  var attribute = (0, _Option.defaultArg)(data.ParentAttribute, data);
  attribute.IsDirty = true;
  GlCommon_dirtyObject(attribute.ParentObject);
}

function GlAttribCommon_dirtyLinkedChildren(data) {
  (0, _List.iterate)(function (data_1) {
    GlAttribCommon_dirty(data_1);
  }, data.LinkedChildren);
}

function GlAttribCommon_enableNeeded(data) {
  data.EnableNeeded = true;
  GlAttribCommon_dirty(data);
}

function GlAttribCommon_linkedChildrenEnableNeeded(data) {
  (0, _List.iterate)(function (data_1) {
    GlAttribCommon_enableNeeded(data_1);
  }, data.LinkedChildren);
}

function GlAttribCommon_recalcNeeded(data) {
  data.RecalcNeeded = true;
  var attribute = (0, _Option.defaultArg)(data.ParentAttribute, data);
  attribute.RecalcNeeded = true;
  data.ParentObject.RecalcNeeded = true;
  GlAttribCommon_dirty(data);
}

function GlAttribCommon_linkedChildrenRecalcNeeded(data) {
  (0, _List.iterate)(function (data_1) {
    GlAttribCommon_recalcNeeded(data_1);
  }, data.LinkedChildren);
}

function GlAttribCommon_childrenDirty(data) {
  (0, _List.iterate)(function (data_1) {
    GlAttribCommon_dirty(data_1);
  }, data.ChildAttributes);
}

function GlAttribCommon_childrenEnableNeeded(data) {
  (0, _List.iterate)(function (data_1) {
    GlAttribCommon_enableNeeded(data_1);
  }, data.ChildAttributes);
}

function GlAttribCommon_childrenRecalcNeeded(data) {
  (0, _List.iterate)(function (data_1) {
    GlAttribCommon_recalcNeeded(data_1);
  }, data.ChildAttributes);
}

function GlAttribCommon_createLinked(data, parentObject) {
  var linkChildren = function linkChildren(data_1) {
    var children = (0, _List.map)(function (d) {
      return GlAttribCommon_createLinked(d, parentObject);
    }, data_1.ChildAttributes);
    return new GlAttributeData(data_1.Id, data_1.Kind, data_1.Info, data_1.IsDirty, data_1.BaseType, data_1.ArrayCreator, data_1.RecordSize, data_1.ByteSize, data_1.DataLength, data_1.BaseTypeInfo, data_1.Normalize, data_1.StartIndex, data_1.IndexStride, data_1.Stride, data_1.Offset, data_1.Values, data_1.DataCount, data_1.BufferUsage, data_1.DeterminesVertexCount, data_1.DeterminesInstanceCount, data_1.Divisor, data_1.Buffer, children, data_1.ParentObject, data_1.ParentAttribute, data_1.Link, data_1.LinkedChildren, data_1.CanSingleCopy, data_1.EnableNeeded, data_1.RecalcNeeded, data_1.CalcDataCount, data_1.CalcStride, data_1.CalcOffset);
  };

  var updateChildrenParentAttribute = function updateChildrenParentAttribute(data_2) {
    var parent = data_2;
    (0, _List.iterate)(function (c) {
      c.ParentAttribute = parent;
    }, data_2.ChildAttributes);
    return data_2;
  };

  (0, _glbufferFs.GlBuffer__set_AutoClean_Z1FBCCD16)(data.Buffer, false);
  return GlAttribCommon_addLinkedChild(data, updateChildrenParentAttribute(linkChildren(new GlAttributeData(data.Id, data.Kind, (0, _webgl_program_utilsFs.getAttributeOrDefault)(GlAttributeData__get_Name(data), parentObject.ProgramInfo), data.IsDirty, data.BaseType, data.ArrayCreator, data.RecordSize, data.ByteSize, data.DataLength, data.BaseTypeInfo, data.Normalize, data.StartIndex, data.IndexStride, data.Stride, data.Offset, new Float64Array([]), data.DataCount, data.BufferUsage, data.DeterminesVertexCount, data.DeterminesInstanceCount, data.Divisor, data.Buffer, data.ChildAttributes, parentObject, data.ParentAttribute, data, (0, _List.empty)(), data.CanSingleCopy, data.EnableNeeded, data.RecalcNeeded, data.CalcDataCount, data.CalcStride, data.CalcOffset))));
}

function GlDebug_getUniformInfoTreeDesc(info) {
  var offsetEnd = (0, _String.toText)((0, _String.interpolate)(" .. %P()", [info.Offset + info.ByteSize - 1]));
  return info.Name + (0, _String.toText)((0, _String.interpolate)(" - %P()", [(0, _utilsFs.enumName)(_webgl_typesFs.GlTypeT, info.Type)])) + (info.IsArray ? (0, _String.toText)((0, _String.interpolate)("[%P()]", [info.Length])) : "") + (0, _String.toText)((0, _String.interpolate)(" [%P() .. %P()]", [info.StartIndex, info.StartIndex + info.ElementCount * info.Length - 1])) + (info.BlockIndex >= 0 ? (0, _String.toText)((0, _String.interpolate)(" (%P()%P())(%P())", [info.Offset, offsetEnd, info.Length])) : "");
}

function GlDebug_getUniformTreeDesc(data) {
  var offsetEnd = data.Data.length > 0 ? (0, _String.toText)((0, _String.interpolate)(" .. %P()", [data.Info.Offset + data.Data.byteLength - 1])) : "";
  return GlUniformData__get_Name(data) + (0, _String.toText)((0, _String.interpolate)(" - %P()", [(0, _utilsFs.enumName)(_webgl_typesFs.GlTypeT, data.Info.Type)])) + (data.Info.IsArray ? (0, _String.toText)((0, _String.interpolate)("[%P()]", [data.Info.Length])) : "") + (0, _optionexFs.executeDefault)("", function (u) {
    return (0, _String.toText)((0, _String.interpolate)(" Root: %P()", [GlUniformData__get_Name(u)]));
  }, data.RootUniform) + (0, _optionexFs.executeDefault)((0, _String.toText)((0, _String.interpolate)(" (%P())", [data.Value.length])), function (u_1) {
    return (0, _String.toText)((0, _String.interpolate)("", []));
  }, data.RootUniform) + (0, _String.toText)((0, _String.interpolate)(" [%P() .. %P()]", [data.Info.StartIndex, data.Info.StartIndex + data.Info.ElementCount * data.Info.Length - 1])) + (data.Info.BlockIndex >= 0 ? (0, _String.toText)((0, _String.interpolate)(" (%P()%P())(%P())", [data.Info.Offset, offsetEnd, data.Data.length])) : "");
}

function GlDebug_logUniformData(data) {
  var msg = (0, _String.toText)((0, _String.interpolate)("%P()", [GlUniformData__get_Name(data)]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  if (!(0, _utilsFs.Debug_collapsible)()) {
    (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
  }

  var msgs = (0, _List.ofArray)([(0, _String.toText)((0, _String.interpolate)("IsActive = %P()", [data.Info.Index >= 0])), (0, _String.toText)((0, _String.interpolate)("IsUbo = %P()", [data.ParentUbo != null])), (0, _String.toText)((0, _String.interpolate)("Location = %P()", [data.Info.Location])), (0, _String.toText)((0, _String.interpolate)("Type = %P()", [(0, _utilsFs.enumName)(_webgl_typesFs.GlTypeT, data.Info.Type)])), (0, _String.toText)((0, _String.interpolate)("ByteSize = %P()", [data.Info.ByteSize])), (0, _String.toText)((0, _String.interpolate)("Offset = %P()", [data.Info.Offset])), (0, _String.toText)((0, _String.interpolate)("Value = %P()", [data.Value]))]);
  var msg_1 = (0, _String.join)((0, _String.toText)((0, _String.interpolate)("\n%P()", [(0, _utilsFs.Debug_indent)()])), msgs);

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg_1]));
  }

  if (!(0, _utilsFs.Debug_collapsible)()) {
    (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
  }

  data.ChildUniforms.forEach(function (data_1) {
    GlDebug_logUniformData(data_1);
  });

  if ((0, _utilsFs.Debug_collapsible)()) {
    console.groupEnd();
  } else {
    (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
  }

  if ((0, _utilsFs.Debug_collapsible)()) {
    console.groupEnd();
  } else {
    (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
  }
}

function GlDebug_getUniformDataEntries(data) {
  var hasParentUbo = data.ParentUbo != null;
  var hasRootUniform = data.RootUniform != null;
  var isChild = hasRootUniform;
  return (0, _Seq.delay)(function () {
    return (0, _Seq.append)((0, _Seq.singleton)((0, _List.ofArray)([["Ubo", hasParentUbo ? GlUboData__get_Name(data.ParentUbo) : null], ["Name", isChild ? null : GlUniformData__get_Name(data)], ["ChildName", isChild ? GlUniformData__get_Name(data) : null], ["Location", data.Info.Location], ["ByteSize", data.Info.ByteSize], ["Offset", data.Info.Offset], ["Index", data.Info.Index], ["Type", (0, _utilsFs.enumName)(_webgl_typesFs.GlTypeT, data.Info.Type)], ["IsArray", data.Info.IsArray], ["Length", data.Info.Length], ["Data", data.Data], ["Value", data.Value]])), (0, _Seq.delay)(function () {
      return data.ChildUniforms.length > 0 ? (0, _Seq.concat)((0, _Array.map)(GlDebug_getUniformDataEntries, data.ChildUniforms)) : (0, _Seq.empty)();
    }));
  });
}

function GlDebug_getUboInfoTreeDesc(info) {
  return (0, _String.toText)((0, _String.interpolate)("UBO %P() (%P()) %P() bytes", [info.Name, info.BlockIndex, info.ByteSize]));
}

function GlDebug_getUboTreeDesc(data) {
  return (0, _String.toText)((0, _String.interpolate)("UBO %P() (%P()) %P() bytes", [GlUboData__get_Name(data), data.Info.BlockIndex, data.Info.ByteSize]));
}

function GlDebug_logUboData(data) {
  var msg = (0, _String.toText)((0, _String.interpolate)("%P()", [GlUboData__get_Name(data)]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  if (!(0, _utilsFs.Debug_collapsible)()) {
    (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
  }

  var msgs = (0, _List.ofArray)([(0, _String.toText)((0, _String.interpolate)("Location = %P()", [data.Location])), (0, _String.toText)((0, _String.interpolate)("ByteSize = %P()", [data.Info.ByteSize])), (0, _String.toText)((0, _String.interpolate)("Data (%P()) = %P()", [(0, _glbufferFs.GlBuffer__get_Data)(data.Buffer).byteLength, (0, _utilsFs.clipObj)(20, (0, _glbufferFs.GlBuffer__get_Data)(data.Buffer))]))]);
  var msg_1 = (0, _String.join)((0, _String.toText)((0, _String.interpolate)("\n%P()", [(0, _utilsFs.Debug_indent)()])), msgs);

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg_1]));
  }

  (0, _List.iterate)(function (data_1) {
    GlDebug_logUniformData(data_1);
  }, data.Uniforms);

  if ((0, _utilsFs.Debug_collapsible)()) {
    console.groupEnd();
  } else {
    (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
  }
}

function GlDebug_getUboDataEntry(data) {
  return (0, _Seq.delay)(function () {
    return (0, _Seq.append)((0, _Seq.singleton)((0, _List.ofArray)([["Ubo", GlUboData__get_Name(data)], ["Name", null], ["ChildName", null], ["Location", data.Location], ["ByteSize", data.Info.ByteSize], ["Data", data.Data], ["Value", null]])), (0, _Seq.delay)(function () {
      return (0, _Seq.concat)((0, _List.map)(GlDebug_getUniformDataEntries, data.Uniforms));
    }));
  });
}

function GlDebug_logSingleAttributeData(data) {
  var msg = (0, _String.toText)((0, _String.interpolate)("Single %P()", [GlAttributeData__get_Name(data)]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  if (!(0, _utilsFs.Debug_collapsible)()) {
    (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
  }

  var msgs = (0, _List.ofArray)([(0, _String.toText)((0, _String.interpolate)("Location = %P()", [data.Info.Location])), (0, _String.toText)((0, _String.interpolate)("AttrType = %P()", [(0, _utilsFs.enumName)(_webgl_typesFs.GlTypeT, data.Info.Type)])), (0, _String.toText)((0, _String.interpolate)("BaseType = %P()", [(0, _utilsFs.enumName)(_webgl_typesFs.GlTypeT, data.BaseType)])), (0, _String.toText)((0, _String.interpolate)("ElementCount = %P()", [data.Info.TypeInfo.ElementCount])), (0, _String.toText)((0, _String.interpolate)("RecordSize = %P()", [data.RecordSize])), (0, _String.toText)((0, _String.interpolate)("DataCount = %P()", [data.DataCount])), (0, _String.toText)((0, _String.interpolate)("Stride = %P()", [data.Stride])), (0, _String.toText)((0, _String.interpolate)("Offset = %P()", [data.Offset])), (0, _String.toText)((0, _String.interpolate)("StartIndex = %P()", [data.StartIndex])), (0, _String.toText)((0, _String.interpolate)("Values (%P()) = %P()", [data.Values.length, (0, _utilsFs.clipArray)(20, data.Values)])), (0, _String.toText)((0, _String.interpolate)("Data (%P()) = %P()", [(0, _glbufferFs.GlBuffer__get_Data)(data.Buffer).byteLength, (0, _utilsFs.clipObj)(20, (0, _glbufferFs.GlBuffer__get_Data)(data.Buffer))])), (0, _String.toText)((0, _String.interpolate)("DeterminesVertexCount = %P()", [data.DeterminesVertexCount])), (0, _String.toText)((0, _String.interpolate)("DeterminesInstanceCount = %P()", [data.DeterminesInstanceCount])), (0, _String.toText)((0, _String.interpolate)("Divisor = %P()", [data.Divisor])), (0, _String.toText)((0, _String.interpolate)("Normalize = %P()", [data.Normalize])), (0, _String.toText)((0, _String.interpolate)("BufferUsage = %P()", [(0, _utilsFs.enumName)(_webgl_typesFs.GlBufferUsageT, data.BufferUsage)])), (0, _String.toText)((0, _String.interpolate)("CalcDataCount = %P()", [data.CalcDataCount]))]);
  var msg_1 = (0, _String.join)((0, _String.toText)((0, _String.interpolate)("\n%P()", [(0, _utilsFs.Debug_indent)()])), msgs);

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg_1]));
  }

  if ((0, _utilsFs.Debug_collapsible)()) {
    console.groupEnd();
  } else {
    (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
  }
}

function GlDebug_getSingleAttributeDataEntry(data) {
  return (0, _List.ofArray)([["Name", GlAttributeData__get_Name(data)], ["ChildName", null], ["Location", data.Info.Location], ["DataCount", data.DataCount], ["Stride", data.Stride], ["Offset", data.Offset], ["StartIndex", data.StartIndex], ["Divisor", data.Divisor], ["Type", (0, _utilsFs.enumName)(_webgl_typesFs.GlTypeT, data.Info.Type)], ["RecordSize", data.RecordSize], ["ByteSize", data.ByteSize], ["DeterminesInstanceCount", data.DeterminesInstanceCount]]);
}

function GlDebug_logIndexAttributeData(data) {
  var msg = (0, _String.toText)((0, _String.interpolate)("%P()", [data.Name]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  if (!(0, _utilsFs.Debug_collapsible)()) {
    (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
  }

  var msgs = (0, _List.ofArray)([(0, _String.toText)((0, _String.interpolate)("Type = %P()", [(0, _utilsFs.enumName)(_webgl_typesFs.GlIndiciesTypeT, data.IndiciesType)])), (0, _String.toText)((0, _String.interpolate)("Offset = %P()", [data.Offset])), (0, _String.toText)((0, _String.interpolate)("Values (%P()) = %P()", [data.Values.length, (0, _utilsFs.clipArray)(20, data.Values)])), (0, _String.toText)((0, _String.interpolate)("Data (%P()) = %P()", [(0, _glbufferFs.GlBuffer__get_Data)(data.Buffer).byteLength, (0, _utilsFs.clipObj)(20, (0, _glbufferFs.GlBuffer__get_Data)(data.Buffer))])), (0, _String.toText)((0, _String.interpolate)("DataCount = %P()", [data.DataCount])), (0, _String.toText)((0, _String.interpolate)("BufferUsage = %P()", [(0, _utilsFs.enumName)(_webgl_typesFs.GlBufferUsageT, data.BufferUsage)]))]);
  var msg_1 = (0, _String.join)((0, _String.toText)((0, _String.interpolate)("\n%P()", [(0, _utilsFs.Debug_indent)()])), msgs);

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg_1]));
  }

  if ((0, _utilsFs.Debug_collapsible)()) {
    console.groupEnd();
  } else {
    (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
  }
}

function GlDebug_getIndexAttributeDataEntry(data) {
  return (0, _List.ofArray)([["Name", data.Name], ["DataCount", data.DataCount], ["Type", (0, _utilsFs.enumName)(_webgl_typesFs.GlIndiciesTypeT, data.IndiciesType)], ["Offset", data.Offset]]);
}

function GlDebug_logInterleaveAttributeData(data) {
  var msg = (0, _String.toText)((0, _String.interpolate)("Interleave %P()", [GlAttributeData__get_Name(data)]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  if (!(0, _utilsFs.Debug_collapsible)()) {
    (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
  }

  var msgs = (0, _List.ofArray)([(0, _String.toText)((0, _String.interpolate)("Location = %P()", [data.Info.Location])), (0, _String.toText)((0, _String.interpolate)("AttrType = %P()", [(0, _utilsFs.enumName)(_webgl_typesFs.GlTypeT, data.Info.Type)])), (0, _String.toText)((0, _String.interpolate)("BaseType = %P()", [(0, _utilsFs.enumName)(_webgl_typesFs.GlTypeT, data.BaseType)])), (0, _String.toText)((0, _String.interpolate)("ElementCount = %P()", [data.Info.TypeInfo.ElementCount])), (0, _String.toText)((0, _String.interpolate)("RecordSize = %P()", [data.RecordSize])), (0, _String.toText)((0, _String.interpolate)("ByteSize = %P()", [data.ByteSize])), (0, _String.toText)((0, _String.interpolate)("DataCount = %P()", [data.DataCount])), (0, _String.toText)((0, _String.interpolate)("DataLength = %P()", [data.DataLength])), (0, _String.toText)((0, _String.interpolate)("IndexStride = %P()", [data.IndexStride])), (0, _String.toText)((0, _String.interpolate)("Stride = %P()", [data.Stride])), (0, _String.toText)((0, _String.interpolate)("Offset = %P()", [data.Offset])), (0, _String.toText)((0, _String.interpolate)("StartIndex = %P()", [data.StartIndex])), (0, _String.toText)((0, _String.interpolate)("Values (%P()) = %P()", [data.Values.length, (0, _utilsFs.clipArray)(20, data.Values)])), (0, _String.toText)((0, _String.interpolate)("Data (%P()) = %P()", [(0, _glbufferFs.GlBuffer__get_Data)(data.Buffer).byteLength, (0, _utilsFs.clipObj)(20, (0, _glbufferFs.GlBuffer__get_Data)(data.Buffer))])), (0, _String.toText)((0, _String.interpolate)("DeterminesVertexCount = %P()", [data.DeterminesVertexCount])), (0, _String.toText)((0, _String.interpolate)("DeterminesInstanceCount = %P()", [data.DeterminesInstanceCount])), (0, _String.toText)((0, _String.interpolate)("Divisor = %P()", [data.Divisor])), (0, _String.toText)((0, _String.interpolate)("Normalize = %P()", [data.Normalize])), (0, _String.toText)((0, _String.interpolate)("BufferUsage = %P()", [(0, _utilsFs.enumName)(_webgl_typesFs.GlBufferUsageT, data.BufferUsage)])), (0, _String.toText)((0, _String.interpolate)("CanSingleCopy = %P()", [data.CanSingleCopy])), (0, _String.toText)((0, _String.interpolate)("CalcStride = %P()", [data.CalcStride])), (0, _String.toText)((0, _String.interpolate)("CalcDataCount = %P()", [data.CalcDataCount]))]);
  var msg_1 = (0, _String.join)((0, _String.toText)((0, _String.interpolate)("\n%P()", [(0, _utilsFs.Debug_indent)()])), msgs);

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg_1]));
  }

  if ((0, _utilsFs.Debug_collapsible)()) {
    console.groupEnd();
  } else {
    (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
  }
}

function GlDebug_getInterleaveAttributeDataEntry(data) {
  return (0, _List.ofArray)([["Name", GlAttributeData__get_Name(data)], ["ChildName", null], ["Kind", (0, _Types.toString)(data.Kind)], ["Location", data.Info.Location], ["DataCount", data.DataCount], ["Stride", data.Stride], ["Offset", data.Offset], ["StartIndex", data.StartIndex], ["Divisor", data.Divisor], ["SingleCopy", data.CanSingleCopy], ["Type", (0, _utilsFs.enumName)(_webgl_typesFs.GlTypeT, data.Info.Type)], ["RecordSize", data.RecordSize], ["ByteSize", data.ByteSize], ["DeterminesInstanceCount", data.DeterminesInstanceCount]]);
}

function GlDebug_logInterleaveChilAttributeData(data) {
  var msg = (0, _String.toText)((0, _String.interpolate)("Interleave child %P()", [GlAttributeData__get_Name(data)]));

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
  }

  if (!(0, _utilsFs.Debug_collapsible)()) {
    (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
  }

  var msgs = (0, _List.ofArray)([(0, _String.toText)((0, _String.interpolate)("Location = %P()", [data.Info.Location])), (0, _String.toText)((0, _String.interpolate)("AttrType = %P()", [(0, _utilsFs.enumName)(_webgl_typesFs.GlTypeT, data.Info.Type)])), (0, _String.toText)((0, _String.interpolate)("BaseType = %P()", [(0, _utilsFs.enumName)(_webgl_typesFs.GlTypeT, data.BaseType)])), (0, _String.toText)((0, _String.interpolate)("ElementCount = %P()", [data.Info.TypeInfo.ElementCount])), (0, _String.toText)((0, _String.interpolate)("RecordSize = %P()", [data.RecordSize])), (0, _String.toText)((0, _String.interpolate)("DataCount = %P()", [data.DataCount])), (0, _String.toText)((0, _String.interpolate)("Stride = %P()", [data.Stride])), (0, _String.toText)((0, _String.interpolate)("Offset = %P()", [data.Offset])), (0, _String.toText)((0, _String.interpolate)("StartIndex = %P()", [data.StartIndex])), (0, _String.toText)((0, _String.interpolate)("DeterminesVertexCount = %P()", [data.DeterminesVertexCount])), (0, _String.toText)((0, _String.interpolate)("DeterminesInstanceCount = %P()", [data.DeterminesInstanceCount])), (0, _String.toText)((0, _String.interpolate)("Divisor = %P()", [data.Divisor])), (0, _String.toText)((0, _String.interpolate)("Normalize = %P()", [data.Normalize])), (0, _String.toText)((0, _String.interpolate)("BufferUsage = %P()", [(0, _utilsFs.enumName)(_webgl_typesFs.GlBufferUsageT, data.BufferUsage)])), (0, _String.toText)((0, _String.interpolate)("CalcStride = %P()", [data.CalcStride])), (0, _String.toText)((0, _String.interpolate)("CalcOffset = %P()", [data.CalcOffset])), (0, _String.toText)((0, _String.interpolate)("CalcDataCount = %P()", [data.CalcDataCount]))]);
  var msg_1 = (0, _String.join)((0, _String.toText)((0, _String.interpolate)("\n%P()", [(0, _utilsFs.Debug_indent)()])), msgs);

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg_1]));
  }

  if ((0, _utilsFs.Debug_collapsible)()) {
    console.groupEnd();
  } else {
    (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
  }
}

function GlDebug_getInterleaveChilAttributeDataEntry(data) {
  return (0, _List.ofArray)([["Name", ""], ["Kind", (0, _Types.toString)(data.Kind)], ["ChildName", GlAttributeData__get_Name(data)], ["Location", data.Info.Location], ["DataCount", data.DataCount], ["Stride", data.Stride], ["Offset", data.Offset], ["StartIndex", data.StartIndex], ["Divisor", data.Divisor], ["Type", (0, _utilsFs.enumName)(_webgl_typesFs.GlTypeT, data.Info.Type)], ["RecordSize", data.RecordSize]]);
}

function GlDebug_logRootAttribute(attrib) {
  if (attrib.tag === 1) {
    var data_1 = attrib.fields[0];
    GlDebug_logInterleaveAttributeData(data_1);

    if (!(0, _utilsFs.Debug_collapsible)()) {
      (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
    }

    (0, _List.iterate)(function (data_2) {
      GlDebug_logInterleaveChilAttributeData(data_2);
    }, data_1.ChildAttributes);

    if ((0, _utilsFs.Debug_collapsible)()) {
      console.groupEnd();
    } else {
      (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
    }
  } else {
    var data = attrib.fields[0];
    GlDebug_logSingleAttributeData(data);
  }
}

function GlDebug_getRootAttributeEntries(attrib) {
  return (0, _List.ofSeq)((0, _Seq.delay)(function () {
    if (attrib.tag === 1) {
      var data_1 = attrib.fields[0];
      return (0, _Seq.append)((0, _Seq.singleton)(GlDebug_getInterleaveAttributeDataEntry(data_1)), (0, _Seq.delay)(function () {
        var childEntries = (0, _List.map)(GlDebug_getInterleaveChilAttributeDataEntry, data_1.ChildAttributes);
        return childEntries;
      }));
    } else {
      var data = attrib.fields[0];
      return (0, _Seq.singleton)(GlDebug_getSingleAttributeDataEntry(data));
    }
  }));
}

function GlDebug_getTexturePixels(data) {
  var matchValue = data.Pixels;

  switch (matchValue.tag) {
    case 1:
      {
        var x_1 = matchValue.fields[0];
        return x_1;
      }

    case 2:
      {
        var x_2 = matchValue.fields[0];
        return x_2;
      }

    case 3:
      {
        var x_3 = matchValue.fields[0];
        return x_3;
      }

    case 4:
      {
        var x_4 = matchValue.fields[0];
        return x_4;
      }

    case 5:
      {
        var x_5 = matchValue.fields[0];
        return x_5;
      }

    default:
      {
        var x = matchValue.fields[0];
        return x;
      }
  }
}

function GlDebug_logTextureData(data) {
  var msg = (0, _String.toText)((0, _String.interpolate)("%P()", [data.Name]));

  if ((0, _utilsFs.Debug_enabled)()) {
    if ((0, _utilsFs.Debug_collapsible)()) {
      if ((0, _utilsFs.Debug_logCollapsed)()) {
        console.groupCollapsed(msg);
      } else {
        console.group(msg);
      }
    } else {
      if ((0, _utilsFs.Debug_enabled)()) {
        (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
      }

      if (!(0, _utilsFs.Debug_collapsible)()) {
        (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
      }
    }
  }

  var msgs = (0, _List.ofArray)([(0, _String.toText)((0, _String.interpolate)("Name = %P()", [data.Name])), (0, _String.toText)((0, _String.interpolate)("Location = %P()", [data.Index])), (0, _String.toText)((0, _String.interpolate)("Level = %P()", [data.Level])), (0, _String.toText)((0, _String.interpolate)("InternalFormat = %P()", [(0, _utilsFs.enumName)(_webgl_typesFs.GlColorFormatT, data.InternalFormat)])), (0, _String.toText)((0, _String.interpolate)("Format = %P()", [(0, _utilsFs.enumName)(_webgl_typesFs.GlColorFormatT, data.Format)])), (0, _String.toText)((0, _String.interpolate)("Width = %P()", [data.Width])), (0, _String.toText)((0, _String.interpolate)("Height = %P()", [data.Height])), (0, _String.toText)((0, _String.interpolate)("DataType = %P()", [(0, _utilsFs.enumName)(_webgl_typesFs.GlTextureTypeT, data.DataType)])), (0, _String.toText)((0, _String.interpolate)("Pixels = %P()", [GlDebug_getTexturePixels(data)])), (0, _String.toText)((0, _String.interpolate)("Offset = %P()", [data.Offset]))]);
  var msg_2 = (0, _String.join)((0, _String.toText)((0, _String.interpolate)("\n%P()", [(0, _utilsFs.Debug_indent)()])), msgs);

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg_2]));
  }

  if ((0, _utilsFs.Debug_collapsible)()) {
    console.groupEnd();
  } else {
    (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
  }
}

function GlDebug_getTextureDataEntries(data) {
  return (0, _Seq.delay)(function () {
    return (0, _Seq.singleton)((0, _List.ofArray)([["Name", data.Name], ["Location", data.Index], ["Level", data.Level], ["Internal", (0, _utilsFs.enumName)(_webgl_typesFs.GlColorFormatT, data.InternalFormat)], ["Format", (0, _utilsFs.enumName)(_webgl_typesFs.GlColorFormatT, data.Format)], ["Width", data.Width], ["Height", data.Height], ["Type", (0, _utilsFs.enumName)(_webgl_typesFs.GlTextureTypeT, data.DataType)], ["Pixels", GlDebug_getTexturePixels(data)], ["Offset", data.Offset]]));
  });
}

function GlDebug_toJsObjPair(key, value) {
  return [key, value];
}

function GlDebug_entryToJsObject(entry) {
  return (0, _Util.createObj)((0, _Seq.map)(function (tupledArg) {
    return GlDebug_toJsObjPair(tupledArg[0], tupledArg[1]);
  }, entry));
}

function GlDebug_entriesToJsObjects(entries) {
  return Array.from((0, _Seq.map)(GlDebug_entryToJsObject, entries));
}

function GlDebug_consoleTable(o) {
  console.table((0, _Option.some)(o));
}

function GlDebug_logUniforms(uniforms) {
  (0, _List.iterate)(function (data) {
    GlDebug_logUniformData(data);
  }, uniforms);
}

function GlDebug_logUbos(ubos) {
  (0, _List.iterate)(function (data) {
    GlDebug_logUboData(data);
  }, ubos);
}

function GlDebug_logAttributes(attributes) {
  (0, _List.iterate)(function (attrib) {
    GlDebug_logRootAttribute(attrib);
  }, attributes);
}

function GlDebug_logIndicies(indicies) {
  GlDebug_logIndexAttributeData(indicies);
}

function GlDebug_logTextures(textures) {
  (0, _List.iterate)(function (data) {
    GlDebug_logTextureData(data);
  }, textures);
}

function GlDebug_tableUniforms(uniforms) {
  GlDebug_consoleTable(GlDebug_entriesToJsObjects((0, _Seq.collect)(GlDebug_getUniformDataEntries, uniforms)));
}

function GlDebug_tableUbos(ubos) {
  GlDebug_consoleTable(GlDebug_entriesToJsObjects((0, _Seq.collect)(GlDebug_getUboDataEntry, ubos)));
}

function GlDebug_tableUbosAndUniforms(ubos, uniforms) {
  GlDebug_consoleTable(GlDebug_entriesToJsObjects((0, _Seq.delay)(function () {
    return (0, _Seq.append)((0, _Seq.concat)((0, _List.map)(GlDebug_getUboDataEntry, ubos)), (0, _Seq.delay)(function () {
      return (0, _Seq.concat)((0, _List.map)(GlDebug_getUniformDataEntries, uniforms));
    }));
  })));
}

function GlDebug_tableAttributes(attributes) {
  GlDebug_consoleTable(GlDebug_entriesToJsObjects((0, _List.collect)(GlDebug_getRootAttributeEntries, attributes)));
}

function GlDebug_tableIndicies(indicies) {
  GlDebug_consoleTable(GlDebug_entriesToJsObjects((0, _Seq.collect)(function (arg) {
    return (0, _seqexFs.of1)(GlDebug_getIndexAttributeDataEntry(arg));
  }, indicies)));
}

function GlDebug_tableAttributesAndIndicies(attributes, indicies) {
  GlDebug_consoleTable(GlDebug_entriesToJsObjects((0, _Seq.delay)(function () {
    return (0, _Seq.append)((0, _Seq.concat)((0, _List.map)(GlDebug_getRootAttributeEntries, attributes)), (0, _Seq.delay)(function () {
      return (0, _Seq.collect)(function (arg) {
        return (0, _seqexFs.of1)(GlDebug_getIndexAttributeDataEntry(arg));
      }, indicies);
    }));
  })));
}

function GlDebug_tableTextures(textures) {
  GlDebug_consoleTable(GlDebug_entriesToJsObjects((0, _Seq.collect)(GlDebug_getTextureDataEntries, textures)));
}

function GlDebug_logUniformInfoTree(info) {
  var loop = function loop(info_1) {
    var msg_1 = GlDebug_getUniformInfoTreeDesc(info_1);

    if ((0, _utilsFs.Debug_enabled)()) {
      if ((0, _utilsFs.Debug_collapsible)()) {
        if ((0, _utilsFs.Debug_logCollapsed)()) {
          console.groupCollapsed(msg_1);
        } else {
          console.group(msg_1);
        }
      } else {
        if ((0, _utilsFs.Debug_enabled)()) {
          (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg_1]));
        }

        if (!(0, _utilsFs.Debug_collapsible)()) {
          (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
        }
      }
    }

    var matchValue = info_1.Children;

    if (!(0, _Array.equalsWith)(_Util.compareSafe, matchValue, null) ? matchValue.length === 0 : false) {} else {
      var children = matchValue;
      children.forEach(loop);
    }

    if ((0, _utilsFs.Debug_collapsible)()) {
      console.groupEnd();
    } else {
      (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
    }
  };

  loop(info);
}

function GlDebug_logUboInfoTree(info) {
  var msg_1 = GlDebug_getUboInfoTreeDesc(info);

  if ((0, _utilsFs.Debug_enabled)()) {
    if ((0, _utilsFs.Debug_collapsible)()) {
      if ((0, _utilsFs.Debug_logCollapsed)()) {
        console.groupCollapsed(msg_1);
      } else {
        console.group(msg_1);
      }
    } else {
      if ((0, _utilsFs.Debug_enabled)()) {
        (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg_1]));
      }

      if (!(0, _utilsFs.Debug_collapsible)()) {
        (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
      }
    }
  }

  (0, _List.iterate)(function (info_1) {
    GlDebug_logUniformInfoTree(info_1);
  }, info.Uniforms);

  if ((0, _utilsFs.Debug_collapsible)()) {
    console.groupEnd();
  } else {
    (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
  }
}

function GlDebug_logUniformTree(data) {
  var loop = function loop(data_1) {
    var msg_1 = GlDebug_getUniformTreeDesc(data_1);

    if ((0, _utilsFs.Debug_enabled)()) {
      if ((0, _utilsFs.Debug_collapsible)()) {
        if ((0, _utilsFs.Debug_logCollapsed)()) {
          console.groupCollapsed(msg_1);
        } else {
          console.group(msg_1);
        }
      } else {
        if ((0, _utilsFs.Debug_enabled)()) {
          (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg_1]));
        }

        if (!(0, _utilsFs.Debug_collapsible)()) {
          (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
        }
      }
    }

    var matchValue = data_1.ChildUniforms;

    if (!(0, _Array.equalsWith)(_Util.compareSafe, matchValue, null) ? matchValue.length === 0 : false) {} else {
      var children = matchValue;
      children.forEach(loop);
    }

    if ((0, _utilsFs.Debug_collapsible)()) {
      console.groupEnd();
    } else {
      (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
    }
  };

  loop(data);
}

function GlDebug_logUboTree(data) {
  var msg_1 = GlDebug_getUboTreeDesc(data);

  if ((0, _utilsFs.Debug_enabled)()) {
    if ((0, _utilsFs.Debug_collapsible)()) {
      if ((0, _utilsFs.Debug_logCollapsed)()) {
        console.groupCollapsed(msg_1);
      } else {
        console.group(msg_1);
      }
    } else {
      if ((0, _utilsFs.Debug_enabled)()) {
        (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg_1]));
      }

      if (!(0, _utilsFs.Debug_collapsible)()) {
        (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
      }
    }
  }

  (0, _List.iterate)(function (data_1) {
    GlDebug_logUniformTree(data_1);
  }, data.Uniforms);

  if ((0, _utilsFs.Debug_collapsible)()) {
    console.groupEnd();
  } else {
    (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
  }
}

function GlDebug_logUniformInfosTree(uniforms) {
  (0, _Seq.iterate)(function (info) {
    GlDebug_logUniformInfoTree(info);
  }, uniforms);
}

function GlDebug_logUboInfosTree(ubos) {
  (0, _Seq.iterate)(function (info) {
    GlDebug_logUboInfoTree(info);
  }, ubos);
}

function GlDebug_logUniformsTree(uniforms) {
  (0, _Seq.iterate)(function (data) {
    GlDebug_logUniformTree(data);
  }, uniforms);
}

function GlDebug_logUbosTree(ubos) {
  (0, _Seq.iterate)(function (data) {
    GlDebug_logUboTree(data);
  }, ubos);
}

function GlDebug_logObjDef(data) {
  var msg = (0, _String.toText)((0, _String.interpolate)("%P() Info", [data.Name]));

  if ((0, _utilsFs.Debug_enabled)()) {
    if ((0, _utilsFs.Debug_collapsible)()) {
      if ((0, _utilsFs.Debug_logCollapsed)()) {
        console.groupCollapsed(msg);
      } else {
        console.group(msg);
      }
    } else {
      if ((0, _utilsFs.Debug_enabled)()) {
        (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
      }

      if (!(0, _utilsFs.Debug_collapsible)()) {
        (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
      }
    }
  }

  var msgs = (0, _List.ofArray)([(0, _String.toText)((0, _String.interpolate)("DrawMethod = %P()", [data.DrawMethod])), (0, _String.toText)((0, _String.interpolate)("DrawPrimitive = %P()", [(0, _utilsFs.enumName)(_webgl_typesFs.GlDrawPrimitiveT, data.DrawPrimitive)])), (0, _String.toText)((0, _String.interpolate)("VertexCount = %P()", [data.VertexCount])), (0, _String.toText)((0, _String.interpolate)("VertexOffset = %P()", [data.VertexOffset])), (0, _String.toText)((0, _String.interpolate)("VertexCountOffset = %P()", [data.VertexCountOffset])), (0, _String.toText)((0, _String.interpolate)("InstanceCount = %P()", [data.InstanceCount])), (0, _String.toText)((0, _String.interpolate)("InstanceOffset = %P()", [data.InstanceOffset])), (0, _String.toText)((0, _String.interpolate)("InstanceCountOffset = %P()", [data.InstanceCountOffset])), (0, _String.toText)((0, _String.interpolate)("IndiciesOffset = %P()", [data.IndiciesOffset]))]);
  var msg_2 = (0, _String.join)((0, _String.toText)((0, _String.interpolate)("\n%P()", [(0, _utilsFs.Debug_indent)()])), msgs);

  if ((0, _utilsFs.Debug_enabled)()) {
    (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg_2]));
  }

  GlDebug_logUniforms(data.Uniforms);
  GlDebug_logUbos(data.Ubos);
  GlDebug_logAttributes(data.Attributes);
  (0, _optionexFs.call)(function (indicies) {
    GlDebug_logIndicies(indicies);
  }, data.Indicies);
  GlDebug_logTextures(data.Textures);

  if ((0, _utilsFs.Debug_collapsible)()) {
    console.groupEnd();
  } else {
    (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
  }
}

function GlDebug_tableObjDef(data) {
  var msg = (0, _String.toText)((0, _String.interpolate)("%P() Info", [data.Name]));

  if ((0, _utilsFs.Debug_enabled)()) {
    if ((0, _utilsFs.Debug_collapsible)()) {
      if ((0, _utilsFs.Debug_logCollapsed)()) {
        console.groupCollapsed(msg);
      } else {
        console.group(msg);
      }
    } else {
      if ((0, _utilsFs.Debug_enabled)()) {
        (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
      }

      if (!(0, _utilsFs.Debug_collapsible)()) {
        (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
      }
    }
  }

  GlDebug_consoleTable(GlDebug_entriesToJsObjects([(0, _List.ofArray)([["Method", (0, _Types.toString)(data.DrawMethod)], ["Primitive", (0, _utilsFs.enumName)(_webgl_typesFs.GlDrawPrimitiveT, data.DrawPrimitive)], ["Verticies", data.VertexCount], ["VertexStart", data.VertexOffset], ["VerticiesOffset", data.VertexCountOffset], ["Instances", data.InstanceCount], ["InstanceStart", data.InstanceOffset], ["InstancesOffset", data.InstanceCountOffset], ["IndiciesOffset", data.IndiciesOffset]])]));

  if ((0, _utilsFs.Debug_collapsible)()) {
    console.groupEnd();
  } else {
    (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
  }
}

function GlDebug_tableObjDefAndContents(data) {
  GlDebug_tableObjDef(data);
  var msg = (0, _String.toText)((0, _String.interpolate)("%P() Info", [data.Name]));

  if ((0, _utilsFs.Debug_enabled)()) {
    if ((0, _utilsFs.Debug_collapsible)()) {
      if ((0, _utilsFs.Debug_logCollapsed)()) {
        console.groupCollapsed(msg);
      } else {
        console.group(msg);
      }
    } else {
      if ((0, _utilsFs.Debug_enabled)()) {
        (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
      }

      if (!(0, _utilsFs.Debug_collapsible)()) {
        (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
      }
    }
  }

  var indicies;
  var opt = data.Indicies;
  indicies = (0, _optionexFs.executeDefault)((0, _Seq.empty)(), _seqexFs.of1, opt);
  GlDebug_tableUbosAndUniforms(data.Ubos, data.Uniforms);
  GlDebug_tableAttributesAndIndicies(data.Attributes, indicies);
  GlDebug_tableTextures(data.Textures);

  if ((0, _utilsFs.Debug_collapsible)()) {
    console.groupEnd();
  } else {
    (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
  }
}
},{"./.fable/fable-library.3.0.0/Types.js":"../src/.fable/fable-library.3.0.0/Types.js","./.fable/fable-library.3.0.0/Reflection.js":"../src/.fable/fable-library.3.0.0/Reflection.js","./webgl_program_utils.fs.js":"../src/webgl_program_utils.fs.js","./glbuffer.fs.js":"../src/glbuffer.fs.js","./webgl_types.fs.js":"../src/webgl_types.fs.js","./vectors.fs.js":"../src/vectors.fs.js","./matricies.fs.js":"../src/matricies.fs.js","./bounds.fs.js":"../src/bounds.fs.js","./utils.fs.js":"../src/utils.fs.js","./glcanvasparams.fs.js":"../src/glcanvasparams.fs.js","./.fable/fable-library.3.0.0/String.js":"../src/.fable/fable-library.3.0.0/String.js","./.fable/fable-library.3.0.0/List.js":"../src/.fable/fable-library.3.0.0/List.js","./.fable/fable-library.3.0.0/Seq.js":"../src/.fable/fable-library.3.0.0/Seq.js","./.fable/fable-library.3.0.0/Util.js":"../src/.fable/fable-library.3.0.0/Util.js","./.fable/fable-library.3.0.0/Array.js":"../src/.fable/fable-library.3.0.0/Array.js","./typedarray_utils.fs.js":"../src/typedarray_utils.fs.js","./.fable/fable-library.3.0.0/Option.js":"../src/.fable/fable-library.3.0.0/Option.js","./optionex.fs.js":"../src/optionex.fs.js","./seqex.fs.js":"../src/seqex.fs.js","buffer":"C:/Users/Blaine/AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"../src/gluniform.fs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UniformBuilder$reflection = UniformBuilder$reflection;
exports._build = _build;
exports._apply = _apply;
exports.createFrom = createFrom;
exports.create = create;
exports.createLinked = createLinked;
exports.clean = clean;
exports.updateUbo = updateUbo;
exports.update = update;
exports.setValue = setValue;
exports.UniformBuilder = void 0;

var _Types = require("./.fable/fable-library.3.0.0/Types.js");

var _Reflection = require("./.fable/fable-library.3.0.0/Reflection.js");

var _webgl_builder_interfacesFs = require("./webgl_builder_interfaces.fs.js");

var _List = require("./.fable/fable-library.3.0.0/List.js");

var _Util = require("./.fable/fable-library.3.0.0/Util.js");

var _typedarray_utilsFs = require("./typedarray_utils.fs.js");

var _webgl_program_utilsFs = require("./webgl_program_utils.fs.js");

var _Option = require("./.fable/fable-library.3.0.0/Option.js");

var _Seq = require("./.fable/fable-library.3.0.0/Seq.js");

var _String = require("./.fable/fable-library.3.0.0/String.js");

var _utilsFs = require("./utils.fs.js");

var _Array = require("./.fable/fable-library.3.0.0/Array.js");

var _glbufferFs = require("./glbuffer.fs.js");

var _webgl_typesFs = require("./webgl_types.fs.js");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var UniformBuilder = /*#__PURE__*/function (_Record) {
  _inherits(UniformBuilder, _Record);

  var _super = _createSuper(UniformBuilder);

  function UniformBuilder(LinkTo, ChildCreators, Data) {
    var _this;

    _classCallCheck(this, UniformBuilder);

    _this = _super.call(this);
    _this.LinkTo = LinkTo;
    _this.ChildCreators = ChildCreators;
    _this.Data = Data;
    return _this;
  }

  return UniformBuilder;
}(_Types.Record);

exports.UniformBuilder = UniformBuilder;

function UniformBuilder$reflection() {
  return (0, _Reflection.record_type)("GlUniform.UniformBuilder", [], UniformBuilder, function () {
    return [["LinkTo", (0, _Reflection.option_type)(_Reflection.string_type)], ["ChildCreators", (0, _Reflection.list_type)((0, _Reflection.lambda_type)((0, _Reflection.option_type)((0, _webgl_builder_interfacesFs.GlUniformData$reflection)()), (0, _webgl_builder_interfacesFs.GlUniformData$reflection)()))], ["Data", (0, _webgl_builder_interfacesFs.GlUniformData$reflection)()]];
  });
}

function applyCreators(builder) {
  var data = builder.Data;
  var parent = data;

  var createUniform = function createUniform(creator) {
    return creator(parent);
  };

  var createUniforms = function createUniforms(creators) {
    return (0, _List.map)(createUniform, creators);
  };

  data.ChildUniforms = Array.from((0, _List.map)(createUniform, builder.ChildCreators));
  return data;
}

function addLinkedChild(parent, data) {
  parent.LinkedChildren = (0, _List.cons)(data, parent.LinkedChildren);
  return data;
}

function linkTo(parent, data) {
  return addLinkedChild(parent, new _webgl_builder_interfacesFs.GlUniformData(data.Id, data.Info, data.IsDirty, data.Data, data.Value, data.ParentObject, data.ParentUbo, data.RootUniform, data.ChildUniforms, parent, data.LinkedChildren));
}

function processLink(builder) {
  var matchValue = builder.LinkTo;

  if (matchValue != null) {
    var name = matchValue;
    var data = builder.Data;
    var patternInput = (0, _webgl_builder_interfacesFs.GlCommon_splitName)(name);
    var uniformName = patternInput[1];
    var objectName = patternInput[0];
    var globj = (0, _webgl_builder_interfacesFs.GlCommon_getObject)(objectName, data.ParentObject.Scene);
    var uniform = (0, _webgl_builder_interfacesFs.GlCommon_getUniform)(uniformName, globj);
    builder.Data = linkTo(uniform, data);
    return builder;
  } else {
    return builder;
  }
}

function _build(builder) {
  return applyCreators(processLink(builder));
}

function _apply(props_mut, b_mut) {
  var inputRecord;

  var _loop = function _loop() {
    var props = props_mut,
        b = b_mut;

    var updateData = function updateData(data) {
      b.Data = data;
      return b;
    };

    var addLink = function addLink(s) {
      b.LinkTo = s;
      return b;
    };

    if (props.tail != null) {
      var t = props.tail;
      var h = props.head;

      if (h.tag === 0) {
        var x_1 = h.fields[0];
        var value = (0, _Util.isArrayLike)(x_1) ? x_1 : [x_1];
        props_mut = t;
        b_mut = updateData((inputRecord = b.Data, new _webgl_builder_interfacesFs.GlUniformData(inputRecord.Id, inputRecord.Info, inputRecord.IsDirty, inputRecord.Data, value, inputRecord.ParentObject, inputRecord.ParentUbo, inputRecord.RootUniform, inputRecord.ChildUniforms, inputRecord.Link, inputRecord.LinkedChildren)));
        return "continue|_apply";
      } else {
        var x = h.fields[0];
        props_mut = t;
        b_mut = addLink(x);
        return "continue|_apply";
      }
    } else {
      return {
        v: b
      };
    }

    return "break";
  };

  _apply: while (true) {
    var _ret = _loop();

    if (_ret === "continue|_apply") continue _apply;
    if (_ret === "break") break;
    if (_typeof(_ret) === "object") return _ret.v;
  }
}

function createFrom(info, props, parentObject) {
  var doCreate = function doCreate(props_1, info_1, rootUniform) {
    var createChild = function createChild(info_2) {
      return (0, _Util.partialApply)(1, doCreate, [(0, _List.empty)(), info_2]);
    };

    return _build(_apply(props_1, new UniformBuilder(void 0, (0, _List.map)(createChild, (0, _List.ofArray)(info_1.Children)), new _webgl_builder_interfacesFs.GlUniformData(0, info_1, true, _typedarray_utilsFs.emptyFloat32Array, 0, parentObject, void 0, rootUniform, [], void 0, (0, _List.empty)()))));
  };

  return doCreate(props, info, void 0);
}

function createEmpty(name, rootUniform, parentObject) {
  return new _webgl_builder_interfacesFs.GlUniformData(0, (0, _webgl_program_utilsFs.emptyUniformInfo)(name), false, _typedarray_utilsFs.emptyFloat32Array, 0, parentObject, void 0, rootUniform, [], void 0, (0, _List.empty)());
}

function create(name, props, parentObject) {
  var matchValue = (0, _webgl_program_utilsFs.getUniform)(name, parentObject.ProgramInfo);

  if (matchValue == null) {
    return createEmpty(name, void 0, parentObject);
  } else {
    var info = matchValue;
    return createFrom(info, props, parentObject);
  }
}

function createLinked(data, parentObject) {
  return addLinkedChild(data, new _webgl_builder_interfacesFs.GlUniformData(data.Id, (0, _webgl_program_utilsFs.getUniformOrDefault)((0, _webgl_builder_interfacesFs.GlUniformData__get_Name)(data), parentObject.ProgramInfo), data.IsDirty, data.Data, 0, parentObject, void 0, void 0, [], data, (0, _List.empty)()));
}

function dirty(data) {
  var dirtyUbo = function dirtyUbo(data_1) {
    data_1.IsDirty = true;
    (0, _webgl_builder_interfacesFs.GlCommon_dirtyObject)(data_1.ParentObject);
    (0, _List.iterate)(dirtyUbo, data_1.LinkedChildren);
  };

  var matchValue = data.ParentUbo;

  if (matchValue == null) {
    (0, _webgl_builder_interfacesFs.GlCommon_dirtyObject)(data.ParentObject);
    var uniform = (0, _Option.defaultArg)(data.RootUniform, data);
    uniform.IsDirty = true;
    (0, _List.iterate)(function (data_2) {
      dirty(data_2);
    }, uniform.LinkedChildren);
  } else {
    var ubo = matchValue;
    dirtyUbo(ubo);
  }
}

function clean(data) {
  data.IsDirty = false;
}

function writeArray(typedArr, startIndex, count, value) {
  if (value.length === typedArr.length) {
    var value_1 = typedArr.set(value);
    void value_1;
  } else {
    var enumerator = (0, _Seq.getEnumerator)((0, _List.ofSeq)((0, _Seq.rangeNumber)(0, 1, count - 1)));

    try {
      while (enumerator["System.Collections.IEnumerator.MoveNext"]()) {
        var i = enumerator["System.Collections.Generic.IEnumerator`1.get_Current"]() | 0;
        typedArr[i] = value[startIndex + i];
      }
    } finally {
      enumerator.Dispose();
    }
  }
}

function updateUbo(value, ubo, data) {
  var msg = (0, _String.toText)((0, _String.interpolate)("%P().%P().updateUbo", [(0, _webgl_builder_interfacesFs.GlCommon_objectDebugName)(data.ParentObject), (0, _webgl_builder_interfacesFs.GlUniformData__get_Name)(data)]));

  if ((0, _utilsFs.Debug_enabled)()) {
    if ((0, _utilsFs.Debug_collapsible)()) {
      if ((0, _utilsFs.Debug_logCollapsed)()) {
        console.groupCollapsed(msg);
      } else {
        console.group(msg);
      }
    } else {
      if ((0, _utilsFs.Debug_enabled)()) {
        (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
      }

      if (!(0, _utilsFs.Debug_collapsible)()) {
        (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
      }
    }
  }

  var matchValue = data.ChildUniforms;

  if (!(0, _Array.equalsWith)(_Util.compareSafe, matchValue, null) ? matchValue.length === 0 : false) {
    var info = data.Info;
    var offset = info.Offset | 0;
    var floatArr = data.Data;
    (0, _glbufferFs.GlBuffer__DirtyRange_Z37302880)(ubo.Buffer, offset, offset + info.ByteSize - 1);
    var msg_2 = (0, _String.toText)((0, _String.interpolate)("%P()", [value]));

    if ((0, _utilsFs.Debug_enabled)()) {
      (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg_2]));
    }

    writeArray(floatArr, info.StartIndex, info.ElementCount, value);
    var msg_3 = (0, _String.toText)((0, _String.interpolate)("%P()", [floatArr]));

    if ((0, _utilsFs.Debug_enabled)()) {
      (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg_3]));
    }
  } else {
    data.ChildUniforms.forEach(function (data_1) {
      updateUbo(value, ubo, data_1);
    });
  }

  if ((0, _utilsFs.Debug_collapsible)()) {
    console.groupEnd();
  } else {
    (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
  }
}

function updateSingle(value, vdata, data) {
  var msg = (0, _String.toText)((0, _String.interpolate)("%P().%P().updateSingle", [(0, _webgl_builder_interfacesFs.GlCommon_objectDebugName)(data.ParentObject), (0, _webgl_builder_interfacesFs.GlUniformData__get_Name)(data)]));

  if ((0, _utilsFs.Debug_enabled)()) {
    if ((0, _utilsFs.Debug_collapsible)()) {
      if ((0, _utilsFs.Debug_logCollapsed)()) {
        console.groupCollapsed(msg);
      } else {
        console.group(msg);
      }
    } else {
      if ((0, _utilsFs.Debug_enabled)()) {
        (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
      }

      if (!(0, _utilsFs.Debug_collapsible)()) {
        (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
      }
    }
  }

  var info = data.Info;
  var location = info.Location;
  var gl = data.ParentObject.Scene.Canvas.Context;
  var value_1 = value;
  var matchValue = vdata.Info.Type | 0;

  switch (matchValue) {
    case 0:
      {
        throw new Error("Uniform type not initialized");
        break;
      }

    case 5120:
    case 5121:
    case 5123:
    case 5125:
    case 35670:
      {
        (0, _webgl_typesFs.GlCommon_uniform1uiv)(gl, location, value_1);
        break;
      }

    case 5122:
    case 5126:
    case 5131:
      {
        (0, _webgl_typesFs.GlCommon_uniform1fv)(gl, location, value_1);
        break;
      }

    case 5124:
    case 35678:
    case 35679:
    case 35680:
    case 35682:
    case 36289:
    case 36292:
    case 36293:
    case 36298:
    case 36299:
    case 36300:
    case 36303:
    case 36306:
    case 36307:
    case 36308:
    case 36311:
      {
        (0, _webgl_typesFs.GlCommon_uniform1iv)(gl, location, value_1);
        break;
      }

    case 35664:
      {
        (0, _webgl_typesFs.GlCommon_uniform2fv)(gl, location, value_1);
        break;
      }

    case 35665:
      {
        (0, _webgl_typesFs.GlCommon_uniform3fv)(gl, location, value_1);
        break;
      }

    case 35666:
      {
        (0, _webgl_typesFs.GlCommon_uniform4fv)(gl, location, value_1);
        break;
      }

    case 35667:
      {
        (0, _webgl_typesFs.GlCommon_uniform2iv)(gl, location, value_1);
        break;
      }

    case 35668:
      {
        (0, _webgl_typesFs.GlCommon_uniform3iv)(gl, location, value_1);
        break;
      }

    case 35669:
      {
        (0, _webgl_typesFs.GlCommon_uniform4iv)(gl, location, value_1);
        break;
      }

    case 35671:
    case 36294:
      {
        (0, _webgl_typesFs.GlCommon_uniform2uiv)(gl, location, value_1);
        break;
      }

    case 35672:
    case 36295:
      {
        (0, _webgl_typesFs.GlCommon_uniform3uiv)(gl, location, value_1);
        break;
      }

    case 35673:
    case 36296:
      {
        (0, _webgl_typesFs.GlCommon_uniform4uiv)(gl, location, value_1);
        break;
      }

    case 35674:
      {
        (0, _webgl_typesFs.GlCommon_uniformMatrix2fv)(gl, location, value_1);
        break;
      }

    case 35675:
      {
        (0, _webgl_typesFs.GlCommon_uniformMatrix3fv)(gl, location, value_1);
        break;
      }

    case 35676:
      {
        (0, _webgl_typesFs.GlCommon_uniformMatrix4fv)(gl, location, value_1);
        break;
      }

    case 35685:
      {
        (0, _webgl_typesFs.GlCommon_uniformMatrix2x3fv)(gl, location, value_1);
        break;
      }

    case 35686:
      {
        (0, _webgl_typesFs.GlCommon_uniformMatrix2x4fv)(gl, location, value_1);
        break;
      }

    case 35687:
      {
        (0, _webgl_typesFs.GlCommon_uniformMatrix3x2fv)(gl, location, value_1);
        break;
      }

    case 35688:
      {
        (0, _webgl_typesFs.GlCommon_uniformMatrix3x4fv)(gl, location, value_1);
        break;
      }

    case 35689:
      {
        (0, _webgl_typesFs.GlCommon_uniformMatrix4x2fv)(gl, location, value_1);
        break;
      }

    case 35690:
      {
        (0, _webgl_typesFs.GlCommon_uniformMatrix4x3fv)(gl, location, value_1);
        break;
      }

    default:
      {}
  }

  if ((0, _utilsFs.Debug_collapsible)()) {
    console.groupEnd();
  } else {
    (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
  }
}

function update(data) {
  var isActive = data.Info.Index >= 0;

  if (isActive ? data.IsDirty : false) {
    var d = (0, _Option.defaultArg)(data.Link, data);

    if (d.ParentUbo == null) {
      updateSingle(d.Value, d, data);
    }
  }

  clean(data);
}

function setValue(value, data) {
  if (data.Link == null) {
    var value_1 = (0, _Util.isArrayLike)(value) ? value : [value];
    var isRoot = data.RootUniform == null;
    var uniform = (0, _Option.defaultArg)(data.RootUniform, data);

    if (isRoot) {
      uniform.Value = value_1;
    } else {
      var info = data.Info;
      var count = info.ElementCount * info.Length | 0;
      var uniformValue = uniform.Value;
      var startIndex = info.StartIndex | 0;
      var enumerator = (0, _Seq.getEnumerator)((0, _List.ofSeq)((0, _Seq.rangeNumber)(0, 1, count - 1)));

      try {
        while (enumerator["System.Collections.IEnumerator.MoveNext"]()) {
          var i = enumerator["System.Collections.Generic.IEnumerator`1.get_Current"]() | 0;
          uniformValue[startIndex + i] = value_1[i];
        }
      } finally {
        enumerator.Dispose();
      }
    }

    var matchValue_1 = data.ParentUbo;

    if (matchValue_1 != null) {
      var ubo = matchValue_1;
      updateUbo(value_1, ubo, uniform);
    }

    dirty(uniform);
  }
}
},{"./.fable/fable-library.3.0.0/Types.js":"../src/.fable/fable-library.3.0.0/Types.js","./.fable/fable-library.3.0.0/Reflection.js":"../src/.fable/fable-library.3.0.0/Reflection.js","./webgl_builder_interfaces.fs.js":"../src/webgl_builder_interfaces.fs.js","./.fable/fable-library.3.0.0/List.js":"../src/.fable/fable-library.3.0.0/List.js","./.fable/fable-library.3.0.0/Util.js":"../src/.fable/fable-library.3.0.0/Util.js","./typedarray_utils.fs.js":"../src/typedarray_utils.fs.js","./webgl_program_utils.fs.js":"../src/webgl_program_utils.fs.js","./.fable/fable-library.3.0.0/Option.js":"../src/.fable/fable-library.3.0.0/Option.js","./.fable/fable-library.3.0.0/Seq.js":"../src/.fable/fable-library.3.0.0/Seq.js","./.fable/fable-library.3.0.0/String.js":"../src/.fable/fable-library.3.0.0/String.js","./utils.fs.js":"../src/utils.fs.js","./.fable/fable-library.3.0.0/Array.js":"../src/.fable/fable-library.3.0.0/Array.js","./glbuffer.fs.js":"../src/glbuffer.fs.js","./webgl_types.fs.js":"../src/webgl_types.fs.js"}],"../src/glubouniform.fs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFrom = createFrom;
exports.create = create;

var _gluniformFs = require("./gluniform.fs.js");

var _Util = require("./.fable/fable-library.3.0.0/Util.js");

var _List = require("./.fable/fable-library.3.0.0/List.js");

var _Array = require("./.fable/fable-library.3.0.0/Array.js");

var _typedarray_utilsFs = require("./typedarray_utils.fs.js");

var _webgl_builder_interfacesFs = require("./webgl_builder_interfaces.fs.js");

var _webgl_program_utilsFs = require("./webgl_program_utils.fs.js");

function isActiveUbo(ubo) {
  return ubo.Info.BlockIndex >= 0;
}

function init(data) {
  if (data.Link == null) {
    var matchValue_1 = data.ParentUbo;

    if (matchValue_1 == null) {} else {
      var ubo = matchValue_1;
      (0, _gluniformFs.clean)(data);

      if (data.ChildUniforms.length > 0) {
        data.ChildUniforms.forEach(function (arg) {
          var value = init(arg);
          void value;
        });
      } else if (isActiveUbo(ubo)) {
        var value_1;
        var matchValue_2 = data.RootUniform;

        if (matchValue_2 == null) {
          value_1 = data.Value;
        } else {
          var root = matchValue_2;
          value_1 = root.Value;
        }

        (0, _gluniformFs.updateUbo)(value_1, ubo, data);
      }
    }
  }

  return data;
}

function createFrom(info, props, parentUbo, parentObject) {
  var doCreate = function doCreate(props_1, info_1, rootUniform) {
    var createChild = function createChild(info_2) {
      return (0, _Util.partialApply)(1, doCreate, [(0, _List.empty)(), info_2]);
    };

    var dataArray;
    var matchValue = info_1.Children;

    if (!(0, _Array.equalsWith)(_Util.compareSafe, matchValue, null) ? matchValue.length === 0 : false) {
      var arrayBuffer = parentUbo.Data.buffer;
      var length = info_1.ElementCount * info_1.Length | 0;
      dataArray = info_1.TypeInfo.TypeArrayCreator.Create(arrayBuffer, info_1.Offset, length);
    } else {
      dataArray = _typedarray_utilsFs.emptyFloat32Array;
    }

    return (0, _gluniformFs._build)((0, _gluniformFs._apply)(props_1, new _gluniformFs.UniformBuilder(void 0, (0, _List.map)(createChild, (0, _List.ofArray)(info_1.Children)), new _webgl_builder_interfacesFs.GlUniformData(0, info_1, true, dataArray, 0, parentObject, parentUbo, rootUniform, [], void 0, (0, _List.empty)()))));
  };

  return init(doCreate(props, info, void 0));
}

function createEmpty(name, parentUbo, rootUniform, parentObject) {
  return new _webgl_builder_interfacesFs.GlUniformData(0, (0, _webgl_program_utilsFs.emptyUniformInfo)(name), false, _typedarray_utilsFs.emptyFloat32Array, 0, parentObject, parentUbo, rootUniform, [], void 0, (0, _List.empty)());
}

function create(name, props, parentUbo, parentObject) {
  var matchValue = (0, _webgl_program_utilsFs.getUniform)(name, parentObject.ProgramInfo);

  if (matchValue == null) {
    return createEmpty(name, parentUbo, void 0, parentObject);
  } else {
    var info = matchValue;
    return createFrom(info, props, parentUbo, parentObject);
  }
}
},{"./gluniform.fs.js":"../src/gluniform.fs.js","./.fable/fable-library.3.0.0/Util.js":"../src/.fable/fable-library.3.0.0/Util.js","./.fable/fable-library.3.0.0/List.js":"../src/.fable/fable-library.3.0.0/List.js","./.fable/fable-library.3.0.0/Array.js":"../src/.fable/fable-library.3.0.0/Array.js","./typedarray_utils.fs.js":"../src/typedarray_utils.fs.js","./webgl_builder_interfaces.fs.js":"../src/webgl_builder_interfaces.fs.js","./webgl_program_utils.fs.js":"../src/webgl_program_utils.fs.js"}],"../src/glubo.fs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.linkTo = linkTo;
exports.createFrom = createFrom;
exports.createEmpty = createEmpty;
exports.create = create;
exports.createLinked = createLinked;
exports.delete$ = delete$;
exports.clean = clean;
exports.update = update;

var _Types = require("./.fable/fable-library.3.0.0/Types.js");

var _Reflection = require("./.fable/fable-library.3.0.0/Reflection.js");

var _webgl_builder_interfacesFs = require("./webgl_builder_interfaces.fs.js");

var _List = require("./.fable/fable-library.3.0.0/List.js");

var _glubouniformFs = require("./glubouniform.fs.js");

var _Util = require("./.fable/fable-library.3.0.0/Util.js");

var _webgl_typesFs = require("./webgl_types.fs.js");

var _glbufferFs = require("./glbuffer.fs.js");

var _typedarray_utilsFs = require("./typedarray_utils.fs.js");

var _webgl_program_utilsFs = require("./webgl_program_utils.fs.js");

var _String = require("./.fable/fable-library.3.0.0/String.js");

var _utilsFs = require("./utils.fs.js");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Builder = /*#__PURE__*/function (_Record) {
  _inherits(Builder, _Record);

  var _super = _createSuper(Builder);

  function Builder(LinkTo, UniformCreators, Data) {
    var _this;

    _classCallCheck(this, Builder);

    _this = _super.call(this);
    _this.LinkTo = LinkTo;
    _this.UniformCreators = UniformCreators;
    _this.Data = Data;
    return _this;
  }

  return Builder;
}(_Types.Record);

function Builder$reflection() {
  return (0, _Reflection.record_type)("GlUbo.Builder", [], Builder, function () {
    return [["LinkTo", (0, _Reflection.option_type)(_Reflection.string_type)], ["UniformCreators", (0, _Reflection.list_type)((0, _Reflection.lambda_type)((0, _webgl_builder_interfacesFs.GlUboData$reflection)(), (0, _Reflection.lambda_type)((0, _webgl_builder_interfacesFs.GlObjData$reflection)(), (0, _webgl_builder_interfacesFs.GlUniformData$reflection)())))], ["Data", (0, _webgl_builder_interfacesFs.GlUboData$reflection)()]];
  });
}

function addMissingUniforms(data) {
  var isMissingUniform = function isMissingUniform(info) {
    return (0, _List.tryFind)(function (u) {
      return (0, _webgl_builder_interfacesFs.GlUniformData__get_Name)(u) === info.Name;
    }, data.Uniforms) == null;
  };

  var addMissingUniform = function addMissingUniform(data_1, info_1) {
    var value = (0, _webgl_builder_interfacesFs.GlCommon_addUboUniform)(function (parentUbo, parentObject) {
      return (0, _glubouniformFs.createFrom)(info_1, (0, _List.empty)(), parentUbo, parentObject);
    }, data_1);
    void value;
  };

  var list_2 = (0, _List.where)(isMissingUniform, data.Info.Uniforms);
  (0, _List.iterate)((0, _Util.partialApply)(1, addMissingUniform, [data]), list_2);
  data.Uniforms = (0, _List.sortBy)(function (u_1) {
    return u_1.Info.Index;
  }, data.Uniforms, {
    Compare: _Util.comparePrimitives
  });
  return data;
}

function applyCreators(builder) {
  var data = builder.Data;

  var createUniform = function createUniform(creator) {
    return creator(data, data.ParentObject);
  };

  data.Uniforms = (0, _List.map)((0, _Util.mapCurriedArgs)(createUniform, [[0, 2]]), builder.UniformCreators);
  return data;
}

function addLinkedChild(parent, data) {
  parent.LinkedChildren = (0, _List.cons)(data, parent.LinkedChildren);
  return data;
}

function linkTo(parent, data) {
  return addLinkedChild(parent, new _webgl_builder_interfacesFs.GlUboData(data.Id, data.Info, data.IsDirty, data.Location, (0, _List.empty)(), data.Buffer, data.Data, data.ParentObject, parent, data.LinkedChildren));
}

function processLink(builder) {
  var matchValue = builder.LinkTo;

  if (matchValue != null) {
    var name = matchValue;
    var data = builder.Data;
    var patternInput = (0, _webgl_builder_interfacesFs.GlCommon_splitName)(name);
    var uboName = patternInput[1];
    var objectName = patternInput[0];
    var globj = (0, _webgl_builder_interfacesFs.GlCommon_getObject)(objectName, data.ParentObject.Scene);
    var ubo = (0, _webgl_builder_interfacesFs.GlCommon_getUbo)(uboName, globj);
    builder.Data = linkTo(ubo, data);
    return builder;
  } else {
    return builder;
  }
}

function build(builder) {
  var sortChildren = function sortChildren(data) {
    data.Uniforms = (0, _List.sortBy)(function (u) {
      return u.Info.Index;
    }, data.Uniforms, {
      Compare: _Util.comparePrimitives
    });
    return data;
  };

  return sortChildren(addMissingUniforms(applyCreators(processLink(builder))));
}

function bindToProgram(data) {
  var gl = data.ParentObject.Scene.Canvas.Context;
  var program = data.ParentObject.ProgramInfo.Program;
  (0, _webgl_typesFs.GlCommon_uniformBlockBinding)(gl, program, data.Info.BlockIndex, data.Location);
  return data;
}

function apply(props, builder) {
  var loop = function loop(props_1_mut, b_mut) {
    var inputRecord;

    var _loop = function _loop() {
      var props_1 = props_1_mut,
          b = b_mut;

      var updateData = function updateData(data) {
        b.Data = data;
        return b;
      };

      var addLink = function addLink(s) {
        b.LinkTo = s;
        return b;
      };

      var addUniform = function addUniform(creator) {
        b.UniformCreators = (0, _List.cons)((0, _Util.curry)(2, creator), b.UniformCreators);
        return b;
      };

      if (props_1.tail != null) {
        var t = props_1.tail;
        var h = props_1.head;

        switch (h.tag) {
          case 1:
            {
              var x_1 = h.fields[0];
              props_1_mut = t;
              b_mut = addUniform(x_1);
              return "continue|loop";
            }

          case 2:
            {
              var x_2 = h.fields[0];
              props_1_mut = t;
              b_mut = addLink(x_2);
              return "continue|loop";
            }

          default:
            {
              var x = h.fields[0] | 0;
              props_1_mut = t;
              b_mut = updateData((inputRecord = b.Data, new _webgl_builder_interfacesFs.GlUboData(inputRecord.Id, inputRecord.Info, inputRecord.IsDirty, x, inputRecord.Uniforms, inputRecord.Buffer, inputRecord.Data, inputRecord.ParentObject, inputRecord.Link, inputRecord.LinkedChildren)));
              return "continue|loop";
            }
        }
      } else {
        return {
          v: b
        };
      }

      return "break";
    };

    loop: while (true) {
      var _ret = _loop();

      if (_ret === "continue|loop") continue loop;
      if (_ret === "break") break;
      if (_typeof(_ret) === "object") return _ret.v;
    }
  };

  return loop(props, builder);
}

function createFrom(info, props, parentObject) {
  var bindBufferBase = function bindBufferBase(data) {
    (0, _glbufferFs.GlBuffer__BindBase_Z524259A4)(data.Buffer, data.Location);
    return data;
  };

  var initBuffer = function initBuffer(builder) {
    if (builder.Data.Link == null) {
      var data_1 = builder.Data;
      var buffer = data_1.Buffer;
      (0, _glbufferFs.GlBuffer__Init_Z6E89302B)(buffer, 35345, 35048, _typedarray_utilsFs.uint8ArrayFactory);
      (0, _glbufferFs.GlBuffer__SetLength_Z524259A4)(buffer, info.ByteSize);
      builder.Data = new _webgl_builder_interfacesFs.GlUboData(data_1.Id, data_1.Info, data_1.IsDirty, data_1.Location, data_1.Uniforms, data_1.Buffer, (0, _glbufferFs.GlBuffer__get_Data)(buffer), data_1.ParentObject, data_1.Link, data_1.LinkedChildren);
    }

    return builder;
  };

  return bindToProgram(build(initBuffer(apply(props, new Builder(void 0, (0, _List.empty)(), new _webgl_builder_interfacesFs.GlUboData(0, info, true, (0, _webgl_builder_interfacesFs.GlCommon_nextUboBufferIndex)(parentObject), (0, _List.empty)(), (0, _glbufferFs.GlBuffer_$ctor_10C6D16C)(parentObject.Scene.Canvas.Context), _typedarray_utilsFs.emptyUint8Array, parentObject, void 0, (0, _List.empty)()))))));
}

function createEmpty(name, parentObject) {
  return new _webgl_builder_interfacesFs.GlUboData(0, (0, _webgl_program_utilsFs.emptyUboInfo)(name), false, -1, (0, _List.empty)(), (0, _glbufferFs.GlBuffer_$ctor_10C6D16C)(parentObject.Scene.Canvas.Context), (0, _typedarray_utilsFs.uint8Array)(0), parentObject, void 0, (0, _List.empty)());
}

function create(name, props, parentObject) {
  var matchValue = (0, _webgl_program_utilsFs.getUbo)(name, parentObject.ProgramInfo);

  if (matchValue == null) {
    return createEmpty(name, parentObject);
  } else {
    var info = matchValue;
    return createFrom(info, props, parentObject);
  }
}

function createLinked(data, parentObject) {
  return bindToProgram(addLinkedChild(data, new _webgl_builder_interfacesFs.GlUboData(data.Id, (0, _webgl_program_utilsFs.getUboOrDefault)((0, _webgl_builder_interfacesFs.GlUboData__get_Name)(data), parentObject.ProgramInfo), data.IsDirty, (0, _webgl_builder_interfacesFs.GlCommon_nextUboBufferIndex)(parentObject), (0, _List.empty)(), data.Buffer, (0, _typedarray_utilsFs.uint8Array)(0), parentObject, data, (0, _List.empty)())));
}

function delete$(data) {
  (0, _glbufferFs.GlBuffer__Delete)(data.Buffer);
}

function clean(data) {
  data.IsDirty = false;
}

function update(data) {
  if (data.Info.BlockIndex >= 0) {
    if (data.IsDirty) {
      clean(data);

      if (data.Link == null) {
        var msg = (0, _String.toText)((0, _String.interpolate)("UBO %P().%P().update", [data.ParentObject.Name, data.Info.Name]));

        if ((0, _utilsFs.Debug_enabled)()) {
          if ((0, _utilsFs.Debug_collapsible)()) {
            if ((0, _utilsFs.Debug_logCollapsed)()) {
              console.groupCollapsed(msg);
            } else {
              console.group(msg);
            }
          } else {
            if ((0, _utilsFs.Debug_enabled)()) {
              (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
            }

            if (!(0, _utilsFs.Debug_collapsible)()) {
              (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
            }
          }
        }

        (0, _glbufferFs.GlBuffer__Bind)(data.Buffer);
        (0, _glbufferFs.GlBuffer__Update)(data.Buffer);

        if ((0, _utilsFs.Debug_collapsible)()) {
          console.groupEnd();
        } else {
          (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
        }
      }
    }

    if ((0, _List.length)(data.LinkedChildren) === 0) {
      (0, _glbufferFs.GlBuffer__BindBase_Z524259A4)(data.Buffer, data.Location);
    }
  }
}
},{"./.fable/fable-library.3.0.0/Types.js":"../src/.fable/fable-library.3.0.0/Types.js","./.fable/fable-library.3.0.0/Reflection.js":"../src/.fable/fable-library.3.0.0/Reflection.js","./webgl_builder_interfaces.fs.js":"../src/webgl_builder_interfaces.fs.js","./.fable/fable-library.3.0.0/List.js":"../src/.fable/fable-library.3.0.0/List.js","./glubouniform.fs.js":"../src/glubouniform.fs.js","./.fable/fable-library.3.0.0/Util.js":"../src/.fable/fable-library.3.0.0/Util.js","./webgl_types.fs.js":"../src/webgl_types.fs.js","./glbuffer.fs.js":"../src/glbuffer.fs.js","./typedarray_utils.fs.js":"../src/typedarray_utils.fs.js","./webgl_program_utils.fs.js":"../src/webgl_program_utils.fs.js","./.fable/fable-library.3.0.0/String.js":"../src/.fable/fable-library.3.0.0/String.js","./utils.fs.js":"../src/utils.fs.js"}],"../src/glsingleattribute.fs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFrom = createFrom;
exports.createEmpty = createEmpty;
exports.create = create;
exports.update = update;
exports._setValues = _setValues;
exports._setValue = _setValue;

var _Option = require("./.fable/fable-library.3.0.0/Option.js");

var _webgl_builder_interfacesFs = require("./webgl_builder_interfaces.fs.js");

var _glbufferFs = require("./glbuffer.fs.js");

var _webgl_program_utilsFs = require("./webgl_program_utils.fs.js");

var _List = require("./.fable/fable-library.3.0.0/List.js");

var _webgl_typesFs = require("./webgl_types.fs.js");

var _String = require("./.fable/fable-library.3.0.0/String.js");

var _utilsFs = require("./utils.fs.js");

var _Util = require("./.fable/fable-library.3.0.0/Util.js");

var _Seq = require("./.fable/fable-library.3.0.0/Seq.js");

function updateCalculated(data) {
  if (data.RecalcNeeded) {
    data.RecalcNeeded = false;
    var vdata = (0, _Option.defaultArg)(data.Link, data);

    if (data.CalcDataCount) {
      var ti = data.Info.TypeInfo;
      var totValuesByteSize = ~~(vdata.Values.length / ti.ElementCount) * ti.ByteSize | 0;
      var valuesByteSize = totValuesByteSize - data.Offset | 0;
      data.DataCount = ~~Math.ceil(valuesByteSize / data.Stride);
    }

    data.ByteSize = data.DataCount * data.Stride;
  }
}

function createFrom(info, props, parentObject) {
  var inputRecord;
  var data_1 = (0, _webgl_builder_interfacesFs.GlAttribCommon_updateCommonData)(props, (inputRecord = (0, _webgl_builder_interfacesFs.GlAttribCommon_defaultData)(info, new _webgl_builder_interfacesFs.GlAttributeKind(0), parentObject), new _webgl_builder_interfacesFs.GlAttributeData(inputRecord.Id, inputRecord.Kind, inputRecord.Info, inputRecord.IsDirty, inputRecord.BaseType, inputRecord.ArrayCreator, inputRecord.RecordSize, inputRecord.ByteSize, inputRecord.DataLength, inputRecord.BaseTypeInfo, inputRecord.Normalize, inputRecord.StartIndex, inputRecord.IndexStride, inputRecord.Stride, 0, inputRecord.Values, inputRecord.DataCount, inputRecord.BufferUsage, inputRecord.DeterminesVertexCount, inputRecord.DeterminesInstanceCount, inputRecord.Divisor, inputRecord.Buffer, inputRecord.ChildAttributes, inputRecord.ParentObject, inputRecord.ParentAttribute, inputRecord.Link, inputRecord.LinkedChildren, inputRecord.CanSingleCopy, inputRecord.EnableNeeded, inputRecord.RecalcNeeded, inputRecord.CalcDataCount, inputRecord.CalcStride, false)));
  var ti = data_1.Info.TypeInfo;
  var stride = (data_1.Stride <= 0 ? ti.ByteSize : data_1.Stride) | 0;

  if (data_1.Link == null) {
    var buffer = data_1.Buffer;
    (0, _glbufferFs.GlBuffer__Init_Z6E89302B)(buffer, 34962, data_1.BufferUsage, data_1.ArrayCreator);
    (0, _glbufferFs.GlBuffer__SetValues_5975E3)(buffer, data_1.Values);
  }

  return new _webgl_builder_interfacesFs.GlRootAttribute(0, new _webgl_builder_interfacesFs.GlAttributeData(data_1.Id, data_1.Kind, data_1.Info, data_1.IsDirty, data_1.BaseType, data_1.ArrayCreator, data_1.RecordSize, data_1.ByteSize, data_1.DataLength, data_1.BaseTypeInfo, data_1.Normalize, data_1.StartIndex, data_1.IndexStride, stride, data_1.Offset, data_1.Values, data_1.DataCount, data_1.BufferUsage, data_1.DeterminesVertexCount, data_1.DeterminesInstanceCount, data_1.Divisor, data_1.Buffer, data_1.ChildAttributes, data_1.ParentObject, data_1.ParentAttribute, data_1.Link, data_1.LinkedChildren, data_1.CanSingleCopy, data_1.EnableNeeded, data_1.RecalcNeeded, data_1.DataCount < 0, data_1.CalcStride, data_1.CalcOffset));
}

function createEmpty(name, parentObject) {
  var info = (0, _webgl_program_utilsFs.emptyAttributeInfo)(name);
  return new _webgl_builder_interfacesFs.GlRootAttribute(0, (0, _webgl_builder_interfacesFs.GlAttribCommon_defaultData)(info, new _webgl_builder_interfacesFs.GlAttributeKind(0), parentObject));
}

function create(name, props, parentObject) {
  var matchValue = (0, _webgl_program_utilsFs.getAttribute)(name, parentObject.ProgramInfo);

  if (matchValue == null) {
    return createEmpty(name, parentObject);
  } else {
    var info = matchValue;
    return createFrom(info, props, parentObject);
  }
}

function enable(data) {
  if (data.EnableNeeded) {
    data.EnableNeeded = false;

    if (data.ParentObject.ProcessLinked ? true : (0, _List.length)(data.LinkedChildren) === 0) {
      var gl = data.ParentObject.Scene.Canvas.Context;
      var location = data.Info.Location;

      if (location >= 0) {
        (0, _webgl_typesFs.GlCommon_enableVertexAttribArray)(gl, location);
        (0, _webgl_typesFs.GlCommon_vertexAttribPointer)(gl, location, data.Info.TypeInfo.ElementCount, data.BaseType, data.Normalize, data.Stride, data.Offset);

        if (data.Divisor >= 0) {
          (0, _webgl_typesFs.GlCommon_vertexAttribDivisor)(gl, location, data.Divisor);
        }
      }
    }
  }
}

function update(data) {
  var vdata = (0, _Option.defaultArg)(data.Link, data);
  var hasLinked = (0, _List.length)(data.LinkedChildren) > 0;
  var isActive = data.Info.Location >= 0;

  if (isActive ? data.IsDirty : false) {
    var msg = (0, _String.toText)((0, _String.interpolate)("%P().%P().update", [data.ParentObject.Name, (0, _webgl_builder_interfacesFs.GlAttributeData__get_Name)(data)]));

    if ((0, _utilsFs.Debug_enabled)()) {
      if ((0, _utilsFs.Debug_collapsible)()) {
        if ((0, _utilsFs.Debug_logCollapsed)()) {
          console.groupCollapsed(msg);
        } else {
          console.group(msg);
        }
      } else {
        if ((0, _utilsFs.Debug_enabled)()) {
          (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
        }

        if (!(0, _utilsFs.Debug_collapsible)()) {
          (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
        }
      }
    }

    updateCalculated(data);

    if (data.ParentObject.ProcessLinked ? true : !hasLinked) {
      (0, _glbufferFs.GlBuffer__Bind)(vdata.Buffer);
      (0, _glbufferFs.GlBuffer__Update)(vdata.Buffer);
      enable(data);
    }

    (0, _webgl_builder_interfacesFs.GlAttribCommon_clean)(data);

    if ((0, _utilsFs.Debug_collapsible)()) {
      console.groupEnd();
    } else {
      (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
    }
  }
}

function _setValues(values, data) {
  var values_1 = (0, _Util.isArrayLike)(values) ? values : [values];
  data.Values = values_1;
  (0, _glbufferFs.GlBuffer__SetValues_5975E3)(data.Buffer, values_1);
  (0, _webgl_builder_interfacesFs.GlAttribCommon_recalcNeeded)(data);
  (0, _webgl_builder_interfacesFs.GlAttribCommon_linkedChildrenRecalcNeeded)(data);
}

function _setValue(index, value, data) {
  var value_1 = (0, _Util.isArrayLike)(value) ? value : [value];
  var count = data.Info.TypeInfo.ElementCount | 0;
  var startIndex = count * index | 0;
  var dataValues = data.Values;
  var enumerator = (0, _Seq.getEnumerator)((0, _List.ofSeq)((0, _Seq.rangeNumber)(0, 1, count - 1)));

  try {
    while (enumerator["System.Collections.IEnumerator.MoveNext"]()) {
      var i = enumerator["System.Collections.Generic.IEnumerator`1.get_Current"]() | 0;
      dataValues[startIndex + i] = value_1[i];
    }
  } finally {
    enumerator.Dispose();
  }

  (0, _glbufferFs.GlBuffer__SetValuesOffset_Z59CA6BE1)(data.Buffer, value_1, startIndex);
  (0, _webgl_builder_interfacesFs.GlAttribCommon_dirty)(data);
  (0, _webgl_builder_interfacesFs.GlAttribCommon_dirtyLinkedChildren)(data);
}
},{"./.fable/fable-library.3.0.0/Option.js":"../src/.fable/fable-library.3.0.0/Option.js","./webgl_builder_interfaces.fs.js":"../src/webgl_builder_interfaces.fs.js","./glbuffer.fs.js":"../src/glbuffer.fs.js","./webgl_program_utils.fs.js":"../src/webgl_program_utils.fs.js","./.fable/fable-library.3.0.0/List.js":"../src/.fable/fable-library.3.0.0/List.js","./webgl_types.fs.js":"../src/webgl_types.fs.js","./.fable/fable-library.3.0.0/String.js":"../src/.fable/fable-library.3.0.0/String.js","./utils.fs.js":"../src/utils.fs.js","./.fable/fable-library.3.0.0/Util.js":"../src/.fable/fable-library.3.0.0/Util.js","./.fable/fable-library.3.0.0/Seq.js":"../src/.fable/fable-library.3.0.0/Seq.js"}],"../src/glcapabilities.fs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cullFace = cullFace;
exports.blendColor = blendColor;
exports.blendColorV = blendColorV;
exports.blendFunc = blendFunc;
exports.blendFuncSeparate = blendFuncSeparate;
exports.blendEquation = blendEquation;
exports.blendEquationSeparate = blendEquationSeparate;
exports.enable = enable;
exports.disable = disable;
exports.defaultCapabilities = defaultCapabilities;
exports.func_max = exports.func_min = exports.func_reverse_subtract = exports.func_subtract = exports.func_add = exports.one_minus_constant_alpha = exports.constant_alpha = exports.one_minus_constant_color = exports.constant_color = exports.src_alpha_saturate = exports.one_minus_dst_color = exports.dst_color = exports.one_minus_dst_alpha = exports.dst_alpha = exports.one_minus_src_alpha = exports.src_alpha = exports.one_minus_src_color = exports.src_color = exports.one = exports.zero = exports.disableBlending = exports.enableBlending = exports.disableCulling = exports.enableCulling = exports.cullFrontAndBack = exports.cullBack = exports.cullFront = void 0;

var _webgl_typesFs = require("./webgl_types.fs.js");

var _webgl_builder_interfacesFs = require("./webgl_builder_interfaces.fs.js");

var _List = require("./.fable/fable-library.3.0.0/List.js");

var cullFront = function () {
  var result = function result(gl) {
    (0, _webgl_typesFs.GlCommon_enable)(2884, gl);
    (0, _webgl_typesFs.GlCommon_cullFace)(1028, gl);
  };

  return new _webgl_builder_interfacesFs.GlObjProp(15, result);
}();

exports.cullFront = cullFront;

var cullBack = function () {
  var result = function result(gl) {
    (0, _webgl_typesFs.GlCommon_enable)(2884, gl);
    (0, _webgl_typesFs.GlCommon_cullFace)(1029, gl);
  };

  return new _webgl_builder_interfacesFs.GlObjProp(15, result);
}();

exports.cullBack = cullBack;

var cullFrontAndBack = function () {
  var result = function result(gl) {
    (0, _webgl_typesFs.GlCommon_enable)(2884, gl);
    (0, _webgl_typesFs.GlCommon_cullFace)(1032, gl);
  };

  return new _webgl_builder_interfacesFs.GlObjProp(15, result);
}();

exports.cullFrontAndBack = cullFrontAndBack;

function cullFace(mode) {
  var result = function result(gl) {
    (0, _webgl_typesFs.GlCommon_enable)(2884, gl);
    (0, _webgl_typesFs.GlCommon_cullFace)(mode, gl);
  };

  return new _webgl_builder_interfacesFs.GlObjProp(15, result);
}

var enableCulling = new _webgl_builder_interfacesFs.GlObjProp(15, function (gl) {
  (0, _webgl_typesFs.GlCommon_enable)(2884, gl);
});
exports.enableCulling = enableCulling;
var disableCulling = new _webgl_builder_interfacesFs.GlObjProp(15, function (gl) {
  (0, _webgl_typesFs.GlCommon_disable)(2884, gl);
});
exports.disableCulling = disableCulling;

function defaultCulling(gl) {
  gl.disable(gl.CULL_FACE);
  gl.cullFace(gl.BACK);
}

function blendColor(r, g, b, a) {
  return new _webgl_builder_interfacesFs.GlObjProp(15, function (gl) {
    (0, _webgl_typesFs.GlCommon_blendColor)(r, g, b, a, gl);
  });
}

function blendColorV(color) {
  return blendColor(color[0], color[1], color[2], color[3]);
}

function blendFunc(sfactor, dfactor) {
  var result = function result(gl) {
    (0, _webgl_typesFs.GlCommon_enable)(3042, gl);
    (0, _webgl_typesFs.GlCommon_blendFunc)(sfactor, dfactor, gl);
  };

  return new _webgl_builder_interfacesFs.GlObjProp(15, result);
}

function blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha) {
  var result = function result(gl) {
    (0, _webgl_typesFs.GlCommon_enable)(3042, gl);
    (0, _webgl_typesFs.GlCommon_blendFuncSeparate)(srcRGB, dstRGB, srcAlpha, dstAlpha, gl);
  };

  return new _webgl_builder_interfacesFs.GlObjProp(15, result);
}

function blendEquation(mode) {
  return new _webgl_builder_interfacesFs.GlObjProp(15, function (gl) {
    (0, _webgl_typesFs.GlCommon_blendEquation)(mode, gl);
  });
}

function blendEquationSeparate(modeRGB, modeAlpha) {
  var result = function result(gl) {
    (0, _webgl_typesFs.GlCommon_enable)(3042, gl);
    (0, _webgl_typesFs.GlCommon_blendEquationSeparate)(modeRGB, modeAlpha, gl);
  };

  return new _webgl_builder_interfacesFs.GlObjProp(15, result);
}

var enableBlending = new _webgl_builder_interfacesFs.GlObjProp(15, function (gl) {
  (0, _webgl_typesFs.GlCommon_enable)(3042, gl);
});
exports.enableBlending = enableBlending;
var disableBlending = new _webgl_builder_interfacesFs.GlObjProp(15, function (gl) {
  (0, _webgl_typesFs.GlCommon_disable)(3042, gl);
});
exports.disableBlending = disableBlending;

function defaultBlending(gl) {
  gl.disable(gl.BLEND);
  gl.blendFunc(gl.ONE, gl.ZERO);
  gl.blendEquation(gl.FUNC_ADD);
}

function enable(cap) {
  return new _webgl_builder_interfacesFs.GlObjProp(15, function (gl) {
    (0, _webgl_typesFs.GlCommon_enable)(cap, gl);
  });
}

function disable(cap) {
  return new _webgl_builder_interfacesFs.GlObjProp(15, function (gl) {
    (0, _webgl_typesFs.GlCommon_disable)(cap, gl);
  });
}

function defaultCapabilities() {
  return (0, _List.ofArray)([function (gl) {
    defaultCulling(gl);
  }, function (gl_1) {
    defaultBlending(gl_1);
  }]);
}

var zero = 0;
exports.zero = zero;
var one = 1;
exports.one = one;
var src_color = 768;
exports.src_color = src_color;
var one_minus_src_color = 769;
exports.one_minus_src_color = one_minus_src_color;
var src_alpha = 770;
exports.src_alpha = src_alpha;
var one_minus_src_alpha = 771;
exports.one_minus_src_alpha = one_minus_src_alpha;
var dst_alpha = 772;
exports.dst_alpha = dst_alpha;
var one_minus_dst_alpha = 773;
exports.one_minus_dst_alpha = one_minus_dst_alpha;
var dst_color = 774;
exports.dst_color = dst_color;
var one_minus_dst_color = 775;
exports.one_minus_dst_color = one_minus_dst_color;
var src_alpha_saturate = 776;
exports.src_alpha_saturate = src_alpha_saturate;
var constant_color = 32769;
exports.constant_color = constant_color;
var one_minus_constant_color = 32770;
exports.one_minus_constant_color = one_minus_constant_color;
var constant_alpha = 32771;
exports.constant_alpha = constant_alpha;
var one_minus_constant_alpha = 32772;
exports.one_minus_constant_alpha = one_minus_constant_alpha;
var func_add = 32774;
exports.func_add = func_add;
var func_subtract = 32778;
exports.func_subtract = func_subtract;
var func_reverse_subtract = 32779;
exports.func_reverse_subtract = func_reverse_subtract;
var func_min = 32775;
exports.func_min = func_min;
var func_max = 32776;
exports.func_max = func_max;
},{"./webgl_types.fs.js":"../src/webgl_types.fs.js","./webgl_builder_interfaces.fs.js":"../src/webgl_builder_interfaces.fs.js","./.fable/fable-library.3.0.0/List.js":"../src/.fable/fable-library.3.0.0/List.js"}],"../src/glinterleavechildattribute.fs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFrom = createFrom;
exports.createEmpty = createEmpty;
exports.create = create;
exports.update = update;

var _Option = require("./.fable/fable-library.3.0.0/Option.js");

var _webgl_builder_interfacesFs = require("./webgl_builder_interfaces.fs.js");

var _String = require("./.fable/fable-library.3.0.0/String.js");

var _webgl_program_utilsFs = require("./webgl_program_utils.fs.js");

var _utilsFs = require("./utils.fs.js");

var _List = require("./.fable/fable-library.3.0.0/List.js");

var _webgl_typesFs = require("./webgl_types.fs.js");

function updateCalculated(data) {
  if (data.RecalcNeeded) {
    data.RecalcNeeded = false;
    var matchValue = data.ParentAttribute;

    if (matchValue != null) {
      var pdata = matchValue;

      if (data.CalcDataCount) {
        var vdata = (0, _Option.defaultArg)(pdata.Link, pdata);
        var parentSize = vdata.ByteSize | 0;
        var newDataCount = ~~Math.ceil((parentSize - data.Offset) / data.Stride) | 0;

        if (newDataCount !== data.DataCount) {
          data.DataCount = newDataCount;
          (0, _webgl_builder_interfacesFs.GlCommon_objectRecalcNeeded)(data.ParentObject);
          (0, _webgl_builder_interfacesFs.GlAttribCommon_linkedChildrenRecalcNeeded)(data);
        }
      }
    }
  }
}

function createFrom(info, props, parentAttribute, parentObject) {
  var inputRecord;
  console.log((0, _Option.some)((0, _String.toText)((0, _String.interpolate)("create child %P() for %P()", [info.Name, (0, _webgl_builder_interfacesFs.GlAttributeData__get_Name)(parentAttribute)]))));
  var data_1 = (0, _webgl_builder_interfacesFs.GlAttribCommon_updateCommonData)(props, (inputRecord = (0, _webgl_builder_interfacesFs.GlAttribCommon_defaultData)(info, new _webgl_builder_interfacesFs.GlAttributeKind(2), parentObject), new _webgl_builder_interfacesFs.GlAttributeData(inputRecord.Id, inputRecord.Kind, inputRecord.Info, inputRecord.IsDirty, inputRecord.BaseType, inputRecord.ArrayCreator, inputRecord.RecordSize, inputRecord.ByteSize, inputRecord.DataLength, inputRecord.BaseTypeInfo, inputRecord.Normalize, inputRecord.StartIndex, inputRecord.IndexStride, inputRecord.Stride, inputRecord.Offset, inputRecord.Values, inputRecord.DataCount, inputRecord.BufferUsage, inputRecord.DeterminesVertexCount, inputRecord.DeterminesInstanceCount, inputRecord.Divisor, inputRecord.Buffer, inputRecord.ChildAttributes, inputRecord.ParentObject, parentAttribute, inputRecord.Link, inputRecord.LinkedChildren, inputRecord.CanSingleCopy, inputRecord.EnableNeeded, inputRecord.RecalcNeeded, inputRecord.CalcDataCount, inputRecord.CalcStride, inputRecord.CalcOffset)));
  var ti = data_1.Info.TypeInfo;
  var calcStride = data_1.Stride <= 0;
  var stride = (calcStride ? ti.ByteSize : data_1.Stride) | 0;
  return new _webgl_builder_interfacesFs.GlAttributeData(data_1.Id, data_1.Kind, data_1.Info, data_1.IsDirty, data_1.BaseType, data_1.ArrayCreator, data_1.RecordSize, data_1.ByteSize, data_1.DataLength, data_1.BaseTypeInfo, data_1.Normalize, data_1.StartIndex, data_1.IndexStride, stride, data_1.Offset, data_1.Values, data_1.DataCount, data_1.BufferUsage, data_1.DeterminesVertexCount, data_1.DeterminesInstanceCount, data_1.Divisor, data_1.Buffer, data_1.ChildAttributes, data_1.ParentObject, data_1.ParentAttribute, data_1.Link, data_1.LinkedChildren, data_1.CanSingleCopy, data_1.EnableNeeded, data_1.RecalcNeeded, data_1.DataCount < 0, calcStride, data_1.Offset < 0);
}

function createEmpty(name, parentAttribute, parentObject) {
  console.log((0, _Option.some)((0, _String.toText)((0, _String.interpolate)("create empty child %P() for %P()", [name, (0, _webgl_builder_interfacesFs.GlAttributeData__get_Name)(parentAttribute)]))));
  var info = (0, _webgl_program_utilsFs.emptyAttributeInfo)(name);
  var inputRecord = (0, _webgl_builder_interfacesFs.GlAttribCommon_defaultData)(info, new _webgl_builder_interfacesFs.GlAttributeKind(2), parentObject);
  return new _webgl_builder_interfacesFs.GlAttributeData(inputRecord.Id, inputRecord.Kind, inputRecord.Info, inputRecord.IsDirty, inputRecord.BaseType, inputRecord.ArrayCreator, inputRecord.RecordSize, inputRecord.ByteSize, inputRecord.DataLength, inputRecord.BaseTypeInfo, inputRecord.Normalize, inputRecord.StartIndex, inputRecord.IndexStride, inputRecord.Stride, inputRecord.Offset, inputRecord.Values, inputRecord.DataCount, inputRecord.BufferUsage, inputRecord.DeterminesVertexCount, inputRecord.DeterminesInstanceCount, inputRecord.Divisor, inputRecord.Buffer, inputRecord.ChildAttributes, inputRecord.ParentObject, parentAttribute, inputRecord.Link, inputRecord.LinkedChildren, inputRecord.CanSingleCopy, inputRecord.EnableNeeded, inputRecord.RecalcNeeded, inputRecord.CalcDataCount, inputRecord.CalcStride, inputRecord.CalcOffset);
}

function create(name, props, parentAttribute, parentObject) {
  var matchValue = (0, _webgl_program_utilsFs.getAttribute)(name, parentObject.ProgramInfo);

  if (matchValue == null) {
    return createEmpty(name, parentAttribute, parentObject);
  } else {
    var info = matchValue;
    return createFrom(info, props, parentAttribute, parentObject);
  }
}

function update(data) {
  var isActive = data.Info.Location >= 0;

  if (isActive ? data.IsDirty : false) {
    var msg = (0, _String.toText)((0, _String.interpolate)("%P().%P().Update", [data.ParentObject.Name, (0, _webgl_builder_interfacesFs.GlAttributeData__get_Name)(data)]));

    if ((0, _utilsFs.Debug_enabled)()) {
      if ((0, _utilsFs.Debug_collapsible)()) {
        if ((0, _utilsFs.Debug_logCollapsed)()) {
          console.groupCollapsed(msg);
        } else {
          console.group(msg);
        }
      } else {
        if ((0, _utilsFs.Debug_enabled)()) {
          (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
        }

        if (!(0, _utilsFs.Debug_collapsible)()) {
          (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
        }
      }
    }

    updateCalculated(data);

    if (data.EnableNeeded) {
      data.EnableNeeded = false;

      if (data.ParentObject.ProcessLinked ? true : (0, _List.length)(data.LinkedChildren) === 0) {
        var gl = data.ParentObject.Scene.Canvas.Context;
        var location = data.Info.Location;

        if (location >= 0) {
          (0, _webgl_typesFs.GlCommon_enableVertexAttribArray)(gl, location);
          (0, _webgl_typesFs.GlCommon_vertexAttribPointer)(gl, location, data.Info.TypeInfo.ElementCount, data.BaseType, data.Normalize, data.Stride, data.Offset);

          if (data.Divisor >= 0) {
            (0, _webgl_typesFs.GlCommon_vertexAttribDivisor)(gl, location, data.Divisor);
          }
        }
      }
    }

    (0, _webgl_builder_interfacesFs.GlAttribCommon_clean)(data);

    if ((0, _utilsFs.Debug_collapsible)()) {
      console.groupEnd();
    } else {
      (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
    }
  }
}
},{"./.fable/fable-library.3.0.0/Option.js":"../src/.fable/fable-library.3.0.0/Option.js","./webgl_builder_interfaces.fs.js":"../src/webgl_builder_interfaces.fs.js","./.fable/fable-library.3.0.0/String.js":"../src/.fable/fable-library.3.0.0/String.js","./webgl_program_utils.fs.js":"../src/webgl_program_utils.fs.js","./utils.fs.js":"../src/utils.fs.js","./.fable/fable-library.3.0.0/List.js":"../src/.fable/fable-library.3.0.0/List.js","./webgl_types.fs.js":"../src/webgl_types.fs.js"}],"../src/glinterleaveattribute.fs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFrom = createFrom;
exports.createEmpty = createEmpty;
exports.create = create;
exports.update = update;
exports._setValues = _setValues;
exports._setValue = _setValue;

var _Option = require("./.fable/fable-library.3.0.0/Option.js");

var _webgl_builder_interfacesFs = require("./webgl_builder_interfaces.fs.js");

var _List = require("./.fable/fable-library.3.0.0/List.js");

var _String = require("./.fable/fable-library.3.0.0/String.js");

var _glbufferFs = require("./glbuffer.fs.js");

var _Seq = require("./.fable/fable-library.3.0.0/Seq.js");

var _typedarray_utilsFs = require("./typedarray_utils.fs.js");

var _webgl_program_utilsFs = require("./webgl_program_utils.fs.js");

var _webgl_typesFs = require("./webgl_types.fs.js");

var _utilsFs = require("./utils.fs.js");

var _glinterleavechildattributeFs = require("./glinterleavechildattribute.fs.js");

var _Util = require("./.fable/fable-library.3.0.0/Util.js");

function updateCalculated(data) {
  if (data.RecalcNeeded) {
    var vdata = (0, _Option.defaultArg)(data.Link, data);

    if (data.CalcDataCount) {
      var newDataCount = ~~(vdata.Values.length / data.IndexStride) | 0;

      if (newDataCount !== data.DataCount) {
        data.DataCount = newDataCount;
        (0, _webgl_builder_interfacesFs.GlAttribCommon_childrenRecalcNeeded)(data);
        (0, _webgl_builder_interfacesFs.GlAttribCommon_linkedChildrenRecalcNeeded)(data);
      }
    }

    var newByteSize = data.DataCount * data.Stride | 0;

    if (newByteSize !== data.ByteSize) {
      data.ByteSize = newByteSize;
      (0, _webgl_builder_interfacesFs.GlAttribCommon_childrenRecalcNeeded)(data);
      (0, _webgl_builder_interfacesFs.GlAttribCommon_linkedChildrenRecalcNeeded)(data);
    }

    data.DataLength = data.CanSingleCopy ? vdata.Values.length : data.ByteSize;
  }

  data.RecalcNeeded = false;
}

function getStride(currStride_mut, children_mut) {
  getStride: while (true) {
    var currStride = currStride_mut,
        children = children_mut;

    if (children.tail != null) {
      var remaining = children.tail;
      var c = children.head;
      currStride_mut = currStride + c.RecordSize;
      children_mut = remaining;
      continue getStride;
    } else {
      return currStride | 0;
    }

    break;
  }
}

function updateChildrenOffset(currOffset_mut, children_mut) {
  updateChildrenOffset: while (true) {
    var currOffset = currOffset_mut,
        children = children_mut;

    if (children.tail != null) {
      var remainingChildren = children.tail;
      var child = children.head;
      child.Offset = currOffset;
      var nextOffset = child.Offset + child.RecordSize | 0;
      currOffset_mut = nextOffset;
      children_mut = remainingChildren;
      continue updateChildrenOffset;
    }

    break;
  }
}

function updateChildrenStartIndex(data) {
  var loop = function loop(existing_mut, currIndex_mut, children_mut) {
    loop: while (true) {
      var existing = existing_mut,
          currIndex = currIndex_mut,
          children = children_mut;

      if (existing.tail != null) {
        var remaining = existing.tail;
        var child = existing.head;

        if (child.CalcOffset) {
          var newChildren = (0, _List.cons)(new _webgl_builder_interfacesFs.GlAttributeData(child.Id, child.Kind, child.Info, child.IsDirty, child.BaseType, child.ArrayCreator, child.RecordSize, child.ByteSize, child.DataLength, child.BaseTypeInfo, child.Normalize, currIndex, child.IndexStride, child.Stride, child.Offset, child.Values, child.DataCount, child.BufferUsage, child.DeterminesVertexCount, child.DeterminesInstanceCount, child.Divisor, child.Buffer, child.ChildAttributes, child.ParentObject, child.ParentAttribute, child.Link, child.LinkedChildren, child.CanSingleCopy, child.EnableNeeded, child.RecalcNeeded, child.CalcDataCount, child.CalcStride, child.CalcOffset), children);
          var nextIndex = currIndex + child.Info.TypeInfo.ElementCount | 0;
          existing_mut = remaining;
          currIndex_mut = nextIndex;
          children_mut = newChildren;
          continue loop;
        } else {
          existing_mut = remaining;
          currIndex_mut = currIndex;
          children_mut = children;
          continue loop;
        }
      } else {
        return children;
      }

      break;
    }
  };

  var currIndex_1 = data.Info.TypeInfo.ElementCount | 0;
  return new _webgl_builder_interfacesFs.GlAttributeData(data.Id, data.Kind, data.Info, data.IsDirty, data.BaseType, data.ArrayCreator, data.RecordSize, data.ByteSize, data.DataLength, data.BaseTypeInfo, data.Normalize, data.StartIndex, data.IndexStride, data.Stride, data.Offset, data.Values, data.DataCount, data.BufferUsage, data.DeterminesVertexCount, data.DeterminesInstanceCount, data.Divisor, data.Buffer, loop(data.ChildAttributes, currIndex_1, (0, _List.empty)()), data.ParentObject, data.ParentAttribute, data.Link, data.LinkedChildren, data.CanSingleCopy, data.EnableNeeded, data.RecalcNeeded, data.CalcDataCount, data.CalcStride, data.CalcOffset);
}

function updateChildrenParentAttribute(data) {
  (0, _List.iterate)(function (c) {
    c.ParentAttribute = data;
  }, data.ChildAttributes);
  return data;
}

function createFrom(info, props, parentObject) {
  var inputRecord;
  console.group((0, _String.toText)((0, _String.interpolate)("******* %P().createFrom", [info.Name])));
  var data_1 = (0, _webgl_builder_interfacesFs.GlAttribCommon_updateCommonData)(props, (inputRecord = (0, _webgl_builder_interfacesFs.GlAttribCommon_defaultData)(info, new _webgl_builder_interfacesFs.GlAttributeKind(1), parentObject), new _webgl_builder_interfacesFs.GlAttributeData(inputRecord.Id, inputRecord.Kind, inputRecord.Info, inputRecord.IsDirty, inputRecord.BaseType, inputRecord.ArrayCreator, inputRecord.RecordSize, inputRecord.ByteSize, inputRecord.DataLength, inputRecord.BaseTypeInfo, inputRecord.Normalize, inputRecord.StartIndex, inputRecord.IndexStride, inputRecord.Stride, 0, inputRecord.Values, inputRecord.DataCount, inputRecord.BufferUsage, inputRecord.DeterminesVertexCount, inputRecord.DeterminesInstanceCount, inputRecord.Divisor, inputRecord.Buffer, inputRecord.ChildAttributes, inputRecord.ParentObject, inputRecord.ParentAttribute, inputRecord.Link, inputRecord.LinkedChildren, inputRecord.CanSingleCopy, inputRecord.EnableNeeded, inputRecord.RecalcNeeded, inputRecord.CalcDataCount, inputRecord.CalcStride, inputRecord.CalcOffset)));
  console.log((0, _Option.some)((0, _String.toText)((0, _String.interpolate)("%P().createFrom processing children", [info.Name]))));
  var siblings = (0, _List.where)(function (c) {
    return c.CalcOffset;
  }, data_1.ChildAttributes);

  var siblingSum = function siblingSum(projection) {
    return (0, _List.sumBy)(projection, siblings, {
      GetZero: function GetZero() {
        return 0;
      },
      Add: function Add(x, y) {
        return x + y;
      }
    });
  };

  var calcStride = data_1.Stride <= 0;
  var recordSize = data_1.RecordSize | 0;
  var stride = (calcStride ? getStride(recordSize, siblings) : data_1.Stride) | 0;
  updateChildrenOffset(data_1.Offset + data_1.RecordSize, siblings);
  var ti = data_1.Info.TypeInfo;
  var indexStride = ti.ElementCount + siblingSum(function (c_1) {
    return c_1.Info.TypeInfo.ElementCount;
  }) | 0;
  var canSingleCopy = (0, _List.forAll)(function (c_2) {
    return c_2.BaseType === data_1.BaseType;
  }, siblings);

  if (data_1.Link == null) {
    (0, _glbufferFs.GlBuffer__Init_Z6E89302B)(data_1.Buffer, 34962, data_1.BufferUsage, data_1.ArrayCreator);

    if (canSingleCopy) {
      (0, _glbufferFs.GlBuffer__SetValues_5975E3)(data_1.Buffer, data_1.Values);
    }
  }

  var enumerator = (0, _Seq.getEnumerator)(data_1.ChildAttributes);

  try {
    while (enumerator["System.Collections.IEnumerator.MoveNext"]()) {
      var child = enumerator["System.Collections.Generic.IEnumerator`1.get_Current"]();
      var isDerived = !child.CalcOffset;

      if (child.CalcStride) {
        child.Stride = isDerived ? child.Info.TypeInfo.ByteSize : stride;
      }
    }
  } finally {
    enumerator.Dispose();
  }

  console.log((0, _Option.some)((0, _String.toText)((0, _String.interpolate)("******* %P().createFrom %P()", [(0, _webgl_builder_interfacesFs.GlAttributeData__get_Name)(data_1), (0, _List.length)(data_1.ChildAttributes)]))));
  (0, _List.iterate)(function (c_3) {
    console.log((0, _Option.some)((0, _String.toText)((0, _String.interpolate)("%P().%P(): Offset %P()", [(0, _webgl_builder_interfacesFs.GlAttributeData__get_Name)(data_1), (0, _webgl_builder_interfacesFs.GlAttributeData__get_Name)(c_3), c_3.Offset]))));
  }, data_1.ChildAttributes);
  var res = new _webgl_builder_interfacesFs.GlRootAttribute(1, updateChildrenParentAttribute(updateChildrenStartIndex(new _webgl_builder_interfacesFs.GlAttributeData(data_1.Id, data_1.Kind, data_1.Info, data_1.IsDirty, data_1.BaseType, canSingleCopy ? data_1.ArrayCreator : _typedarray_utilsFs.int8ArrayFactory, data_1.RecordSize, data_1.ByteSize, data_1.DataLength, data_1.BaseTypeInfo, data_1.Normalize, data_1.StartIndex, indexStride, stride, data_1.Offset, data_1.Values, data_1.DataCount, data_1.BufferUsage, data_1.DeterminesVertexCount, data_1.DeterminesInstanceCount, data_1.Divisor, data_1.Buffer, data_1.ChildAttributes, data_1.ParentObject, data_1.ParentAttribute, data_1.Link, data_1.LinkedChildren, canSingleCopy, data_1.EnableNeeded, data_1.RecalcNeeded, data_1.DataCount < 0, calcStride, data_1.Offset < 0))));
  console.log((0, _Option.some)("groupEnd"));
  console.groupEnd();
  return res;
}

function createEmpty(name, parentObject) {
  var info = (0, _webgl_program_utilsFs.emptyAttributeInfo)(name);
  return new _webgl_builder_interfacesFs.GlRootAttribute(1, (0, _webgl_builder_interfacesFs.GlAttribCommon_defaultData)(info, new _webgl_builder_interfacesFs.GlAttributeKind(1), parentObject));
}

function create(name, props, parentObject) {
  var matchValue = (0, _webgl_program_utilsFs.getAttribute)(name, parentObject.ProgramInfo);

  if (matchValue == null) {
    return createEmpty(name, parentObject);
  } else {
    var info = matchValue;
    return createFrom(info, props, parentObject);
  }
}

function copyData(data) {
  if (data.Link == null) {
    var buffer = data.Buffer;
    var values = data.Values;
    var indexStride = data.IndexStride | 0;
    (0, _glbufferFs.GlBuffer__SetLength_Z524259A4)(buffer, data.DataLength);
    var view = new DataView((0, _glbufferFs.GlBuffer__get_Data)(buffer).buffer);

    var writeData = function writeData(dataType, offset, stride, dataCount, byteSize, startIndex, elementCount) {
      var writer;
      var clo1 = (0, _webgl_typesFs.getViewWriter)(dataType);

      writer = function writer(arg10) {
        var clo2 = clo1(arg10);
        return function (arg20) {
          var clo3 = clo2(arg20);
          return clo3;
        };
      };

      var loop = function loop(index_mut, ofs_mut, i_mut) {
        loop: while (true) {
          var index = index_mut,
              ofs = ofs_mut,
              i = i_mut;

          if (i === 0) {} else {
            var enumerator = (0, _Seq.getEnumerator)((0, _List.ofSeq)((0, _Seq.rangeNumber)(0, 1, elementCount - 1)));

            try {
              while (enumerator["System.Collections.IEnumerator.MoveNext"]()) {
                var s = enumerator["System.Collections.Generic.IEnumerator`1.get_Current"]() | 0;
                var value = writer(view)(ofs + s * byteSize)(values[index + s]) | 0;
                void value;
              }
            } finally {
              enumerator.Dispose();
            }

            index_mut = index + indexStride;
            ofs_mut = ofs + stride;
            i_mut = i - 1;
            continue loop;
          }

          break;
        }
      };

      loop(startIndex, offset, dataCount);
    };

    var writeChildData = function writeChildData(startIndex_1_mut, children_mut) {
      writeChildData: while (true) {
        var startIndex_1 = startIndex_1_mut,
            children = children_mut;

        if (children.tail != null) {
          var remainingChildren = children.tail;
          var c = children.head;

          if (c.CalcOffset) {
            var baseByteSize = c.BaseTypeInfo.ByteSize | 0;
            writeData(c.BaseType, c.Offset, c.Stride, c.DataCount, baseByteSize, startIndex_1, c.Info.TypeInfo.ElementCount);
            startIndex_1_mut = startIndex_1 + c.Info.TypeInfo.ElementCount;
            children_mut = remainingChildren;
            continue writeChildData;
          } else {
            startIndex_1_mut = startIndex_1;
            children_mut = remainingChildren;
            continue writeChildData;
          }
        }

        break;
      }
    };

    writeData(data.BaseType, data.Offset, data.Stride, data.DataCount, data.BaseTypeInfo.ByteSize, 0, data.Info.TypeInfo.ElementCount);
    writeChildData(data.Info.TypeInfo.ElementCount, data.ChildAttributes);
    (0, _glbufferFs.GlBuffer__DirtyRange_Z37302880)(buffer, 0, data.DataLength - 1);
  }
}

function enable(data) {
  if (data.EnableNeeded) {
    data.EnableNeeded = false;

    if (data.ParentObject.ProcessLinked ? true : (0, _List.length)(data.LinkedChildren) === 0) {
      var gl = data.ParentObject.Scene.Canvas.Context;
      var location = data.Info.Location;

      if (location >= 0) {
        (0, _webgl_typesFs.GlCommon_enableVertexAttribArray)(gl, location);
        (0, _webgl_typesFs.GlCommon_vertexAttribPointer)(gl, location, data.Info.TypeInfo.ElementCount, data.BaseType, data.Normalize, data.Stride, data.Offset);

        if (data.Divisor >= 0) {
          (0, _webgl_typesFs.GlCommon_vertexAttribDivisor)(gl, location, data.Divisor);
        }
      }
    }
  }
}

function update(data) {
  var vdata = (0, _Option.defaultArg)(data.Link, data);
  var shouldUpdate = data.ParentObject.ProcessLinked ? true : (0, _List.length)(data.LinkedChildren) > 0;

  if (data.IsDirty) {
    var msg = (0, _String.toText)((0, _String.interpolate)("%P().%P().update", [data.ParentObject.Name, (0, _webgl_builder_interfacesFs.GlAttributeData__get_Name)(data)]));

    if ((0, _utilsFs.Debug_enabled)()) {
      if ((0, _utilsFs.Debug_collapsible)()) {
        if ((0, _utilsFs.Debug_logCollapsed)()) {
          console.groupCollapsed(msg);
        } else {
          console.group(msg);
        }
      } else {
        if ((0, _utilsFs.Debug_enabled)()) {
          (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
        }

        if (!(0, _utilsFs.Debug_collapsible)()) {
          (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
        }
      }
    }

    if (shouldUpdate) {
      (0, _glbufferFs.GlBuffer__Bind)(vdata.Buffer);
    }

    var isActive = data.Info.Location >= 0;

    if (isActive) {
      updateCalculated(data);
      enable(data);
    }

    (0, _List.iterate)(function (data_1) {
      (0, _glinterleavechildattributeFs.update)(data_1);
    }, data.ChildAttributes);

    if (shouldUpdate) {
      if (!data.CanSingleCopy) {
        copyData(data);
      }

      (0, _glbufferFs.GlBuffer__Update)(vdata.Buffer);
    }

    (0, _webgl_builder_interfacesFs.GlAttribCommon_clean)(data);

    if ((0, _utilsFs.Debug_collapsible)()) {
      console.groupEnd();
    } else {
      (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
    }
  }
}

function _setValues(values, data) {
  var values_1 = (0, _Util.isArrayLike)(values) ? values : [values];
  data.Values = values_1;
  (0, _glbufferFs.GlBuffer__SetValues_5975E3)(data.Buffer, values_1);
  (0, _webgl_builder_interfacesFs.GlAttribCommon_childrenRecalcNeeded)(data);
}

function _setValue(index, value, data) {
  var value_1 = (0, _Util.isArrayLike)(value) ? value : [value];
  var attribute = (0, _Option.defaultArg)(data.ParentAttribute, data);
  var startIndex = data.StartIndex + data.IndexStride * index | 0;
  var count = data.Info.TypeInfo.ElementCount | 0;
  var dataValues = data.Values;
  var enumerator = (0, _Seq.getEnumerator)((0, _List.ofSeq)((0, _Seq.rangeNumber)(0, 1, count - 1)));

  try {
    while (enumerator["System.Collections.IEnumerator.MoveNext"]()) {
      var i = enumerator["System.Collections.Generic.IEnumerator`1.get_Current"]() | 0;
      dataValues[startIndex + i] = value_1[i];
    }
  } finally {
    enumerator.Dispose();
  }

  (0, _glbufferFs.GlBuffer__SetValuesOffset_Z59CA6BE1)(attribute.Buffer, value_1, startIndex);
  (0, _webgl_builder_interfacesFs.GlAttribCommon_dirty)(attribute);
}
},{"./.fable/fable-library.3.0.0/Option.js":"../src/.fable/fable-library.3.0.0/Option.js","./webgl_builder_interfaces.fs.js":"../src/webgl_builder_interfaces.fs.js","./.fable/fable-library.3.0.0/List.js":"../src/.fable/fable-library.3.0.0/List.js","./.fable/fable-library.3.0.0/String.js":"../src/.fable/fable-library.3.0.0/String.js","./glbuffer.fs.js":"../src/glbuffer.fs.js","./.fable/fable-library.3.0.0/Seq.js":"../src/.fable/fable-library.3.0.0/Seq.js","./typedarray_utils.fs.js":"../src/typedarray_utils.fs.js","./webgl_program_utils.fs.js":"../src/webgl_program_utils.fs.js","./webgl_types.fs.js":"../src/webgl_types.fs.js","./utils.fs.js":"../src/utils.fs.js","./glinterleavechildattribute.fs.js":"../src/glinterleavechildattribute.fs.js","./.fable/fable-library.3.0.0/Util.js":"../src/.fable/fable-library.3.0.0/Util.js"}],"../src/glattrib.fs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.delete$ = delete$;
exports.setValues = setValues;
exports.setValue = setValue;

var _glbufferFs = require("./glbuffer.fs.js");

var _glinterleaveattributeFs = require("./glinterleaveattribute.fs.js");

var _glsingleattributeFs = require("./glsingleattribute.fs.js");

function delete$(data) {
  (0, _glbufferFs.GlBuffer__Delete)(data.Buffer);
}

function setValues(values, data) {
  if (data.Link == null) {
    var matchValue_1 = data.Kind;

    switch (matchValue_1.tag) {
      case 1:
        {
          (0, _glinterleaveattributeFs._setValues)(values, data);
          break;
        }

      case 2:
        {
          break;
        }

      default:
        {
          (0, _glsingleattributeFs._setValues)(values, data);
        }
    }
  }
}

function setValue(index, value, data) {
  if (data.Link == null) {
    var matchValue_1 = data.Kind;

    switch (matchValue_1.tag) {
      case 1:
        {
          (0, _glinterleaveattributeFs._setValue)(index, value, data);
          break;
        }

      case 2:
        {
          break;
        }

      default:
        {
          (0, _glsingleattributeFs._setValue)(index, value, data);
        }
    }
  }
}
},{"./glbuffer.fs.js":"../src/glbuffer.fs.js","./glinterleaveattribute.fs.js":"../src/glinterleaveattribute.fs.js","./glsingleattribute.fs.js":"../src/glsingleattribute.fs.js"}],"../src/glindicies.fs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.create = create;
exports.delete$ = delete$;
exports.update = update;

var _webgl_builder_interfacesFs = require("./webgl_builder_interfaces.fs.js");

var _List = require("./.fable/fable-library.3.0.0/List.js");

var _typedarray_utilsFs = require("./typedarray_utils.fs.js");

var _glbufferFs = require("./glbuffer.fs.js");

var _utilsFs = require("./utils.fs.js");

var _String = require("./.fable/fable-library.3.0.0/String.js");

function clean(data) {
  data.IsDirty = false;
}

function dirty(data) {
  data.IsDirty = true;
  (0, _webgl_builder_interfacesFs.GlCommon_dirtyObject)(data.ParentObject);
}

function dirtyLinkedChildren(data) {
  (0, _List.iterate)(function (data_1) {
    dirty(data_1);
  }, data.LinkedChildren);
}

function recalcNeeded(data) {
  data.RecalcNeeded = true;
  data.IsDirty = true;
  (0, _webgl_builder_interfacesFs.GlCommon_objectRecalcNeeded)(data.ParentObject);
}

function linkedChildrenRecalcNeeded(data) {
  (0, _List.iterate)(function (data_1) {
    recalcNeeded(data_1);
  }, data.LinkedChildren);
}

function updateArrayCreator(data) {
  var arrayCreator;
  var matchValue = data.IndiciesType | 0;

  switch (matchValue) {
    case 5121:
      {
        arrayCreator = _typedarray_utilsFs.uint8ArrayFactory;
        break;
      }

    case 5123:
      {
        arrayCreator = _typedarray_utilsFs.uint16ArrayFactory;
        break;
      }

    default:
      {
        arrayCreator = _typedarray_utilsFs.uint16ArrayFactory;
      }
  }

  return new _webgl_builder_interfacesFs.GlIndiciesData(data.Name, data.IsDirty, data.IndiciesType, arrayCreator, data.Offset, data.Values, data.DataCount, data.BufferUsage, data.Buffer, data.ParentObject, data.Link, data.LinkedChildren, data.RecalcNeeded, data.CalcDataCount);
}

function initBuffer(data) {
  if (data.Link == null) {
    (0, _glbufferFs.GlBuffer__Init_Z6E89302B)(data.Buffer, 34963, data.BufferUsage, data.ArrayCreator);
    (0, _glbufferFs.GlBuffer__SetValues_5975E3)(data.Buffer, data.Values);
  }

  return data;
}

function updateCalcFlags(data) {
  return new _webgl_builder_interfacesFs.GlIndiciesData(data.Name, data.IsDirty, data.IndiciesType, data.ArrayCreator, data.Offset, data.Values, data.DataCount, data.BufferUsage, data.Buffer, data.ParentObject, data.Link, data.LinkedChildren, data.RecalcNeeded, data.DataCount < 0);
}

function linkTo(parent, data) {
  (0, _glbufferFs.GlBuffer__set_AutoClean_Z1FBCCD16)(parent.Buffer, false);
  var data_1 = new _webgl_builder_interfacesFs.GlIndiciesData(data.Name, data.IsDirty, data.IndiciesType, data.ArrayCreator, data.Offset, data.Values, data.DataCount, data.BufferUsage, data.Buffer, data.ParentObject, parent, data.LinkedChildren, data.RecalcNeeded, data.CalcDataCount);
  parent.LinkedChildren = (0, _List.cons)(data_1, parent.LinkedChildren);
  return data_1;
}

function processLink(objectName, data) {
  var globj = (0, _webgl_builder_interfacesFs.GlCommon_getObject)(objectName, data.ParentObject.Scene);
  var matchValue = globj.Indicies;

  if (matchValue == null) {
    return (0, _utilsFs.throw$)((0, _String.toText)((0, _String.interpolate)("Cannot link to undefined indicies of %P().", [globj.Name])));
  } else {
    var indicies = matchValue;
    return linkTo(indicies, data);
  }
}

function apply(props, data) {
  var loop = function loop(props_1_mut, data_1_mut) {
    loop: while (true) {
      var props_1 = props_1_mut,
          data_1 = data_1_mut;

      if (props_1.tail != null) {
        var t = props_1.tail;
        var h = props_1.head;

        switch (h.tag) {
          case 1:
            {
              var x_1 = h.fields[0] | 0;
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlIndiciesData(data_1.Name, data_1.IsDirty, data_1.IndiciesType, data_1.ArrayCreator, x_1, data_1.Values, data_1.DataCount, data_1.BufferUsage, data_1.Buffer, data_1.ParentObject, data_1.Link, data_1.LinkedChildren, data_1.RecalcNeeded, data_1.CalcDataCount);
              continue loop;
            }

          case 2:
            {
              var x_2 = h.fields[0];
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlIndiciesData(data_1.Name, data_1.IsDirty, data_1.IndiciesType, data_1.ArrayCreator, data_1.Offset, x_2, data_1.DataCount, data_1.BufferUsage, data_1.Buffer, data_1.ParentObject, data_1.Link, data_1.LinkedChildren, data_1.RecalcNeeded, data_1.CalcDataCount);
              continue loop;
            }

          case 3:
            {
              var x_3 = h.fields[0] | 0;
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlIndiciesData(data_1.Name, data_1.IsDirty, data_1.IndiciesType, data_1.ArrayCreator, data_1.Offset, data_1.Values, data_1.DataCount, x_3, data_1.Buffer, data_1.ParentObject, data_1.Link, data_1.LinkedChildren, data_1.RecalcNeeded, data_1.CalcDataCount);
              continue loop;
            }

          case 4:
            {
              var x_4 = h.fields[0];
              props_1_mut = t;
              data_1_mut = processLink(x_4, data_1);
              continue loop;
            }

          default:
            {
              var x = h.fields[0] | 0;
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlIndiciesData(data_1.Name, data_1.IsDirty, x, data_1.ArrayCreator, data_1.Offset, data_1.Values, data_1.DataCount, data_1.BufferUsage, data_1.Buffer, data_1.ParentObject, data_1.Link, data_1.LinkedChildren, data_1.RecalcNeeded, data_1.CalcDataCount);
              continue loop;
            }
        }
      } else {
        return data_1;
      }

      break;
    }
  };

  return initBuffer(updateCalcFlags(updateArrayCreator(loop(props, data))));
}

function updateCalculated(data) {
  if (data.RecalcNeeded) {
    data.RecalcNeeded = false;

    if (data.CalcDataCount) {
      var newDataCount = data.Values.length - data.Offset | 0;

      if (newDataCount !== data.DataCount) {
        data.DataCount = data.Values.length - data.Offset;
        (0, _webgl_builder_interfacesFs.GlCommon_objectRecalcNeeded)(data.ParentObject);
        linkedChildrenRecalcNeeded(data);
      }
    }
  }
}

function create(props, parentObject) {
  return apply(props, new _webgl_builder_interfacesFs.GlIndiciesData("indicies", true, 5121, _typedarray_utilsFs.uint8ArrayFactory, 0, new Int32Array([]), -1, 35044, (0, _glbufferFs.GlBuffer_$ctor_10C6D16C)(parentObject.Scene.Canvas.Context), parentObject, void 0, (0, _List.empty)(), true, true));
}

function delete$(data) {
  (0, _glbufferFs.GlBuffer__Delete)(data.Buffer);
}

function update(data) {
  if (data.IsDirty) {
    var msg = (0, _String.toText)((0, _String.interpolate)("%P().%P().update", [data.ParentObject.Name, data.Name]));

    if ((0, _utilsFs.Debug_enabled)()) {
      if ((0, _utilsFs.Debug_collapsible)()) {
        if ((0, _utilsFs.Debug_logCollapsed)()) {
          console.groupCollapsed(msg);
        } else {
          console.group(msg);
        }
      } else {
        if ((0, _utilsFs.Debug_enabled)()) {
          (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
        }

        if (!(0, _utilsFs.Debug_collapsible)()) {
          (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
        }
      }
    }

    updateCalculated(data);
    clean(data);
    (0, _glbufferFs.GlBuffer__Bind)(data.Buffer);
    (0, _glbufferFs.GlBuffer__Update)(data.Buffer);

    if ((0, _utilsFs.Debug_collapsible)()) {
      console.groupEnd();
    } else {
      (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
    }
  }
}
},{"./webgl_builder_interfaces.fs.js":"../src/webgl_builder_interfaces.fs.js","./.fable/fable-library.3.0.0/List.js":"../src/.fable/fable-library.3.0.0/List.js","./typedarray_utils.fs.js":"../src/typedarray_utils.fs.js","./glbuffer.fs.js":"../src/glbuffer.fs.js","./utils.fs.js":"../src/utils.fs.js","./.fable/fable-library.3.0.0/String.js":"../src/.fable/fable-library.3.0.0/String.js"}],"../src/gltexture.fs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextureDataInfo$reflection = TextureDataInfo$reflection;
exports.emptyTexture = emptyTexture;
exports.apply = apply;
exports.create = create;
exports.delete$ = delete$;
exports.clean = clean;
exports.dirty = dirty;
exports.dirtyLinkedChildren = dirtyLinkedChildren;
exports.update = update;
exports.pixelDataUint8 = pixelDataUint8;
exports.pixelImageId = pixelImageId;
exports.emptyTextureData = exports.TextureDataInfo = void 0;

var _Types = require("./.fable/fable-library.3.0.0/Types.js");

var _Reflection = require("./.fable/fable-library.3.0.0/Reflection.js");

var _typedarray_utilsFs = require("./typedarray_utils.fs.js");

var _webgl_builder_interfacesFs = require("./webgl_builder_interfaces.fs.js");

var _List = require("./.fable/fable-library.3.0.0/List.js");

var _String = require("./.fable/fable-library.3.0.0/String.js");

var _utilsFs = require("./utils.fs.js");

var _webgl_typesFs = require("./webgl_types.fs.js");

var _Option = require("./.fable/fable-library.3.0.0/Option.js");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var TextureDataInfo = /*#__PURE__*/function (_Record) {
  _inherits(TextureDataInfo, _Record);

  var _super = _createSuper(TextureDataInfo);

  function TextureDataInfo(Width, Height, Format, DataType, Data) {
    var _this;

    _classCallCheck(this, TextureDataInfo);

    _this = _super.call(this);
    _this.Width = Width;
    _this.Height = Height;
    _this.Format = Format | 0;
    _this.DataType = DataType | 0;
    _this.Data = Data;
    return _this;
  }

  return TextureDataInfo;
}(_Types.Record);

exports.TextureDataInfo = TextureDataInfo;

function TextureDataInfo$reflection() {
  return (0, _Reflection.record_type)("GlTexture.TextureDataInfo", [], TextureDataInfo, function () {
    return [["Width", _Reflection.float64_type], ["Height", _Reflection.float64_type], ["Format", (0, _Reflection.enum_type)("WebGLTypes.GlColorFormat", _Reflection.int32_type, [["RGB", 6407], ["RGBA", 6408], ["LUMINANCE", 6409], ["LUMINANCE_ALPHA", 6410], ["ALPHA", 6406], ["R8", 33321], ["R8_SNORM", 36756], ["RG8", 33323], ["RG8_SNORM", 36757], ["RGB8", 32849], ["RGB8_SNORM", 36758], ["RGB565", 36194], ["RGBA4", 32854], ["RGB5_A1", 32855], ["RGBA8", 32856], ["RGBA8_SNORM", 36759], ["RGB10_A2", 32857], ["RGB10_A2UI", 36975], ["SRGB8", 35905], ["SRGB8_ALPHA8", 35907], ["R16F", 33325], ["RG16F", 33327], ["RGB16F", 34843], ["RGBA16F", 34842], ["R32F", 33326], ["RG32F", 33328], ["RGB32F", 34837], ["RGBA32F", 34836], ["R11F_G11F_B10F", 35898], ["RGB9_E5", 35901], ["R8I", 33329], ["R8UI", 33330], ["R16I", 33331], ["R16UI", 33332], ["R32I", 33333], ["R32UI", 33334], ["RG8I", 33335], ["RG8UI", 33336], ["RG16I", 33337], ["RG16UI", 33338], ["RG32I", 33339], ["RG32UI", 33340], ["RGB8UI", 36221], ["RGB16I", 36233], ["RGB16UI", 36215], ["RGB32I", 36227], ["RGB32UI", 36209], ["RGBA8I", 36238], ["RGBA8UI", 36220], ["RGBA16I", 36232], ["RGBA16UI", 36214], ["RGBA32I", 36226], ["RGBA32UI", 36208]])], ["DataType", (0, _Reflection.enum_type)("WebGLTypes.GlTextureType", _Reflection.int32_type, [["UNSIGNED_BYTE", 5121], ["UNSIGNED_SHORT_4_4_4_4", 32819], ["UNSIGNED_SHORT_5_5_5_1", 32820], ["UNSIGNED_SHORT_5_6_5", 33635], ["UNSIGNED_SHORT", 5123], ["UNSIGNED_INT", 5125], ["UNSIGNED_INT_24_8", 34042], ["FLOAT", 5126], ["HALF_FLOAT", 5131], ["BYTE", 5120], ["SHORT", 5122], ["INT", 5124], ["UNSIGNED_INT_2_10_10_10_REV", 33640], ["UNSIGNED_INT_10F_11F_11F_REV", 35899], ["UNSIGNED_INT_5_9_9_9_REV", 35902], ["FLOAT_32_UNSIGNED_INT_24_8_REV", 36269]])], ["Data", (0, _Reflection.class_type)("Fable.Core.JS.TypedArray")]];
  });
}

var emptyTextureData = new TextureDataInfo(2, 2, 6408, 5121, (0, _typedarray_utilsFs.uint8Array)(new Int32Array([255, 0, 0, 255, 0, 255, 0, 255, 0, 0, 255, 255, 255, 255, 0, 255])));
exports.emptyTextureData = emptyTextureData;

function emptyTexture(parent) {
  var gl = parent.Scene.Canvas.Context;
  var empty = emptyTextureData;
  return new _webgl_builder_interfacesFs.GlTextureData(0, "", true, 3553, gl.createTexture(), -1, 0, empty.Format, empty.Width, empty.Height, empty.Format, empty.DataType, new _webgl_builder_interfacesFs.GlTexturePixels(0, empty.Data), 0, 9728, 9728, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, parent, void 0, (0, _List.empty)());
}

function addLinkedChild(parent, data) {
  parent.LinkedChildren = (0, _List.cons)(data, parent.LinkedChildren);
  return data;
}

function linkTo(parent, data) {
  return addLinkedChild(parent, new _webgl_builder_interfacesFs.GlTextureData(data.Id, data.Name, data.IsDirty, data.Target, data.TextureId, data.Index, data.Level, data.InternalFormat, data.Width, data.Height, data.Format, data.DataType, new _webgl_builder_interfacesFs.GlTexturePixels(0, emptyTextureData.Data), data.Offset, data.MagFilter, data.MinFilter, data.WrapS, data.WrapT, data.WrapR, data.BaseLevel, data.CompareFunc, data.CompareMode, data.MaxLevel, data.MaxLod, data.MinLod, data.ParentObject, parent, data.LinkedChildren));
}

function processLink(name, data) {
  var patternInput = (0, _webgl_builder_interfacesFs.GlCommon_splitName)(name);
  var textureName = patternInput[1];
  var objectName = patternInput[0];
  var globj = (0, _webgl_builder_interfacesFs.GlCommon_getObject)(objectName, data.ParentObject.Scene);
  var texture = (0, _webgl_builder_interfacesFs.GlCommon_getTexture)(textureName, globj);
  return linkTo(texture, data);
}

function apply(props, data) {
  var loop = function loop(props_1_mut, data_1_mut) {
    loop: while (true) {
      var props_1 = props_1_mut,
          data_1 = data_1_mut;

      if (props_1.tail != null) {
        var t = props_1.tail;
        var h = props_1.head;

        switch (h.tag) {
          case 1:
            {
              var x_1 = h.fields[0] | 0;
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlTextureData(data_1.Id, data_1.Name, data_1.IsDirty, x_1, data_1.TextureId, data_1.Index, data_1.Level, data_1.InternalFormat, data_1.Width, data_1.Height, data_1.Format, data_1.DataType, data_1.Pixels, data_1.Offset, data_1.MagFilter, data_1.MinFilter, data_1.WrapS, data_1.WrapT, data_1.WrapR, data_1.BaseLevel, data_1.CompareFunc, data_1.CompareMode, data_1.MaxLevel, data_1.MaxLod, data_1.MinLod, data_1.ParentObject, data_1.Link, data_1.LinkedChildren);
              continue loop;
            }

          case 2:
            {
              var x_2 = h.fields[0] | 0;
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlTextureData(data_1.Id, data_1.Name, data_1.IsDirty, data_1.Target, data_1.TextureId, x_2, data_1.Level, data_1.InternalFormat, data_1.Width, data_1.Height, data_1.Format, data_1.DataType, data_1.Pixels, data_1.Offset, data_1.MagFilter, data_1.MinFilter, data_1.WrapS, data_1.WrapT, data_1.WrapR, data_1.BaseLevel, data_1.CompareFunc, data_1.CompareMode, data_1.MaxLevel, data_1.MaxLod, data_1.MinLod, data_1.ParentObject, data_1.Link, data_1.LinkedChildren);
              continue loop;
            }

          case 3:
            {
              var x_3 = h.fields[0] | 0;
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlTextureData(data_1.Id, data_1.Name, data_1.IsDirty, data_1.Target, data_1.TextureId, data_1.Index, x_3, data_1.InternalFormat, data_1.Width, data_1.Height, data_1.Format, data_1.DataType, data_1.Pixels, data_1.Offset, data_1.MagFilter, data_1.MinFilter, data_1.WrapS, data_1.WrapT, data_1.WrapR, data_1.BaseLevel, data_1.CompareFunc, data_1.CompareMode, data_1.MaxLevel, data_1.MaxLod, data_1.MinLod, data_1.ParentObject, data_1.Link, data_1.LinkedChildren);
              continue loop;
            }

          case 4:
            {
              var x_4 = h.fields[0] | 0;
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlTextureData(data_1.Id, data_1.Name, data_1.IsDirty, data_1.Target, data_1.TextureId, data_1.Index, data_1.Level, x_4, data_1.Width, data_1.Height, data_1.Format, data_1.DataType, data_1.Pixels, data_1.Offset, data_1.MagFilter, data_1.MinFilter, data_1.WrapS, data_1.WrapT, data_1.WrapR, data_1.BaseLevel, data_1.CompareFunc, data_1.CompareMode, data_1.MaxLevel, data_1.MaxLod, data_1.MinLod, data_1.ParentObject, data_1.Link, data_1.LinkedChildren);
              continue loop;
            }

          case 5:
            {
              var x_5 = h.fields[0];
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlTextureData(data_1.Id, data_1.Name, data_1.IsDirty, data_1.Target, data_1.TextureId, data_1.Index, data_1.Level, data_1.InternalFormat, x_5, data_1.Height, data_1.Format, data_1.DataType, data_1.Pixels, data_1.Offset, data_1.MagFilter, data_1.MinFilter, data_1.WrapS, data_1.WrapT, data_1.WrapR, data_1.BaseLevel, data_1.CompareFunc, data_1.CompareMode, data_1.MaxLevel, data_1.MaxLod, data_1.MinLod, data_1.ParentObject, data_1.Link, data_1.LinkedChildren);
              continue loop;
            }

          case 6:
            {
              var x_6 = h.fields[0];
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlTextureData(data_1.Id, data_1.Name, data_1.IsDirty, data_1.Target, data_1.TextureId, data_1.Index, data_1.Level, data_1.InternalFormat, data_1.Width, x_6, data_1.Format, data_1.DataType, data_1.Pixels, data_1.Offset, data_1.MagFilter, data_1.MinFilter, data_1.WrapS, data_1.WrapT, data_1.WrapR, data_1.BaseLevel, data_1.CompareFunc, data_1.CompareMode, data_1.MaxLevel, data_1.MaxLod, data_1.MinLod, data_1.ParentObject, data_1.Link, data_1.LinkedChildren);
              continue loop;
            }

          case 7:
            {
              var x_7 = h.fields[0] | 0;
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlTextureData(data_1.Id, data_1.Name, data_1.IsDirty, data_1.Target, data_1.TextureId, data_1.Index, data_1.Level, data_1.InternalFormat, data_1.Width, data_1.Height, x_7, data_1.DataType, data_1.Pixels, data_1.Offset, data_1.MagFilter, data_1.MinFilter, data_1.WrapS, data_1.WrapT, data_1.WrapR, data_1.BaseLevel, data_1.CompareFunc, data_1.CompareMode, data_1.MaxLevel, data_1.MaxLod, data_1.MinLod, data_1.ParentObject, data_1.Link, data_1.LinkedChildren);
              continue loop;
            }

          case 8:
            {
              var x_8 = h.fields[0] | 0;
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlTextureData(data_1.Id, data_1.Name, data_1.IsDirty, data_1.Target, data_1.TextureId, data_1.Index, data_1.Level, data_1.InternalFormat, data_1.Width, data_1.Height, data_1.Format, x_8, data_1.Pixels, data_1.Offset, data_1.MagFilter, data_1.MinFilter, data_1.WrapS, data_1.WrapT, data_1.WrapR, data_1.BaseLevel, data_1.CompareFunc, data_1.CompareMode, data_1.MaxLevel, data_1.MaxLod, data_1.MinLod, data_1.ParentObject, data_1.Link, data_1.LinkedChildren);
              continue loop;
            }

          case 9:
            {
              var x_9 = h.fields[0];
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlTextureData(data_1.Id, data_1.Name, data_1.IsDirty, data_1.Target, data_1.TextureId, data_1.Index, data_1.Level, data_1.InternalFormat, data_1.Width, data_1.Height, data_1.Format, data_1.DataType, x_9, data_1.Offset, data_1.MagFilter, data_1.MinFilter, data_1.WrapS, data_1.WrapT, data_1.WrapR, data_1.BaseLevel, data_1.CompareFunc, data_1.CompareMode, data_1.MaxLevel, data_1.MaxLod, data_1.MinLod, data_1.ParentObject, data_1.Link, data_1.LinkedChildren);
              continue loop;
            }

          case 10:
            {
              var x_10 = h.fields[0] | 0;
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlTextureData(data_1.Id, data_1.Name, data_1.IsDirty, data_1.Target, data_1.TextureId, data_1.Index, data_1.Level, data_1.InternalFormat, data_1.Width, data_1.Height, data_1.Format, data_1.DataType, data_1.Pixels, x_10, data_1.MagFilter, data_1.MinFilter, data_1.WrapS, data_1.WrapT, data_1.WrapR, data_1.BaseLevel, data_1.CompareFunc, data_1.CompareMode, data_1.MaxLevel, data_1.MaxLod, data_1.MinLod, data_1.ParentObject, data_1.Link, data_1.LinkedChildren);
              continue loop;
            }

          case 11:
            {
              var x_11 = h.fields[0] | 0;
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlTextureData(data_1.Id, data_1.Name, data_1.IsDirty, data_1.Target, data_1.TextureId, data_1.Index, data_1.Level, data_1.InternalFormat, data_1.Width, data_1.Height, data_1.Format, data_1.DataType, data_1.Pixels, data_1.Offset, x_11, data_1.MinFilter, data_1.WrapS, data_1.WrapT, data_1.WrapR, data_1.BaseLevel, data_1.CompareFunc, data_1.CompareMode, data_1.MaxLevel, data_1.MaxLod, data_1.MinLod, data_1.ParentObject, data_1.Link, data_1.LinkedChildren);
              continue loop;
            }

          case 12:
            {
              var x_12 = h.fields[0] | 0;
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlTextureData(data_1.Id, data_1.Name, data_1.IsDirty, data_1.Target, data_1.TextureId, data_1.Index, data_1.Level, data_1.InternalFormat, data_1.Width, data_1.Height, data_1.Format, data_1.DataType, data_1.Pixels, data_1.Offset, data_1.MagFilter, x_12, data_1.WrapS, data_1.WrapT, data_1.WrapR, data_1.BaseLevel, data_1.CompareFunc, data_1.CompareMode, data_1.MaxLevel, data_1.MaxLod, data_1.MinLod, data_1.ParentObject, data_1.Link, data_1.LinkedChildren);
              continue loop;
            }

          case 13:
            {
              var x_13 = h.fields[0] | 0;
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlTextureData(data_1.Id, data_1.Name, data_1.IsDirty, data_1.Target, data_1.TextureId, data_1.Index, data_1.Level, data_1.InternalFormat, data_1.Width, data_1.Height, data_1.Format, data_1.DataType, data_1.Pixels, data_1.Offset, data_1.MagFilter, data_1.MinFilter, x_13, data_1.WrapT, data_1.WrapR, data_1.BaseLevel, data_1.CompareFunc, data_1.CompareMode, data_1.MaxLevel, data_1.MaxLod, data_1.MinLod, data_1.ParentObject, data_1.Link, data_1.LinkedChildren);
              continue loop;
            }

          case 14:
            {
              var x_14 = h.fields[0] | 0;
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlTextureData(data_1.Id, data_1.Name, data_1.IsDirty, data_1.Target, data_1.TextureId, data_1.Index, data_1.Level, data_1.InternalFormat, data_1.Width, data_1.Height, data_1.Format, data_1.DataType, data_1.Pixels, data_1.Offset, data_1.MagFilter, data_1.MinFilter, data_1.WrapS, x_14, data_1.WrapR, data_1.BaseLevel, data_1.CompareFunc, data_1.CompareMode, data_1.MaxLevel, data_1.MaxLod, data_1.MinLod, data_1.ParentObject, data_1.Link, data_1.LinkedChildren);
              continue loop;
            }

          case 15:
            {
              var x_15 = h.fields[0] | 0;
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlTextureData(data_1.Id, data_1.Name, data_1.IsDirty, data_1.Target, data_1.TextureId, data_1.Index, data_1.Level, data_1.InternalFormat, data_1.Width, data_1.Height, data_1.Format, data_1.DataType, data_1.Pixels, data_1.Offset, data_1.MagFilter, data_1.MinFilter, data_1.WrapS, data_1.WrapT, x_15, data_1.BaseLevel, data_1.CompareFunc, data_1.CompareMode, data_1.MaxLevel, data_1.MaxLod, data_1.MinLod, data_1.ParentObject, data_1.Link, data_1.LinkedChildren);
              continue loop;
            }

          case 16:
            {
              var x_16 = h.fields[0] | 0;
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlTextureData(data_1.Id, data_1.Name, data_1.IsDirty, data_1.Target, data_1.TextureId, data_1.Index, data_1.Level, data_1.InternalFormat, data_1.Width, data_1.Height, data_1.Format, data_1.DataType, data_1.Pixels, data_1.Offset, data_1.MagFilter, data_1.MinFilter, data_1.WrapS, data_1.WrapT, data_1.WrapR, x_16, data_1.CompareFunc, data_1.CompareMode, data_1.MaxLevel, data_1.MaxLod, data_1.MinLod, data_1.ParentObject, data_1.Link, data_1.LinkedChildren);
              continue loop;
            }

          case 17:
            {
              var x_17 = h.fields[0] | 0;
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlTextureData(data_1.Id, data_1.Name, data_1.IsDirty, data_1.Target, data_1.TextureId, data_1.Index, data_1.Level, data_1.InternalFormat, data_1.Width, data_1.Height, data_1.Format, data_1.DataType, data_1.Pixels, data_1.Offset, data_1.MagFilter, data_1.MinFilter, data_1.WrapS, data_1.WrapT, data_1.WrapR, data_1.BaseLevel, x_17, data_1.CompareMode, data_1.MaxLevel, data_1.MaxLod, data_1.MinLod, data_1.ParentObject, data_1.Link, data_1.LinkedChildren);
              continue loop;
            }

          case 18:
            {
              var x_18 = h.fields[0] | 0;
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlTextureData(data_1.Id, data_1.Name, data_1.IsDirty, data_1.Target, data_1.TextureId, data_1.Index, data_1.Level, data_1.InternalFormat, data_1.Width, data_1.Height, data_1.Format, data_1.DataType, data_1.Pixels, data_1.Offset, data_1.MagFilter, data_1.MinFilter, data_1.WrapS, data_1.WrapT, data_1.WrapR, data_1.BaseLevel, data_1.CompareFunc, x_18, data_1.MaxLevel, data_1.MaxLod, data_1.MinLod, data_1.ParentObject, data_1.Link, data_1.LinkedChildren);
              continue loop;
            }

          case 19:
            {
              var x_19 = h.fields[0] | 0;
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlTextureData(data_1.Id, data_1.Name, data_1.IsDirty, data_1.Target, data_1.TextureId, data_1.Index, data_1.Level, data_1.InternalFormat, data_1.Width, data_1.Height, data_1.Format, data_1.DataType, data_1.Pixels, data_1.Offset, data_1.MagFilter, data_1.MinFilter, data_1.WrapS, data_1.WrapT, data_1.WrapR, data_1.BaseLevel, data_1.CompareFunc, data_1.CompareMode, x_19, data_1.MaxLod, data_1.MinLod, data_1.ParentObject, data_1.Link, data_1.LinkedChildren);
              continue loop;
            }

          case 20:
            {
              var x_20 = h.fields[0];
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlTextureData(data_1.Id, data_1.Name, data_1.IsDirty, data_1.Target, data_1.TextureId, data_1.Index, data_1.Level, data_1.InternalFormat, data_1.Width, data_1.Height, data_1.Format, data_1.DataType, data_1.Pixels, data_1.Offset, data_1.MagFilter, data_1.MinFilter, data_1.WrapS, data_1.WrapT, data_1.WrapR, data_1.BaseLevel, data_1.CompareFunc, data_1.CompareMode, data_1.MaxLevel, x_20, data_1.MinLod, data_1.ParentObject, data_1.Link, data_1.LinkedChildren);
              continue loop;
            }

          case 21:
            {
              var x_21 = h.fields[0];
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlTextureData(data_1.Id, data_1.Name, data_1.IsDirty, data_1.Target, data_1.TextureId, data_1.Index, data_1.Level, data_1.InternalFormat, data_1.Width, data_1.Height, data_1.Format, data_1.DataType, data_1.Pixels, data_1.Offset, data_1.MagFilter, data_1.MinFilter, data_1.WrapS, data_1.WrapT, data_1.WrapR, data_1.BaseLevel, data_1.CompareFunc, data_1.CompareMode, data_1.MaxLevel, data_1.MaxLod, x_21, data_1.ParentObject, data_1.Link, data_1.LinkedChildren);
              continue loop;
            }

          case 22:
            {
              var x_22 = h.fields[0];
              props_1_mut = t;
              data_1_mut = processLink(x_22, data_1);
              continue loop;
            }

          default:
            {
              var x = h.fields[0];
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlTextureData(data_1.Id, x, data_1.IsDirty, data_1.Target, data_1.TextureId, data_1.Index, data_1.Level, data_1.InternalFormat, data_1.Width, data_1.Height, data_1.Format, data_1.DataType, data_1.Pixels, data_1.Offset, data_1.MagFilter, data_1.MinFilter, data_1.WrapS, data_1.WrapT, data_1.WrapR, data_1.BaseLevel, data_1.CompareFunc, data_1.CompareMode, data_1.MaxLevel, data_1.MaxLod, data_1.MinLod, data_1.ParentObject, data_1.Link, data_1.LinkedChildren);
              continue loop;
            }
        }
      } else {
        return data_1;
      }

      break;
    }
  };

  return loop(props, data);
}

function create(props, parentObject) {
  var inputRecord;
  return apply(props, (inputRecord = emptyTexture(parentObject), new _webgl_builder_interfacesFs.GlTextureData(inputRecord.Id, inputRecord.Name, inputRecord.IsDirty, inputRecord.Target, inputRecord.TextureId, (0, _webgl_builder_interfacesFs.GlCommon_nextTextureIndex)(parentObject), inputRecord.Level, inputRecord.InternalFormat, inputRecord.Width, inputRecord.Height, inputRecord.Format, inputRecord.DataType, inputRecord.Pixels, inputRecord.Offset, inputRecord.MagFilter, inputRecord.MinFilter, inputRecord.WrapS, inputRecord.WrapT, inputRecord.WrapR, inputRecord.BaseLevel, inputRecord.CompareFunc, inputRecord.CompareMode, inputRecord.MaxLevel, inputRecord.MaxLod, inputRecord.MinLod, inputRecord.ParentObject, inputRecord.Link, inputRecord.LinkedChildren)));
}

function delete$(data) {
  var gl = data.ParentObject.Scene.Canvas.Context;
  gl.deleteTexture(data.TextureId);
}

function clean(data) {
  data.IsDirty = false;
}

function dirty(data) {
  data.IsDirty = true;
  (0, _webgl_builder_interfacesFs.GlCommon_dirtyObject)(data.ParentObject);
}

function dirtyLinkedChildren(data) {
  (0, _List.iterate)(function (data_1) {
    dirty(data_1);
  }, data.LinkedChildren);
}

function activateTexture(vdata, data) {
  var gl = data.ParentObject.Scene.Canvas.Context;
  var value = data.MinFilter;

  if (value == null) {} else {
    var value_1 = value | 0;
    var target = vdata.Target | 0;
    var param_1 = 10241;
    var value_2 = value_1;
    var msg = (0, _String.toText)((0, _String.interpolate)("gl.texParameteri(%P(), %P(), %P())", [(0, _utilsFs.enumName)(_webgl_typesFs.GlTextureTargetT, target), (0, _utilsFs.enumName)(_webgl_typesFs.GlTextureParamT, param_1), value_2]));

    if ((0, _utilsFs.Debug_enabled)()) {
      (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
    }

    gl.texParameteri(target, param_1, value_2);
  }

  var value_3 = data.MagFilter;

  if (value_3 == null) {} else {
    var value_4 = value_3 | 0;
    var target_1 = vdata.Target | 0;
    var param_3 = 10240;
    var value_5 = value_4;
    var msg_1 = (0, _String.toText)((0, _String.interpolate)("gl.texParameteri(%P(), %P(), %P())", [(0, _utilsFs.enumName)(_webgl_typesFs.GlTextureTargetT, target_1), (0, _utilsFs.enumName)(_webgl_typesFs.GlTextureParamT, param_3), value_5]));

    if ((0, _utilsFs.Debug_enabled)()) {
      (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg_1]));
    }

    gl.texParameteri(target_1, param_3, value_5);
  }

  var value_6 = data.WrapS;

  if (value_6 == null) {} else {
    var value_7 = value_6 | 0;
    var target_2 = vdata.Target | 0;
    var param_5 = 10242;
    var value_8 = value_7;
    var msg_2 = (0, _String.toText)((0, _String.interpolate)("gl.texParameteri(%P(), %P(), %P())", [(0, _utilsFs.enumName)(_webgl_typesFs.GlTextureTargetT, target_2), (0, _utilsFs.enumName)(_webgl_typesFs.GlTextureParamT, param_5), value_8]));

    if ((0, _utilsFs.Debug_enabled)()) {
      (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg_2]));
    }

    gl.texParameteri(target_2, param_5, value_8);
  }

  var value_9 = data.WrapT;

  if (value_9 == null) {} else {
    var value_10 = value_9 | 0;
    var target_3 = vdata.Target | 0;
    var param_7 = 10243;
    var value_11 = value_10;
    var msg_3 = (0, _String.toText)((0, _String.interpolate)("gl.texParameteri(%P(), %P(), %P())", [(0, _utilsFs.enumName)(_webgl_typesFs.GlTextureTargetT, target_3), (0, _utilsFs.enumName)(_webgl_typesFs.GlTextureParamT, param_7), value_11]));

    if ((0, _utilsFs.Debug_enabled)()) {
      (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg_3]));
    }

    gl.texParameteri(target_3, param_7, value_11);
  }

  var value_12 = data.WrapR;

  if (value_12 == null) {} else {
    var value_13 = value_12 | 0;
    var target_4 = vdata.Target | 0;
    var param_9 = 32882;
    var value_14 = value_13;
    var msg_4 = (0, _String.toText)((0, _String.interpolate)("gl.texParameteri(%P(), %P(), %P())", [(0, _utilsFs.enumName)(_webgl_typesFs.GlTextureTargetT, target_4), (0, _utilsFs.enumName)(_webgl_typesFs.GlTextureParamT, param_9), value_14]));

    if ((0, _utilsFs.Debug_enabled)()) {
      (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg_4]));
    }

    gl.texParameteri(target_4, param_9, value_14);
  }

  var value_15 = data.BaseLevel;

  if (value_15 == null) {} else {
    var value_16 = value_15 | 0;
    var target_5 = vdata.Target | 0;
    var param_11 = 33084;
    var value_17 = value_16;
    var msg_5 = (0, _String.toText)((0, _String.interpolate)("gl.texParameteri(%P(), %P(), %P())", [(0, _utilsFs.enumName)(_webgl_typesFs.GlTextureTargetT, target_5), (0, _utilsFs.enumName)(_webgl_typesFs.GlTextureParamT, param_11), value_17]));

    if ((0, _utilsFs.Debug_enabled)()) {
      (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg_5]));
    }

    gl.texParameteri(target_5, param_11, value_17);
  }

  var value_18 = data.CompareFunc;

  if (value_18 == null) {} else {
    var value_19 = value_18 | 0;
    var target_6 = vdata.Target | 0;
    var param_13 = 34893;
    var value_20 = value_19;
    var msg_6 = (0, _String.toText)((0, _String.interpolate)("gl.texParameteri(%P(), %P(), %P())", [(0, _utilsFs.enumName)(_webgl_typesFs.GlTextureTargetT, target_6), (0, _utilsFs.enumName)(_webgl_typesFs.GlTextureParamT, param_13), value_20]));

    if ((0, _utilsFs.Debug_enabled)()) {
      (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg_6]));
    }

    gl.texParameteri(target_6, param_13, value_20);
  }

  var value_21 = data.CompareMode;

  if (value_21 == null) {} else {
    var value_22 = value_21 | 0;
    var target_7 = vdata.Target | 0;
    var param_15 = 34892;
    var value_23 = value_22;
    var msg_7 = (0, _String.toText)((0, _String.interpolate)("gl.texParameteri(%P(), %P(), %P())", [(0, _utilsFs.enumName)(_webgl_typesFs.GlTextureTargetT, target_7), (0, _utilsFs.enumName)(_webgl_typesFs.GlTextureParamT, param_15), value_23]));

    if ((0, _utilsFs.Debug_enabled)()) {
      (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg_7]));
    }

    gl.texParameteri(target_7, param_15, value_23);
  }

  var value_24 = data.MaxLevel;

  if (value_24 == null) {} else {
    var value_25 = value_24 | 0;
    var target_8 = vdata.Target | 0;
    var param_17 = 33085;
    var value_26 = value_25;
    var msg_8 = (0, _String.toText)((0, _String.interpolate)("gl.texParameteri(%P(), %P(), %P())", [(0, _utilsFs.enumName)(_webgl_typesFs.GlTextureTargetT, target_8), (0, _utilsFs.enumName)(_webgl_typesFs.GlTextureParamT, param_17), value_26]));

    if ((0, _utilsFs.Debug_enabled)()) {
      (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg_8]));
    }

    gl.texParameteri(target_8, param_17, value_26);
  }

  var value_27 = data.MaxLod;

  if (value_27 == null) {} else {
    var value_28 = value_27;
    var target_9 = vdata.Target | 0;
    var param_19 = 33083;
    var value_29 = value_28;
    var msg_9 = (0, _String.toText)((0, _String.interpolate)("gl.texParameterf(%P(), %P(), %P())", [(0, _utilsFs.enumName)(_webgl_typesFs.GlTextureTargetT, target_9), (0, _utilsFs.enumName)(_webgl_typesFs.GlTextureParamT, param_19), value_29]));

    if ((0, _utilsFs.Debug_enabled)()) {
      (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg_9]));
    }

    gl.texParameterf(target_9, param_19, value_29);
  }

  var value_30 = data.MinLod;

  if (value_30 == null) {} else {
    var value_31 = value_30;
    var target_10 = vdata.Target | 0;
    var param_21 = 33082;
    var value_32 = value_31;
    var msg_10 = (0, _String.toText)((0, _String.interpolate)("gl.texParameterf(%P(), %P(), %P())", [(0, _utilsFs.enumName)(_webgl_typesFs.GlTextureTargetT, target_10), (0, _utilsFs.enumName)(_webgl_typesFs.GlTextureParamT, param_21), value_32]));

    if ((0, _utilsFs.Debug_enabled)()) {
      (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg_10]));
    }

    gl.texParameterf(target_10, param_21, value_32);
  }
}

function updateDataTexture(pixels, vdata, data) {
  (0, _webgl_typesFs.GlCommon_texImage2DData2)(vdata.Target, vdata.Level, vdata.InternalFormat, vdata.Width, vdata.Height, vdata.Format, vdata.DataType, (0, _typedarray_utilsFs.bufferView)(pixels), vdata.Offset, data.ParentObject.Scene.Canvas.Context);
  data.ParentObject.Scene.Canvas.Context.generateMipmap(vdata.Target);
  clean(data);
}

function updateImageTexture(pixels, vdata, data) {
  var isLoaded = pixels.complete ? pixels.naturalWidth !== 0 : false;

  if (isLoaded) {
    vdata.Width = pixels.naturalWidth;
    vdata.Height = pixels.naturalHeight;
    (0, _webgl_typesFs.GlCommon_texImage2DImage2)(vdata.Target, vdata.Level, vdata.InternalFormat, vdata.Width, vdata.Height, vdata.Format, vdata.DataType, pixels, data.ParentObject.Scene.Canvas.Context);
    data.ParentObject.Scene.Canvas.Context.generateMipmap(vdata.Target);
    clean(data);
  } else {
    var empty = emptyTextureData;
    (0, _webgl_typesFs.GlCommon_texImage2DData2)(vdata.Target, vdata.Level, empty.Format, empty.Width, empty.Height, empty.Format, empty.DataType, (0, _typedarray_utilsFs.bufferView)(empty.Data), vdata.Offset, data.ParentObject.Scene.Canvas.Context);
  }
}

function update(data) {
  var msg = (0, _String.toText)((0, _String.interpolate)("Texture %P().%P().update", [data.ParentObject.Name, data.Name]));

  if ((0, _utilsFs.Debug_enabled)()) {
    if ((0, _utilsFs.Debug_collapsible)()) {
      if ((0, _utilsFs.Debug_logCollapsed)()) {
        console.groupCollapsed(msg);
      } else {
        console.group(msg);
      }
    } else {
      if ((0, _utilsFs.Debug_enabled)()) {
        (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
      }

      if (!(0, _utilsFs.Debug_collapsible)()) {
        (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
      }
    }
  }

  var gl = data.ParentObject.Scene.Canvas.Context;
  var vdata = (0, _Option.defaultArg)(data.Link, data);
  gl.activeTexture(gl.TEXTURE0 + data.Index);
  gl.bindTexture(data.Target, data.TextureId);

  if (data.IsDirty) {
    var matchValue = vdata.Pixels;

    switch (matchValue.tag) {
      case 1:
        {
          (0, _utilsFs.throw$)("PixelImageData not implemented");
          break;
        }

      case 2:
        {
          var pixels_1 = matchValue.fields[0];
          updateImageTexture(pixels_1, vdata, data);
          break;
        }

      case 3:
        {
          (0, _utilsFs.throw$)("PixelCanvas not implemented");
          break;
        }

      case 4:
        {
          (0, _utilsFs.throw$)("PixelVideo not implemented");
          break;
        }

      case 5:
        {
          (0, _utilsFs.throw$)("PixelBitmap not implemented");
          break;
        }

      default:
        {
          var pixels = matchValue.fields[0];
          updateDataTexture(pixels, vdata, data);
        }
    }

    activateTexture(vdata, data);
  }

  if ((0, _utilsFs.Debug_collapsible)()) {
    console.groupEnd();
  } else {
    (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
  }
}

function pixelDataUint8(values) {
  return new _webgl_builder_interfacesFs.GlTextureProp(9, new _webgl_builder_interfacesFs.GlTexturePixels(0, (0, _typedarray_utilsFs.uint8Array)(values)));
}

function pixelImageId(id) {
  var img = document.getElementById(id);
  return new _webgl_builder_interfacesFs.GlTextureProp(9, new _webgl_builder_interfacesFs.GlTexturePixels(2, img));
}
},{"./.fable/fable-library.3.0.0/Types.js":"../src/.fable/fable-library.3.0.0/Types.js","./.fable/fable-library.3.0.0/Reflection.js":"../src/.fable/fable-library.3.0.0/Reflection.js","./typedarray_utils.fs.js":"../src/typedarray_utils.fs.js","./webgl_builder_interfaces.fs.js":"../src/webgl_builder_interfaces.fs.js","./.fable/fable-library.3.0.0/List.js":"../src/.fable/fable-library.3.0.0/List.js","./.fable/fable-library.3.0.0/String.js":"../src/.fable/fable-library.3.0.0/String.js","./utils.fs.js":"../src/utils.fs.js","./webgl_types.fs.js":"../src/webgl_types.fs.js","./.fable/fable-library.3.0.0/Option.js":"../src/.fable/fable-library.3.0.0/Option.js"}],"../src/globj.fs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.degreesToRadians = degreesToRadians;
exports.emptyObject = emptyObject;
exports._cleanLinkedBuffers = _cleanLinkedBuffers;
exports.create = create;
exports.delete$ = delete$;
exports.update = update;
exports.render = render;
exports.setInstanceCount = setInstanceCount;
exports.setAngle = setAngle;
exports.setAngleZ = setAngleZ;
exports.setAngleDegrees = setAngleDegrees;
exports.setAngleDegreesZ = setAngleDegreesZ;
exports.setPositionXYZ = setPositionXYZ;
exports.setPositionXY = setPositionXY;
exports.setPosition = setPosition;
exports.setScale = setScale;
exports.position2d = position2d;
exports.position2dv = position2dv;
exports.addTexture = exports.addAttribute = exports.addUniform = exports.addUbo = exports.tryGetTexture = exports.getTexture = exports.tryGetAttribute = exports.getAttribute = exports.tryGetUniform = exports.getUniform = exports.tryGetUbo = exports.getUbo = exports.dirtyParallax = exports.dirtyModel = exports.dirty = void 0;

var _Types = require("./.fable/fable-library.3.0.0/Types.js");

var _Reflection = require("./.fable/fable-library.3.0.0/Reflection.js");

var _webgl_builder_interfacesFs = require("./webgl_builder_interfaces.fs.js");

var _vectorsFs = require("./vectors.fs.js");

var _utilsFs = require("./utils.fs.js");

var _webgl_program_utilsFs = require("./webgl_program_utils.fs.js");

var _webgl_typesFs = require("./webgl_types.fs.js");

var _List = require("./.fable/fable-library.3.0.0/List.js");

var _matriciesFs = require("./matricies.fs.js");

var _optionexFs = require("./optionex.fs.js");

var _Seq = require("./.fable/fable-library.3.0.0/Seq.js");

var _glbufferFs = require("./glbuffer.fs.js");

var _String = require("./.fable/fable-library.3.0.0/String.js");

var _gluboFs = require("./glubo.fs.js");

var _Util = require("./.fable/fable-library.3.0.0/Util.js");

var _gluniformFs = require("./gluniform.fs.js");

var _Array = require("./.fable/fable-library.3.0.0/Array.js");

var _glsingleattributeFs = require("./glsingleattribute.fs.js");

var _Option = require("./.fable/fable-library.3.0.0/Option.js");

var _glcapabilitiesFs = require("./glcapabilities.fs.js");

var _glattribFs = require("./glattrib.fs.js");

var _glindiciesFs = require("./glindicies.fs.js");

var _glinterleaveattributeFs = require("./glinterleaveattribute.fs.js");

var _gltextureFs = require("./gltexture.fs.js");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Builder = /*#__PURE__*/function (_Record) {
  _inherits(Builder, _Record);

  var _super = _createSuper(Builder);

  function Builder(ParallaxCamera, LinkTo, UboCreators, UniformCreators, AttributeCreators, IndiciesCreator, TextureCreators, Data) {
    var _this;

    _classCallCheck(this, Builder);

    _this = _super.call(this);
    _this.ParallaxCamera = ParallaxCamera;
    _this.LinkTo = LinkTo;
    _this.UboCreators = UboCreators;
    _this.UniformCreators = UniformCreators;
    _this.AttributeCreators = AttributeCreators;
    _this.IndiciesCreator = IndiciesCreator;
    _this.TextureCreators = TextureCreators;
    _this.Data = Data;
    return _this;
  }

  return Builder;
}(_Types.Record);

function Builder$reflection() {
  return (0, _Reflection.record_type)("GlObj.Builder", [], Builder, function () {
    return [["ParallaxCamera", (0, _Reflection.option_type)(_Reflection.string_type)], ["LinkTo", (0, _Reflection.option_type)(_Reflection.string_type)], ["UboCreators", (0, _Reflection.list_type)((0, _Reflection.lambda_type)((0, _webgl_builder_interfacesFs.GlObjData$reflection)(), (0, _webgl_builder_interfacesFs.GlUboData$reflection)()))], ["UniformCreators", (0, _Reflection.list_type)((0, _Reflection.lambda_type)((0, _webgl_builder_interfacesFs.GlObjData$reflection)(), (0, _webgl_builder_interfacesFs.GlUniformData$reflection)()))], ["AttributeCreators", (0, _Reflection.list_type)((0, _Reflection.lambda_type)((0, _webgl_builder_interfacesFs.GlObjData$reflection)(), (0, _webgl_builder_interfacesFs.GlRootAttribute$reflection)()))], ["IndiciesCreator", (0, _Reflection.option_type)((0, _Reflection.lambda_type)((0, _webgl_builder_interfacesFs.GlObjData$reflection)(), (0, _webgl_builder_interfacesFs.GlIndiciesData$reflection)()))], ["TextureCreators", (0, _Reflection.list_type)((0, _Reflection.lambda_type)((0, _webgl_builder_interfacesFs.GlObjData$reflection)(), (0, _webgl_builder_interfacesFs.GlTextureData$reflection)()))], ["Data", (0, _webgl_builder_interfacesFs.GlObjData$reflection)()]];
  });
}

var dirty = function dirty(data) {
  (0, _webgl_builder_interfacesFs.GlCommon_dirtyObject)(data);
};

exports.dirty = dirty;

var dirtyModel = function dirtyModel(data) {
  (0, _webgl_builder_interfacesFs.GlCommon_dirtyModel)(data);
};

exports.dirtyModel = dirtyModel;

var dirtyParallax = function dirtyParallax(data) {
  (0, _webgl_builder_interfacesFs.GlCommon_dirtyParallax)(data);
};

exports.dirtyParallax = dirtyParallax;

function degreesToRadians(angle) {
  return (0, _vectorsFs.Vec3Module_vec3)(angle.values[0] * 1 * _utilsFs.RAD_PER_DEG, angle.values[1] * 1 * _utilsFs.RAD_PER_DEG, angle.values[2] * 1 * _utilsFs.RAD_PER_DEG);
}

function emptyObject(scene) {
  return new _webgl_builder_interfacesFs.GlObjData(0, "", (0, _webgl_program_utilsFs.emptyProgramInfo)(scene.Canvas.Context), true, scene, new _webgl_typesFs.GlDrawMethod(4), 4, -1, 0, 0, 0, 0, 0, 0, (0, _List.empty)(), (0, _List.empty)(), (0, _List.empty)(), (0, _List.empty)(), void 0, (0, _List.empty)(), (0, _List.empty)(), (0, _List.empty)(), null, false, -1, void 0, 1, (0, _vectorsFs.Vec3_Create)(), (0, _vectorsFs.Vec3_Create)(), (0, _vectorsFs.Vec3_Create)(), (0, _vectorsFs.Vec3_Create)(), 1, (0, _matriciesFs.Mat4_Create)(), void 0, void 0, void 0, (0, _List.empty)(), true, true, true, true, true, true);
}

var getUbo = function getUbo(name) {
  return function (data) {
    return (0, _webgl_builder_interfacesFs.GlCommon_getUbo)(name, data);
  };
};

exports.getUbo = getUbo;

var tryGetUbo = function tryGetUbo(name) {
  return function (data) {
    return (0, _webgl_builder_interfacesFs.GlCommon_tryGetUbo)(name, data);
  };
};

exports.tryGetUbo = tryGetUbo;

var getUniform = function getUniform(name) {
  return function (data) {
    return (0, _webgl_builder_interfacesFs.GlCommon_getUniform)(name, data);
  };
};

exports.getUniform = getUniform;

var tryGetUniform = function tryGetUniform(name) {
  return function (data) {
    return (0, _webgl_builder_interfacesFs.GlCommon_tryGetUniform)(name, data);
  };
};

exports.tryGetUniform = tryGetUniform;

var getAttribute = function getAttribute(name) {
  return function (data) {
    return (0, _webgl_builder_interfacesFs.GlCommon_getAttribute)(name, data);
  };
};

exports.getAttribute = getAttribute;

var tryGetAttribute = function tryGetAttribute(name) {
  return function (data) {
    return (0, _webgl_builder_interfacesFs.GlCommon_tryGetAttribute)(name, data);
  };
};

exports.tryGetAttribute = tryGetAttribute;

var getTexture = function getTexture(name) {
  return function (data) {
    return (0, _webgl_builder_interfacesFs.GlCommon_getTexture)(name, data);
  };
};

exports.getTexture = getTexture;

var tryGetTexture = function tryGetTexture(name) {
  return function (data) {
    return (0, _webgl_builder_interfacesFs.GlCommon_tryGetTexture)(name, data);
  };
};

exports.tryGetTexture = tryGetTexture;

var addUbo = function addUbo(creator) {
  return function (data) {
    return (0, _webgl_builder_interfacesFs.GlCommon_addUbo)(creator, data);
  };
};

exports.addUbo = addUbo;

var addUniform = function addUniform(creator) {
  return function (data) {
    return (0, _webgl_builder_interfacesFs.GlCommon_addUniform)(creator, data);
  };
};

exports.addUniform = addUniform;

var addAttribute = function addAttribute(creator) {
  return function (data) {
    return (0, _webgl_builder_interfacesFs.GlCommon_addAttribute)(creator, data);
  };
};

exports.addAttribute = addAttribute;

var addTexture = function addTexture(creator) {
  return function (data) {
    return (0, _webgl_builder_interfacesFs.GlCommon_addTexture)(creator, data);
  };
};

exports.addTexture = addTexture;

function tryGetParentUbo(name, data) {
  var matchValue = (0, _optionexFs.executeDefault)(void 0, tryGetUbo(name), data.Parent);

  if (matchValue == null) {
    return (0, _optionexFs.executeDefault)(void 0, function (data_1) {
      return tryGetParentUbo(name, data_1);
    }, data.Parent);
  } else {
    var result = matchValue;
    return result;
  }
}

function tryGetParentUniform(name, data) {
  var matchValue = (0, _optionexFs.executeDefault)(void 0, tryGetUniform(name), data.Parent);

  if (matchValue == null) {
    return (0, _optionexFs.executeDefault)(void 0, function (data_1) {
      return tryGetParentUniform(name, data_1);
    }, data.Parent);
  } else {
    var result = matchValue;
    return result;
  }
}

function getParentAttribute(name, data) {
  var matchValue = (0, _optionexFs.executeDefault)(void 0, tryGetAttribute(name), data.Parent);

  if (matchValue == null) {
    return (0, _optionexFs.executeDefault)(void 0, function (data_1) {
      return getParentAttribute(name, data_1);
    }, data.Parent);
  } else {
    var result = matchValue;
    return result;
  }
}

function _cleanLinkedBuffers(data) {
  (0, _Seq.iterate)(function (a_1) {
    (0, _glbufferFs.GlBuffer__Clean_Z1FBCCD16)(a_1.Buffer, true);
  }, (0, _Seq.where)(function (a) {
    return (0, _List.length)(a.LinkedChildren) > 0;
  }, (0, _webgl_builder_interfacesFs.GlCommon_allAttributes)(data)));
  var matchValue = data.Indicies;

  if (matchValue == null) {} else {
    var a_2 = matchValue;

    if ((0, _List.length)(a_2.LinkedChildren) > 0) {
      (0, _glbufferFs.GlBuffer__Clean_Z1FBCCD16)(a_2.Buffer, true);
    }
  }
}

function addLinkedUbos(data) {
  var addLinkedUbo = function addLinkedUbo(data_1, parent) {
    var msg = (0, _String.toText)((0, _String.interpolate)("Link UBO %P() to %P()", [(0, _webgl_builder_interfacesFs.GlUboData__get_Name)(parent), (0, _webgl_builder_interfacesFs.GlCommon_objectDebugName)(parent.ParentObject)]));

    if ((0, _utilsFs.Debug_enabled)()) {
      (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
    }

    data_1.Ubos = (0, _List.cons)((0, _gluboFs.createLinked)(parent, data_1), data_1.Ubos);
  };

  var source_2 = (0, _Seq.choose)(function (info_1) {
    return tryGetParentUbo(info_1.Name, data);
  }, (0, _Seq.where)(function (info) {
    return tryGetUbo(info.Name)(data) == null;
  }, data.ProgramInfo.Ubos));
  (0, _Seq.iterate)((0, _Util.partialApply)(1, addLinkedUbo, [data]), source_2);
  return data;
}

function addLinkedUniforms(data) {
  var source_2;

  var createLinkedUniform = function createLinkedUniform(data_1, parent) {
    var msg = (0, _String.toText)((0, _String.interpolate)("Link uniform %P() to %P()", [(0, _webgl_builder_interfacesFs.GlUniformData__get_Name)(parent), (0, _webgl_builder_interfacesFs.GlCommon_objectDebugName)(parent.ParentObject)]));

    if ((0, _utilsFs.Debug_enabled)()) {
      (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
    }

    return (0, _gluniformFs.createLinked)(parent, data_1);
  };

  var assignUniforms = function assignUniforms(uniforms) {
    data.Uniforms = uniforms;
    return data;
  };

  return assignUniforms((0, _List.ofSeq)((0, _Seq.append)(data.Uniforms, (source_2 = (0, _Seq.choose)(function (info_1) {
    return tryGetParentUniform(info_1.Name, data);
  }, (0, _Seq.where)(function (info) {
    return tryGetUniform(info.Name)(data) == null;
  }, data.ProgramInfo.Uniforms)), (0, _Seq.map)((0, _Util.partialApply)(1, createLinkedUniform, [data]), source_2)))));
}

function addLinkedAttributes(data) {
  var source_2;

  var createLinkedAttribute = function createLinkedAttribute(data_1, parent) {
    var msg = (0, _String.toText)((0, _String.interpolate)("Link attribute %P() to %P()", [(0, _webgl_builder_interfacesFs.GlAttributeData__get_Name)(parent), (0, _webgl_builder_interfacesFs.GlCommon_objectDebugName)(parent.ParentObject)]));

    if ((0, _utilsFs.Debug_enabled)()) {
      (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
    }

    if (parent.Kind.tag === 0) {
      return new _webgl_builder_interfacesFs.GlRootAttribute(0, (0, _webgl_builder_interfacesFs.GlAttribCommon_createLinked)(parent, data_1));
    } else {
      return new _webgl_builder_interfacesFs.GlRootAttribute(1, (0, _webgl_builder_interfacesFs.GlAttribCommon_createLinked)(parent, data_1));
    }
  };

  var assignAttributes = function assignAttributes(attributes) {
    data.Attributes = attributes;
    return data;
  };

  return assignAttributes((0, _List.ofSeq)((0, _Seq.append)(data.Attributes, (source_2 = (0, _Seq.choose)(function (info_1) {
    return getParentAttribute(info_1.Name, data);
  }, (0, _Seq.where)(function (info) {
    return tryGetAttribute(info.Name)(data) == null;
  }, data.ProgramInfo.Attributes)), (0, _Seq.map)((0, _Util.partialApply)(1, createLinkedAttribute, [data]), source_2)))));
}

function addLinkedObjects(data) {
  if (data.Parent != null) {
    return addLinkedAttributes(addLinkedUniforms(addLinkedUbos(data)));
  } else {
    return data;
  }
}

function addDynamicUbos(data) {
  var addDynamicUbo = function addDynamicUbo(data_1, info) {
    data_1.Ubos = (0, _List.cons)((0, _gluboFs.createFrom)(info, (0, _List.empty)(), data_1), data_1.Ubos);
  };

  var source_1 = (0, _Seq.where)(function (info_1) {
    return tryGetUbo(info_1.Name)(data) == null;
  }, data.ProgramInfo.Ubos);
  (0, _Seq.iterate)((0, _Util.partialApply)(1, addDynamicUbo, [data]), source_1);
  return data;
}

function getDefaultValue(info) {
  var count = info.ElementCount * info.Length | 0;
  var matchValue = info.Type | 0;

  switch (matchValue) {
    case 0:
      {
        throw new Error("Uniform type not initialized");
      }

    case 5120:
    case 5121:
    case 5122:
    case 5123:
    case 5125:
    case 36294:
    case 36295:
    case 36296:
      {
        return new Uint32Array(count);
      }

    case 5124:
    case 35667:
    case 35668:
    case 35669:
    case 35678:
    case 35679:
    case 35680:
    case 35682:
    case 36289:
    case 36292:
    case 36293:
    case 36298:
    case 36299:
    case 36300:
    case 36303:
    case 36306:
    case 36307:
    case 36308:
    case 36311:
      {
        return new Int32Array(count);
      }

    case 5126:
    case 5131:
    case 35664:
    case 35665:
    case 35666:
    case 35674:
    case 35675:
    case 35676:
    case 35685:
    case 35686:
    case 35687:
    case 35688:
    case 35689:
    case 35690:
      {
        return new Float64Array(count);
      }

    case 35670:
    case 35671:
    case 35672:
    case 35673:
      {
        return (0, _Array.fill)(new Array(count), 0, count, false);
      }

    default:
      {
        throw new Error("Uniform type not initialized");
      }
  }
}

function addDynamicUniforms(data) {
  var source_1;

  var createDynamicUniform = function createDynamicUniform(data_1, info) {
    return (0, _gluniformFs.createFrom)(info, (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, getDefaultValue(info))), data_1);
  };

  var assignUniforms = function assignUniforms(uniforms) {
    data.Uniforms = uniforms;
    return data;
  };

  return assignUniforms((0, _List.ofSeq)((0, _Seq.append)(data.Uniforms, (source_1 = (0, _Seq.where)(function (info_1) {
    return tryGetUniform(info_1.Name)(data) == null;
  }, data.ProgramInfo.Uniforms), (0, _Seq.map)((0, _Util.partialApply)(1, createDynamicUniform, [data]), source_1)))));
}

function addDynamicAttributes(data) {
  var source_3;

  var createDynamicAttribute = function createDynamicAttribute(data_1, info) {
    var msg = (0, _String.toText)((0, _String.interpolate)("Adding dynamic attribute %P() to %P()", [info.Name, (0, _webgl_builder_interfacesFs.GlCommon_objectDebugName)(data_1)]));

    if ((0, _utilsFs.Debug_enabled)()) {
      (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
    }

    return (0, _glsingleattributeFs.createFrom)(info, (0, _List.empty)(), data_1);
  };

  var assignAttributes = function assignAttributes(attributes) {
    data.Attributes = attributes;
    return data;
  };

  console.log((0, _Option.some)((0, _String.toText)((0, _String.interpolate)("******* %P() before add dynamic attributes %P()", [data.Name, (0, _List.length)((0, _List.ofSeq)((0, _webgl_builder_interfacesFs.GlCommon_allAttributes)(data)))]))));
  (0, _Seq.iterate)(function (a) {
    console.log((0, _Option.some)((0, _String.toText)((0, _String.interpolate)("%P() children count %P()", [(0, _webgl_builder_interfacesFs.GlAttributeData__get_Name)(a), (0, _List.length)(a.ChildAttributes)]))));
    (0, _List.iterate)(function (c) {
      console.log((0, _Option.some)((0, _String.toText)((0, _String.interpolate)("%P().%P(): Offset %P()", [data.Name, (0, _webgl_builder_interfacesFs.GlAttributeData__get_Name)(c), c.Offset]))));
    }, a.ChildAttributes);
  }, (0, _webgl_builder_interfacesFs.GlCommon_allAttributes)(data));
  return assignAttributes((0, _List.ofSeq)((0, _Seq.append)(data.Attributes, (source_3 = (0, _Seq.where)(function (info_1) {
    return tryGetAttribute(info_1.Name)(data) == null;
  }, data.ProgramInfo.Attributes), (0, _Seq.map)((0, _Util.partialApply)(1, createDynamicAttribute, [data]), source_3)))));
}

function addDynamicObjects(data) {
  return addDynamicAttributes(addDynamicUniforms(addDynamicUbos(data)));
}

function calcVertexCountAttributes(data) {
  var result = (0, _List.ofSeq)((0, _Seq.filter)(function (a) {
    return a.DeterminesVertexCount;
  }, (0, _webgl_builder_interfacesFs.GlCommon_allAttributes)(data)));

  if (result.tail == null) {
    var matchValue = data.Attributes;

    if (matchValue.tail != null) {
      var first = matchValue.head;
      var a_1 = (0, _webgl_builder_interfacesFs.GlCommon_getAttributeData)(first);
      return (0, _List.singleton)(a_1);
    } else {
      return (0, _List.empty)();
    }
  } else {
    var a_2 = result;
    return a_2;
  }
}

function calcInstanceCountAttributes(data) {
  return (0, _List.ofSeq)((0, _Seq.filter)(function (a) {
    return a.DeterminesInstanceCount;
  }, (0, _webgl_builder_interfacesFs.GlCommon_allAttributes)(data)));
}

function applyUbo(creator, data) {
  var value = addUbo(creator)(data);
  void value;
  return data;
}

function applyUniform(creator, data) {
  var value = addUniform(creator)(data);
  void value;
  return data;
}

function applyAttribute(creator, data) {
  var value = addAttribute(creator)(data);
  void value;
  return data;
}

function applyTexture(creator, data) {
  var value = addTexture(creator)(data);
  void value;
  return data;
}

function linkTo(parent, data) {
  var data_1 = new _webgl_builder_interfacesFs.GlObjData(data.Id, data.Name, data.ProgramInfo, data.IsDirty, data.Scene, data.DrawMethod, data.DrawPrimitive, data.VertexCount, data.VertexOffset, data.VertexCountOffset, data.InstanceCount, data.InstanceOffset, data.InstanceCountOffset, data.IndiciesOffset, data.Capabilities, data.Uniforms, data.Ubos, data.Attributes, data.Indicies, data.Textures, data.VertexCountAttributes, data.InstanceCountAttributes, data.Vao, data.ProcessLinked, data.Layer, data.ParallaxCamera, data.ParallaxDistance, data.ParallaxOffset, data.ParallaxLastPosition, data.Angle, data.Position, data.Scale, data.ModelMatrix, data.ParallaxMatrix, data.Parent, parent, data.LinkedChildren, data.IsModelDirty, data.IsParallaxDirty, data.RecalcNeeded, data.CalcDrawMethod, data.CalcVertexCount, data.CalcInstanceCount);
  parent.LinkedChildren = (0, _List.cons)(data_1, parent.LinkedChildren);
  return data_1;
}

function processLink(builder) {
  var matchValue = builder.LinkTo;

  if (matchValue != null) {
    var objectName = matchValue;

    if (!(0, _String.isNullOrWhiteSpace)(objectName)) {
      var data = builder.Data;
      var globj = (0, _webgl_builder_interfacesFs.GlCommon_getObject)(objectName, data.Scene);
      builder.Data = linkTo(globj, data);
    }

    return builder;
  } else {
    return builder;
  }
}

function applyCreators(builder) {
  var data = builder.Data;

  var createUniform = function createUniform(creator) {
    return creator(data);
  };

  var createUbo = function createUbo(creator_1) {
    return creator_1(data);
  };

  var createAttribute = function createAttribute(creator_2) {
    return creator_2(data);
  };

  var createIndicies = function createIndicies(creator_3) {
    return creator_3(data);
  };

  var createTexture = function createTexture(creator_4) {
    return creator_4(data);
  };

  data.Uniforms = (0, _List.map)(createUniform, builder.UniformCreators);
  data.Ubos = (0, _List.map)(createUbo, builder.UboCreators);
  console.group((0, _String.toText)((0, _String.interpolate)("******* %P().applyCreators...", [data.Name])));
  data.Attributes = (0, _List.map)(createAttribute, builder.AttributeCreators);
  (0, _optionexFs.call)(function (c) {
    data.Indicies = createIndicies(c);
  }, builder.IndiciesCreator);
  data.Textures = (0, _List.map)(createTexture, (0, _List.reverse)(builder.TextureCreators));
  data.VertexCountAttributes = calcVertexCountAttributes(data);
  data.InstanceCountAttributes = calcInstanceCountAttributes(data);
  console.log((0, _Option.some)((0, _String.toText)((0, _String.interpolate)("******* %P().applyCreators %P()", [data.Name, (0, _List.length)((0, _List.ofSeq)((0, _webgl_builder_interfacesFs.GlCommon_allAttributes)(data)))]))));
  (0, _Seq.iterate)(function (a) {
    console.log((0, _Option.some)((0, _String.toText)((0, _String.interpolate)("%P() children count %P()", [(0, _webgl_builder_interfacesFs.GlAttributeData__get_Name)(a), (0, _List.length)(a.ChildAttributes)]))));
    (0, _List.iterate)(function (c_1) {
      console.log((0, _Option.some)((0, _String.toText)((0, _String.interpolate)("%P().%P(): Offset %P()", [data.Name, (0, _webgl_builder_interfacesFs.GlAttributeData__get_Name)(c_1), c_1.Offset]))));
    }, a.ChildAttributes);
  }, (0, _webgl_builder_interfacesFs.GlCommon_allAttributes)(data));
  console.log((0, _Option.some)("groupEnd"));
  console.groupEnd();
  return data;
}

function build(builder) {
  var sortChildren = function sortChildren(data) {
    var getAttribIndex = function getAttribIndex(att) {
      var pattern_matching_result, a;

      if (att.tag === 1) {
        pattern_matching_result = 0;
        a = att.fields[0];
      } else {
        pattern_matching_result = 0;
        a = att.fields[0];
      }

      switch (pattern_matching_result) {
        case 0:
          {
            return a.Info.Index | 0;
          }
      }
    };

    data.Uniforms = (0, _List.sortBy)(function (u) {
      return u.Info.Index;
    }, data.Uniforms, {
      Compare: _Util.comparePrimitives
    });
    data.Ubos = (0, _List.sortBy)(function (u_1) {
      return u_1.Info.BlockIndex;
    }, data.Ubos, {
      Compare: _Util.comparePrimitives
    });
    data.Attributes = (0, _List.sortBy)(getAttribIndex, data.Attributes, {
      Compare: _Util.comparePrimitives
    });
    data.Id = 5;
    return data;
  };

  var applyCalculations = function applyCalculations(builder_1) {
    var name;
    var data_1 = builder_1.Data;
    var parallaxCamera;
    var matchValue = builder_1.ParallaxCamera;

    if (matchValue != null) {
      if (name = matchValue, (0, _String.isNullOrWhiteSpace)(name)) {
        var name_1 = matchValue;
        parallaxCamera = void 0;
      } else if (matchValue != null) {
        var name_2 = matchValue;
        parallaxCamera = (0, _webgl_builder_interfacesFs.GlCommon_getCamera)(name_2, data_1.Scene);
      } else {
        throw new Error("The match cases were incomplete");
      }
    } else {
      parallaxCamera = void 0;
    }

    var parallaxPosition;

    if (parallaxCamera != null) {
      var cam = parallaxCamera;
      parallaxPosition = (0, _vectorsFs.Vec3__Clone)(cam.Position);
    } else {
      parallaxPosition = data_1.ParallaxLastPosition;
    }

    var parallaxMatrix = (0, _optionexFs.execute)(function (_arg1) {
      return (0, _matriciesFs.Mat4_Create)();
    }, parallaxCamera);
    var layer = ((data_1.Layer >= 0 ? data_1.Layer < data_1.Scene.Layers.length : false) ? data_1.Layer : data_1.Scene.DefaultLayer) | 0;
    builder_1.Data = new _webgl_builder_interfacesFs.GlObjData(data_1.Id, data_1.Name, data_1.ProgramInfo, data_1.IsDirty, data_1.Scene, data_1.DrawMethod, data_1.DrawPrimitive, data_1.VertexCount, data_1.VertexOffset, data_1.VertexCountOffset, data_1.InstanceCount, data_1.InstanceOffset, data_1.InstanceCountOffset, data_1.IndiciesOffset, (0, _List.append)((0, _glcapabilitiesFs.defaultCapabilities)(), data_1.Capabilities), data_1.Uniforms, data_1.Ubos, data_1.Attributes, data_1.Indicies, data_1.Textures, data_1.VertexCountAttributes, data_1.InstanceCountAttributes, data_1.Vao, data_1.ProcessLinked, layer, parallaxCamera, data_1.ParallaxDistance, data_1.ParallaxOffset, parallaxPosition, data_1.Angle, data_1.Position, data_1.Scale, data_1.ModelMatrix, parallaxMatrix, data_1.Parent, data_1.Link, data_1.LinkedChildren, data_1.IsModelDirty, data_1.IsParallaxDirty, data_1.RecalcNeeded, (0, _Util.equalsSafe)(builder_1.Data.DrawMethod, new _webgl_typesFs.GlDrawMethod(4)), builder_1.Data.VertexCount < 0, builder_1.Data.InstanceCount <= 0);
    return builder_1;
  };

  return sortChildren(addDynamicObjects(addLinkedObjects(applyCreators(processLink(applyCalculations(builder))))));
}

function apply(props, builder) {
  var loop = function loop(props_1_mut, b_mut) {
    var inputRecord_1, inputRecord_2, inputRecord_3, inputRecord_4, inputRecord_5, inputRecord_6, inputRecord_7, inputRecord_8, inputRecord_9, inputRecord_10, inputRecord_11, inputRecord_12, inputRecord_13, inputRecord_14, inputRecord_15, inputRecord_16, _, inputRecord_17, __1, value_2, inputRecord_18, inputRecord_19, inputRecord;

    var _loop = function _loop() {
      var props_1 = props_1_mut,
          b = b_mut;

      var updateData = function updateData(data) {
        b.Data = data;
        return b;
      };

      var addParallaxCam = function addParallaxCam(c) {
        b.ParallaxCamera = c;
        return b;
      };

      var addLink = function addLink(s) {
        b.LinkTo = s;
        return b;
      };

      var addUniform_1 = function addUniform_1(creator) {
        b.UniformCreators = (0, _List.cons)(creator, b.UniformCreators);
        return b;
      };

      var addUbo_1 = function addUbo_1(creator_1) {
        b.UboCreators = (0, _List.cons)(creator_1, b.UboCreators);
        return b;
      };

      var addAttribute_1 = function addAttribute_1(creator_2) {
        b.AttributeCreators = (0, _List.cons)(creator_2, b.AttributeCreators);
        return b;
      };

      var addIndicies = function addIndicies(creator_3) {
        b.IndiciesCreator = creator_3;
        return b;
      };

      var addTexture_1 = function addTexture_1(creator_4) {
        b.TextureCreators = (0, _List.cons)(creator_4, b.TextureCreators);
        return b;
      };

      if (props_1.tail != null) {
        var t = props_1.tail;
        var h = props_1.head;

        switch (h.tag) {
          case 1:
            {
              var x_1 = h.fields[0];
              props_1_mut = t;
              b_mut = updateData((inputRecord_1 = b.Data, new _webgl_builder_interfacesFs.GlObjData(inputRecord_1.Id, inputRecord_1.Name, inputRecord_1.ProgramInfo, inputRecord_1.IsDirty, inputRecord_1.Scene, x_1, inputRecord_1.DrawPrimitive, inputRecord_1.VertexCount, inputRecord_1.VertexOffset, inputRecord_1.VertexCountOffset, inputRecord_1.InstanceCount, inputRecord_1.InstanceOffset, inputRecord_1.InstanceCountOffset, inputRecord_1.IndiciesOffset, inputRecord_1.Capabilities, inputRecord_1.Uniforms, inputRecord_1.Ubos, inputRecord_1.Attributes, inputRecord_1.Indicies, inputRecord_1.Textures, inputRecord_1.VertexCountAttributes, inputRecord_1.InstanceCountAttributes, inputRecord_1.Vao, inputRecord_1.ProcessLinked, inputRecord_1.Layer, inputRecord_1.ParallaxCamera, inputRecord_1.ParallaxDistance, inputRecord_1.ParallaxOffset, inputRecord_1.ParallaxLastPosition, inputRecord_1.Angle, inputRecord_1.Position, inputRecord_1.Scale, inputRecord_1.ModelMatrix, inputRecord_1.ParallaxMatrix, inputRecord_1.Parent, inputRecord_1.Link, inputRecord_1.LinkedChildren, inputRecord_1.IsModelDirty, inputRecord_1.IsParallaxDirty, inputRecord_1.RecalcNeeded, inputRecord_1.CalcDrawMethod, inputRecord_1.CalcVertexCount, inputRecord_1.CalcInstanceCount)));
              return "continue|loop";
            }

          case 2:
            {
              var x_2 = h.fields[0] | 0;
              props_1_mut = t;
              b_mut = updateData((inputRecord_2 = b.Data, new _webgl_builder_interfacesFs.GlObjData(inputRecord_2.Id, inputRecord_2.Name, inputRecord_2.ProgramInfo, inputRecord_2.IsDirty, inputRecord_2.Scene, inputRecord_2.DrawMethod, x_2, inputRecord_2.VertexCount, inputRecord_2.VertexOffset, inputRecord_2.VertexCountOffset, inputRecord_2.InstanceCount, inputRecord_2.InstanceOffset, inputRecord_2.InstanceCountOffset, inputRecord_2.IndiciesOffset, inputRecord_2.Capabilities, inputRecord_2.Uniforms, inputRecord_2.Ubos, inputRecord_2.Attributes, inputRecord_2.Indicies, inputRecord_2.Textures, inputRecord_2.VertexCountAttributes, inputRecord_2.InstanceCountAttributes, inputRecord_2.Vao, inputRecord_2.ProcessLinked, inputRecord_2.Layer, inputRecord_2.ParallaxCamera, inputRecord_2.ParallaxDistance, inputRecord_2.ParallaxOffset, inputRecord_2.ParallaxLastPosition, inputRecord_2.Angle, inputRecord_2.Position, inputRecord_2.Scale, inputRecord_2.ModelMatrix, inputRecord_2.ParallaxMatrix, inputRecord_2.Parent, inputRecord_2.Link, inputRecord_2.LinkedChildren, inputRecord_2.IsModelDirty, inputRecord_2.IsParallaxDirty, inputRecord_2.RecalcNeeded, inputRecord_2.CalcDrawMethod, inputRecord_2.CalcVertexCount, inputRecord_2.CalcInstanceCount)));
              return "continue|loop";
            }

          case 3:
            {
              var x_3 = h.fields[0] | 0;
              props_1_mut = t;
              b_mut = updateData((inputRecord_3 = b.Data, new _webgl_builder_interfacesFs.GlObjData(inputRecord_3.Id, inputRecord_3.Name, inputRecord_3.ProgramInfo, inputRecord_3.IsDirty, inputRecord_3.Scene, inputRecord_3.DrawMethod, inputRecord_3.DrawPrimitive, x_3, inputRecord_3.VertexOffset, inputRecord_3.VertexCountOffset, inputRecord_3.InstanceCount, inputRecord_3.InstanceOffset, inputRecord_3.InstanceCountOffset, inputRecord_3.IndiciesOffset, inputRecord_3.Capabilities, inputRecord_3.Uniforms, inputRecord_3.Ubos, inputRecord_3.Attributes, inputRecord_3.Indicies, inputRecord_3.Textures, inputRecord_3.VertexCountAttributes, inputRecord_3.InstanceCountAttributes, inputRecord_3.Vao, inputRecord_3.ProcessLinked, inputRecord_3.Layer, inputRecord_3.ParallaxCamera, inputRecord_3.ParallaxDistance, inputRecord_3.ParallaxOffset, inputRecord_3.ParallaxLastPosition, inputRecord_3.Angle, inputRecord_3.Position, inputRecord_3.Scale, inputRecord_3.ModelMatrix, inputRecord_3.ParallaxMatrix, inputRecord_3.Parent, inputRecord_3.Link, inputRecord_3.LinkedChildren, inputRecord_3.IsModelDirty, inputRecord_3.IsParallaxDirty, inputRecord_3.RecalcNeeded, inputRecord_3.CalcDrawMethod, inputRecord_3.CalcVertexCount, inputRecord_3.CalcInstanceCount)));
              return "continue|loop";
            }

          case 4:
            {
              var x_4 = h.fields[0] | 0;
              props_1_mut = t;
              b_mut = updateData((inputRecord_4 = b.Data, new _webgl_builder_interfacesFs.GlObjData(inputRecord_4.Id, inputRecord_4.Name, inputRecord_4.ProgramInfo, inputRecord_4.IsDirty, inputRecord_4.Scene, inputRecord_4.DrawMethod, inputRecord_4.DrawPrimitive, inputRecord_4.VertexCount, x_4, inputRecord_4.VertexCountOffset, inputRecord_4.InstanceCount, inputRecord_4.InstanceOffset, inputRecord_4.InstanceCountOffset, inputRecord_4.IndiciesOffset, inputRecord_4.Capabilities, inputRecord_4.Uniforms, inputRecord_4.Ubos, inputRecord_4.Attributes, inputRecord_4.Indicies, inputRecord_4.Textures, inputRecord_4.VertexCountAttributes, inputRecord_4.InstanceCountAttributes, inputRecord_4.Vao, inputRecord_4.ProcessLinked, inputRecord_4.Layer, inputRecord_4.ParallaxCamera, inputRecord_4.ParallaxDistance, inputRecord_4.ParallaxOffset, inputRecord_4.ParallaxLastPosition, inputRecord_4.Angle, inputRecord_4.Position, inputRecord_4.Scale, inputRecord_4.ModelMatrix, inputRecord_4.ParallaxMatrix, inputRecord_4.Parent, inputRecord_4.Link, inputRecord_4.LinkedChildren, inputRecord_4.IsModelDirty, inputRecord_4.IsParallaxDirty, inputRecord_4.RecalcNeeded, inputRecord_4.CalcDrawMethod, inputRecord_4.CalcVertexCount, inputRecord_4.CalcInstanceCount)));
              return "continue|loop";
            }

          case 5:
            {
              var x_5 = h.fields[0] | 0;
              props_1_mut = t;
              b_mut = updateData((inputRecord_5 = b.Data, new _webgl_builder_interfacesFs.GlObjData(inputRecord_5.Id, inputRecord_5.Name, inputRecord_5.ProgramInfo, inputRecord_5.IsDirty, inputRecord_5.Scene, inputRecord_5.DrawMethod, inputRecord_5.DrawPrimitive, inputRecord_5.VertexCount, inputRecord_5.VertexOffset, x_5, inputRecord_5.InstanceCount, inputRecord_5.InstanceOffset, inputRecord_5.InstanceCountOffset, inputRecord_5.IndiciesOffset, inputRecord_5.Capabilities, inputRecord_5.Uniforms, inputRecord_5.Ubos, inputRecord_5.Attributes, inputRecord_5.Indicies, inputRecord_5.Textures, inputRecord_5.VertexCountAttributes, inputRecord_5.InstanceCountAttributes, inputRecord_5.Vao, inputRecord_5.ProcessLinked, inputRecord_5.Layer, inputRecord_5.ParallaxCamera, inputRecord_5.ParallaxDistance, inputRecord_5.ParallaxOffset, inputRecord_5.ParallaxLastPosition, inputRecord_5.Angle, inputRecord_5.Position, inputRecord_5.Scale, inputRecord_5.ModelMatrix, inputRecord_5.ParallaxMatrix, inputRecord_5.Parent, inputRecord_5.Link, inputRecord_5.LinkedChildren, inputRecord_5.IsModelDirty, inputRecord_5.IsParallaxDirty, inputRecord_5.RecalcNeeded, inputRecord_5.CalcDrawMethod, inputRecord_5.CalcVertexCount, inputRecord_5.CalcInstanceCount)));
              return "continue|loop";
            }

          case 6:
            {
              var x_6 = h.fields[0] | 0;
              props_1_mut = t;
              b_mut = updateData((inputRecord_6 = b.Data, new _webgl_builder_interfacesFs.GlObjData(inputRecord_6.Id, inputRecord_6.Name, inputRecord_6.ProgramInfo, inputRecord_6.IsDirty, inputRecord_6.Scene, inputRecord_6.DrawMethod, inputRecord_6.DrawPrimitive, inputRecord_6.VertexCount, inputRecord_6.VertexOffset, inputRecord_6.VertexCountOffset, x_6, inputRecord_6.InstanceOffset, inputRecord_6.InstanceCountOffset, inputRecord_6.IndiciesOffset, inputRecord_6.Capabilities, inputRecord_6.Uniforms, inputRecord_6.Ubos, inputRecord_6.Attributes, inputRecord_6.Indicies, inputRecord_6.Textures, inputRecord_6.VertexCountAttributes, inputRecord_6.InstanceCountAttributes, inputRecord_6.Vao, inputRecord_6.ProcessLinked, inputRecord_6.Layer, inputRecord_6.ParallaxCamera, inputRecord_6.ParallaxDistance, inputRecord_6.ParallaxOffset, inputRecord_6.ParallaxLastPosition, inputRecord_6.Angle, inputRecord_6.Position, inputRecord_6.Scale, inputRecord_6.ModelMatrix, inputRecord_6.ParallaxMatrix, inputRecord_6.Parent, inputRecord_6.Link, inputRecord_6.LinkedChildren, inputRecord_6.IsModelDirty, inputRecord_6.IsParallaxDirty, inputRecord_6.RecalcNeeded, inputRecord_6.CalcDrawMethod, inputRecord_6.CalcVertexCount, inputRecord_6.CalcInstanceCount)));
              return "continue|loop";
            }

          case 7:
            {
              var x_7 = h.fields[0] | 0;
              props_1_mut = t;
              b_mut = updateData((inputRecord_7 = b.Data, new _webgl_builder_interfacesFs.GlObjData(inputRecord_7.Id, inputRecord_7.Name, inputRecord_7.ProgramInfo, inputRecord_7.IsDirty, inputRecord_7.Scene, inputRecord_7.DrawMethod, inputRecord_7.DrawPrimitive, inputRecord_7.VertexCount, inputRecord_7.VertexOffset, inputRecord_7.VertexCountOffset, inputRecord_7.InstanceCount, x_7, inputRecord_7.InstanceCountOffset, inputRecord_7.IndiciesOffset, inputRecord_7.Capabilities, inputRecord_7.Uniforms, inputRecord_7.Ubos, inputRecord_7.Attributes, inputRecord_7.Indicies, inputRecord_7.Textures, inputRecord_7.VertexCountAttributes, inputRecord_7.InstanceCountAttributes, inputRecord_7.Vao, inputRecord_7.ProcessLinked, inputRecord_7.Layer, inputRecord_7.ParallaxCamera, inputRecord_7.ParallaxDistance, inputRecord_7.ParallaxOffset, inputRecord_7.ParallaxLastPosition, inputRecord_7.Angle, inputRecord_7.Position, inputRecord_7.Scale, inputRecord_7.ModelMatrix, inputRecord_7.ParallaxMatrix, inputRecord_7.Parent, inputRecord_7.Link, inputRecord_7.LinkedChildren, inputRecord_7.IsModelDirty, inputRecord_7.IsParallaxDirty, inputRecord_7.RecalcNeeded, inputRecord_7.CalcDrawMethod, inputRecord_7.CalcVertexCount, inputRecord_7.CalcInstanceCount)));
              return "continue|loop";
            }

          case 8:
            {
              var x_8 = h.fields[0] | 0;
              props_1_mut = t;
              b_mut = updateData((inputRecord_8 = b.Data, new _webgl_builder_interfacesFs.GlObjData(inputRecord_8.Id, inputRecord_8.Name, inputRecord_8.ProgramInfo, inputRecord_8.IsDirty, inputRecord_8.Scene, inputRecord_8.DrawMethod, inputRecord_8.DrawPrimitive, inputRecord_8.VertexCount, inputRecord_8.VertexOffset, inputRecord_8.VertexCountOffset, inputRecord_8.InstanceCount, inputRecord_8.InstanceOffset, x_8, inputRecord_8.IndiciesOffset, inputRecord_8.Capabilities, inputRecord_8.Uniforms, inputRecord_8.Ubos, inputRecord_8.Attributes, inputRecord_8.Indicies, inputRecord_8.Textures, inputRecord_8.VertexCountAttributes, inputRecord_8.InstanceCountAttributes, inputRecord_8.Vao, inputRecord_8.ProcessLinked, inputRecord_8.Layer, inputRecord_8.ParallaxCamera, inputRecord_8.ParallaxDistance, inputRecord_8.ParallaxOffset, inputRecord_8.ParallaxLastPosition, inputRecord_8.Angle, inputRecord_8.Position, inputRecord_8.Scale, inputRecord_8.ModelMatrix, inputRecord_8.ParallaxMatrix, inputRecord_8.Parent, inputRecord_8.Link, inputRecord_8.LinkedChildren, inputRecord_8.IsModelDirty, inputRecord_8.IsParallaxDirty, inputRecord_8.RecalcNeeded, inputRecord_8.CalcDrawMethod, inputRecord_8.CalcVertexCount, inputRecord_8.CalcInstanceCount)));
              return "continue|loop";
            }

          case 9:
            {
              var x_9 = h.fields[0] | 0;
              props_1_mut = t;
              b_mut = updateData((inputRecord_9 = b.Data, new _webgl_builder_interfacesFs.GlObjData(inputRecord_9.Id, inputRecord_9.Name, inputRecord_9.ProgramInfo, inputRecord_9.IsDirty, inputRecord_9.Scene, inputRecord_9.DrawMethod, inputRecord_9.DrawPrimitive, inputRecord_9.VertexCount, inputRecord_9.VertexOffset, inputRecord_9.VertexCountOffset, inputRecord_9.InstanceCount, inputRecord_9.InstanceOffset, inputRecord_9.InstanceCountOffset, x_9, inputRecord_9.Capabilities, inputRecord_9.Uniforms, inputRecord_9.Ubos, inputRecord_9.Attributes, inputRecord_9.Indicies, inputRecord_9.Textures, inputRecord_9.VertexCountAttributes, inputRecord_9.InstanceCountAttributes, inputRecord_9.Vao, inputRecord_9.ProcessLinked, inputRecord_9.Layer, inputRecord_9.ParallaxCamera, inputRecord_9.ParallaxDistance, inputRecord_9.ParallaxOffset, inputRecord_9.ParallaxLastPosition, inputRecord_9.Angle, inputRecord_9.Position, inputRecord_9.Scale, inputRecord_9.ModelMatrix, inputRecord_9.ParallaxMatrix, inputRecord_9.Parent, inputRecord_9.Link, inputRecord_9.LinkedChildren, inputRecord_9.IsModelDirty, inputRecord_9.IsParallaxDirty, inputRecord_9.RecalcNeeded, inputRecord_9.CalcDrawMethod, inputRecord_9.CalcVertexCount, inputRecord_9.CalcInstanceCount)));
              return "continue|loop";
            }

          case 10:
            {
              var x_10 = h.fields[0];
              props_1_mut = t;
              b_mut = addUniform_1(x_10);
              return "continue|loop";
            }

          case 11:
            {
              var x_11 = h.fields[0];
              props_1_mut = t;
              b_mut = addUbo_1(x_11);
              return "continue|loop";
            }

          case 12:
            {
              var x_12 = h.fields[0];
              props_1_mut = t;
              b_mut = addAttribute_1(x_12);
              return "continue|loop";
            }

          case 13:
            {
              var x_13 = h.fields[0];
              props_1_mut = t;
              b_mut = addIndicies(x_13);
              return "continue|loop";
            }

          case 14:
            {
              var x_14 = h.fields[0];
              props_1_mut = t;
              b_mut = addTexture_1(x_14);
              return "continue|loop";
            }

          case 15:
            {
              var x_15 = h.fields[0];
              props_1_mut = t;
              b_mut = updateData((inputRecord_10 = b.Data, new _webgl_builder_interfacesFs.GlObjData(inputRecord_10.Id, inputRecord_10.Name, inputRecord_10.ProgramInfo, inputRecord_10.IsDirty, inputRecord_10.Scene, inputRecord_10.DrawMethod, inputRecord_10.DrawPrimitive, inputRecord_10.VertexCount, inputRecord_10.VertexOffset, inputRecord_10.VertexCountOffset, inputRecord_10.InstanceCount, inputRecord_10.InstanceOffset, inputRecord_10.InstanceCountOffset, inputRecord_10.IndiciesOffset, (0, _List.cons)(x_15, b.Data.Capabilities), inputRecord_10.Uniforms, inputRecord_10.Ubos, inputRecord_10.Attributes, inputRecord_10.Indicies, inputRecord_10.Textures, inputRecord_10.VertexCountAttributes, inputRecord_10.InstanceCountAttributes, inputRecord_10.Vao, inputRecord_10.ProcessLinked, inputRecord_10.Layer, inputRecord_10.ParallaxCamera, inputRecord_10.ParallaxDistance, inputRecord_10.ParallaxOffset, inputRecord_10.ParallaxLastPosition, inputRecord_10.Angle, inputRecord_10.Position, inputRecord_10.Scale, inputRecord_10.ModelMatrix, inputRecord_10.ParallaxMatrix, inputRecord_10.Parent, inputRecord_10.Link, inputRecord_10.LinkedChildren, inputRecord_10.IsModelDirty, inputRecord_10.IsParallaxDirty, inputRecord_10.RecalcNeeded, inputRecord_10.CalcDrawMethod, inputRecord_10.CalcVertexCount, inputRecord_10.CalcInstanceCount)));
              return "continue|loop";
            }

          case 16:
            {
              var x_16 = h.fields[0];
              props_1_mut = t;
              b_mut = updateData((inputRecord_11 = b.Data, new _webgl_builder_interfacesFs.GlObjData(inputRecord_11.Id, inputRecord_11.Name, inputRecord_11.ProgramInfo, inputRecord_11.IsDirty, inputRecord_11.Scene, inputRecord_11.DrawMethod, inputRecord_11.DrawPrimitive, inputRecord_11.VertexCount, inputRecord_11.VertexOffset, inputRecord_11.VertexCountOffset, inputRecord_11.InstanceCount, inputRecord_11.InstanceOffset, inputRecord_11.InstanceCountOffset, inputRecord_11.IndiciesOffset, inputRecord_11.Capabilities, inputRecord_11.Uniforms, inputRecord_11.Ubos, inputRecord_11.Attributes, inputRecord_11.Indicies, inputRecord_11.Textures, inputRecord_11.VertexCountAttributes, inputRecord_11.InstanceCountAttributes, inputRecord_11.Vao, x_16, inputRecord_11.Layer, inputRecord_11.ParallaxCamera, inputRecord_11.ParallaxDistance, inputRecord_11.ParallaxOffset, inputRecord_11.ParallaxLastPosition, inputRecord_11.Angle, inputRecord_11.Position, inputRecord_11.Scale, inputRecord_11.ModelMatrix, inputRecord_11.ParallaxMatrix, inputRecord_11.Parent, inputRecord_11.Link, inputRecord_11.LinkedChildren, inputRecord_11.IsModelDirty, inputRecord_11.IsParallaxDirty, inputRecord_11.RecalcNeeded, inputRecord_11.CalcDrawMethod, inputRecord_11.CalcVertexCount, inputRecord_11.CalcInstanceCount)));
              return "continue|loop";
            }

          case 17:
            {
              var x_17 = h.fields[0];
              props_1_mut = t;
              b_mut = addParallaxCam(x_17);
              return "continue|loop";
            }

          case 18:
            {
              var x_18 = h.fields[0];
              props_1_mut = t;
              b_mut = updateData((inputRecord_12 = b.Data, new _webgl_builder_interfacesFs.GlObjData(inputRecord_12.Id, inputRecord_12.Name, inputRecord_12.ProgramInfo, inputRecord_12.IsDirty, inputRecord_12.Scene, inputRecord_12.DrawMethod, inputRecord_12.DrawPrimitive, inputRecord_12.VertexCount, inputRecord_12.VertexOffset, inputRecord_12.VertexCountOffset, inputRecord_12.InstanceCount, inputRecord_12.InstanceOffset, inputRecord_12.InstanceCountOffset, inputRecord_12.IndiciesOffset, inputRecord_12.Capabilities, inputRecord_12.Uniforms, inputRecord_12.Ubos, inputRecord_12.Attributes, inputRecord_12.Indicies, inputRecord_12.Textures, inputRecord_12.VertexCountAttributes, inputRecord_12.InstanceCountAttributes, inputRecord_12.Vao, inputRecord_12.ProcessLinked, inputRecord_12.Layer, inputRecord_12.ParallaxCamera, x_18, inputRecord_12.ParallaxOffset, inputRecord_12.ParallaxLastPosition, inputRecord_12.Angle, inputRecord_12.Position, inputRecord_12.Scale, inputRecord_12.ModelMatrix, inputRecord_12.ParallaxMatrix, inputRecord_12.Parent, inputRecord_12.Link, inputRecord_12.LinkedChildren, inputRecord_12.IsModelDirty, inputRecord_12.IsParallaxDirty, inputRecord_12.RecalcNeeded, inputRecord_12.CalcDrawMethod, inputRecord_12.CalcVertexCount, inputRecord_12.CalcInstanceCount)));
              return "continue|loop";
            }

          case 19:
            {
              var x_19 = h.fields[0] | 0;
              props_1_mut = t;
              b_mut = updateData((inputRecord_13 = b.Data, new _webgl_builder_interfacesFs.GlObjData(inputRecord_13.Id, inputRecord_13.Name, inputRecord_13.ProgramInfo, inputRecord_13.IsDirty, inputRecord_13.Scene, inputRecord_13.DrawMethod, inputRecord_13.DrawPrimitive, inputRecord_13.VertexCount, inputRecord_13.VertexOffset, inputRecord_13.VertexCountOffset, inputRecord_13.InstanceCount, inputRecord_13.InstanceOffset, inputRecord_13.InstanceCountOffset, inputRecord_13.IndiciesOffset, inputRecord_13.Capabilities, inputRecord_13.Uniforms, inputRecord_13.Ubos, inputRecord_13.Attributes, inputRecord_13.Indicies, inputRecord_13.Textures, inputRecord_13.VertexCountAttributes, inputRecord_13.InstanceCountAttributes, inputRecord_13.Vao, inputRecord_13.ProcessLinked, x_19, inputRecord_13.ParallaxCamera, inputRecord_13.ParallaxDistance, inputRecord_13.ParallaxOffset, inputRecord_13.ParallaxLastPosition, inputRecord_13.Angle, inputRecord_13.Position, inputRecord_13.Scale, inputRecord_13.ModelMatrix, inputRecord_13.ParallaxMatrix, inputRecord_13.Parent, inputRecord_13.Link, inputRecord_13.LinkedChildren, inputRecord_13.IsModelDirty, inputRecord_13.IsParallaxDirty, inputRecord_13.RecalcNeeded, inputRecord_13.CalcDrawMethod, inputRecord_13.CalcVertexCount, inputRecord_13.CalcInstanceCount)));
              return "continue|loop";
            }

          case 20:
            {
              var x_20 = h.fields[0];
              props_1_mut = t;
              b_mut = updateData((inputRecord_14 = b.Data, new _webgl_builder_interfacesFs.GlObjData(inputRecord_14.Id, inputRecord_14.Name, inputRecord_14.ProgramInfo, inputRecord_14.IsDirty, inputRecord_14.Scene, inputRecord_14.DrawMethod, inputRecord_14.DrawPrimitive, inputRecord_14.VertexCount, inputRecord_14.VertexOffset, inputRecord_14.VertexCountOffset, inputRecord_14.InstanceCount, inputRecord_14.InstanceOffset, inputRecord_14.InstanceCountOffset, inputRecord_14.IndiciesOffset, inputRecord_14.Capabilities, inputRecord_14.Uniforms, inputRecord_14.Ubos, inputRecord_14.Attributes, inputRecord_14.Indicies, inputRecord_14.Textures, inputRecord_14.VertexCountAttributes, inputRecord_14.InstanceCountAttributes, inputRecord_14.Vao, inputRecord_14.ProcessLinked, inputRecord_14.Layer, inputRecord_14.ParallaxCamera, inputRecord_14.ParallaxDistance, inputRecord_14.ParallaxOffset, inputRecord_14.ParallaxLastPosition, x_20, inputRecord_14.Position, inputRecord_14.Scale, inputRecord_14.ModelMatrix, inputRecord_14.ParallaxMatrix, inputRecord_14.Parent, inputRecord_14.Link, inputRecord_14.LinkedChildren, inputRecord_14.IsModelDirty, inputRecord_14.IsParallaxDirty, inputRecord_14.RecalcNeeded, inputRecord_14.CalcDrawMethod, inputRecord_14.CalcVertexCount, inputRecord_14.CalcInstanceCount)));
              return "continue|loop";
            }

          case 21:
            {
              var x_21 = h.fields[0];
              props_1_mut = t;
              b_mut = updateData((inputRecord_15 = b.Data, new _webgl_builder_interfacesFs.GlObjData(inputRecord_15.Id, inputRecord_15.Name, inputRecord_15.ProgramInfo, inputRecord_15.IsDirty, inputRecord_15.Scene, inputRecord_15.DrawMethod, inputRecord_15.DrawPrimitive, inputRecord_15.VertexCount, inputRecord_15.VertexOffset, inputRecord_15.VertexCountOffset, inputRecord_15.InstanceCount, inputRecord_15.InstanceOffset, inputRecord_15.InstanceCountOffset, inputRecord_15.IndiciesOffset, inputRecord_15.Capabilities, inputRecord_15.Uniforms, inputRecord_15.Ubos, inputRecord_15.Attributes, inputRecord_15.Indicies, inputRecord_15.Textures, inputRecord_15.VertexCountAttributes, inputRecord_15.InstanceCountAttributes, inputRecord_15.Vao, inputRecord_15.ProcessLinked, inputRecord_15.Layer, inputRecord_15.ParallaxCamera, inputRecord_15.ParallaxDistance, inputRecord_15.ParallaxOffset, inputRecord_15.ParallaxLastPosition, degreesToRadians(x_21), inputRecord_15.Position, inputRecord_15.Scale, inputRecord_15.ModelMatrix, inputRecord_15.ParallaxMatrix, inputRecord_15.Parent, inputRecord_15.Link, inputRecord_15.LinkedChildren, inputRecord_15.IsModelDirty, inputRecord_15.IsParallaxDirty, inputRecord_15.RecalcNeeded, inputRecord_15.CalcDrawMethod, inputRecord_15.CalcVertexCount, inputRecord_15.CalcInstanceCount)));
              return "continue|loop";
            }

          case 22:
            {
              var x_22 = h.fields[0];
              props_1_mut = t;
              b_mut = updateData((inputRecord_16 = b.Data, new _webgl_builder_interfacesFs.GlObjData(inputRecord_16.Id, inputRecord_16.Name, inputRecord_16.ProgramInfo, inputRecord_16.IsDirty, inputRecord_16.Scene, inputRecord_16.DrawMethod, inputRecord_16.DrawPrimitive, inputRecord_16.VertexCount, inputRecord_16.VertexOffset, inputRecord_16.VertexCountOffset, inputRecord_16.InstanceCount, inputRecord_16.InstanceOffset, inputRecord_16.InstanceCountOffset, inputRecord_16.IndiciesOffset, inputRecord_16.Capabilities, inputRecord_16.Uniforms, inputRecord_16.Ubos, inputRecord_16.Attributes, inputRecord_16.Indicies, inputRecord_16.Textures, inputRecord_16.VertexCountAttributes, inputRecord_16.InstanceCountAttributes, inputRecord_16.Vao, inputRecord_16.ProcessLinked, inputRecord_16.Layer, inputRecord_16.ParallaxCamera, inputRecord_16.ParallaxDistance, inputRecord_16.ParallaxOffset, inputRecord_16.ParallaxLastPosition, ((_ = b.Data.Angle, _.values[2] = x_22), b.Data.Angle), inputRecord_16.Position, inputRecord_16.Scale, inputRecord_16.ModelMatrix, inputRecord_16.ParallaxMatrix, inputRecord_16.Parent, inputRecord_16.Link, inputRecord_16.LinkedChildren, inputRecord_16.IsModelDirty, inputRecord_16.IsParallaxDirty, inputRecord_16.RecalcNeeded, inputRecord_16.CalcDrawMethod, inputRecord_16.CalcVertexCount, inputRecord_16.CalcInstanceCount)));
              return "continue|loop";
            }

          case 23:
            {
              var x_23 = h.fields[0];
              props_1_mut = t;
              b_mut = updateData((inputRecord_17 = b.Data, new _webgl_builder_interfacesFs.GlObjData(inputRecord_17.Id, inputRecord_17.Name, inputRecord_17.ProgramInfo, inputRecord_17.IsDirty, inputRecord_17.Scene, inputRecord_17.DrawMethod, inputRecord_17.DrawPrimitive, inputRecord_17.VertexCount, inputRecord_17.VertexOffset, inputRecord_17.VertexCountOffset, inputRecord_17.InstanceCount, inputRecord_17.InstanceOffset, inputRecord_17.InstanceCountOffset, inputRecord_17.IndiciesOffset, inputRecord_17.Capabilities, inputRecord_17.Uniforms, inputRecord_17.Ubos, inputRecord_17.Attributes, inputRecord_17.Indicies, inputRecord_17.Textures, inputRecord_17.VertexCountAttributes, inputRecord_17.InstanceCountAttributes, inputRecord_17.Vao, inputRecord_17.ProcessLinked, inputRecord_17.Layer, inputRecord_17.ParallaxCamera, inputRecord_17.ParallaxDistance, inputRecord_17.ParallaxOffset, inputRecord_17.ParallaxLastPosition, ((__1 = b.Data.Angle, (value_2 = x_23 * _utilsFs.RAD_PER_DEG, __1.values[2] = value_2)), b.Data.Angle), inputRecord_17.Position, inputRecord_17.Scale, inputRecord_17.ModelMatrix, inputRecord_17.ParallaxMatrix, inputRecord_17.Parent, inputRecord_17.Link, inputRecord_17.LinkedChildren, inputRecord_17.IsModelDirty, inputRecord_17.IsParallaxDirty, inputRecord_17.RecalcNeeded, inputRecord_17.CalcDrawMethod, inputRecord_17.CalcVertexCount, inputRecord_17.CalcInstanceCount)));
              return "continue|loop";
            }

          case 24:
            {
              var x_24 = h.fields[0];
              props_1_mut = t;
              b_mut = updateData((inputRecord_18 = b.Data, new _webgl_builder_interfacesFs.GlObjData(inputRecord_18.Id, inputRecord_18.Name, inputRecord_18.ProgramInfo, inputRecord_18.IsDirty, inputRecord_18.Scene, inputRecord_18.DrawMethod, inputRecord_18.DrawPrimitive, inputRecord_18.VertexCount, inputRecord_18.VertexOffset, inputRecord_18.VertexCountOffset, inputRecord_18.InstanceCount, inputRecord_18.InstanceOffset, inputRecord_18.InstanceCountOffset, inputRecord_18.IndiciesOffset, inputRecord_18.Capabilities, inputRecord_18.Uniforms, inputRecord_18.Ubos, inputRecord_18.Attributes, inputRecord_18.Indicies, inputRecord_18.Textures, inputRecord_18.VertexCountAttributes, inputRecord_18.InstanceCountAttributes, inputRecord_18.Vao, inputRecord_18.ProcessLinked, inputRecord_18.Layer, inputRecord_18.ParallaxCamera, inputRecord_18.ParallaxDistance, inputRecord_18.ParallaxOffset, inputRecord_18.ParallaxLastPosition, inputRecord_18.Angle, x_24, inputRecord_18.Scale, inputRecord_18.ModelMatrix, inputRecord_18.ParallaxMatrix, inputRecord_18.Parent, inputRecord_18.Link, inputRecord_18.LinkedChildren, inputRecord_18.IsModelDirty, inputRecord_18.IsParallaxDirty, inputRecord_18.RecalcNeeded, inputRecord_18.CalcDrawMethod, inputRecord_18.CalcVertexCount, inputRecord_18.CalcInstanceCount)));
              return "continue|loop";
            }

          case 25:
            {
              var x_25 = h.fields[0];
              props_1_mut = t;
              b_mut = updateData((inputRecord_19 = b.Data, new _webgl_builder_interfacesFs.GlObjData(inputRecord_19.Id, inputRecord_19.Name, inputRecord_19.ProgramInfo, inputRecord_19.IsDirty, inputRecord_19.Scene, inputRecord_19.DrawMethod, inputRecord_19.DrawPrimitive, inputRecord_19.VertexCount, inputRecord_19.VertexOffset, inputRecord_19.VertexCountOffset, inputRecord_19.InstanceCount, inputRecord_19.InstanceOffset, inputRecord_19.InstanceCountOffset, inputRecord_19.IndiciesOffset, inputRecord_19.Capabilities, inputRecord_19.Uniforms, inputRecord_19.Ubos, inputRecord_19.Attributes, inputRecord_19.Indicies, inputRecord_19.Textures, inputRecord_19.VertexCountAttributes, inputRecord_19.InstanceCountAttributes, inputRecord_19.Vao, inputRecord_19.ProcessLinked, inputRecord_19.Layer, inputRecord_19.ParallaxCamera, inputRecord_19.ParallaxDistance, inputRecord_19.ParallaxOffset, inputRecord_19.ParallaxLastPosition, inputRecord_19.Angle, inputRecord_19.Position, x_25, inputRecord_19.ModelMatrix, inputRecord_19.ParallaxMatrix, inputRecord_19.Parent, inputRecord_19.Link, inputRecord_19.LinkedChildren, inputRecord_19.IsModelDirty, inputRecord_19.IsParallaxDirty, inputRecord_19.RecalcNeeded, inputRecord_19.CalcDrawMethod, inputRecord_19.CalcVertexCount, inputRecord_19.CalcInstanceCount)));
              return "continue|loop";
            }

          case 26:
            {
              var x_26 = h.fields[0];
              props_1_mut = t;
              b_mut = addLink(x_26);
              return "continue|loop";
            }

          default:
            {
              var x = h.fields[0];
              props_1_mut = t;
              b_mut = updateData((inputRecord = b.Data, new _webgl_builder_interfacesFs.GlObjData(inputRecord.Id, x, inputRecord.ProgramInfo, inputRecord.IsDirty, inputRecord.Scene, inputRecord.DrawMethod, inputRecord.DrawPrimitive, inputRecord.VertexCount, inputRecord.VertexOffset, inputRecord.VertexCountOffset, inputRecord.InstanceCount, inputRecord.InstanceOffset, inputRecord.InstanceCountOffset, inputRecord.IndiciesOffset, inputRecord.Capabilities, inputRecord.Uniforms, inputRecord.Ubos, inputRecord.Attributes, inputRecord.Indicies, inputRecord.Textures, inputRecord.VertexCountAttributes, inputRecord.InstanceCountAttributes, inputRecord.Vao, inputRecord.ProcessLinked, inputRecord.Layer, inputRecord.ParallaxCamera, inputRecord.ParallaxDistance, inputRecord.ParallaxOffset, inputRecord.ParallaxLastPosition, inputRecord.Angle, inputRecord.Position, inputRecord.Scale, inputRecord.ModelMatrix, inputRecord.ParallaxMatrix, inputRecord.Parent, inputRecord.Link, inputRecord.LinkedChildren, inputRecord.IsModelDirty, inputRecord.IsParallaxDirty, inputRecord.RecalcNeeded, inputRecord.CalcDrawMethod, inputRecord.CalcVertexCount, inputRecord.CalcInstanceCount)));
              return "continue|loop";
            }
        }
      } else {
        return {
          v: b
        };
      }

      return "break";
    };

    loop: while (true) {
      var _ret = _loop();

      if (_ret === "continue|loop") continue loop;
      if (_ret === "break") break;
      if (_typeof(_ret) === "object") return _ret.v;
    }
  };

  return loop(props, builder);
}

function create(vertex, fragment, parent, scene, props) {
  var inputRecord;
  var gl = scene.Canvas.Context;
  var programInfo = (0, _webgl_program_utilsFs.createProgramInfo)(gl, vertex, fragment);
  var vao = gl.createVertexArray();
  return build(apply(props, new Builder(void 0, void 0, (0, _List.empty)(), (0, _List.empty)(), (0, _List.empty)(), void 0, (0, _List.empty)(), (inputRecord = emptyObject(scene), new _webgl_builder_interfacesFs.GlObjData(inputRecord.Id, inputRecord.Name, programInfo, inputRecord.IsDirty, inputRecord.Scene, inputRecord.DrawMethod, inputRecord.DrawPrimitive, inputRecord.VertexCount, inputRecord.VertexOffset, inputRecord.VertexCountOffset, inputRecord.InstanceCount, inputRecord.InstanceOffset, inputRecord.InstanceCountOffset, inputRecord.IndiciesOffset, inputRecord.Capabilities, inputRecord.Uniforms, inputRecord.Ubos, inputRecord.Attributes, inputRecord.Indicies, inputRecord.Textures, inputRecord.VertexCountAttributes, inputRecord.InstanceCountAttributes, vao, true, inputRecord.Layer, inputRecord.ParallaxCamera, inputRecord.ParallaxDistance, inputRecord.ParallaxOffset, inputRecord.ParallaxLastPosition, inputRecord.Angle, inputRecord.Position, inputRecord.Scale, inputRecord.ModelMatrix, inputRecord.ParallaxMatrix, parent, inputRecord.Link, inputRecord.LinkedChildren, inputRecord.IsModelDirty, inputRecord.IsParallaxDirty, inputRecord.RecalcNeeded, inputRecord.CalcDrawMethod, inputRecord.CalcVertexCount, inputRecord.CalcInstanceCount)))));
}

function delete$(data) {
  var deleteAttribute = function deleteAttribute(attribute) {
    if (attribute.tag === 1) {
      var a_1 = attribute.fields[0];
      (0, _glattribFs.delete$)(a_1);
    } else {
      var a = attribute.fields[0];
      (0, _glattribFs.delete$)(a);
    }
  };

  var gl = data.Scene.Canvas.Context;
  (0, _webgl_program_utilsFs.deleteProgramInfo)(data.ProgramInfo);
  gl.deleteVertexArray(data.Vao);
  (0, _List.iterate)(function (data_1) {
    (0, _gluboFs.delete$)(data_1);
  }, data.Ubos);
  (0, _List.iterate)(deleteAttribute, data.Attributes);
  (0, _optionexFs.call)(function (data_2) {
    (0, _glindiciesFs.delete$)(data_2);
  }, data.Indicies);
}

function updateCalculated(data) {
  var sumDataCount = function sumDataCount(attribs) {
    return (0, _List.sumBy)(function (a) {
      return a.DataCount;
    }, attribs, {
      GetZero: function GetZero() {
        return 0;
      },
      Add: function Add(x, y) {
        return x + y;
      }
    });
  };

  if (data.RecalcNeeded) {
    data.RecalcNeeded = false;

    if (data.CalcVertexCount) {
      data.VertexCount = sumDataCount(data.VertexCountAttributes);
    }

    if (data.CalcInstanceCount) {
      data.InstanceCount = sumDataCount(data.InstanceCountAttributes);
    }

    if (data.CalcDrawMethod) {
      var hasIndicies = data.Indicies != null;
      var hasDivisor = data.InstanceCount > 0 ? true : (0, _Seq.exists)(function (a_1) {
        return a_1.Divisor >= 0;
      }, (0, _webgl_builder_interfacesFs.GlCommon_allAttributes)(data));

      if (data.CalcDrawMethod) {
        var matchValue_1 = [hasIndicies, hasDivisor];
        data.DrawMethod = matchValue_1[0] ? matchValue_1[1] ? new _webgl_typesFs.GlDrawMethod(3) : new _webgl_typesFs.GlDrawMethod(1) : matchValue_1[1] ? new _webgl_typesFs.GlDrawMethod(2) : new _webgl_typesFs.GlDrawMethod(0);
      }
    }
  }
}

function clean(data) {
  data.IsDirty = false;
  data.IsModelDirty = false;
}

function calcModelMatrix(data) {
  if (data.IsModelDirty) {
    var msg = (0, _String.toText)((0, _String.interpolate)("%P().calcModelMatrix", [data.Name]));

    if ((0, _utilsFs.Debug_enabled)()) {
      if ((0, _utilsFs.Debug_collapsible)()) {
        if ((0, _utilsFs.Debug_logCollapsed)()) {
          console.groupCollapsed(msg);
        } else {
          console.group(msg);
        }
      } else {
        if ((0, _utilsFs.Debug_enabled)()) {
          (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
        }

        if (!(0, _utilsFs.Debug_collapsible)()) {
          (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
        }
      }
    }

    var mat = data.ModelMatrix;
    var ws = data.Scene.WorldScale;
    var scale = data.Scale === 1 ? ws : data.Scale + (ws !== 1 ? ws : 0);
    var matchValue_1 = data.Link;

    if (matchValue_1 != null) {
      var link = matchValue_1;
      (0, _matriciesFs.Mat4__Set_Z33A93963)(mat, (0, _matriciesFs.Mat4__get_Values)(link.ModelMatrix));

      if (ws !== 1) {
        var invScale = 1 / ws;
        (0, _matriciesFs.Mat4__ScaleM_8ED0A5D)(mat, invScale, invScale, invScale);
      }
    } else {
      (0, _matriciesFs.Mat4__SetToIdentity)(mat);
    }

    (0, _matriciesFs.Mat4__TranslateM_8ED0A5D)(mat, data.Position.values[0] * ws, data.Position.values[1] * ws, data.Position.values[2] * ws);
    (0, _matriciesFs.Mat4__RotateZM_2F186313)(mat, data.Angle.values[2] * 1);
    (0, _matriciesFs.Mat4__ScaleM_8ED0A5D)(mat, scale, scale, scale);
    data.IsModelDirty = false;
    data.IsParallaxDirty = true;
    (0, _List.iterate)(dirtyModel, data.LinkedChildren);

    if ((0, _utilsFs.Debug_collapsible)()) {
      console.groupEnd();
    } else {
      (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
    }
  }
}

function calcParallaxMatrix(data) {
  if (data.IsParallaxDirty) {
    data.IsParallaxDirty = false;
    var matchValue = data.ParallaxMatrix;

    if (matchValue != null) {
      var mat = matchValue;
      var msg = (0, _String.toText)((0, _String.interpolate)("%P().calcParallaxMatrix", [data.Name]));

      if ((0, _utilsFs.Debug_enabled)()) {
        if ((0, _utilsFs.Debug_collapsible)()) {
          if ((0, _utilsFs.Debug_logCollapsed)()) {
            console.groupCollapsed(msg);
          } else {
            console.group(msg);
          }
        } else {
          if ((0, _utilsFs.Debug_enabled)()) {
            (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
          }

          if (!(0, _utilsFs.Debug_collapsible)()) {
            (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
          }
        }
      }

      var ws = data.Scene.WorldScale;
      var scale = data.Scale + (ws !== 1 ? ws : 0);
      var position = (0, _vectorsFs.Vec3_op_Addition_5E235CC0)(data.Position, data.ParallaxOffset);
      (0, _matriciesFs.Mat4__SetToIdentity)(mat);
      (0, _matriciesFs.Mat4__TranslateM_8ED0A5D)(mat, position.values[0] * ws, position.values[1] * ws, position.values[2] * ws);
      (0, _matriciesFs.Mat4__RotateZM_2F186313)(mat, data.Angle.values[2] * 1);
      (0, _matriciesFs.Mat4__ScaleM_8ED0A5D)(mat, scale, scale, scale);

      if ((0, _utilsFs.Debug_collapsible)()) {
        console.groupEnd();
      } else {
        (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
      }
    }
  }
}

function isParallaxCamera(camera, data) {
  return camera === data.ParallaxCamera;
}

function updateModelMatrix(camera, data) {
  var matchValue = tryGetUniform("modelMat")(data);

  if (matchValue != null) {
    var modelMat = matchValue;
    calcModelMatrix(data);
    calcParallaxMatrix(data);
    var mat_1;
    var matchValue_1 = [isParallaxCamera(camera, data), data.ParallaxMatrix];
    var pattern_matching_result;

    if (matchValue_1[0]) {
      if (matchValue_1[1] != null) {
        pattern_matching_result = 0;
      } else {
        pattern_matching_result = 1;
      }
    } else {
      pattern_matching_result = 1;
    }

    switch (pattern_matching_result) {
      case 0:
        {
          var mat = matchValue_1[1];
          mat_1 = mat;
          break;
        }

      case 1:
        {
          mat_1 = data.ModelMatrix;
          break;
        }
    }

    (0, _gluniformFs.setValue)((0, _matriciesFs.Mat4__get_Values)(mat_1), modelMat);
  }
}

function updateParallax(camera, data) {
  var matchValue = data.ParallaxCamera;

  if (matchValue != null) {
    var cam = matchValue;
    var isParallaxCam = isParallaxCamera(camera, data);

    if (isParallaxCam ? !(0, _Util.equals)(data.ParallaxLastPosition, cam.LookAt) : false) {
      var delta = (0, _vectorsFs.Vec3_op_Subtraction_5E235CC0)(data.ParallaxLastPosition, cam.LookAt);
      var frac = 1 - 1 / data.ParallaxDistance;
      (0, _vectorsFs.Vec3_op_AdditionAssignment_5E235CC0)(data.ParallaxOffset, (0, _vectorsFs.Vec3_op_Multiply_39DFA7E3)((0, _vectorsFs.Vec3_op_UnaryNegation_Z66910A62)(delta), frac));
      var other = cam.LookAt;
      var value_3;
      var __4 = data.ParallaxLastPosition.v.contents;
      var x = other.values[0];
      var y = other.values[1];
      var z = other.values[2];
      var __5 = __4.v.contents;
      __5.values[0] = x;
      var __6 = __4.v.contents;
      __6.values[1] = y;
      var __7 = __4.v.contents;
      __7.values[2] = z;
      value_3 = __4.v.contents;
      void value_3;
      data.IsParallaxDirty = true;
    }
  }
}

function updateAttribute(attr) {
  if (attr.tag === 1) {
    var a_1 = attr.fields[0];
    (0, _glinterleaveattributeFs.update)(a_1);
  } else {
    var a = attr.fields[0];
    (0, _glsingleattributeFs.update)(a);
  }
}

function update(camera, data) {
  var msg = (0, _String.toText)((0, _String.interpolate)("%P().update", [data.Name]));

  if ((0, _utilsFs.Debug_enabled)()) {
    if ((0, _utilsFs.Debug_collapsible)()) {
      if ((0, _utilsFs.Debug_logCollapsed)()) {
        console.groupCollapsed(msg);
      } else {
        console.group(msg);
      }
    } else {
      if ((0, _utilsFs.Debug_enabled)()) {
        (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
      }

      if (!(0, _utilsFs.Debug_collapsible)()) {
        (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
      }
    }
  }

  var gl = data.Scene.Canvas.Context;
  (0, _webgl_typesFs.GlCommon_useProgram)(gl, data.ProgramInfo.Program);
  (0, _webgl_typesFs.GlCommon_bindVertexArray)(gl, data.Vao);

  if (data.IsDirty) {
    updateParallax(camera, data);
    updateModelMatrix(camera, data);
  }

  (0, _List.iterate)(function (data_1) {
    (0, _gluboFs.update)(data_1);
  }, data.Ubos);

  if (data.IsDirty) {
    (0, _List.iterate)(function (data_2) {
      (0, _gluniformFs.update)(data_2);
    }, data.Uniforms);
    (0, _List.iterate)(function (attr) {
      updateAttribute(attr);
    }, data.Attributes);
    (0, _optionexFs.call)(function (data_3) {
      (0, _glindiciesFs.update)(data_3);
    }, data.Indicies);
    (0, _List.iterate)(function (data_4) {
      (0, _gltextureFs.update)(data_4);
    }, data.Textures);
    updateCalculated(data);
    clean(data);
  }

  if ((0, _utilsFs.Debug_collapsible)()) {
    console.groupEnd();
  } else {
    (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
  }
}

function render(camera, data) {
  var msg = (0, _String.toText)((0, _String.interpolate)("%P().render", [data.Name]));

  if ((0, _utilsFs.Debug_enabled)()) {
    if ((0, _utilsFs.Debug_collapsible)()) {
      if ((0, _utilsFs.Debug_logCollapsed)()) {
        console.groupCollapsed(msg);
      } else {
        console.group(msg);
      }
    } else {
      if ((0, _utilsFs.Debug_enabled)()) {
        (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
      }

      if (!(0, _utilsFs.Debug_collapsible)()) {
        (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
      }
    }
  }

  var gl = data.Scene.Canvas.Context;
  update(camera, data);
  (0, _List.iterate)(function (capability) {
    capability(gl);
  }, data.Capabilities);
  var matchValue = data.DrawMethod;

  switch (matchValue.tag) {
    case 4:
      {
        var vertexCount = data.VertexCount + data.VertexCountOffset | 0;
        (0, _webgl_typesFs.GlCommon_drawArrays)(gl, data.DrawPrimitive, data.VertexOffset, vertexCount);
        break;
      }

    case 1:
      {
        var index = data.Indicies;
        (0, _webgl_typesFs.GlCommon_drawElements)(gl, data.DrawPrimitive, index.DataCount, index.IndiciesType, index.Offset);
        break;
      }

    case 2:
      {
        var vertexCount_1 = data.VertexCount + data.VertexCountOffset | 0;
        var instanceCount = data.InstanceCount + data.InstanceCountOffset | 0;
        (0, _webgl_typesFs.GlCommon_drawArraysInstanced)(gl, data.DrawPrimitive, data.InstanceOffset, vertexCount_1, instanceCount);
        break;
      }

    case 3:
      {
        break;
      }

    default:
      {
        var _vertexCount = data.VertexCount + data.VertexCountOffset | 0;

        (0, _webgl_typesFs.GlCommon_drawArrays)(gl, data.DrawPrimitive, data.VertexOffset, _vertexCount);
      }
  }

  if ((0, _utilsFs.Debug_collapsible)()) {
    console.groupEnd();
  } else {
    (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
  }
}

function setInstanceCount(value, data) {
  data.InstanceCount = value;
  (0, _webgl_builder_interfacesFs.GlCommon_objectRecalcNeeded)(data);
}

function setAngle(angle, data) {
  var value_4;
  var _ = angle;
  var value_3;
  var __4 = data.Angle;
  var x = _.v.contents.values[0];
  var y = _.v.contents.values[1];
  var z = _.v.contents.values[2];
  var __5 = __4.v.contents;
  __5.values[0] = x;
  var __6 = __4.v.contents;
  __6.values[1] = y;
  var __7 = __4.v.contents;
  __7.values[2] = z;
  value_3 = __4.v.contents;
  value_4 = void value_3;
  void undefined;
  dirtyModel(data);
}

function setAngleZ(angle, data) {
  data.Angle.values[2] = angle;
  dirtyModel(data);
}

function setAngleDegrees(angle, data) {
  var __3 = data.Angle;
  var value_3 = (0, _vectorsFs.Vec3__WithXYZ_Z7C946BEA)(__3.v.contents, angle.values[0] * 1 * _utilsFs.RAD_PER_DEG, angle.values[1] * 1 * _utilsFs.RAD_PER_DEG, angle.values[2] * 1 * _utilsFs.RAD_PER_DEG, __3.v.contents);
  void value_3;
  dirtyModel(data);
}

function setAngleDegreesZ(angle, data) {
  var value_1 = angle * _utilsFs.RAD_PER_DEG;
  data.Angle.values[2] = value_1;
  dirtyModel(data);
}

function setPositionXYZ(x, y, z, data) {
  var _ = data.Position;
  var value = (0, _vectorsFs.Vec3__WithXYZ_Z7C946BEA)(_.v.contents, x, y, z, _.v.contents);
  void value;
  dirtyModel(data);
}

function setPositionXY(x, y, data) {
  setPositionXYZ(x, y, 0, data);
}

function setPosition(position, data) {
  setPositionXYZ(position.values[0], position.values[1], position.values[2], data);
}

function setScale(s, data) {
  data.Scale = s;
  dirtyModel(data);
}

function position2d(x, y) {
  return new _webgl_builder_interfacesFs.GlObjProp(24, (0, _vectorsFs.Vec3Module_vec3)(x, y, 0));
}

function position2dv(p) {
  return new _webgl_builder_interfacesFs.GlObjProp(24, (0, _vectorsFs.Vec3_Create_39DFA7C2)(p, 0));
}
},{"./.fable/fable-library.3.0.0/Types.js":"../src/.fable/fable-library.3.0.0/Types.js","./.fable/fable-library.3.0.0/Reflection.js":"../src/.fable/fable-library.3.0.0/Reflection.js","./webgl_builder_interfaces.fs.js":"../src/webgl_builder_interfaces.fs.js","./vectors.fs.js":"../src/vectors.fs.js","./utils.fs.js":"../src/utils.fs.js","./webgl_program_utils.fs.js":"../src/webgl_program_utils.fs.js","./webgl_types.fs.js":"../src/webgl_types.fs.js","./.fable/fable-library.3.0.0/List.js":"../src/.fable/fable-library.3.0.0/List.js","./matricies.fs.js":"../src/matricies.fs.js","./optionex.fs.js":"../src/optionex.fs.js","./.fable/fable-library.3.0.0/Seq.js":"../src/.fable/fable-library.3.0.0/Seq.js","./glbuffer.fs.js":"../src/glbuffer.fs.js","./.fable/fable-library.3.0.0/String.js":"../src/.fable/fable-library.3.0.0/String.js","./glubo.fs.js":"../src/glubo.fs.js","./.fable/fable-library.3.0.0/Util.js":"../src/.fable/fable-library.3.0.0/Util.js","./gluniform.fs.js":"../src/gluniform.fs.js","./.fable/fable-library.3.0.0/Array.js":"../src/.fable/fable-library.3.0.0/Array.js","./glsingleattribute.fs.js":"../src/glsingleattribute.fs.js","./.fable/fable-library.3.0.0/Option.js":"../src/.fable/fable-library.3.0.0/Option.js","./glcapabilities.fs.js":"../src/glcapabilities.fs.js","./glattrib.fs.js":"../src/glattrib.fs.js","./glindicies.fs.js":"../src/glindicies.fs.js","./glinterleaveattribute.fs.js":"../src/glinterleaveattribute.fs.js","./gltexture.fs.js":"../src/gltexture.fs.js"}],"../src/glortho2d.fs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clean = clean;
exports.setLookAtXYZ = setLookAtXYZ;
exports.setViewSize = setViewSize;
exports.create = create;
exports.update = update;
exports.render = render;
exports.toWorldO = toWorldO;
exports.zoom = zoom;
exports.zoomBy = zoomBy;
exports.zoomToward = zoomToward;
exports.rotateTo = rotateTo;
exports.rotateBy = rotateBy;

var _webgl_builder_interfacesFs = require("./webgl_builder_interfaces.fs.js");

var _vectorsFs = require("./vectors.fs.js");

var _boundsFs = require("./bounds.fs.js");

var _matriciesFs = require("./matricies.fs.js");

var _String = require("./.fable/fable-library.3.0.0/String.js");

var _utilsFs = require("./utils.fs.js");

var _Seq = require("./.fable/fable-library.3.0.0/Seq.js");

var _globjFs = require("./globj.fs.js");

function dirty(data) {
  data.IsDirty = true;
  (0, _webgl_builder_interfacesFs.GlCommon_dirtyScene)(data.Scene);
}

function clean(data) {
  data.IsDirty = false;
}

function updatePosition(data) {
  var lookAt = data.LookAt;
  var __2 = data.Position;
  var value = (0, _vectorsFs.Vec3__WithXYZ_Z7C946BEA)(__2.v.contents, lookAt.values[0], lookAt.values[1], 1, __2.v.contents);
  void value;
}

function clampViewToWorld(data) {
  var viewCenter = (0, _vectorsFs.Vec3__get_XY)(data.LookAt);
  var viewBounds = (0, _boundsFs.BoundsModule_boundsCenterV)(viewCenter, data.ViewSize);
  (0, _boundsFs.Bounds__ClampM_Z134B2C62)(viewBounds, data.Scene.WorldBounds);
  var _ = data.LookAt;
  var value = (0, _vectorsFs.Vec3__WithXY_62A86894)(_.v.contents, (0, _boundsFs.Bounds__get_Center)(viewBounds), _.v.contents);
  void value;
  updatePosition(data);
}

function clampViewToViewport(data) {
  var scaledViewportSize = (0, _vectorsFs.Vec2_op_Division_Z668A51BC)((0, _boundsFs.Bounds__get_Size)(data.ViewportBounds), data.Scene.WorldScale);
  var _ = data.ViewSize;
  var value = (0, _vectorsFs.Vec2__Min_62A868F5)(_.v.contents, scaledViewportSize, _.v.contents);
  void value;
  var viewCenter = (0, _vectorsFs.Vec3__get_XY)(data.LookAt);
  var viewBounds = (0, _boundsFs.BoundsModule_boundsCenterV)(viewCenter, data.ViewSize);
  var __1 = data.LookAt;
  var value_1 = (0, _vectorsFs.Vec3__WithXY_62A86894)(__1.v.contents, (0, _boundsFs.Bounds__get_Center)(viewBounds), __1.v.contents);
  void value_1;
}

function clampView(data) {
  clampViewToViewport(data);
  clampViewToWorld(data);
}

function clampViewportToScene(data) {
  (0, _boundsFs.Bounds__ClampM_Z134B2C62)(data.ViewportBounds, data.Scene.SceneBounds);
}

function setLookAtXYZ(x, y, z, data) {
  var _ = data.LookAt;
  var value = (0, _vectorsFs.Vec3__WithXYZ_Z7C946BEA)(_.v.contents, x, y, z, _.v.contents);
  void value;
  clampView(data);
  dirty(data);
}

function setViewSize(size, data) {
  var value = (0, _vectorsFs.Vec2__Min_62A868F5)(size, (0, _boundsFs.Bounds__get_Size)(data.Scene.WorldBounds), data.ViewSize);
  void value;

  if (data.UseViewSizeAspect) {
    var viewps = (0, _boundsFs.Bounds__get_Size)(data.ViewportBounds);
    var __3 = data.ViewSize;
    var value_1 = (0, _vectorsFs.Vec2__WithY_Z7F22D0EF)(__3.v.contents, data.ViewSize.values[0] * viewps.values[1] / viewps.values[0], __3.v.contents);
    void value_1;
  }

  clampView(data);
  dirty(data);
}

function apply(props, data) {
  var loop = function loop(props_1_mut, data_1_mut) {
    loop: while (true) {
      var props_1 = props_1_mut,
          data_1 = data_1_mut;

      if (props_1.tail != null) {
        var t = props_1.tail;
        var h = props_1.head;

        switch (h.tag) {
          case 1:
            {
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlCameraData(data_1.Id, data_1.Kind, data_1.Name, data_1.IsDirty, data_1.Scene, false, data_1.CameraBackground, data_1.ClearMask, data_1.BorderWidth, data_1.AutoSizeViewport, data_1.UseViewSizeAspect, data_1.AutoPosition, data_1.Position, data_1.LookAt, data_1.ViewSize, data_1.ViewportBounds, data_1.Up, data_1.Near, data_1.Far, data_1.Aspect, data_1.Fov, data_1.ProjectionMatrix, data_1.ViewMatrix);
              continue loop;
            }

          case 2:
            {
              var x_1 = h.fields[0];
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlCameraData(data_1.Id, data_1.Kind, data_1.Name, data_1.IsDirty, data_1.Scene, data_1.ClearViewport, x_1, data_1.ClearMask, data_1.BorderWidth, data_1.AutoSizeViewport, data_1.UseViewSizeAspect, data_1.AutoPosition, data_1.Position, data_1.LookAt, data_1.ViewSize, data_1.ViewportBounds, data_1.Up, data_1.Near, data_1.Far, data_1.Aspect, data_1.Fov, data_1.ProjectionMatrix, data_1.ViewMatrix);
              continue loop;
            }

          case 3:
            {
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlCameraData(data_1.Id, data_1.Kind, data_1.Name, data_1.IsDirty, data_1.Scene, data_1.ClearViewport, data_1.CameraBackground, data_1.ClearMask | 16384, data_1.BorderWidth, data_1.AutoSizeViewport, data_1.UseViewSizeAspect, data_1.AutoPosition, data_1.Position, data_1.LookAt, data_1.ViewSize, data_1.ViewportBounds, data_1.Up, data_1.Near, data_1.Far, data_1.Aspect, data_1.Fov, data_1.ProjectionMatrix, data_1.ViewMatrix);
              continue loop;
            }

          case 4:
            {
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlCameraData(data_1.Id, data_1.Kind, data_1.Name, data_1.IsDirty, data_1.Scene, data_1.ClearViewport, data_1.CameraBackground, data_1.ClearMask | 256, data_1.BorderWidth, data_1.AutoSizeViewport, data_1.UseViewSizeAspect, data_1.AutoPosition, data_1.Position, data_1.LookAt, data_1.ViewSize, data_1.ViewportBounds, data_1.Up, data_1.Near, data_1.Far, data_1.Aspect, data_1.Fov, data_1.ProjectionMatrix, data_1.ViewMatrix);
              continue loop;
            }

          case 5:
            {
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlCameraData(data_1.Id, data_1.Kind, data_1.Name, data_1.IsDirty, data_1.Scene, data_1.ClearViewport, data_1.CameraBackground, data_1.ClearMask | 1024, data_1.BorderWidth, data_1.AutoSizeViewport, data_1.UseViewSizeAspect, data_1.AutoPosition, data_1.Position, data_1.LookAt, data_1.ViewSize, data_1.ViewportBounds, data_1.Up, data_1.Near, data_1.Far, data_1.Aspect, data_1.Fov, data_1.ProjectionMatrix, data_1.ViewMatrix);
              continue loop;
            }

          case 6:
            {
              var x_2 = h.fields[0] | 0;
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlCameraData(data_1.Id, data_1.Kind, data_1.Name, data_1.IsDirty, data_1.Scene, data_1.ClearViewport, data_1.CameraBackground, x_2, data_1.BorderWidth, data_1.AutoSizeViewport, data_1.UseViewSizeAspect, data_1.AutoPosition, data_1.Position, data_1.LookAt, data_1.ViewSize, data_1.ViewportBounds, data_1.Up, data_1.Near, data_1.Far, data_1.Aspect, data_1.Fov, data_1.ProjectionMatrix, data_1.ViewMatrix);
              continue loop;
            }

          case 7:
            {
              var x_3 = h.fields[0];
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlCameraData(data_1.Id, data_1.Kind, data_1.Name, data_1.IsDirty, data_1.Scene, data_1.ClearViewport, data_1.CameraBackground, data_1.ClearMask, x_3, data_1.AutoSizeViewport, data_1.UseViewSizeAspect, data_1.AutoPosition, data_1.Position, data_1.LookAt, data_1.ViewSize, data_1.ViewportBounds, data_1.Up, data_1.Near, data_1.Far, data_1.Aspect, data_1.Fov, data_1.ProjectionMatrix, data_1.ViewMatrix);
              continue loop;
            }

          case 8:
            {
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlCameraData(data_1.Id, data_1.Kind, data_1.Name, data_1.IsDirty, data_1.Scene, data_1.ClearViewport, data_1.CameraBackground, data_1.ClearMask, data_1.BorderWidth, false, data_1.UseViewSizeAspect, data_1.AutoPosition, data_1.Position, data_1.LookAt, data_1.ViewSize, data_1.ViewportBounds, data_1.Up, data_1.Near, data_1.Far, data_1.Aspect, data_1.Fov, data_1.ProjectionMatrix, data_1.ViewMatrix);
              continue loop;
            }

          case 9:
            {
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlCameraData(data_1.Id, data_1.Kind, data_1.Name, data_1.IsDirty, data_1.Scene, data_1.ClearViewport, data_1.CameraBackground, data_1.ClearMask, data_1.BorderWidth, data_1.AutoSizeViewport, false, data_1.AutoPosition, data_1.Position, data_1.LookAt, data_1.ViewSize, data_1.ViewportBounds, data_1.Up, data_1.Near, data_1.Far, data_1.Aspect, data_1.Fov, data_1.ProjectionMatrix, data_1.ViewMatrix);
              continue loop;
            }

          case 10:
            {
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlCameraData(data_1.Id, data_1.Kind, data_1.Name, data_1.IsDirty, data_1.Scene, data_1.ClearViewport, data_1.CameraBackground, data_1.ClearMask, data_1.BorderWidth, data_1.AutoSizeViewport, data_1.UseViewSizeAspect, false, data_1.Position, data_1.LookAt, data_1.ViewSize, data_1.ViewportBounds, data_1.Up, data_1.Near, data_1.Far, data_1.Aspect, data_1.Fov, data_1.ProjectionMatrix, data_1.ViewMatrix);
              continue loop;
            }

          case 11:
            {
              props_1_mut = t;
              data_1_mut = data_1;
              continue loop;
            }

          case 12:
            {
              var x_4 = h.fields[0];
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlCameraData(data_1.Id, data_1.Kind, data_1.Name, data_1.IsDirty, data_1.Scene, data_1.ClearViewport, data_1.CameraBackground, data_1.ClearMask, data_1.BorderWidth, data_1.AutoSizeViewport, data_1.UseViewSizeAspect, data_1.AutoPosition, data_1.Position, x_4, data_1.ViewSize, data_1.ViewportBounds, data_1.Up, data_1.Near, data_1.Far, data_1.Aspect, data_1.Fov, data_1.ProjectionMatrix, data_1.ViewMatrix);
              continue loop;
            }

          case 13:
            {
              var x_5 = h.fields[0];
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlCameraData(data_1.Id, data_1.Kind, data_1.Name, data_1.IsDirty, data_1.Scene, data_1.ClearViewport, data_1.CameraBackground, data_1.ClearMask, data_1.BorderWidth, data_1.AutoSizeViewport, data_1.UseViewSizeAspect, data_1.AutoPosition, data_1.Position, data_1.LookAt, x_5, data_1.ViewportBounds, data_1.Up, data_1.Near, data_1.Far, data_1.Aspect, data_1.Fov, data_1.ProjectionMatrix, data_1.ViewMatrix);
              continue loop;
            }

          case 14:
            {
              var x_6 = h.fields[0];
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlCameraData(data_1.Id, data_1.Kind, data_1.Name, data_1.IsDirty, data_1.Scene, data_1.ClearViewport, data_1.CameraBackground, data_1.ClearMask, data_1.BorderWidth, data_1.AutoSizeViewport, data_1.UseViewSizeAspect, data_1.AutoPosition, data_1.Position, data_1.LookAt, data_1.ViewSize, x_6, data_1.Up, data_1.Near, data_1.Far, data_1.Aspect, data_1.Fov, data_1.ProjectionMatrix, data_1.ViewMatrix);
              continue loop;
            }

          case 15:
            {
              var x_7 = h.fields[0];
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlCameraData(data_1.Id, data_1.Kind, data_1.Name, data_1.IsDirty, data_1.Scene, data_1.ClearViewport, data_1.CameraBackground, data_1.ClearMask, data_1.BorderWidth, data_1.AutoSizeViewport, data_1.UseViewSizeAspect, data_1.AutoPosition, data_1.Position, data_1.LookAt, data_1.ViewSize, data_1.ViewportBounds, x_7, data_1.Near, data_1.Far, data_1.Aspect, data_1.Fov, data_1.ProjectionMatrix, data_1.ViewMatrix);
              continue loop;
            }

          case 16:
            {
              var x_8 = h.fields[0];
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlCameraData(data_1.Id, data_1.Kind, data_1.Name, data_1.IsDirty, data_1.Scene, data_1.ClearViewport, data_1.CameraBackground, data_1.ClearMask, data_1.BorderWidth, data_1.AutoSizeViewport, data_1.UseViewSizeAspect, data_1.AutoPosition, data_1.Position, data_1.LookAt, data_1.ViewSize, data_1.ViewportBounds, data_1.Up, x_8, data_1.Far, data_1.Aspect, data_1.Fov, data_1.ProjectionMatrix, data_1.ViewMatrix);
              continue loop;
            }

          case 17:
            {
              var x_9 = h.fields[0];
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlCameraData(data_1.Id, data_1.Kind, data_1.Name, data_1.IsDirty, data_1.Scene, data_1.ClearViewport, data_1.CameraBackground, data_1.ClearMask, data_1.BorderWidth, data_1.AutoSizeViewport, data_1.UseViewSizeAspect, data_1.AutoPosition, data_1.Position, data_1.LookAt, data_1.ViewSize, data_1.ViewportBounds, data_1.Up, data_1.Near, x_9, data_1.Aspect, data_1.Fov, data_1.ProjectionMatrix, data_1.ViewMatrix);
              continue loop;
            }

          case 18:
            {
              var x_10 = h.fields[0];
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlCameraData(data_1.Id, data_1.Kind, data_1.Name, data_1.IsDirty, data_1.Scene, data_1.ClearViewport, data_1.CameraBackground, data_1.ClearMask, data_1.BorderWidth, data_1.AutoSizeViewport, data_1.UseViewSizeAspect, data_1.AutoPosition, data_1.Position, data_1.LookAt, data_1.ViewSize, data_1.ViewportBounds, data_1.Up, data_1.Near, data_1.Far, x_10, data_1.Fov, data_1.ProjectionMatrix, data_1.ViewMatrix);
              continue loop;
            }

          case 19:
            {
              var x_11 = h.fields[0];
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlCameraData(data_1.Id, data_1.Kind, data_1.Name, data_1.IsDirty, data_1.Scene, data_1.ClearViewport, data_1.CameraBackground, data_1.ClearMask, data_1.BorderWidth, data_1.AutoSizeViewport, data_1.UseViewSizeAspect, data_1.AutoPosition, data_1.Position, data_1.LookAt, data_1.ViewSize, data_1.ViewportBounds, data_1.Up, data_1.Near, data_1.Far, data_1.Aspect, x_11, data_1.ProjectionMatrix, data_1.ViewMatrix);
              continue loop;
            }

          default:
            {
              var x = h.fields[0];
              props_1_mut = t;
              data_1_mut = new _webgl_builder_interfacesFs.GlCameraData(data_1.Id, data_1.Kind, x, data_1.IsDirty, data_1.Scene, data_1.ClearViewport, data_1.CameraBackground, data_1.ClearMask, data_1.BorderWidth, data_1.AutoSizeViewport, data_1.UseViewSizeAspect, data_1.AutoPosition, data_1.Position, data_1.LookAt, data_1.ViewSize, data_1.ViewportBounds, data_1.Up, data_1.Near, data_1.Far, data_1.Aspect, data_1.Fov, data_1.ProjectionMatrix, data_1.ViewMatrix);
              continue loop;
            }
        }
      } else {
        return data_1;
      }

      break;
    }
  };

  return loop(props, data);
}

function create(props, scene) {
  var worldBounds = scene.WorldBounds;
  var viewport = (0, _boundsFs.Bounds__Clone)(scene.SceneBounds);
  var scaledViewportSize = (0, _vectorsFs.Vec2_op_Division_Z668A51BC)((0, _boundsFs.Bounds__get_Size)(viewport), scene.WorldScale);

  var adjustParams = function adjustParams(data) {
    clampViewportToScene(data);
    setViewSize(data.ViewSize, data);
    var center = data.LookAt;
    setLookAtXYZ(center.values[0], center.values[1], center.values[2], data);
    return data;
  };

  return adjustParams(apply(props, new _webgl_builder_interfacesFs.GlCameraData(0, new _webgl_builder_interfacesFs.GlCameraKind(0), "", true, scene, true, (0, _vectorsFs.Vec4Module_vec4)(0, 0, 0, 1), 16384, 0, true, true, true, (0, _vectorsFs.Vec3_Create_39DFA7C2)((0, _boundsFs.Bounds__get_Center)(worldBounds), 1), (0, _vectorsFs.Vec3_Create_39DFA7C2)((0, _boundsFs.Bounds__get_Center)(worldBounds), 0), (0, _vectorsFs.Vec2__Min_62A868F5)((0, _boundsFs.Bounds__get_Size)(worldBounds), scaledViewportSize), viewport, (0, _vectorsFs.Vec3Module_vec3)(0, 1, 0), 0, 1000, 0, 3.141592653589793, (0, _matriciesFs.Mat4_Create)(), (0, _matriciesFs.Mat4_Create)())));
}

function update(data) {
  if (data.IsDirty) {
    var msg = (0, _String.toText)((0, _String.interpolate)("Ortho2D %P().update", [data.Name]));

    if ((0, _utilsFs.Debug_enabled)()) {
      if ((0, _utilsFs.Debug_collapsible)()) {
        if ((0, _utilsFs.Debug_logCollapsed)()) {
          console.groupCollapsed(msg);
        } else {
          console.group(msg);
        }
      } else {
        if ((0, _utilsFs.Debug_enabled)()) {
          (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
        }

        if (!(0, _utilsFs.Debug_collapsible)()) {
          (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
        }
      }
    }

    clean(data);
    var cam = data;
    var ws = cam.Scene.WorldScale;
    var halfSize = (0, _vectorsFs.Vec2_op_Multiply_Z668A51BC)((0, _vectorsFs.Vec2_op_Multiply_Z668A51BC)(cam.ViewSize, ws), 0.5);
    var hw = halfSize.values[0];
    var hh = halfSize.values[1];
    var position = (0, _vectorsFs.Vec3_op_Multiply_39DFA7E3)(cam.Position, ws);
    var lookAt = (0, _vectorsFs.Vec3_op_Multiply_39DFA7E3)(cam.LookAt, ws);
    (0, _matriciesFs.Mat4__LookAtM_Z441FFEA2)(cam.ViewMatrix, position, lookAt, cam.Up);
    (0, _matriciesFs.Mat4__OrthoM_357D8320)(cam.ProjectionMatrix, -hw, hw, -hh, hh, cam.Near, cam.Far);

    if ((0, _utilsFs.Debug_collapsible)()) {
      console.groupEnd();
    } else {
      (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
    }
  }
}

function render(data) {
  update(data);
  (0, _Seq.iterate)(function (data_2) {
    (0, _globjFs.render)(data, data_2);
  }, (0, _webgl_builder_interfacesFs.GlCommon_objects)(data.Scene));
}

function toWorldO(point, result, data) {
  var minWorld = (0, _vectorsFs.Vec2_op_Subtraction_5E235CE0)((0, _vectorsFs.Vec3__get_XY)(data.LookAt), (0, _vectorsFs.Vec2_op_Multiply_Z668A51BC)(data.ViewSize, 0.5));
  var pos = (0, _vectorsFs.Vec2_op_Addition_5E235CE0)(minWorld, (0, _vectorsFs.Vec2_op_Multiply_5E235CE0)(point, (0, _vectorsFs.Vec2_op_Division_5E235CE0)(data.ViewSize, (0, _boundsFs.Bounds__get_Size)(data.ViewportBounds))));
  var __2 = result;
  var value = (0, _vectorsFs.Vec3__WithXYZ_Z7C946BEA)(__2.v.contents, pos.values[0], pos.values[1], 0, __2.v.contents);
  void value;
  return result;
}

function zoom(amount, data) {
  if (amount > 0) {
    setViewSize((0, _vectorsFs.Vec2__Scale_Z7F22D0EF)((0, _boundsFs.Bounds__get_Size)(data.Scene.WorldBounds), amount), data);
  }
}

function zoomBy(amount, data) {
  if (amount > 0) {
    var _ = data.ViewSize;
    var value = (0, _vectorsFs.Vec2__Scale_Z7F22D0EF)(_.v.contents, amount, _.v.contents);
    void value;
    setViewSize(data.ViewSize, data);
  }
}

function zoomToward(center, amount, data) {
  var delta = (0, _vectorsFs.Vec3_op_Subtraction_5E235CC0)(center, data.LookAt);
  var _ = delta;
  var value = (0, _vectorsFs.Vec3__Scale_753627B6)(_.v.contents, amount - 1, _.v.contents);
  void value;
  zoomBy(amount, data);
  var center_1 = (0, _vectorsFs.Vec3_op_Subtraction_5E235CC0)(data.LookAt, delta);
  setLookAtXYZ(center_1.values[0], center_1.values[1], center_1.values[2], data);
}

function rotateTo(angle, data) {
  var up = (0, _vectorsFs.Vec3__get_XY)(data.Up);
  var _ = up;
  var value = (0, _vectorsFs.Vec2__SetAngle_Z483EFB07)(_.v.contents, angle, _.v.contents);
  void value;
  var __1 = data.Up;
  var value_1 = (0, _vectorsFs.Vec3__WithXY_62A86894)(__1.v.contents, up, __1.v.contents);
  void value_1;
  dirty(data);
}

function rotateBy(angle, data) {
  var up = (0, _vectorsFs.Vec3__get_XY)(data.Up);
  var _ = up;
  var value = (0, _vectorsFs.Vec2__Rotate_Z483EFB07)(_.v.contents, angle, _.v.contents);
  void value;
  var __1 = data.Up;
  var value_1 = (0, _vectorsFs.Vec3__WithXY_62A86894)(__1.v.contents, up, __1.v.contents);
  void value_1;
  dirty(data);
}
},{"./webgl_builder_interfaces.fs.js":"../src/webgl_builder_interfaces.fs.js","./vectors.fs.js":"../src/vectors.fs.js","./bounds.fs.js":"../src/bounds.fs.js","./matricies.fs.js":"../src/matricies.fs.js","./.fable/fable-library.3.0.0/String.js":"../src/.fable/fable-library.3.0.0/String.js","./utils.fs.js":"../src/utils.fs.js","./.fable/fable-library.3.0.0/Seq.js":"../src/.fable/fable-library.3.0.0/Seq.js","./globj.fs.js":"../src/globj.fs.js"}],"../src/glcamera.fs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dirty = dirty;
exports.update = update;
exports.render = render;
exports.toWorldO = toWorldO;
exports.panByXY = panByXY;
exports.panToXYZ = panToXYZ;
exports.zoom = zoom;
exports.zoomBy = zoomBy;
exports.zoomToward = zoomToward;
exports.rotateTo = rotateTo;
exports.rotateBy = rotateBy;

var _webgl_builder_interfacesFs = require("./webgl_builder_interfaces.fs.js");

var _boundsFs = require("./bounds.fs.js");

var _vectorsFs = require("./vectors.fs.js");

var _String = require("./.fable/fable-library.3.0.0/String.js");

var _utilsFs = require("./utils.fs.js");

var _glortho2dFs = require("./glortho2d.fs.js");

function dirty(data) {
  data.IsDirty = true;
  (0, _webgl_builder_interfacesFs.GlCommon_dirtyScene)(data.Scene);
}

function resetViewport(data) {
  var gl = data.Scene.Canvas.Context;
  var vp = (0, _boundsFs.Bounds__get_Values)((0, _boundsFs.Bounds__Inflate_5E38073B)(data.ViewportBounds, -data.BorderWidth));
  var vpy = gl.canvas.height - vp[1] - vp[3];
  gl.viewport(vp[0], vpy, vp[2], vp[3]);
}

function clearViewport(data) {
  var gl = data.Scene.Canvas.Context;
  var sb = (0, _boundsFs.Bounds__get_Values)(data.ViewportBounds);
  var cc = (0, _vectorsFs.Vec4__get_Values)(data.CameraBackground);
  var sby = gl.canvas.height - sb[1] - sb[3];
  gl.scissor(sb[0], sby, sb[2], sb[3]);
  gl.clearColor(cc[0], cc[1], cc[2], cc[3]);
  gl.enable(gl.SCISSOR_TEST);
  gl.clear(data.ClearMask);
  gl.disable(gl.SCISSOR_TEST);
}

function update(data) {
  if (data.IsDirty) {
    var msg = (0, _String.toText)((0, _String.interpolate)("Camera %P().update", [data.Name]));

    if ((0, _utilsFs.Debug_enabled)()) {
      if ((0, _utilsFs.Debug_collapsible)()) {
        if ((0, _utilsFs.Debug_logCollapsed)()) {
          console.groupCollapsed(msg);
        } else {
          console.group(msg);
        }
      } else {
        if ((0, _utilsFs.Debug_enabled)()) {
          (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
        }

        if (!(0, _utilsFs.Debug_collapsible)()) {
          (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
        }
      }
    }

    if (data.Kind.tag === 1) {
      (0, _utilsFs.throw$)((0, _String.toText)((0, _String.interpolate)("Perspective camera update not implemented", [])));
    } else {
      (0, _glortho2dFs.update)(data);
    }

    if ((0, _utilsFs.Debug_collapsible)()) {
      console.groupEnd();
    } else {
      (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
    }
  }
}

function render(data) {
  var msg = (0, _String.toText)((0, _String.interpolate)("Camera %P().render", [data.Name]));

  if ((0, _utilsFs.Debug_enabled)()) {
    if ((0, _utilsFs.Debug_collapsible)()) {
      if ((0, _utilsFs.Debug_logCollapsed)()) {
        console.groupCollapsed(msg);
      } else {
        console.group(msg);
      }
    } else {
      if ((0, _utilsFs.Debug_enabled)()) {
        (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
      }

      if (!(0, _utilsFs.Debug_collapsible)()) {
        (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
      }
    }
  }

  update(data);

  if (data.ClearViewport) {
    clearViewport(data);
  }

  resetViewport(data);

  if (data.Kind.tag === 1) {
    (0, _utilsFs.throw$)((0, _String.toText)((0, _String.interpolate)("Perspective camera rendering not implemented", [])));
  } else {
    (0, _glortho2dFs.render)(data);
  }

  if ((0, _utilsFs.Debug_collapsible)()) {
    console.groupEnd();
  } else {
    (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
  }
}

function toWorldO(point, result, data) {
  if (data.Kind.tag === 1) {
    return (0, _utilsFs.throw$)((0, _String.toText)((0, _String.interpolate)("Perspective camera conversions not implemented", [])));
  } else {
    return (0, _glortho2dFs.toWorldO)(point, result, data);
  }
}

function panByXY(x, y, data) {
  if (data.Kind.tag === 1) {
    (0, _utilsFs.throw$)((0, _String.toText)((0, _String.interpolate)("Perspective camera panning not implemented", [])));
  } else {
    var data_1 = data;
    var lookAt = data_1.LookAt;
    var data_2 = data_1;
    (0, _glortho2dFs.setLookAtXYZ)(lookAt.values[0] + x, lookAt.values[1] + y, data_2.LookAt.values[2], data_2);
  }
}

function panToXYZ(x, y, z, data) {
  if (data.Kind.tag === 1) {
    (0, _utilsFs.throw$)((0, _String.toText)((0, _String.interpolate)("Perspective camera panning not implemented", [])));
  } else {
    (0, _glortho2dFs.setLookAtXYZ)(x, y, z, data);
  }
}

function zoom(amount, data) {
  if (data.Kind.tag === 1) {
    (0, _utilsFs.throw$)((0, _String.toText)((0, _String.interpolate)("Perspective camera zooming not implemented", [])));
  } else {
    (0, _glortho2dFs.zoom)(amount, data);
  }
}

function zoomBy(amount, data) {
  if (data.Kind.tag === 1) {
    (0, _utilsFs.throw$)((0, _String.toText)((0, _String.interpolate)("Perspective camera zooming not implemented", [])));
  } else {
    (0, _glortho2dFs.zoomBy)(amount, data);
  }
}

function zoomToward(center, amount, data) {
  if (data.Kind.tag === 1) {
    (0, _utilsFs.throw$)((0, _String.toText)((0, _String.interpolate)("Perspective camera zooming not implemented", [])));
  } else {
    (0, _glortho2dFs.zoomToward)(center, amount, data);
  }
}

function rotateTo(angle, data) {
  if (data.Kind.tag === 1) {
    (0, _utilsFs.throw$)((0, _String.toText)((0, _String.interpolate)("Perspective camera rotating not implemented", [])));
  } else {
    (0, _glortho2dFs.rotateTo)(angle, data);
  }
}

function rotateBy(angle, data) {
  if (data.Kind.tag === 1) {
    (0, _utilsFs.throw$)((0, _String.toText)((0, _String.interpolate)("Perspective camera rotating not implemented", [])));
  } else {
    (0, _glortho2dFs.rotateBy)(angle, data);
  }
}
},{"./webgl_builder_interfaces.fs.js":"../src/webgl_builder_interfaces.fs.js","./bounds.fs.js":"../src/bounds.fs.js","./vectors.fs.js":"../src/vectors.fs.js","./.fable/fable-library.3.0.0/String.js":"../src/.fable/fable-library.3.0.0/String.js","./utils.fs.js":"../src/utils.fs.js","./glortho2d.fs.js":"../src/glortho2d.fs.js"}],"../src/glscene.fs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clean = clean;
exports.create = create;
exports.clearSceneBackground = clearSceneBackground;
exports.render = render;
exports.removeObject = exports.addObject = exports.removeCamera = exports.addCamera = exports.tryGetObject = exports.getObject = exports.tryGetCamera = exports.getCamera = void 0;

var _Types = require("./.fable/fable-library.3.0.0/Types.js");

var _webgl_builder_interfacesFs = require("./webgl_builder_interfaces.fs.js");

var _Reflection = require("./.fable/fable-library.3.0.0/Reflection.js");

var _List = require("./.fable/fable-library.3.0.0/List.js");

var _globjFs = require("./globj.fs.js");

var _glortho2dFs = require("./glortho2d.fs.js");

var _Array = require("./.fable/fable-library.3.0.0/Array.js");

var _Seq = require("./.fable/fable-library.3.0.0/Seq.js");

var _boundsFs = require("./bounds.fs.js");

var _vectorsFs = require("./vectors.fs.js");

var _String = require("./.fable/fable-library.3.0.0/String.js");

var _utilsFs = require("./utils.fs.js");

var _gluniformFs = require("./gluniform.fs.js");

var _glcameraFs = require("./glcamera.fs.js");

var _matriciesFs = require("./matricies.fs.js");

var _optionexFs = require("./optionex.fs.js");

var _Util = require("./.fable/fable-library.3.0.0/Util.js");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Builder = /*#__PURE__*/function (_Record) {
  _inherits(Builder, _Record);

  var _super = _createSuper(Builder);

  function Builder(CameraCreators, ObjectCreators, SharedCreator, Data) {
    var _this;

    _classCallCheck(this, Builder);

    _this = _super.call(this);
    _this.CameraCreators = CameraCreators;
    _this.ObjectCreators = ObjectCreators;
    _this.SharedCreator = SharedCreator;
    _this.Data = Data;
    return _this;
  }

  return Builder;
}(_Types.Record);

function Builder$reflection() {
  return (0, _Reflection.record_type)("GlScene.Builder", [], Builder, function () {
    return [["CameraCreators", (0, _Reflection.list_type)((0, _Reflection.lambda_type)((0, _webgl_builder_interfacesFs.GlSceneData$reflection)(), (0, _webgl_builder_interfacesFs.GlCameraData$reflection)()))], ["ObjectCreators", (0, _Reflection.list_type)((0, _Reflection.lambda_type)((0, _webgl_builder_interfacesFs.GlSceneData$reflection)(), (0, _webgl_builder_interfacesFs.GlObjData$reflection)()))], ["SharedCreator", (0, _Reflection.option_type)((0, _Reflection.lambda_type)((0, _webgl_builder_interfacesFs.GlSceneData$reflection)(), (0, _webgl_builder_interfacesFs.GlObjData$reflection)()))], ["Data", (0, _webgl_builder_interfacesFs.GlSceneData$reflection)()]];
  });
}

var getCamera = function getCamera(name) {
  return function (data) {
    return (0, _webgl_builder_interfacesFs.GlCommon_getCamera)(name, data);
  };
};

exports.getCamera = getCamera;

var tryGetCamera = function tryGetCamera(name) {
  return function (data) {
    return (0, _webgl_builder_interfacesFs.GlCommon_tryGetCamera)(name, data);
  };
};

exports.tryGetCamera = tryGetCamera;

var getObject = function getObject(name) {
  return function (data) {
    return (0, _webgl_builder_interfacesFs.GlCommon_getObject)(name, data);
  };
};

exports.getObject = getObject;

var tryGetObject = function tryGetObject(name) {
  return function (data) {
    return (0, _webgl_builder_interfacesFs.GlCommon_tryGetObject)(name, data);
  };
};

exports.tryGetObject = tryGetObject;

var addCamera = function addCamera(creator) {
  return function (data) {
    return (0, _webgl_builder_interfacesFs.GlCommon_addCamera)(creator, data);
  };
};

exports.addCamera = addCamera;

var removeCamera = function removeCamera(cam) {
  return function (data) {
    return (0, _webgl_builder_interfacesFs.GlCommon_removeCamera)(cam, data);
  };
};

exports.removeCamera = removeCamera;

var addObject = function addObject(creator) {
  return function (data) {
    return (0, _webgl_builder_interfacesFs.GlCommon_addObject)(creator, data);
  };
};

exports.addObject = addObject;

var removeObject = function removeObject(globj) {
  return function (data) {
    return (0, _webgl_builder_interfacesFs.GlCommon_removeObject)(globj, data);
  };
};

exports.removeObject = removeObject;

function clean(data) {
  data.IsDirty = false;
}

function applyCreators(builder) {
  var data = builder.Data;

  var createCamera = function createCamera(creator) {
    return creator(data);
  };

  var createCameras = function createCameras(creators) {
    return (0, _List.map)(createCamera, creators);
  };

  var createObject = function createObject(creator_1) {
    return creator_1(data);
  };

  var createObjects = function createObjects(creators_1) {
    return (0, _List.map)(createObject, creators_1);
  };

  var createShared = function createShared(creator_2) {
    if (creator_2 == null) {
      var inputRecord = (0, _globjFs.emptyObject)(data);
      return new _webgl_builder_interfacesFs.GlObjData(inputRecord.Id, "shared", inputRecord.ProgramInfo, inputRecord.IsDirty, inputRecord.Scene, inputRecord.DrawMethod, inputRecord.DrawPrimitive, inputRecord.VertexCount, inputRecord.VertexOffset, inputRecord.VertexCountOffset, inputRecord.InstanceCount, inputRecord.InstanceOffset, inputRecord.InstanceCountOffset, inputRecord.IndiciesOffset, inputRecord.Capabilities, inputRecord.Uniforms, inputRecord.Ubos, inputRecord.Attributes, inputRecord.Indicies, inputRecord.Textures, inputRecord.VertexCountAttributes, inputRecord.InstanceCountAttributes, inputRecord.Vao, inputRecord.ProcessLinked, inputRecord.Layer, inputRecord.ParallaxCamera, inputRecord.ParallaxDistance, inputRecord.ParallaxOffset, inputRecord.ParallaxLastPosition, inputRecord.Angle, inputRecord.Position, inputRecord.Scale, inputRecord.ModelMatrix, inputRecord.ParallaxMatrix, inputRecord.Parent, inputRecord.Link, inputRecord.LinkedChildren, inputRecord.IsModelDirty, inputRecord.IsParallaxDirty, inputRecord.RecalcNeeded, inputRecord.CalcDrawMethod, inputRecord.CalcVertexCount, inputRecord.CalcInstanceCount);
    } else {
      var creator_3 = creator_2;
      return creator_3(data);
    }
  };

  var addObjects = function addObjects(data_1) {
    (0, _List.iterate)(function (c) {
      var value = (0, _webgl_builder_interfacesFs.GlCommon_addObject)(c, data_1);
      void value;
    }, (0, _List.reverse)(builder.ObjectCreators));
    return data_1;
  };

  if (builder.CameraCreators.tail == null) {
    builder.CameraCreators = (0, _List.singleton)(function (scene) {
      return (0, _glortho2dFs.create)((0, _List.singleton)(new _webgl_builder_interfacesFs.GlCamProp(0, "defaultCamera")), scene);
    });
  }

  data.Shared = createShared(builder.SharedCreator);
  data.Cameras = createCameras((0, _List.reverse)(builder.CameraCreators));
  return addObjects(data);
}

function build(builder) {
  return applyCreators(builder);
}

function createLayer(index) {
  return new _webgl_builder_interfacesFs.GlLayerData(index, (0, _List.empty)());
}

function apply(props, builder) {
  var loop = function loop(props_1_mut, b_mut) {
    var inputRecord_1, inputRecord_2, inputRecord_3, inputRecord_4, inputRecord_5, inputRecord_6, inputRecord_7, inputRecord_8, inputRecord_9, inputRecord_10, inputRecord_11, inputRecord;

    var _loop = function _loop() {
      var props_1 = props_1_mut,
          b = b_mut;

      var updateData = function updateData(data) {
        b.Data = data;
        return b;
      };

      var addShared = function addShared(creator) {
        b.SharedCreator = creator;
        return b;
      };

      var addCamera_1 = function addCamera_1(creator_1) {
        b.CameraCreators = (0, _List.cons)(creator_1, b.CameraCreators);
        return b;
      };

      var addObject_1 = function addObject_1(creator_2) {
        b.ObjectCreators = (0, _List.cons)(creator_2, b.ObjectCreators);
        return b;
      };

      var createLayers = function createLayers(count) {
        return (0, _Array.map)(createLayer, Int32Array.from((0, _Seq.rangeNumber)(0, 1, count - 1)));
      };

      if (props_1.tail != null) {
        var t = props_1.tail;
        var h = props_1.head;

        switch (h.tag) {
          case 3:
            {
              var x_1 = h.fields[0];
              props_1_mut = t;
              b_mut = updateData((inputRecord_1 = b.Data, new _webgl_builder_interfacesFs.GlSceneData(inputRecord_1.Id, inputRecord_1.Name, inputRecord_1.IsDirty, inputRecord_1.Canvas, x_1, inputRecord_1.ClearMask, inputRecord_1.WorldBounds, inputRecord_1.SceneBounds, inputRecord_1.WorldScale, inputRecord_1.LineWidthScale, inputRecord_1.ClearSceneBackground, inputRecord_1.Layers, inputRecord_1.DefaultLayer, inputRecord_1.Shared, inputRecord_1.Cameras)));
              return "continue|loop";
            }

          case 4:
            {
              props_1_mut = t;
              b_mut = updateData((inputRecord_2 = b.Data, new _webgl_builder_interfacesFs.GlSceneData(inputRecord_2.Id, inputRecord_2.Name, inputRecord_2.IsDirty, inputRecord_2.Canvas, inputRecord_2.SceneBackground, b.Data.ClearMask | 16384, inputRecord_2.WorldBounds, inputRecord_2.SceneBounds, inputRecord_2.WorldScale, inputRecord_2.LineWidthScale, inputRecord_2.ClearSceneBackground, inputRecord_2.Layers, inputRecord_2.DefaultLayer, inputRecord_2.Shared, inputRecord_2.Cameras)));
              return "continue|loop";
            }

          case 5:
            {
              props_1_mut = t;
              b_mut = updateData((inputRecord_3 = b.Data, new _webgl_builder_interfacesFs.GlSceneData(inputRecord_3.Id, inputRecord_3.Name, inputRecord_3.IsDirty, inputRecord_3.Canvas, inputRecord_3.SceneBackground, b.Data.ClearMask | 256, inputRecord_3.WorldBounds, inputRecord_3.SceneBounds, inputRecord_3.WorldScale, inputRecord_3.LineWidthScale, inputRecord_3.ClearSceneBackground, inputRecord_3.Layers, inputRecord_3.DefaultLayer, inputRecord_3.Shared, inputRecord_3.Cameras)));
              return "continue|loop";
            }

          case 6:
            {
              props_1_mut = t;
              b_mut = updateData((inputRecord_4 = b.Data, new _webgl_builder_interfacesFs.GlSceneData(inputRecord_4.Id, inputRecord_4.Name, inputRecord_4.IsDirty, inputRecord_4.Canvas, inputRecord_4.SceneBackground, b.Data.ClearMask | 1024, inputRecord_4.WorldBounds, inputRecord_4.SceneBounds, inputRecord_4.WorldScale, inputRecord_4.LineWidthScale, inputRecord_4.ClearSceneBackground, inputRecord_4.Layers, inputRecord_4.DefaultLayer, inputRecord_4.Shared, inputRecord_4.Cameras)));
              return "continue|loop";
            }

          case 7:
            {
              var x_2 = h.fields[0] | 0;
              props_1_mut = t;
              b_mut = updateData((inputRecord_5 = b.Data, new _webgl_builder_interfacesFs.GlSceneData(inputRecord_5.Id, inputRecord_5.Name, inputRecord_5.IsDirty, inputRecord_5.Canvas, inputRecord_5.SceneBackground, x_2, inputRecord_5.WorldBounds, inputRecord_5.SceneBounds, inputRecord_5.WorldScale, inputRecord_5.LineWidthScale, inputRecord_5.ClearSceneBackground, inputRecord_5.Layers, inputRecord_5.DefaultLayer, inputRecord_5.Shared, inputRecord_5.Cameras)));
              return "continue|loop";
            }

          case 8:
            {
              var x_3 = h.fields[0];
              props_1_mut = t;
              b_mut = updateData((inputRecord_6 = b.Data, new _webgl_builder_interfacesFs.GlSceneData(inputRecord_6.Id, inputRecord_6.Name, inputRecord_6.IsDirty, inputRecord_6.Canvas, inputRecord_6.SceneBackground, inputRecord_6.ClearMask, x_3, inputRecord_6.SceneBounds, inputRecord_6.WorldScale, inputRecord_6.LineWidthScale, inputRecord_6.ClearSceneBackground, inputRecord_6.Layers, inputRecord_6.DefaultLayer, inputRecord_6.Shared, inputRecord_6.Cameras)));
              return "continue|loop";
            }

          case 9:
            {
              var x_4 = h.fields[0];
              props_1_mut = t;
              b_mut = updateData((inputRecord_7 = b.Data, new _webgl_builder_interfacesFs.GlSceneData(inputRecord_7.Id, inputRecord_7.Name, inputRecord_7.IsDirty, inputRecord_7.Canvas, inputRecord_7.SceneBackground, inputRecord_7.ClearMask, inputRecord_7.WorldBounds, x_4, inputRecord_7.WorldScale, inputRecord_7.LineWidthScale, inputRecord_7.ClearSceneBackground, inputRecord_7.Layers, inputRecord_7.DefaultLayer, inputRecord_7.Shared, inputRecord_7.Cameras)));
              return "continue|loop";
            }

          case 10:
            {
              var x_5 = h.fields[0];
              props_1_mut = t;
              b_mut = updateData((inputRecord_8 = b.Data, new _webgl_builder_interfacesFs.GlSceneData(inputRecord_8.Id, inputRecord_8.Name, inputRecord_8.IsDirty, inputRecord_8.Canvas, inputRecord_8.SceneBackground, inputRecord_8.ClearMask, inputRecord_8.WorldBounds, inputRecord_8.SceneBounds, x_5, 1 / x_5, inputRecord_8.ClearSceneBackground, inputRecord_8.Layers, inputRecord_8.DefaultLayer, inputRecord_8.Shared, inputRecord_8.Cameras)));
              return "continue|loop";
            }

          case 11:
            {
              props_1_mut = t;
              b_mut = updateData((inputRecord_9 = b.Data, new _webgl_builder_interfacesFs.GlSceneData(inputRecord_9.Id, inputRecord_9.Name, inputRecord_9.IsDirty, inputRecord_9.Canvas, inputRecord_9.SceneBackground, inputRecord_9.ClearMask, inputRecord_9.WorldBounds, inputRecord_9.SceneBounds, inputRecord_9.WorldScale, inputRecord_9.LineWidthScale, false, inputRecord_9.Layers, inputRecord_9.DefaultLayer, inputRecord_9.Shared, inputRecord_9.Cameras)));
              return "continue|loop";
            }

          case 1:
            {
              var x_6 = h.fields[0] | 0;
              props_1_mut = t;
              b_mut = updateData((inputRecord_10 = b.Data, new _webgl_builder_interfacesFs.GlSceneData(inputRecord_10.Id, inputRecord_10.Name, inputRecord_10.IsDirty, inputRecord_10.Canvas, inputRecord_10.SceneBackground, inputRecord_10.ClearMask, inputRecord_10.WorldBounds, inputRecord_10.SceneBounds, inputRecord_10.WorldScale, inputRecord_10.LineWidthScale, inputRecord_10.ClearSceneBackground, createLayers(x_6), inputRecord_10.DefaultLayer, inputRecord_10.Shared, inputRecord_10.Cameras)));
              return "continue|loop";
            }

          case 2:
            {
              var x_7 = h.fields[0] | 0;
              props_1_mut = t;
              b_mut = updateData((inputRecord_11 = b.Data, new _webgl_builder_interfacesFs.GlSceneData(inputRecord_11.Id, inputRecord_11.Name, inputRecord_11.IsDirty, inputRecord_11.Canvas, inputRecord_11.SceneBackground, inputRecord_11.ClearMask, inputRecord_11.WorldBounds, inputRecord_11.SceneBounds, inputRecord_11.WorldScale, inputRecord_11.LineWidthScale, inputRecord_11.ClearSceneBackground, inputRecord_11.Layers, x_7, inputRecord_11.Shared, inputRecord_11.Cameras)));
              return "continue|loop";
            }

          case 13:
            {
              var x_8 = h.fields[0];
              props_1_mut = t;
              b_mut = addShared(x_8);
              return "continue|loop";
            }

          case 12:
            {
              var x_9 = h.fields[0];
              props_1_mut = t;
              b_mut = addCamera_1(x_9);
              return "continue|loop";
            }

          case 14:
            {
              var x_10 = h.fields[0];
              props_1_mut = t;
              b_mut = addObject_1(x_10);
              return "continue|loop";
            }

          default:
            {
              var x = h.fields[0];
              props_1_mut = t;
              b_mut = updateData((inputRecord = b.Data, new _webgl_builder_interfacesFs.GlSceneData(inputRecord.Id, x, inputRecord.IsDirty, inputRecord.Canvas, inputRecord.SceneBackground, inputRecord.ClearMask, inputRecord.WorldBounds, inputRecord.SceneBounds, inputRecord.WorldScale, inputRecord.LineWidthScale, inputRecord.ClearSceneBackground, inputRecord.Layers, inputRecord.DefaultLayer, inputRecord.Shared, inputRecord.Cameras)));
              return "continue|loop";
            }
        }
      } else {
        return {
          v: b
        };
      }

      return "break";
    };

    loop: while (true) {
      var _ret = _loop();

      if (_ret === "continue|loop") continue loop;
      if (_ret === "break") break;
      if (_typeof(_ret) === "object") return _ret.v;
    }
  };

  return loop(props, builder);
}

function create(canvas, props) {
  var gl = canvas.Context;
  var worldBounds = (0, _boundsFs.Bounds__Clone)(canvas.WorldBounds);
  return build(apply(props, new Builder((0, _List.empty)(), (0, _List.empty)(), void 0, new _webgl_builder_interfacesFs.GlSceneData(0, "", true, canvas, (0, _vectorsFs.Vec4_Create)(), 16384, worldBounds, (0, _boundsFs.BoundsModule_boundsSize)(gl.canvas.width, gl.canvas.height), 1, 1, false, [createLayer(0)], 0, void 0, (0, _List.empty)()))));
}

function update2(data) {
  if (data.IsDirty) {
    var msg = (0, _String.toText)((0, _String.interpolate)("scene.%P().update", [data.Name]));

    if ((0, _utilsFs.Debug_enabled)()) {
      if ((0, _utilsFs.Debug_collapsible)()) {
        if ((0, _utilsFs.Debug_logCollapsed)()) {
          console.groupCollapsed(msg);
        } else {
          console.group(msg);
        }
      } else {
        if ((0, _utilsFs.Debug_enabled)()) {
          (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
        }

        if (!(0, _utilsFs.Debug_collapsible)()) {
          (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
        }
      }
    }

    clean(data);

    if ((0, _utilsFs.Debug_collapsible)()) {
      console.groupEnd();
    } else {
      (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
    }
  }
}

function clearSceneBackground(data) {
  var gl = data.Canvas.Context;
  var vp = (0, _boundsFs.Bounds__get_Values)(data.SceneBounds);
  var cc = (0, _vectorsFs.Vec4__get_Values)(data.SceneBackground);
  gl.scissor(vp[0], vp[1], vp[2], vp[3]);
  gl.clearColor(cc[0], cc[1], cc[2], cc[3]);
  gl.enable(gl.SCISSOR_TEST);
  gl.clear(data.ClearMask);
  gl.disable(gl.SCISSOR_TEST);
}

function render(data) {
  var updateCameraCanvasBounds = function updateCameraCanvasBounds(camera, canvasBounds) {
    (0, _gluniformFs.setValue)((0, _boundsFs.Bounds__get_Values)(camera.Scene.Canvas.CanvasBounds), canvasBounds);
  };

  var updateCameraViewport = function updateCameraViewport(camera_1, viewport) {
    var camViewport = (0, _boundsFs.Bounds__Inflate_5E38073B)(camera_1.ViewportBounds, -camera_1.BorderWidth);
    (0, _gluniformFs.setValue)((0, _boundsFs.Bounds__get_Values)(camViewport), viewport);
  };

  var renderCamera = function renderCamera(camera_2) {
    var msg = (0, _String.toText)((0, _String.interpolate)("scene.renderCamera %P()", [camera_2.Name]));

    if ((0, _utilsFs.Debug_enabled)()) {
      if ((0, _utilsFs.Debug_collapsible)()) {
        if ((0, _utilsFs.Debug_logCollapsed)()) {
          console.groupCollapsed(msg);
        } else {
          console.group(msg);
        }
      } else {
        if ((0, _utilsFs.Debug_enabled)()) {
          (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
        }

        if (!(0, _utilsFs.Debug_collapsible)()) {
          (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
        }
      }
    }

    (0, _globjFs.update)(camera_2, data.Shared);
    (0, _glcameraFs.render)(camera_2);

    if ((0, _utilsFs.Debug_collapsible)()) {
      console.groupEnd();
    } else {
      (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
    }
  };

  var renderCameraMat = function renderCameraMat(projMat, viewMat, camera_3) {
    var msg_2 = (0, _String.toText)((0, _String.interpolate)("scene.renderCameraMat %P()", [camera_3.Name]));

    if ((0, _utilsFs.Debug_enabled)()) {
      if ((0, _utilsFs.Debug_collapsible)()) {
        if ((0, _utilsFs.Debug_logCollapsed)()) {
          console.groupCollapsed(msg_2);
        } else {
          console.group(msg_2);
        }
      } else {
        if ((0, _utilsFs.Debug_enabled)()) {
          (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg_2]));
        }

        if (!(0, _utilsFs.Debug_collapsible)()) {
          (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
        }
      }
    }

    (0, _glcameraFs.update)(camera_3);
    (0, _gluniformFs.setValue)((0, _matriciesFs.Mat4__get_Values)(camera_3.ProjectionMatrix), projMat);
    (0, _gluniformFs.setValue)((0, _matriciesFs.Mat4__get_Values)(camera_3.ViewMatrix), viewMat);
    (0, _globjFs.update)(camera_3, data.Shared);
    (0, _glcameraFs.render)(camera_3);

    if ((0, _utilsFs.Debug_collapsible)()) {
      console.groupEnd();
    } else {
      (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
    }
  };

  if (data.IsDirty) {
    var msg_4 = (0, _String.toText)((0, _String.interpolate)("scene.%P().render", [data.Name]));

    if ((0, _utilsFs.Debug_enabled)()) {
      if ((0, _utilsFs.Debug_collapsible)()) {
        if ((0, _utilsFs.Debug_logCollapsed)()) {
          console.groupCollapsed(msg_4);
        } else {
          console.group(msg_4);
        }
      } else {
        if ((0, _utilsFs.Debug_enabled)()) {
          (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg_4]));
        }

        if (!(0, _utilsFs.Debug_collapsible)()) {
          (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
        }
      }
    }

    if (data.ClearSceneBackground) {
      clearSceneBackground(data);
    }

    var canvasBounds_1 = (0, _globjFs.tryGetUniform)("canvasBounds")(data.Shared);
    var viewport_1 = (0, _globjFs.tryGetUniform)("viewport")(data.Shared);
    var projMat_1 = (0, _globjFs.tryGetUniform)("projMat")(data.Shared);
    var viewMat_1 = (0, _globjFs.tryGetUniform)("viewMat")(data.Shared);

    var renderCam = function renderCam(camera_4) {
      (0, _optionexFs.call)((0, _Util.partialApply)(1, updateCameraCanvasBounds, [camera_4]), canvasBounds_1);
      (0, _optionexFs.call)((0, _Util.partialApply)(1, updateCameraViewport, [camera_4]), viewport_1);
      var matchValue = [projMat_1, viewMat_1];
      var pattern_matching_result, proj, view;

      if (matchValue[0] != null) {
        if (matchValue[1] != null) {
          pattern_matching_result = 0;
          proj = matchValue[0];
          view = matchValue[1];
        } else {
          pattern_matching_result = 1;
        }
      } else {
        pattern_matching_result = 1;
      }

      switch (pattern_matching_result) {
        case 0:
          {
            renderCameraMat(proj, view, camera_4);
            break;
          }

        case 1:
          {
            renderCamera(camera_4);
            break;
          }
      }
    };

    (0, _List.iterate)(renderCam, data.Cameras);
    (0, _globjFs._cleanLinkedBuffers)(data.Shared);
    (0, _Seq.iterate)(function (data_3) {
      (0, _globjFs._cleanLinkedBuffers)(data_3);
    }, (0, _webgl_builder_interfacesFs.GlCommon_objects)(data));

    if ((0, _utilsFs.Debug_collapsible)()) {
      console.groupEnd();
    } else {
      (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
    }
  }
}
},{"./.fable/fable-library.3.0.0/Types.js":"../src/.fable/fable-library.3.0.0/Types.js","./webgl_builder_interfaces.fs.js":"../src/webgl_builder_interfaces.fs.js","./.fable/fable-library.3.0.0/Reflection.js":"../src/.fable/fable-library.3.0.0/Reflection.js","./.fable/fable-library.3.0.0/List.js":"../src/.fable/fable-library.3.0.0/List.js","./globj.fs.js":"../src/globj.fs.js","./glortho2d.fs.js":"../src/glortho2d.fs.js","./.fable/fable-library.3.0.0/Array.js":"../src/.fable/fable-library.3.0.0/Array.js","./.fable/fable-library.3.0.0/Seq.js":"../src/.fable/fable-library.3.0.0/Seq.js","./bounds.fs.js":"../src/bounds.fs.js","./vectors.fs.js":"../src/vectors.fs.js","./.fable/fable-library.3.0.0/String.js":"../src/.fable/fable-library.3.0.0/String.js","./utils.fs.js":"../src/utils.fs.js","./gluniform.fs.js":"../src/gluniform.fs.js","./glcamera.fs.js":"../src/glcamera.fs.js","./matricies.fs.js":"../src/matricies.fs.js","./optionex.fs.js":"../src/optionex.fs.js","./.fable/fable-library.3.0.0/Util.js":"../src/.fable/fable-library.3.0.0/Util.js"}],"../src/glcanvas.fs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSceneCount = getSceneCount;
exports.getScene = getScene;
exports.clean = clean;
exports.create = create;
exports.render = render;
exports.removeScene = exports.addScene = void 0;

var _Types = require("./.fable/fable-library.3.0.0/Types.js");

var _Reflection = require("./.fable/fable-library.3.0.0/Reflection.js");

var _webgl_builder_interfacesFs = require("./webgl_builder_interfaces.fs.js");

var _String = require("./.fable/fable-library.3.0.0/String.js");

var _utilsFs = require("./utils.fs.js");

var _webgl_typesFs = require("./webgl_types.fs.js");

var _boundsFs = require("./bounds.fs.js");

var _Option = require("./.fable/fable-library.3.0.0/Option.js");

var _List = require("./.fable/fable-library.3.0.0/List.js");

var _glcanvasparamsFs = require("./glcanvasparams.fs.js");

var _vectorsFs = require("./vectors.fs.js");

var _glsceneFs = require("./glscene.fs.js");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Builder = /*#__PURE__*/function (_Record) {
  _inherits(Builder, _Record);

  var _super = _createSuper(Builder);

  function Builder(Canvas, SceneCreators, Data) {
    var _this;

    _classCallCheck(this, Builder);

    _this = _super.call(this);
    _this.Canvas = Canvas;
    _this.SceneCreators = SceneCreators;
    _this.Data = Data;
    return _this;
  }

  return Builder;
}(_Types.Record);

function Builder$reflection() {
  return (0, _Reflection.record_type)("GlCanvas.Builder", [], Builder, function () {
    return [["Canvas", (0, _Reflection.class_type)("Browser.Types.HTMLCanvasElement")], ["SceneCreators", (0, _Reflection.list_type)((0, _Reflection.lambda_type)((0, _webgl_builder_interfacesFs.GlCanvasData$reflection)(), (0, _webgl_builder_interfacesFs.GlSceneData$reflection)()))], ["Data", (0, _webgl_builder_interfacesFs.GlCanvasData$reflection)()]];
  });
}

var addScene = function addScene(creator) {
  return function (data) {
    return (0, _webgl_builder_interfacesFs.GlCommon_addScene)(creator, data);
  };
};

exports.addScene = addScene;

var removeScene = function removeScene(scene) {
  return function (data) {
    return (0, _webgl_builder_interfacesFs.GlCommon_removeScene)(scene, data);
  };
};

exports.removeScene = removeScene;

function getSceneCount(data) {
  return data.Scenes.length;
}

function getScene(index, data) {
  return data.Scenes[index];
}

function clean(data) {
  data.IsDirty = false;
}

function applyPixelStorageParams(gl, data) {
  var loop = function loop(storageParams_mut) {
    loop: while (true) {
      var storageParams = storageParams_mut;

      if (storageParams.tail != null) {
        var remaining = storageParams.tail;
        var param = storageParams.head;

        switch (param.tag) {
          case 1:
            {
              var x_1 = param.fields[0] | 0;
              var param_2 = 3317;
              var value_1 = x_1 | 0;
              var msg_1 = (0, _String.toText)((0, _String.interpolate)("gl.pixelStorei(%P(), %P())", [(0, _utilsFs.enumName)(_webgl_typesFs.GlPixelStoreParamT, param_2), value_1]));

              if ((0, _utilsFs.Debug_enabled)()) {
                (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg_1]));
              }

              gl.pixelStorei(param_2, value_1);
              break;
            }

          case 2:
            {
              var param_3 = 37440;
              var value_2 = 1;
              var msg_2 = (0, _String.toText)((0, _String.interpolate)("gl.pixelStorei(%P(), %P())", [(0, _utilsFs.enumName)(_webgl_typesFs.GlPixelStoreParamT, param_3), value_2]));

              if ((0, _utilsFs.Debug_enabled)()) {
                (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg_2]));
              }

              gl.pixelStorei(param_3, value_2);
              break;
            }

          case 3:
            {
              var param_4 = 37441;
              var value_3 = 1;
              var msg_3 = (0, _String.toText)((0, _String.interpolate)("gl.pixelStorei(%P(), %P())", [(0, _utilsFs.enumName)(_webgl_typesFs.GlPixelStoreParamT, param_4), value_3]));

              if ((0, _utilsFs.Debug_enabled)()) {
                (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg_3]));
              }

              gl.pixelStorei(param_4, value_3);
              break;
            }

          case 4:
            {
              var x_2 = param.fields[0] | 0;
              var param_5 = 37443;
              var value_4 = x_2 | 0;
              var msg_4 = (0, _String.toText)((0, _String.interpolate)("gl.pixelStorei(%P(), %P())", [(0, _utilsFs.enumName)(_webgl_typesFs.GlPixelStoreParamT, param_5), value_4]));

              if ((0, _utilsFs.Debug_enabled)()) {
                (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg_4]));
              }

              gl.pixelStorei(param_5, value_4);
              break;
            }

          case 5:
            {
              var x_3 = param.fields[0] | 0;
              var param_6 = 3330;
              var value_5 = x_3 | 0;
              var msg_5 = (0, _String.toText)((0, _String.interpolate)("gl.pixelStorei(%P(), %P())", [(0, _utilsFs.enumName)(_webgl_typesFs.GlPixelStoreParamT, param_6), value_5]));

              if ((0, _utilsFs.Debug_enabled)()) {
                (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg_5]));
              }

              gl.pixelStorei(param_6, value_5);
              break;
            }

          case 6:
            {
              var x_4 = param.fields[0] | 0;
              var param_7 = 3332;
              var value_6 = x_4 | 0;
              var msg_6 = (0, _String.toText)((0, _String.interpolate)("gl.pixelStorei(%P(), %P())", [(0, _utilsFs.enumName)(_webgl_typesFs.GlPixelStoreParamT, param_7), value_6]));

              if ((0, _utilsFs.Debug_enabled)()) {
                (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg_6]));
              }

              gl.pixelStorei(param_7, value_6);
              break;
            }

          case 7:
            {
              var x_5 = param.fields[0] | 0;
              var param_8 = 3331;
              var value_7 = x_5 | 0;
              var msg_7 = (0, _String.toText)((0, _String.interpolate)("gl.pixelStorei(%P(), %P())", [(0, _utilsFs.enumName)(_webgl_typesFs.GlPixelStoreParamT, param_8), value_7]));

              if ((0, _utilsFs.Debug_enabled)()) {
                (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg_7]));
              }

              gl.pixelStorei(param_8, value_7);
              break;
            }

          case 8:
            {
              var x_6 = param.fields[0] | 0;
              var param_9 = 3314;
              var value_8 = x_6 | 0;
              var msg_8 = (0, _String.toText)((0, _String.interpolate)("gl.pixelStorei(%P(), %P())", [(0, _utilsFs.enumName)(_webgl_typesFs.GlPixelStoreParamT, param_9), value_8]));

              if ((0, _utilsFs.Debug_enabled)()) {
                (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg_8]));
              }

              gl.pixelStorei(param_9, value_8);
              break;
            }

          case 9:
            {
              var x_7 = param.fields[0] | 0;
              var param_10 = 32878;
              var value_9 = x_7 | 0;
              var msg_9 = (0, _String.toText)((0, _String.interpolate)("gl.pixelStorei(%P(), %P())", [(0, _utilsFs.enumName)(_webgl_typesFs.GlPixelStoreParamT, param_10), value_9]));

              if ((0, _utilsFs.Debug_enabled)()) {
                (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg_9]));
              }

              gl.pixelStorei(param_10, value_9);
              break;
            }

          case 10:
            {
              var x_8 = param.fields[0] | 0;
              var param_11 = 3316;
              var value_10 = x_8 | 0;
              var msg_10 = (0, _String.toText)((0, _String.interpolate)("gl.pixelStorei(%P(), %P())", [(0, _utilsFs.enumName)(_webgl_typesFs.GlPixelStoreParamT, param_11), value_10]));

              if ((0, _utilsFs.Debug_enabled)()) {
                (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg_10]));
              }

              gl.pixelStorei(param_11, value_10);
              break;
            }

          case 11:
            {
              var x_9 = param.fields[0] | 0;
              var param_12 = 3315;
              var value_11 = x_9 | 0;
              var msg_11 = (0, _String.toText)((0, _String.interpolate)("gl.pixelStorei(%P(), %P())", [(0, _utilsFs.enumName)(_webgl_typesFs.GlPixelStoreParamT, param_12), value_11]));

              if ((0, _utilsFs.Debug_enabled)()) {
                (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg_11]));
              }

              gl.pixelStorei(param_12, value_11);
              break;
            }

          case 12:
            {
              var x_10 = param.fields[0] | 0;
              var param_13 = 32877;
              var value_12 = x_10 | 0;
              var msg_12 = (0, _String.toText)((0, _String.interpolate)("gl.pixelStorei(%P(), %P())", [(0, _utilsFs.enumName)(_webgl_typesFs.GlPixelStoreParamT, param_13), value_12]));

              if ((0, _utilsFs.Debug_enabled)()) {
                (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg_12]));
              }

              gl.pixelStorei(param_13, value_12);
              break;
            }

          default:
            {
              var x = param.fields[0] | 0;
              var param_1 = 3333;
              var value = x | 0;
              var msg = (0, _String.toText)((0, _String.interpolate)("gl.pixelStorei(%P(), %P())", [(0, _utilsFs.enumName)(_webgl_typesFs.GlPixelStoreParamT, param_1), value]));

              if ((0, _utilsFs.Debug_enabled)()) {
                (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
              }

              gl.pixelStorei(param_1, value);
            }
        }

        storageParams_mut = remaining;
        continue loop;
      }

      break;
    }
  };

  loop(data.PixelStorageParams);
}

function updateContext(builder) {
  var canvas = builder.Canvas;
  var data = builder.Data;
  canvas.width = (0, _boundsFs.Bounds__get_Size)(data.CanvasBounds).values[0];
  canvas.height = (0, _boundsFs.Bounds__get_Size)(data.CanvasBounds).values[1];
  var att = Object.assign({}, data.Attributes);
  var gl = canvas.getContext("webgl2", (0, _Option.some)(att));
  applyPixelStorageParams(gl, data);
  var inputRecord = builder.Data;
  builder.Data = new _webgl_builder_interfacesFs.GlCanvasData(inputRecord.Name, inputRecord.IsDirty, gl, inputRecord.Attributes, inputRecord.Params, inputRecord.PixelStorageParams, inputRecord.CanvasBackground, inputRecord.ClearMask, inputRecord.ClearCanvas, inputRecord.WorldBounds, inputRecord.CanvasBounds, inputRecord.Scenes);
  return builder;
}

function applyCreators(builder) {
  var data = builder.Data;

  var createScene = function createScene(creator) {
    return creator(data);
  };

  var createScenes = function createScenes(creators) {
    return (0, _List.map)(createScene, creators);
  };

  data.Scenes = Array.from(createScenes((0, _List.reverse)(builder.SceneCreators)));
  return data;
}

function build(builder) {
  return applyCreators(updateContext(builder));
}

function apply(props, builder) {
  var loop = function loop(props_1_mut, b_mut) {
    var inputRecord_1, inputRecord_2, inputRecord_3, inputRecord_4, inputRecord_5, inputRecord_6, inputRecord_7, inputRecord_8, inputRecord_9, inputRecord_10, inputRecord_11, inputRecord_12, inputRecord_13, inputRecord_14, inputRecord_15, inputRecord_16, inputRecord_17, inputRecord_18, inputRecord_19, inputRecord_20, inputRecord_21, inputRecord_22, inputRecord_23, inputRecord_24, inputRecord_25, inputRecord_26, inputRecord_27, inputRecord_28, inputRecord_29, inputRecord_30, inputRecord_31, inputRecord_32, inputRecord_33, inputRecord_34, inputRecord;

    var _loop = function _loop() {
      var props_1 = props_1_mut,
          b = b_mut;

      var updateData = function updateData(data) {
        b.Data = data;
        return b;
      };

      var addScene_1 = function addScene_1(creator) {
        b.SceneCreators = (0, _List.cons)(creator, b.SceneCreators);
        return b;
      };

      if (props_1.tail != null) {
        var t = props_1.tail;
        var h = props_1.head;

        switch (h.tag) {
          case 6:
            {
              var x_1 = h.fields[0];
              props_1_mut = t;
              b_mut = updateData((inputRecord_1 = b.Data, new _webgl_builder_interfacesFs.GlCanvasData(inputRecord_1.Name, inputRecord_1.IsDirty, inputRecord_1.Context, inputRecord_1.Attributes, inputRecord_1.Params, (0, _List.cons)(x_1, b.Data.PixelStorageParams), inputRecord_1.CanvasBackground, inputRecord_1.ClearMask, inputRecord_1.ClearCanvas, inputRecord_1.WorldBounds, inputRecord_1.CanvasBounds, inputRecord_1.Scenes)));
              return "continue|loop";
            }

          case 7:
            {
              var x_2 = h.fields[0];
              props_1_mut = t;
              b_mut = updateData((inputRecord_2 = b.Data, new _webgl_builder_interfacesFs.GlCanvasData(inputRecord_2.Name, inputRecord_2.IsDirty, inputRecord_2.Context, inputRecord_2.Attributes, inputRecord_2.Params, inputRecord_2.PixelStorageParams, x_2, inputRecord_2.ClearMask, inputRecord_2.ClearCanvas, inputRecord_2.WorldBounds, inputRecord_2.CanvasBounds, inputRecord_2.Scenes)));
              return "continue|loop";
            }

          case 8:
            {
              props_1_mut = t;
              b_mut = updateData((inputRecord_3 = b.Data, new _webgl_builder_interfacesFs.GlCanvasData(inputRecord_3.Name, inputRecord_3.IsDirty, inputRecord_3.Context, inputRecord_3.Attributes, inputRecord_3.Params, inputRecord_3.PixelStorageParams, inputRecord_3.CanvasBackground, b.Data.ClearMask | 16384, inputRecord_3.ClearCanvas, inputRecord_3.WorldBounds, inputRecord_3.CanvasBounds, inputRecord_3.Scenes)));
              return "continue|loop";
            }

          case 9:
            {
              props_1_mut = t;
              b_mut = updateData((inputRecord_4 = b.Data, new _webgl_builder_interfacesFs.GlCanvasData(inputRecord_4.Name, inputRecord_4.IsDirty, inputRecord_4.Context, inputRecord_4.Attributes, inputRecord_4.Params, inputRecord_4.PixelStorageParams, inputRecord_4.CanvasBackground, b.Data.ClearMask | 256, inputRecord_4.ClearCanvas, inputRecord_4.WorldBounds, inputRecord_4.CanvasBounds, inputRecord_4.Scenes)));
              return "continue|loop";
            }

          case 10:
            {
              props_1_mut = t;
              b_mut = updateData((inputRecord_5 = b.Data, new _webgl_builder_interfacesFs.GlCanvasData(inputRecord_5.Name, inputRecord_5.IsDirty, inputRecord_5.Context, inputRecord_5.Attributes, inputRecord_5.Params, inputRecord_5.PixelStorageParams, inputRecord_5.CanvasBackground, b.Data.ClearMask | 1024, inputRecord_5.ClearCanvas, inputRecord_5.WorldBounds, inputRecord_5.CanvasBounds, inputRecord_5.Scenes)));
              return "continue|loop";
            }

          case 11:
            {
              var x_3 = h.fields[0] | 0;
              props_1_mut = t;
              b_mut = updateData((inputRecord_6 = b.Data, new _webgl_builder_interfacesFs.GlCanvasData(inputRecord_6.Name, inputRecord_6.IsDirty, inputRecord_6.Context, inputRecord_6.Attributes, inputRecord_6.Params, inputRecord_6.PixelStorageParams, inputRecord_6.CanvasBackground, x_3, inputRecord_6.ClearCanvas, inputRecord_6.WorldBounds, inputRecord_6.CanvasBounds, inputRecord_6.Scenes)));
              return "continue|loop";
            }

          case 12:
            {
              props_1_mut = t;
              b_mut = updateData((inputRecord_7 = b.Data, new _webgl_builder_interfacesFs.GlCanvasData(inputRecord_7.Name, inputRecord_7.IsDirty, inputRecord_7.Context, inputRecord_7.Attributes, inputRecord_7.Params, inputRecord_7.PixelStorageParams, inputRecord_7.CanvasBackground, inputRecord_7.ClearMask, false, inputRecord_7.WorldBounds, inputRecord_7.CanvasBounds, inputRecord_7.Scenes)));
              return "continue|loop";
            }

          case 5:
            {
              var x_4 = h.fields[0];
              props_1_mut = t;
              b_mut = updateData((inputRecord_8 = b.Data, new _webgl_builder_interfacesFs.GlCanvasData(inputRecord_8.Name, inputRecord_8.IsDirty, inputRecord_8.Context, inputRecord_8.Attributes, inputRecord_8.Params, inputRecord_8.PixelStorageParams, inputRecord_8.CanvasBackground, inputRecord_8.ClearMask, inputRecord_8.ClearCanvas, x_4, inputRecord_8.CanvasBounds, inputRecord_8.Scenes)));
              return "continue|loop";
            }

          case 1:
            {
              var x_5 = h.fields[0];
              props_1_mut = t;
              b_mut = updateData((inputRecord_9 = b.Data, new _webgl_builder_interfacesFs.GlCanvasData(inputRecord_9.Name, inputRecord_9.IsDirty, inputRecord_9.Context, inputRecord_9.Attributes, inputRecord_9.Params, inputRecord_9.PixelStorageParams, inputRecord_9.CanvasBackground, inputRecord_9.ClearMask, inputRecord_9.ClearCanvas, inputRecord_9.WorldBounds, x_5, inputRecord_9.Scenes)));
              return "continue|loop";
            }

          case 2:
            {
              var x_6 = h.fields[0];
              props_1_mut = t;
              b_mut = updateData((inputRecord_10 = b.Data, new _webgl_builder_interfacesFs.GlCanvasData(inputRecord_10.Name, inputRecord_10.IsDirty, inputRecord_10.Context, inputRecord_10.Attributes, inputRecord_10.Params, inputRecord_10.PixelStorageParams, inputRecord_10.CanvasBackground, inputRecord_10.ClearMask, inputRecord_10.ClearCanvas, inputRecord_10.WorldBounds, ((0, _boundsFs.Bounds__WithWidthM_Z16DF143)(b.Data.CanvasBounds, x_6), b.Data.CanvasBounds), inputRecord_10.Scenes)));
              return "continue|loop";
            }

          case 3:
            {
              var x_7 = h.fields[0];
              props_1_mut = t;
              b_mut = updateData((inputRecord_11 = b.Data, new _webgl_builder_interfacesFs.GlCanvasData(inputRecord_11.Name, inputRecord_11.IsDirty, inputRecord_11.Context, inputRecord_11.Attributes, inputRecord_11.Params, inputRecord_11.PixelStorageParams, inputRecord_11.CanvasBackground, inputRecord_11.ClearMask, inputRecord_11.ClearCanvas, inputRecord_11.WorldBounds, ((0, _boundsFs.Bounds__WithHeightM_Z16DF143)(b.Data.CanvasBounds, x_7), b.Data.CanvasBounds), inputRecord_11.Scenes)));
              return "continue|loop";
            }

          case 4:
            {
              var x_8 = h.fields[0];
              props_1_mut = t;
              b_mut = updateData((inputRecord_12 = b.Data, new _webgl_builder_interfacesFs.GlCanvasData(inputRecord_12.Name, inputRecord_12.IsDirty, inputRecord_12.Context, inputRecord_12.Attributes, inputRecord_12.Params, inputRecord_12.PixelStorageParams, inputRecord_12.CanvasBackground, inputRecord_12.ClearMask, inputRecord_12.ClearCanvas, inputRecord_12.WorldBounds, ((0, _boundsFs.Bounds__WithSizeM_Z66910A61)(b.Data.CanvasBounds, x_8), b.Data.CanvasBounds), inputRecord_12.Scenes)));
              return "continue|loop";
            }

          case 13:
            {
              var x_9 = h.fields[0];
              props_1_mut = t;
              b_mut = addScene_1(x_9);
              return "continue|loop";
            }

          case 14:
            {
              props_1_mut = t;
              b_mut = updateData((inputRecord_13 = b.Data, new _webgl_builder_interfacesFs.GlCanvasData(inputRecord_13.Name, inputRecord_13.IsDirty, inputRecord_13.Context, (inputRecord_14 = b.Data.Attributes, new _utilsFs.WebglContextAttributes(false, inputRecord_14.desynchronized, inputRecord_14.antialias, inputRecord_14.depth, inputRecord_14.failIfMajorPerformanceCaveat, inputRecord_14.powerPreference, inputRecord_14.premultipliedAlpha, inputRecord_14.preserveDrawingBuffer, inputRecord_14.stencil)), inputRecord_13.Params, inputRecord_13.PixelStorageParams, inputRecord_13.CanvasBackground, inputRecord_13.ClearMask, inputRecord_13.ClearCanvas, inputRecord_13.WorldBounds, inputRecord_13.CanvasBounds, inputRecord_13.Scenes)));
              return "continue|loop";
            }

          case 15:
            {
              props_1_mut = t;
              b_mut = updateData((inputRecord_15 = b.Data, new _webgl_builder_interfacesFs.GlCanvasData(inputRecord_15.Name, inputRecord_15.IsDirty, inputRecord_15.Context, (inputRecord_16 = b.Data.Attributes, new _utilsFs.WebglContextAttributes(inputRecord_16.alpha, true, inputRecord_16.antialias, inputRecord_16.depth, inputRecord_16.failIfMajorPerformanceCaveat, inputRecord_16.powerPreference, inputRecord_16.premultipliedAlpha, inputRecord_16.preserveDrawingBuffer, inputRecord_16.stencil)), inputRecord_15.Params, inputRecord_15.PixelStorageParams, inputRecord_15.CanvasBackground, inputRecord_15.ClearMask, inputRecord_15.ClearCanvas, inputRecord_15.WorldBounds, inputRecord_15.CanvasBounds, inputRecord_15.Scenes)));
              return "continue|loop";
            }

          case 16:
            {
              props_1_mut = t;
              b_mut = updateData((inputRecord_17 = b.Data, new _webgl_builder_interfacesFs.GlCanvasData(inputRecord_17.Name, inputRecord_17.IsDirty, inputRecord_17.Context, (inputRecord_18 = b.Data.Attributes, new _utilsFs.WebglContextAttributes(inputRecord_18.alpha, inputRecord_18.desynchronized, false, inputRecord_18.depth, inputRecord_18.failIfMajorPerformanceCaveat, inputRecord_18.powerPreference, inputRecord_18.premultipliedAlpha, inputRecord_18.preserveDrawingBuffer, inputRecord_18.stencil)), inputRecord_17.Params, inputRecord_17.PixelStorageParams, inputRecord_17.CanvasBackground, inputRecord_17.ClearMask, inputRecord_17.ClearCanvas, inputRecord_17.WorldBounds, inputRecord_17.CanvasBounds, inputRecord_17.Scenes)));
              return "continue|loop";
            }

          case 17:
            {
              props_1_mut = t;
              b_mut = updateData((inputRecord_19 = b.Data, new _webgl_builder_interfacesFs.GlCanvasData(inputRecord_19.Name, inputRecord_19.IsDirty, inputRecord_19.Context, (inputRecord_20 = b.Data.Attributes, new _utilsFs.WebglContextAttributes(inputRecord_20.alpha, inputRecord_20.desynchronized, inputRecord_20.antialias, false, inputRecord_20.failIfMajorPerformanceCaveat, inputRecord_20.powerPreference, inputRecord_20.premultipliedAlpha, inputRecord_20.preserveDrawingBuffer, inputRecord_20.stencil)), inputRecord_19.Params, inputRecord_19.PixelStorageParams, inputRecord_19.CanvasBackground, inputRecord_19.ClearMask, inputRecord_19.ClearCanvas, inputRecord_19.WorldBounds, inputRecord_19.CanvasBounds, inputRecord_19.Scenes)));
              return "continue|loop";
            }

          case 18:
            {
              props_1_mut = t;
              b_mut = updateData((inputRecord_21 = b.Data, new _webgl_builder_interfacesFs.GlCanvasData(inputRecord_21.Name, inputRecord_21.IsDirty, inputRecord_21.Context, (inputRecord_22 = b.Data.Attributes, new _utilsFs.WebglContextAttributes(inputRecord_22.alpha, inputRecord_22.desynchronized, inputRecord_22.antialias, inputRecord_22.depth, true, inputRecord_22.powerPreference, inputRecord_22.premultipliedAlpha, inputRecord_22.preserveDrawingBuffer, inputRecord_22.stencil)), inputRecord_21.Params, inputRecord_21.PixelStorageParams, inputRecord_21.CanvasBackground, inputRecord_21.ClearMask, inputRecord_21.ClearCanvas, inputRecord_21.WorldBounds, inputRecord_21.CanvasBounds, inputRecord_21.Scenes)));
              return "continue|loop";
            }

          case 19:
            {
              props_1_mut = t;
              b_mut = updateData((inputRecord_23 = b.Data, new _webgl_builder_interfacesFs.GlCanvasData(inputRecord_23.Name, inputRecord_23.IsDirty, inputRecord_23.Context, (inputRecord_24 = b.Data.Attributes, new _utilsFs.WebglContextAttributes(inputRecord_24.alpha, inputRecord_24.desynchronized, inputRecord_24.antialias, inputRecord_24.depth, inputRecord_24.failIfMajorPerformanceCaveat, inputRecord_24.powerPreference, false, inputRecord_24.preserveDrawingBuffer, inputRecord_24.stencil)), inputRecord_23.Params, inputRecord_23.PixelStorageParams, inputRecord_23.CanvasBackground, inputRecord_23.ClearMask, inputRecord_23.ClearCanvas, inputRecord_23.WorldBounds, inputRecord_23.CanvasBounds, inputRecord_23.Scenes)));
              return "continue|loop";
            }

          case 20:
            {
              props_1_mut = t;
              b_mut = updateData((inputRecord_25 = b.Data, new _webgl_builder_interfacesFs.GlCanvasData(inputRecord_25.Name, inputRecord_25.IsDirty, inputRecord_25.Context, (inputRecord_26 = b.Data.Attributes, new _utilsFs.WebglContextAttributes(inputRecord_26.alpha, inputRecord_26.desynchronized, inputRecord_26.antialias, inputRecord_26.depth, inputRecord_26.failIfMajorPerformanceCaveat, inputRecord_26.powerPreference, inputRecord_26.premultipliedAlpha, true, inputRecord_26.stencil)), inputRecord_25.Params, inputRecord_25.PixelStorageParams, inputRecord_25.CanvasBackground, inputRecord_25.ClearMask, inputRecord_25.ClearCanvas, inputRecord_25.WorldBounds, inputRecord_25.CanvasBounds, inputRecord_25.Scenes)));
              return "continue|loop";
            }

          case 21:
            {
              props_1_mut = t;
              b_mut = updateData((inputRecord_27 = b.Data, new _webgl_builder_interfacesFs.GlCanvasData(inputRecord_27.Name, inputRecord_27.IsDirty, inputRecord_27.Context, (inputRecord_28 = b.Data.Attributes, new _utilsFs.WebglContextAttributes(inputRecord_28.alpha, inputRecord_28.desynchronized, inputRecord_28.antialias, inputRecord_28.depth, inputRecord_28.failIfMajorPerformanceCaveat, inputRecord_28.powerPreference, inputRecord_28.premultipliedAlpha, inputRecord_28.preserveDrawingBuffer, true)), inputRecord_27.Params, inputRecord_27.PixelStorageParams, inputRecord_27.CanvasBackground, inputRecord_27.ClearMask, inputRecord_27.ClearCanvas, inputRecord_27.WorldBounds, inputRecord_27.CanvasBounds, inputRecord_27.Scenes)));
              return "continue|loop";
            }

          case 22:
            {
              props_1_mut = t;
              b_mut = updateData((inputRecord_29 = b.Data, new _webgl_builder_interfacesFs.GlCanvasData(inputRecord_29.Name, inputRecord_29.IsDirty, inputRecord_29.Context, (inputRecord_30 = b.Data.Attributes, new _utilsFs.WebglContextAttributes(inputRecord_30.alpha, inputRecord_30.desynchronized, inputRecord_30.antialias, inputRecord_30.depth, inputRecord_30.failIfMajorPerformanceCaveat, "default", inputRecord_30.premultipliedAlpha, inputRecord_30.preserveDrawingBuffer, inputRecord_30.stencil)), inputRecord_29.Params, inputRecord_29.PixelStorageParams, inputRecord_29.CanvasBackground, inputRecord_29.ClearMask, inputRecord_29.ClearCanvas, inputRecord_29.WorldBounds, inputRecord_29.CanvasBounds, inputRecord_29.Scenes)));
              return "continue|loop";
            }

          case 23:
            {
              props_1_mut = t;
              b_mut = updateData((inputRecord_31 = b.Data, new _webgl_builder_interfacesFs.GlCanvasData(inputRecord_31.Name, inputRecord_31.IsDirty, inputRecord_31.Context, (inputRecord_32 = b.Data.Attributes, new _utilsFs.WebglContextAttributes(inputRecord_32.alpha, inputRecord_32.desynchronized, inputRecord_32.antialias, inputRecord_32.depth, inputRecord_32.failIfMajorPerformanceCaveat, "high-performance", inputRecord_32.premultipliedAlpha, inputRecord_32.preserveDrawingBuffer, inputRecord_32.stencil)), inputRecord_31.Params, inputRecord_31.PixelStorageParams, inputRecord_31.CanvasBackground, inputRecord_31.ClearMask, inputRecord_31.ClearCanvas, inputRecord_31.WorldBounds, inputRecord_31.CanvasBounds, inputRecord_31.Scenes)));
              return "continue|loop";
            }

          case 24:
            {
              props_1_mut = t;
              b_mut = updateData((inputRecord_33 = b.Data, new _webgl_builder_interfacesFs.GlCanvasData(inputRecord_33.Name, inputRecord_33.IsDirty, inputRecord_33.Context, (inputRecord_34 = b.Data.Attributes, new _utilsFs.WebglContextAttributes(inputRecord_34.alpha, inputRecord_34.desynchronized, inputRecord_34.antialias, inputRecord_34.depth, inputRecord_34.failIfMajorPerformanceCaveat, "low-power", inputRecord_34.premultipliedAlpha, inputRecord_34.preserveDrawingBuffer, inputRecord_34.stencil)), inputRecord_33.Params, inputRecord_33.PixelStorageParams, inputRecord_33.CanvasBackground, inputRecord_33.ClearMask, inputRecord_33.ClearCanvas, inputRecord_33.WorldBounds, inputRecord_33.CanvasBounds, inputRecord_33.Scenes)));
              return "continue|loop";
            }

          default:
            {
              var x = h.fields[0];
              props_1_mut = t;
              b_mut = updateData((inputRecord = b.Data, new _webgl_builder_interfacesFs.GlCanvasData(x, inputRecord.IsDirty, inputRecord.Context, inputRecord.Attributes, inputRecord.Params, inputRecord.PixelStorageParams, inputRecord.CanvasBackground, inputRecord.ClearMask, inputRecord.ClearCanvas, inputRecord.WorldBounds, inputRecord.CanvasBounds, inputRecord.Scenes)));
              return "continue|loop";
            }
        }
      } else {
        return {
          v: b
        };
      }

      return "break";
    };

    loop: while (true) {
      var _ret = _loop();

      if (_ret === "continue|loop") continue loop;
      if (_ret === "break") break;
      if (_typeof(_ret) === "object") return _ret.v;
    }
  };

  return loop(props, builder);
}

function create(canvasId, props) {
  var canvas = document.getElementById(canvasId);
  var canvasBounds = (0, _boundsFs.BoundsModule_boundsSize)(canvas.width, canvas.height);
  return build(apply(props, new Builder(canvas, (0, _List.empty)(), new _webgl_builder_interfacesFs.GlCanvasData(canvasId, true, null, new _utilsFs.WebglContextAttributes(true, false, true, true, false, "default", true, false, false), (0, _glcanvasparamsFs.GlCanvasParams_$ctor)(), (0, _List.empty)(), (0, _vectorsFs.Vec4_Create)(), 16384, false, (0, _boundsFs.Bounds__Clone)(canvasBounds), canvasBounds, []))));
}

function clearCanvas(data) {
  var gl = data.Context;
  var cc = (0, _vectorsFs.Vec4__get_Values)(data.CanvasBackground);
  gl.clearColor(cc[0], cc[1], cc[2], cc[3]);
  gl.clear(data.ClearMask);
}

function render(data) {
  if (data.IsDirty) {
    var msg = (0, _String.toText)((0, _String.interpolate)("webgl.%P().render", [data.Name]));

    if ((0, _utilsFs.Debug_enabled)()) {
      if ((0, _utilsFs.Debug_collapsible)()) {
        if ((0, _utilsFs.Debug_logCollapsed)()) {
          console.groupCollapsed(msg);
        } else {
          console.group(msg);
        }
      } else {
        if ((0, _utilsFs.Debug_enabled)()) {
          (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
        }

        if (!(0, _utilsFs.Debug_collapsible)()) {
          (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
        }
      }
    }

    if (data.ClearCanvas) {
      clearCanvas(data);
    }

    data.Scenes.forEach(function (data_1) {
      (0, _glsceneFs.render)(data_1);
    });

    if ((0, _utilsFs.Debug_collapsible)()) {
      console.groupEnd();
    } else {
      (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
    }
  }

  clean(data);
}
},{"./.fable/fable-library.3.0.0/Types.js":"../src/.fable/fable-library.3.0.0/Types.js","./.fable/fable-library.3.0.0/Reflection.js":"../src/.fable/fable-library.3.0.0/Reflection.js","./webgl_builder_interfaces.fs.js":"../src/webgl_builder_interfaces.fs.js","./.fable/fable-library.3.0.0/String.js":"../src/.fable/fable-library.3.0.0/String.js","./utils.fs.js":"../src/utils.fs.js","./webgl_types.fs.js":"../src/webgl_types.fs.js","./bounds.fs.js":"../src/bounds.fs.js","./.fable/fable-library.3.0.0/Option.js":"../src/.fable/fable-library.3.0.0/Option.js","./.fable/fable-library.3.0.0/List.js":"../src/.fable/fable-library.3.0.0/List.js","./glcanvasparams.fs.js":"../src/glcanvasparams.fs.js","./vectors.fs.js":"../src/vectors.fs.js","./glscene.fs.js":"../src/glscene.fs.js"}],"../src/webgl_utils.fs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.glcanvas = glcanvas;
exports.scene = scene;
exports.orthoCam2d = orthoCam2d;
exports.shared = shared;
exports.globject = globject;
exports.object = object;
exports.uniform = uniform;
exports.u = u;
exports.ubo = ubo;
exports.attribute = attribute;
exports.interleave = interleave;
exports.child = child;
exports.indicies = indicies;
exports.texture = texture;
exports.sharedObjectWithCamera2d = void 0;

var _String = require("./.fable/fable-library.3.0.0/String.js");

var _utilsFs = require("./utils.fs.js");

var _glcanvasFs = require("./glcanvas.fs.js");

var _Option = require("./.fable/fable-library.3.0.0/Option.js");

var _glsceneFs = require("./glscene.fs.js");

var _webgl_builder_interfacesFs = require("./webgl_builder_interfaces.fs.js");

var _glortho2dFs = require("./glortho2d.fs.js");

var _globjFs = require("./globj.fs.js");

var _List = require("./.fable/fable-library.3.0.0/List.js");

var _gluniformFs = require("./gluniform.fs.js");

var _glubouniformFs = require("./glubouniform.fs.js");

var _gluboFs = require("./glubo.fs.js");

var _glsingleattributeFs = require("./glsingleattribute.fs.js");

var _glinterleaveattributeFs = require("./glinterleaveattribute.fs.js");

var _glinterleavechildattributeFs = require("./glinterleavechildattribute.fs.js");

var _glindiciesFs = require("./glindicies.fs.js");

var _gltextureFs = require("./gltexture.fs.js");

function glcanvas(canvasId, props) {
  var name_1 = "glcanvas";
  var msg = (0, _String.toText)((0, _String.interpolate)("Create %P()", [name_1]));

  if ((0, _utilsFs.Debug_enabled)()) {
    if ((0, _utilsFs.Debug_collapsible)()) {
      if ((0, _utilsFs.Debug_logCollapsed)()) {
        console.groupCollapsed(msg);
      } else {
        console.group(msg);
      }
    } else {
      if ((0, _utilsFs.Debug_enabled)()) {
        (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
      }

      if (!(0, _utilsFs.Debug_collapsible)()) {
        (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
      }
    }
  }

  console.group((0, _String.toText)((0, _String.interpolate)("Create %P()", [name_1])));

  var res = function () {
    return (0, _glcanvasFs.create)(canvasId, props);
  }();

  console.log((0, _Option.some)("groupEnd"));
  console.groupEnd();

  if ((0, _utilsFs.Debug_collapsible)()) {
    console.groupEnd();
  } else {
    (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
  }

  return res;
}

function scene(props) {
  var result = function result(canvas) {
    var name_1 = "scene";
    var msg = (0, _String.toText)((0, _String.interpolate)("Create %P()", [name_1]));

    if ((0, _utilsFs.Debug_enabled)()) {
      if ((0, _utilsFs.Debug_collapsible)()) {
        if ((0, _utilsFs.Debug_logCollapsed)()) {
          console.groupCollapsed(msg);
        } else {
          console.group(msg);
        }
      } else {
        if ((0, _utilsFs.Debug_enabled)()) {
          (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
        }

        if (!(0, _utilsFs.Debug_collapsible)()) {
          (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
        }
      }
    }

    console.group((0, _String.toText)((0, _String.interpolate)("Create %P()", [name_1])));

    var res = function () {
      return (0, _glsceneFs.create)(canvas, props);
    }();

    console.log((0, _Option.some)("groupEnd"));
    console.groupEnd();

    if ((0, _utilsFs.Debug_collapsible)()) {
      console.groupEnd();
    } else {
      (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
    }

    return res;
  };

  return new _webgl_builder_interfacesFs.WebglProp(13, result);
}

function orthoCam2d(props) {
  var result = function result(scene_1) {
    var name_1 = "orthoCam2d";
    var msg = (0, _String.toText)((0, _String.interpolate)("Create %P()", [name_1]));

    if ((0, _utilsFs.Debug_enabled)()) {
      if ((0, _utilsFs.Debug_collapsible)()) {
        if ((0, _utilsFs.Debug_logCollapsed)()) {
          console.groupCollapsed(msg);
        } else {
          console.group(msg);
        }
      } else {
        if ((0, _utilsFs.Debug_enabled)()) {
          (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
        }

        if (!(0, _utilsFs.Debug_collapsible)()) {
          (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
        }
      }
    }

    console.group((0, _String.toText)((0, _String.interpolate)("Create %P()", [name_1])));

    var res = function () {
      return (0, _glortho2dFs.create)(props, scene_1);
    }();

    console.log((0, _Option.some)("groupEnd"));
    console.groupEnd();

    if ((0, _utilsFs.Debug_collapsible)()) {
      console.groupEnd();
    } else {
      (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
    }

    return res;
  };

  return new _webgl_builder_interfacesFs.GlSceneProp(12, result);
}

function shared(vertex, fragment, props) {
  var result = function result(scene_1) {
    var name_1 = "shared";
    var msg = (0, _String.toText)((0, _String.interpolate)("Create %P()", [name_1]));

    if ((0, _utilsFs.Debug_enabled)()) {
      if ((0, _utilsFs.Debug_collapsible)()) {
        if ((0, _utilsFs.Debug_logCollapsed)()) {
          console.groupCollapsed(msg);
        } else {
          console.group(msg);
        }
      } else {
        if ((0, _utilsFs.Debug_enabled)()) {
          (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
        }

        if (!(0, _utilsFs.Debug_collapsible)()) {
          (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
        }
      }
    }

    console.group((0, _String.toText)((0, _String.interpolate)("Create %P()", [name_1])));

    var res = function () {
      return (0, _globjFs.create)(vertex, fragment, void 0, scene_1, (0, _List.cons)(new _webgl_builder_interfacesFs.GlObjProp(16, false), props));
    }();

    console.log((0, _Option.some)("groupEnd"));
    console.groupEnd();

    if ((0, _utilsFs.Debug_collapsible)()) {
      console.groupEnd();
    } else {
      (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
    }

    return res;
  };

  return new _webgl_builder_interfacesFs.GlSceneProp(13, result);
}

var sharedObjectWithCamera2d = shared("sharedCameraVertex2d", "sharedFragment2d", (0, _List.empty)());
exports.sharedObjectWithCamera2d = sharedObjectWithCamera2d;

function globject(vertex, fragment, props, scene_1) {
  return (0, _globjFs.create)(vertex, fragment, scene_1.Shared, scene_1, props);
}

function object(vertex, fragment, props) {
  var result = function result(scene_1) {
    var parent = scene_1.Shared;
    var name_1 = "object";
    var msg = (0, _String.toText)((0, _String.interpolate)("Create %P()", [name_1]));

    if ((0, _utilsFs.Debug_enabled)()) {
      if ((0, _utilsFs.Debug_collapsible)()) {
        if ((0, _utilsFs.Debug_logCollapsed)()) {
          console.groupCollapsed(msg);
        } else {
          console.group(msg);
        }
      } else {
        if ((0, _utilsFs.Debug_enabled)()) {
          (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
        }

        if (!(0, _utilsFs.Debug_collapsible)()) {
          (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
        }
      }
    }

    console.group((0, _String.toText)((0, _String.interpolate)("Create %P()", [name_1])));

    var res = function () {
      return (0, _globjFs.create)(vertex, fragment, parent, scene_1, props);
    }();

    console.log((0, _Option.some)("groupEnd"));
    console.groupEnd();

    if ((0, _utilsFs.Debug_collapsible)()) {
      console.groupEnd();
    } else {
      (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
    }

    return res;
  };

  return new _webgl_builder_interfacesFs.GlSceneProp(14, result);
}

function uniform(name, props) {
  var result = function result(parentObject) {
    var name_2 = (0, _String.toText)((0, _String.interpolate)("uniform %P()", [name]));
    var msg = (0, _String.toText)((0, _String.interpolate)("Create %P()", [name_2]));

    if ((0, _utilsFs.Debug_enabled)()) {
      if ((0, _utilsFs.Debug_collapsible)()) {
        if ((0, _utilsFs.Debug_logCollapsed)()) {
          console.groupCollapsed(msg);
        } else {
          console.group(msg);
        }
      } else {
        if ((0, _utilsFs.Debug_enabled)()) {
          (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
        }

        if (!(0, _utilsFs.Debug_collapsible)()) {
          (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
        }
      }
    }

    console.group((0, _String.toText)((0, _String.interpolate)("Create %P()", [name_2])));

    var res = function () {
      return (0, _gluniformFs.create)(name, props, parentObject);
    }();

    console.log((0, _Option.some)("groupEnd"));
    console.groupEnd();

    if ((0, _utilsFs.Debug_collapsible)()) {
      console.groupEnd();
    } else {
      (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
    }

    return res;
  };

  return new _webgl_builder_interfacesFs.GlObjProp(10, result);
}

function u(name, props) {
  var result = function result(parentUbo, parentObject) {
    var name_2 = (0, _String.toText)((0, _String.interpolate)("ubo uniform %P()", [name]));
    var msg = (0, _String.toText)((0, _String.interpolate)("Create %P()", [name_2]));

    if ((0, _utilsFs.Debug_enabled)()) {
      if ((0, _utilsFs.Debug_collapsible)()) {
        if ((0, _utilsFs.Debug_logCollapsed)()) {
          console.groupCollapsed(msg);
        } else {
          console.group(msg);
        }
      } else {
        if ((0, _utilsFs.Debug_enabled)()) {
          (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
        }

        if (!(0, _utilsFs.Debug_collapsible)()) {
          (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
        }
      }
    }

    console.group((0, _String.toText)((0, _String.interpolate)("Create %P()", [name_2])));

    var res = function () {
      return (0, _glubouniformFs.create)(name, props, parentUbo, parentObject);
    }();

    console.log((0, _Option.some)("groupEnd"));
    console.groupEnd();

    if ((0, _utilsFs.Debug_collapsible)()) {
      console.groupEnd();
    } else {
      (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
    }

    return res;
  };

  return new _webgl_builder_interfacesFs.GlUboProp(1, result);
}

function ubo(name, props) {
  var result = function result(parentObject) {
    var name_2 = (0, _String.toText)((0, _String.interpolate)("UBO %P()", [name]));
    var msg = (0, _String.toText)((0, _String.interpolate)("Create %P()", [name_2]));

    if ((0, _utilsFs.Debug_enabled)()) {
      if ((0, _utilsFs.Debug_collapsible)()) {
        if ((0, _utilsFs.Debug_logCollapsed)()) {
          console.groupCollapsed(msg);
        } else {
          console.group(msg);
        }
      } else {
        if ((0, _utilsFs.Debug_enabled)()) {
          (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
        }

        if (!(0, _utilsFs.Debug_collapsible)()) {
          (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
        }
      }
    }

    console.group((0, _String.toText)((0, _String.interpolate)("Create %P()", [name_2])));

    var res = function () {
      return (0, _gluboFs.create)(name, props, parentObject);
    }();

    console.log((0, _Option.some)("groupEnd"));
    console.groupEnd();

    if ((0, _utilsFs.Debug_collapsible)()) {
      console.groupEnd();
    } else {
      (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
    }

    return res;
  };

  return new _webgl_builder_interfacesFs.GlObjProp(11, result);
}

function attribute(name, props) {
  var result = function result(parentObject) {
    var name_2 = (0, _String.toText)((0, _String.interpolate)("attribute %P()", [name]));
    var msg = (0, _String.toText)((0, _String.interpolate)("Create %P()", [name_2]));

    if ((0, _utilsFs.Debug_enabled)()) {
      if ((0, _utilsFs.Debug_collapsible)()) {
        if ((0, _utilsFs.Debug_logCollapsed)()) {
          console.groupCollapsed(msg);
        } else {
          console.group(msg);
        }
      } else {
        if ((0, _utilsFs.Debug_enabled)()) {
          (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
        }

        if (!(0, _utilsFs.Debug_collapsible)()) {
          (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
        }
      }
    }

    console.group((0, _String.toText)((0, _String.interpolate)("Create %P()", [name_2])));

    var res = function () {
      return (0, _glsingleattributeFs.create)(name, props, parentObject);
    }();

    console.log((0, _Option.some)("groupEnd"));
    console.groupEnd();

    if ((0, _utilsFs.Debug_collapsible)()) {
      console.groupEnd();
    } else {
      (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
    }

    return res;
  };

  return new _webgl_builder_interfacesFs.GlObjProp(12, result);
}

function interleave(name, props) {
  var result = function result(parentObject) {
    var name_2 = (0, _String.toText)((0, _String.interpolate)("attribute %P()", [name]));
    var msg = (0, _String.toText)((0, _String.interpolate)("Create %P()", [name_2]));

    if ((0, _utilsFs.Debug_enabled)()) {
      if ((0, _utilsFs.Debug_collapsible)()) {
        if ((0, _utilsFs.Debug_logCollapsed)()) {
          console.groupCollapsed(msg);
        } else {
          console.group(msg);
        }
      } else {
        if ((0, _utilsFs.Debug_enabled)()) {
          (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
        }

        if (!(0, _utilsFs.Debug_collapsible)()) {
          (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
        }
      }
    }

    console.group((0, _String.toText)((0, _String.interpolate)("Create %P()", [name_2])));

    var res = function () {
      return (0, _glinterleaveattributeFs.create)(name, props, parentObject);
    }();

    console.log((0, _Option.some)("groupEnd"));
    console.groupEnd();

    if ((0, _utilsFs.Debug_collapsible)()) {
      console.groupEnd();
    } else {
      (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
    }

    return res;
  };

  return new _webgl_builder_interfacesFs.GlObjProp(12, result);
}

function child(name, props) {
  var result = function result(parentAttribute, parentObject) {
    var name_2 = (0, _String.toText)((0, _String.interpolate)("child %P()", [name]));
    var msg = (0, _String.toText)((0, _String.interpolate)("Create %P()", [name_2]));

    if ((0, _utilsFs.Debug_enabled)()) {
      if ((0, _utilsFs.Debug_collapsible)()) {
        if ((0, _utilsFs.Debug_logCollapsed)()) {
          console.groupCollapsed(msg);
        } else {
          console.group(msg);
        }
      } else {
        if ((0, _utilsFs.Debug_enabled)()) {
          (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
        }

        if (!(0, _utilsFs.Debug_collapsible)()) {
          (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
        }
      }
    }

    console.group((0, _String.toText)((0, _String.interpolate)("Create %P()", [name_2])));

    var res = function () {
      return (0, _glinterleavechildattributeFs.create)(name, props, parentAttribute, parentObject);
    }();

    console.log((0, _Option.some)("groupEnd"));
    console.groupEnd();

    if ((0, _utilsFs.Debug_collapsible)()) {
      console.groupEnd();
    } else {
      (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
    }

    return res;
  };

  return new _webgl_builder_interfacesFs.GlAttrProp(10, result);
}

function indicies(props) {
  var result = function result(parentObject) {
    var name_1 = "indicies";
    var msg = (0, _String.toText)((0, _String.interpolate)("Create %P()", [name_1]));

    if ((0, _utilsFs.Debug_enabled)()) {
      if ((0, _utilsFs.Debug_collapsible)()) {
        if ((0, _utilsFs.Debug_logCollapsed)()) {
          console.groupCollapsed(msg);
        } else {
          console.group(msg);
        }
      } else {
        if ((0, _utilsFs.Debug_enabled)()) {
          (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
        }

        if (!(0, _utilsFs.Debug_collapsible)()) {
          (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
        }
      }
    }

    console.group((0, _String.toText)((0, _String.interpolate)("Create %P()", [name_1])));

    var res = function () {
      return (0, _glindiciesFs.create)(props, parentObject);
    }();

    console.log((0, _Option.some)("groupEnd"));
    console.groupEnd();

    if ((0, _utilsFs.Debug_collapsible)()) {
      console.groupEnd();
    } else {
      (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
    }

    return res;
  };

  return new _webgl_builder_interfacesFs.GlObjProp(13, result);
}

function texture(props) {
  var result = function result(parentObject) {
    var name_1 = (0, _String.toText)((0, _String.interpolate)("texture", []));
    var msg = (0, _String.toText)((0, _String.interpolate)("Create %P()", [name_1]));

    if ((0, _utilsFs.Debug_enabled)()) {
      if ((0, _utilsFs.Debug_collapsible)()) {
        if ((0, _utilsFs.Debug_logCollapsed)()) {
          console.groupCollapsed(msg);
        } else {
          console.group(msg);
        }
      } else {
        if ((0, _utilsFs.Debug_enabled)()) {
          (0, _String.toConsole)((0, _String.interpolate)("%P()%P()", [(0, _utilsFs.Debug_indent)(), msg]));
        }

        if (!(0, _utilsFs.Debug_collapsible)()) {
          (0, _utilsFs.Debug_indent)((0, _utilsFs.Debug_indent)() + "  ", true);
        }
      }
    }

    console.group((0, _String.toText)((0, _String.interpolate)("Create %P()", [name_1])));

    var res = function () {
      return (0, _gltextureFs.create)(props, parentObject);
    }();

    console.log((0, _Option.some)("groupEnd"));
    console.groupEnd();

    if ((0, _utilsFs.Debug_collapsible)()) {
      console.groupEnd();
    } else {
      (0, _utilsFs.Debug_indent)((0, _String.substring)((0, _utilsFs.Debug_indent)(), 2), true);
    }

    return res;
  };

  return new _webgl_builder_interfacesFs.GlObjProp(14, result);
}
},{"./.fable/fable-library.3.0.0/String.js":"../src/.fable/fable-library.3.0.0/String.js","./utils.fs.js":"../src/utils.fs.js","./glcanvas.fs.js":"../src/glcanvas.fs.js","./.fable/fable-library.3.0.0/Option.js":"../src/.fable/fable-library.3.0.0/Option.js","./glscene.fs.js":"../src/glscene.fs.js","./webgl_builder_interfaces.fs.js":"../src/webgl_builder_interfaces.fs.js","./glortho2d.fs.js":"../src/glortho2d.fs.js","./globj.fs.js":"../src/globj.fs.js","./.fable/fable-library.3.0.0/List.js":"../src/.fable/fable-library.3.0.0/List.js","./gluniform.fs.js":"../src/gluniform.fs.js","./glubouniform.fs.js":"../src/glubouniform.fs.js","./glubo.fs.js":"../src/glubo.fs.js","./glsingleattribute.fs.js":"../src/glsingleattribute.fs.js","./glinterleaveattribute.fs.js":"../src/glinterleaveattribute.fs.js","./glinterleavechildattribute.fs.js":"../src/glinterleavechildattribute.fs.js","./glindicies.fs.js":"../src/glindicies.fs.js","./gltexture.fs.js":"../src/gltexture.fs.js"}],"../src/.fable/fable-library.3.0.0/Timer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Timer = void 0;

var _Event = _interopRequireDefault(require("./Event.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Timer = /*#__PURE__*/function () {
  function Timer(interval) {
    _classCallCheck(this, Timer);

    this._enabled = false;
    this._isDisposed = false;
    this._intervalId = 0;
    this._timeoutId = 0;
    this.Interval = interval && interval > 0 ? interval : 100;
    this.AutoReset = true;
    this._elapsed = new _Event.default();
  }

  _createClass(Timer, [{
    key: "Dispose",
    value: function Dispose() {
      this.Enabled = false;
      this._isDisposed = true;
    }
  }, {
    key: "Close",
    value: function Close() {
      this.Dispose();
    }
  }, {
    key: "Start",
    value: function Start() {
      this.Enabled = true;
    }
  }, {
    key: "Stop",
    value: function Stop() {
      this.Enabled = false;
    }
  }, {
    key: "Elapsed",
    get: function get() {
      return this._elapsed;
    }
  }, {
    key: "Enabled",
    get: function get() {
      return this._enabled;
    },
    set: function set(x) {
      var _this = this;

      if (!this._isDisposed && this._enabled !== x) {
        this._enabled = x;

        if (this._enabled) {
          if (this.AutoReset) {
            this._intervalId = setInterval(function () {
              if (!_this.AutoReset) {
                _this.Enabled = false;
              }

              _this._elapsed.Trigger(new Date());
            }, this.Interval);
          } else {
            this._timeoutId = setTimeout(function () {
              _this.Enabled = false;
              _this._timeoutId = 0;

              if (_this.AutoReset) {
                _this.Enabled = true;
              }

              _this._elapsed.Trigger(new Date());
            }, this.Interval);
          }
        } else {
          if (this._timeoutId) {
            clearTimeout(this._timeoutId);
            this._timeoutId = 0;
          }

          if (this._intervalId) {
            clearInterval(this._intervalId);
            this._intervalId = 0;
          }
        }
      }
    }
  }]);

  return Timer;
}();

exports.Timer = Timer;
var _default = Timer;
exports.default = _default;
},{"./Event.js":"../src/.fable/fable-library.3.0.0/Event.js"}],"../src/webglobject.fs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WebglObject$reflection = WebglObject$reflection;
exports.WebglObject_$ctor_4EBB8B0D = WebglObject_$ctor_4EBB8B0D;
exports.WebglObject__get_ObjectDef = WebglObject__get_ObjectDef;
exports.WebglObject__get_Scene = WebglObject__get_Scene;
exports.WebglObject__get_Position = WebglObject__get_Position;
exports.WebglObject__set_Position_Z66910A62 = WebglObject__set_Position_Z66910A62;
exports.WebglObject__get_Position2 = WebglObject__get_Position2;
exports.WebglObject__set_Position2_Z66910A61 = WebglObject__set_Position2_Z66910A61;
exports.WebglObject__get_Angle = WebglObject__get_Angle;
exports.WebglObject__set_Angle_Z66910A62 = WebglObject__set_Angle_Z66910A62;
exports.WebglObject__get_AngleZ = WebglObject__get_AngleZ;
exports.WebglObject__set_AngleZ_2F186313 = WebglObject__set_AngleZ_2F186313;
exports.WebglObject__get_AngleDegrees = WebglObject__get_AngleDegrees;
exports.WebglObject__set_AngleDegrees_Z66910A62 = WebglObject__set_AngleDegrees_Z66910A62;
exports.WebglObject__get_AngleDegreesZ = WebglObject__get_AngleDegreesZ;
exports.WebglObject__set_AngleDegreesZ_2F2451A2 = WebglObject__set_AngleDegreesZ_2F2451A2;
exports.WebglObject__get_Scale = WebglObject__get_Scale;
exports.WebglObject__set_Scale_5E38073B = WebglObject__set_Scale_5E38073B;
exports.WebglObject = void 0;

var _glsceneFs = require("./glscene.fs.js");

var _globjFs = require("./globj.fs.js");

var _Reflection = require("./.fable/fable-library.3.0.0/Reflection.js");

var _vectorsFs = require("./vectors.fs.js");

var _utilsFs = require("./utils.fs.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var WebglObject = /*#__PURE__*/function () {
  function WebglObject(scene, objectCreator) {
    _classCallCheck(this, WebglObject);

    this.scene = scene;
    this.objectDef = (0, _glsceneFs.addObject)(objectCreator)(this.scene);
  }

  _createClass(WebglObject, [{
    key: "Wil.Webgl.Objects.WebglObject.Delete",
    value: function WilWebglObjectsWebglObjectDelete() {
      var _ = this;

      var value = (0, _glsceneFs.removeObject)(_.objectDef)(_.scene);
      void value;
      (0, _globjFs.delete$)(_.objectDef);
    }
  }]);

  return WebglObject;
}();

exports.WebglObject = WebglObject;

function WebglObject$reflection() {
  return (0, _Reflection.class_type)("Wil.Webgl.Objects.WebglObject", void 0, WebglObject);
}

function WebglObject_$ctor_4EBB8B0D(scene, objectCreator) {
  return new WebglObject(scene, objectCreator);
}

function WebglObject__get_ObjectDef(_) {
  return _.objectDef;
}

function WebglObject__get_Scene(_) {
  return _.objectDef.Scene;
}

function WebglObject__get_Position(_) {
  return _.objectDef.Position;
}

function WebglObject__set_Position_Z66910A62(_, value) {
  (0, _globjFs.setPosition)(value, _.objectDef);
}

function WebglObject__get_Position2(_) {
  return (0, _vectorsFs.Vec3__get_XY)(_.objectDef.Position);
}

function WebglObject__set_Position2_Z66910A61(_, value) {
  (0, _globjFs.setPositionXY)(value.values[0], value.values[1], _.objectDef);
}

function WebglObject__get_Angle(_) {
  return _.objectDef.Angle;
}

function WebglObject__set_Angle_Z66910A62(_, value) {
  (0, _globjFs.setAngle)(value, _.objectDef);
}

function WebglObject__get_AngleZ(_) {
  return _.objectDef.Angle.values[2] * 1;
}

function WebglObject__set_AngleZ_2F186313(_, value) {
  (0, _globjFs.setAngleZ)(value, _.objectDef);
}

function WebglObject__get_AngleDegrees(_) {
  return (0, _globjFs.degreesToRadians)(_.objectDef.Angle);
}

function WebglObject__set_AngleDegrees_Z66910A62(_, value) {
  (0, _globjFs.setAngleDegrees)(value, _.objectDef);
}

function WebglObject__get_AngleDegreesZ(_) {
  return _.objectDef.Angle.values[2] * 1 * _utilsFs.DEG_PER_RAD;
}

function WebglObject__set_AngleDegreesZ_2F2451A2(_, value) {
  (0, _globjFs.setAngleDegreesZ)(value, _.objectDef);
}

function WebglObject__get_Scale(_) {
  return _.objectDef.Scale;
}

function WebglObject__set_Scale_5E38073B(_, value) {
  (0, _globjFs.setScale)(value, _.objectDef);
}
},{"./glscene.fs.js":"../src/glscene.fs.js","./globj.fs.js":"../src/globj.fs.js","./.fable/fable-library.3.0.0/Reflection.js":"../src/.fable/fable-library.3.0.0/Reflection.js","./vectors.fs.js":"../src/vectors.fs.js","./utils.fs.js":"../src/utils.fs.js"}],"../src/grid2d.fs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Grid2D$reflection = Grid2D$reflection;
exports.Grid2D_$ctor_5F40A667 = Grid2D_$ctor_5F40A667;
exports.Grid2D__get_MinorLineColor = Grid2D__get_MinorLineColor;
exports.Grid2D__set_MinorLineColor_Z66910A67 = Grid2D__set_MinorLineColor_Z66910A67;
exports.Grid2D__get_MajorLineColor = Grid2D__get_MajorLineColor;
exports.Grid2D__set_MajorLineColor_Z66910A67 = Grid2D__set_MajorLineColor_Z66910A67;
exports.Grid2D__get_AxisLineColor = Grid2D__get_AxisLineColor;
exports.Grid2D__set_AxisLineColor_Z66910A67 = Grid2D__set_AxisLineColor_Z66910A67;
exports.Grid2D__get_MinorLineWidth = Grid2D__get_MinorLineWidth;
exports.Grid2D__set_MinorLineWidth_5E38073B = Grid2D__set_MinorLineWidth_5E38073B;
exports.Grid2D__get_MajorLineWidth = Grid2D__get_MajorLineWidth;
exports.Grid2D__set_MajorLineWidth_5E38073B = Grid2D__set_MajorLineWidth_5E38073B;
exports.Grid2D__get_AxisLineWidth = Grid2D__get_AxisLineWidth;
exports.Grid2D__set_AxisLineWidth_5E38073B = Grid2D__set_AxisLineWidth_5E38073B;
exports.Grid2D__get_Size = Grid2D__get_Size;
exports.Grid2D__set_Size_Z66910A61 = Grid2D__set_Size_Z66910A61;
exports.Grid2D__get_MinorTick = Grid2D__get_MinorTick;
exports.Grid2D__set_MinorTick_5E38073B = Grid2D__set_MinorTick_5E38073B;
exports.Grid2D__get_MajorTick = Grid2D__get_MajorTick;
exports.Grid2D__set_MajorTick_Z524259A4 = Grid2D__set_MajorTick_Z524259A4;
exports.Grid2D = void 0;

var _webgl_shader_utilsFs = require("./webgl_shader_utils.fs.js");

var _vectorsFs = require("./vectors.fs.js");

var _Types = require("./.fable/fable-library.3.0.0/Types.js");

var _Map = require("./.fable/fable-library.3.0.0/Map.js");

var _Seq = require("./.fable/fable-library.3.0.0/Seq.js");

var _webgl_builder_interfacesFs = require("./webgl_builder_interfaces.fs.js");

var _webglobjectFs = require("./webglobject.fs.js");

var _Util = require("./.fable/fable-library.3.0.0/Util.js");

var _Option = require("./.fable/fable-library.3.0.0/Option.js");

var _webgl_utilsFs = require("./webgl_utils.fs.js");

var _glcanvasparamsFs = require("./glcanvasparams.fs.js");

var _List = require("./.fable/fable-library.3.0.0/List.js");

var _Reflection = require("./.fable/fable-library.3.0.0/Reflection.js");

var _gluniformFs = require("./gluniform.fs.js");

var _globjFs = require("./globj.fs.js");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Shaders_gridUbo = "\r\nuniform grid {\r\n  vec4 minorLineColor;\r\n  vec4 majorLineColor;\r\n  vec4 axisLineColor;\r\n  float minorLineWidth;\r\n  float majorLineWidth;\r\n  float axisLineWidth;\r\n  vec2 size;\r\n  vec2 minorTick;\r\n  ivec2 majorTick;\r\n};\r\n";
var Shaders_grid2dVertex = "#version 300 es\r\n#include precision\r\n#include camera-ubo\r\n#include grid-ubo\r\n#include model-params\r\n#include lines2d-vertex\r\n#line 33\r\n// x, y: point a.  z, w: point b.\r\nconst vec4 edgeTemplate[] = vec4[2](\r\n  vec4(0.0, -0.5, 0.0, 0.5), // Vertical\r\n  vec4(-0.5, 0.0, 0.5, 0.0)  // Horizontal\r\n);\r\n\r\nconst vec2 offsetTemplate[] = vec2[2](\r\n  vec2(1.0, 0.0), // Vertical\r\n  vec2(0.0, 1.0)  // Horizontal\r\n);\r\n\r\nout vec4 v_fillColor;\r\n\r\nfloat priorEvenFloat(float f) {\r\n  int x = int(floor(f));\r\n  return mix(float(x), float(x) - 1.0, float(x % 2));\r\n}\r\n\r\nvec2 priorEven(vec2 v) { return vec2(priorEvenFloat(v.x), priorEvenFloat(v.y)); }\r\n\r\nfloat fmod(float a, float b) {\r\n  float res = abs(a / b);\r\n  return ceil(res) - res;\r\n}\r\n\r\nvoid main() {\r\n  vec2 majorValue = minorTick * vec2(majorTick);\r\n  vec2 esize = priorEven(size);\r\n  ivec2 halfTicks = ivec2(esize * 0.5 / minorTick);\r\n  ivec2 minorTickCount = halfTicks * 2 + 1;\r\n  int instanceCount = minorTickCount.x + minorTickCount.y;\r\n  ivec2 majorOffset = majorTick - (halfTicks % majorTick);\r\n  vec2 start = -vec2(halfTicks) * minorTick;\r\n  int edgeID = int(step(float(minorTickCount.x), float(gl_InstanceID)));\r\n  vec4 edge = edgeTemplate[edgeID];\r\n  vec2 ofs = offsetTemplate[edgeID];\r\n\r\n  vec2 a = edge.xy * size;\r\n  vec2 b = edge.zw * size;\r\n\r\n  int vertexID = gl_VertexID % 6;\r\n  ivec2 colRow = ivec2(gl_InstanceID % minorTickCount.x);\r\n  colRow.y = gl_InstanceID - minorTickCount.x;\r\n  vec2 center = start + vec2(colRow) * vec2(minorTick);\r\n  center *= ofs;\r\n\r\n  ivec2 isMajorv = (colRow + majorOffset) % majorTick;\r\n  isMajorv = ivec2(vec2(float(isMajorv.x == 0), float(isMajorv.y == 0)));\r\n  float isMajor = float(isMajorv.x) * ofs.x + float(isMajorv.y) * ofs.y;\r\n  vec2 isAxisv = vec2(float(colRow.x == halfTicks.x), float(colRow.y == halfTicks.y));\r\n  float isAxis = isAxisv.x * ofs.x + isAxisv.y * ofs.y;\r\n\r\n  float width = mix(minorLineWidth, majorLineWidth, isMajor);\r\n  width = mix(width, axisLineWidth, isAxis);\r\n  vec4 color = mix(minorLineColor, majorLineColor, isMajor);\r\n  color = mix(color, axisLineColor, isAxis);\r\n\r\n  vec2 direction = b - a;\r\n  vec2 leftNormal = normalize(perp(direction));\r\n  vec2 vertex = line2d(a, direction, leftNormal, width, vertexID);\r\n  vertex += center;\r\n  vec4 position = vec4(vertex, 0.0, 1.0);\r\n\r\n  position = projMat * viewMat * modelMat * position;\r\n\r\n  gl_Position = position;\r\n  v_fillColor = color;\r\n}";
var Shaders_grid2dVertexKey = "grid2dVertex";
(0, _webgl_shader_utilsFs.addShaderInclude)("grid-ubo", Shaders_gridUbo);
(0, _webgl_shader_utilsFs.addVertexShaderSource)(Shaders_grid2dVertexKey, Shaders_grid2dVertex);

function VecUtils_priorEven(v) {
  var priorEvenFloat = function priorEvenFloat(value) {
    var x = ~~Math.floor(value) | 0;

    if (x % 2 === 0) {
      return x;
    } else {
      return x - 1;
    }
  };

  var __2 = v;
  var value_2 = (0, _vectorsFs.Vec2__WithXY_7EFBDC2A)(__2.v.contents, priorEvenFloat(v.values[0]), priorEvenFloat(v.values[1]), __2.v.contents);
  void value_2;
  return v;
}

var Grid2D = /*#__PURE__*/function (_WebglObject) {
  _inherits(Grid2D, _WebglObject);

  var _super = _createSuper(Grid2D);

  function Grid2D(config, scene, size, layer, name, linkTo, parallaxCam, parallaxDistance) {
    var _this;

    _classCallCheck(this, Grid2D);

    _this = _super.call(this, scene, function () {
      var props = (0, _List.ofArray)([new _webgl_builder_interfacesFs.GlObjProp(0, (0, _Option.defaultArg)(name, "")), new _webgl_builder_interfacesFs.GlObjProp(26, (0, _Option.defaultArg)(linkTo, "")), new _webgl_builder_interfacesFs.GlObjProp(17, (0, _Option.defaultArg)(parallaxCam, "")), new _webgl_builder_interfacesFs.GlObjProp(18, (0, _Option.defaultArg)(parallaxDistance, 1)), new _webgl_builder_interfacesFs.GlObjProp(19, (0, _Option.defaultArg)(layer, scene.DefaultLayer)), new _webgl_builder_interfacesFs.GlObjProp(3, 6), new _webgl_builder_interfacesFs.GlObjProp(6, 1), (0, _webgl_utilsFs.ubo)("grid", (0, _List.ofArray)([(0, _webgl_utilsFs.u)("minorLineColor", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, (0, _vectorsFs.Vec4__get_Values)((0, _glcanvasparamsFs.GlCanvasParams__get_StrokeColor)(config))))), (0, _webgl_utilsFs.u)("majorLineColor", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, (0, _vectorsFs.Vec4__get_Values)((0, _glcanvasparamsFs.GlCanvasParams__get_StrokeColor)(config))))), (0, _webgl_utilsFs.u)("axisLineColor", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, (0, _vectorsFs.Vec4__get_Values)((0, _glcanvasparamsFs.GlCanvasParams__get_StrokeColor)(config))))), (0, _webgl_utilsFs.u)("minorLineWidth", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, (0, _glcanvasparamsFs.GlCanvasParams__get_LineWidth)(config) * 0.8 * scene.LineWidthScale))), (0, _webgl_utilsFs.u)("majorLineWidth", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, (0, _glcanvasparamsFs.GlCanvasParams__get_LineWidth)(config) * 1.5 * scene.LineWidthScale))), (0, _webgl_utilsFs.u)("axisLineWidth", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, (0, _glcanvasparamsFs.GlCanvasParams__get_LineWidth)(config) * 3 * scene.LineWidthScale))), (0, _webgl_utilsFs.u)("size", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, (0, _vectorsFs.Vec2__get_Values)((0, _vectorsFs.Vec2__Clone)(size))))), (0, _webgl_utilsFs.u)("minorTick", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, new Float64Array([1, 1])))), (0, _webgl_utilsFs.u)("majorTick", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, new Int32Array([10, 10]))))]))]);
      return function (scene_1) {
        return (0, _webgl_utilsFs.globject)(Shaders_grid2dVertexKey, "simpleFragment2d", props, scene_1);
      };
    }());
    _this.o = new _Types.FSharpRef(null);
    _this.scene_1 = scene;
    _this.o.contents = _assertThisInitialized(_this);
    _this.uniforms = (0, _Map.ofSeq)((0, _Seq.map)(function (u) {
      return [(0, _webgl_builder_interfacesFs.GlUniformData__get_Name)(u), u];
    }, (0, _webgl_builder_interfacesFs.GlCommon_allUniforms)((0, _webglobjectFs.WebglObject__get_ObjectDef)(_this.o.contents))), {
      Compare: _Util.comparePrimitives
    });
    _this["init@115-24"] = 1;
    Grid2D__updateInstanceCount(_assertThisInitialized(_this));
    return _this;
  }

  return Grid2D;
}(_webglobjectFs.WebglObject);

exports.Grid2D = Grid2D;

function Grid2D$reflection() {
  return (0, _Reflection.class_type)("Wil.Webgl.Objects.Grid2D", void 0, Grid2D, (0, _webglobjectFs.WebglObject$reflection)());
}

function Grid2D_$ctor_5F40A667(config, scene, size, layer, name, linkTo, parallaxCam, parallaxDistance) {
  return new Grid2D(config, scene, size, layer, name, linkTo, parallaxCam, parallaxDistance);
}

function Grid2D__get_MinorLineColor(_) {
  return (0, _vectorsFs.Vec4_$ctor_Z14AF5965)((0, _Map.FSharpMap__get_Item)(_.uniforms, "minorLineColor").Value);
}

function Grid2D__set_MinorLineColor_Z66910A67(_, value) {
  var data = (0, _Map.FSharpMap__get_Item)(_.uniforms, "minorLineColor");
  (0, _gluniformFs.setValue)((0, _vectorsFs.Vec4__get_Values)(value), data);
}

function Grid2D__get_MajorLineColor(_) {
  return (0, _vectorsFs.Vec4_$ctor_Z14AF5965)((0, _Map.FSharpMap__get_Item)(_.uniforms, "majorLineColor").Value);
}

function Grid2D__set_MajorLineColor_Z66910A67(_, value) {
  var data = (0, _Map.FSharpMap__get_Item)(_.uniforms, "majorLineColor");
  (0, _gluniformFs.setValue)((0, _vectorsFs.Vec4__get_Values)(value), data);
}

function Grid2D__get_AxisLineColor(_) {
  return (0, _vectorsFs.Vec4_$ctor_Z14AF5965)((0, _Map.FSharpMap__get_Item)(_.uniforms, "axisLineColor").Value);
}

function Grid2D__set_AxisLineColor_Z66910A67(_, value) {
  var data = (0, _Map.FSharpMap__get_Item)(_.uniforms, "axisLineColor");
  (0, _gluniformFs.setValue)((0, _vectorsFs.Vec4__get_Values)(value), data);
}

function Grid2D__get_MinorLineWidth(_) {
  return (0, _Map.FSharpMap__get_Item)(_.uniforms, "minorLineWidth").Value[0] / _.scene_1.LineWidthScale;
}

function Grid2D__set_MinorLineWidth_5E38073B(_, value) {
  (0, _gluniformFs.setValue)(value * _.scene_1.LineWidthScale, (0, _Map.FSharpMap__get_Item)(_.uniforms, "minorLineWidth"));
}

function Grid2D__get_MajorLineWidth(_) {
  return (0, _Map.FSharpMap__get_Item)(_.uniforms, "majorLineWidth").Value[0] / _.scene_1.LineWidthScale;
}

function Grid2D__set_MajorLineWidth_5E38073B(_, value) {
  (0, _gluniformFs.setValue)(value * _.scene_1.LineWidthScale, (0, _Map.FSharpMap__get_Item)(_.uniforms, "majorLineWidth"));
}

function Grid2D__get_AxisLineWidth(_) {
  return (0, _Map.FSharpMap__get_Item)(_.uniforms, "axisLineWidth").Value[0] / _.scene_1.LineWidthScale;
}

function Grid2D__set_AxisLineWidth_5E38073B(_, value) {
  (0, _gluniformFs.setValue)(value * _.scene_1.LineWidthScale, (0, _Map.FSharpMap__get_Item)(_.uniforms, "axisLineWidth"));
}

function Grid2D__get_Size(_) {
  return (0, _vectorsFs.Vec2_$ctor_Z33A93963)((0, _Map.FSharpMap__get_Item)(_.uniforms, "size").Value);
}

function Grid2D__set_Size_Z66910A61(_, value) {
  var data = (0, _Map.FSharpMap__get_Item)(_.uniforms, "size");
  (0, _gluniformFs.setValue)((0, _vectorsFs.Vec2__get_Values)(value), data);
  Grid2D__updateInstanceCount(_);
}

function Grid2D__get_MinorTick(_) {
  return (0, _vectorsFs.Vec2_$ctor_Z33A93963)((0, _Map.FSharpMap__get_Item)(_.uniforms, "minorTick").Value).values[0];
}

function Grid2D__set_MinorTick_5E38073B(_, value) {
  var data = (0, _Map.FSharpMap__get_Item)(_.uniforms, "minorTick");
  (0, _gluniformFs.setValue)((0, _vectorsFs.Vec2__get_Values)((0, _vectorsFs.Vec2_Create_5E38073B)(value)), data);
  Grid2D__updateInstanceCount(_);
}

function Grid2D__get_MajorTick(_) {
  return ~~(0, _vectorsFs.Vec2_$ctor_Z33A93963)((0, _Map.FSharpMap__get_Item)(_.uniforms, "majorTick").Value).values[0];
}

function Grid2D__set_MajorTick_Z524259A4(_, value) {
  var data = (0, _Map.FSharpMap__get_Item)(_.uniforms, "majorTick");
  (0, _gluniformFs.setValue)((0, _vectorsFs.Vec2__get_Values)((0, _vectorsFs.Vec2_Create_5E38073B)(value)), data);
}

function Grid2D__calcInstanceCount(this$) {
  var size = VecUtils_priorEven((0, _vectorsFs.Vec2_$ctor_Z33A93963)((0, _Map.FSharpMap__get_Item)(this$.uniforms, "size").Value));
  var minorTicks = (0, _vectorsFs.Vec2_$ctor_Z33A93963)((0, _Map.FSharpMap__get_Item)(this$.uniforms, "minorTick").Value);
  var minorTickCount = (0, _vectorsFs.Vec2_op_Addition_Z668A51BC)((0, _vectorsFs.Vec2_op_Multiply_Z668A51BC)((0, _vectorsFs.Vec2_op_Division_5E235CE0)((0, _vectorsFs.Vec2_op_Multiply_Z668A51BC)(size, 0.5), minorTicks), 2), 1);
  return ~~(minorTickCount.values[0] + minorTickCount.values[1]) | 0;
}

function Grid2D__updateInstanceCount(this$) {
  var data = (0, _webglobjectFs.WebglObject__get_ObjectDef)(this$.o.contents);
  (0, _globjFs.setInstanceCount)(Grid2D__calcInstanceCount(this$), data);
}
},{"./webgl_shader_utils.fs.js":"../src/webgl_shader_utils.fs.js","./vectors.fs.js":"../src/vectors.fs.js","./.fable/fable-library.3.0.0/Types.js":"../src/.fable/fable-library.3.0.0/Types.js","./.fable/fable-library.3.0.0/Map.js":"../src/.fable/fable-library.3.0.0/Map.js","./.fable/fable-library.3.0.0/Seq.js":"../src/.fable/fable-library.3.0.0/Seq.js","./webgl_builder_interfaces.fs.js":"../src/webgl_builder_interfaces.fs.js","./webglobject.fs.js":"../src/webglobject.fs.js","./.fable/fable-library.3.0.0/Util.js":"../src/.fable/fable-library.3.0.0/Util.js","./.fable/fable-library.3.0.0/Option.js":"../src/.fable/fable-library.3.0.0/Option.js","./webgl_utils.fs.js":"../src/webgl_utils.fs.js","./glcanvasparams.fs.js":"../src/glcanvasparams.fs.js","./.fable/fable-library.3.0.0/List.js":"../src/.fable/fable-library.3.0.0/List.js","./.fable/fable-library.3.0.0/Reflection.js":"../src/.fable/fable-library.3.0.0/Reflection.js","./gluniform.fs.js":"../src/gluniform.fs.js","./globj.fs.js":"../src/globj.fs.js"}],"../src/vectorobject2d.fs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VectorObject2D$reflection = VectorObject2D$reflection;
exports.VectorObject2D_$ctor_5F40A667 = VectorObject2D_$ctor_5F40A667;
exports.VectorObject2D__get_Vector = VectorObject2D__get_Vector;
exports.VectorObject2D__set_Vector_Z66910A61 = VectorObject2D__set_Vector_Z66910A61;
exports.VectorObject2D__get_TipColor = VectorObject2D__get_TipColor;
exports.VectorObject2D__set_TipColor_Z66910A67 = VectorObject2D__set_TipColor_Z66910A67;
exports.VectorObject2D__get_LineColor = VectorObject2D__get_LineColor;
exports.VectorObject2D__set_LineColor_Z66910A67 = VectorObject2D__set_LineColor_Z66910A67;
exports.VectorObject2D__get_LineWidth = VectorObject2D__get_LineWidth;
exports.VectorObject2D__set_LineWidth_5E38073B = VectorObject2D__set_LineWidth_5E38073B;
exports.VectorObject2D = void 0;

var _webgl_shader_utilsFs = require("./webgl_shader_utils.fs.js");

var _Types = require("./.fable/fable-library.3.0.0/Types.js");

var _Map = require("./.fable/fable-library.3.0.0/Map.js");

var _Seq = require("./.fable/fable-library.3.0.0/Seq.js");

var _webgl_builder_interfacesFs = require("./webgl_builder_interfaces.fs.js");

var _webglobjectFs = require("./webglobject.fs.js");

var _Util = require("./.fable/fable-library.3.0.0/Util.js");

var _gluniformFs = require("./gluniform.fs.js");

var _vectorsFs = require("./vectors.fs.js");

var _Option = require("./.fable/fable-library.3.0.0/Option.js");

var _webgl_utilsFs = require("./webgl_utils.fs.js");

var _List = require("./.fable/fable-library.3.0.0/List.js");

var _glcanvasparamsFs = require("./glcanvasparams.fs.js");

var _Reflection = require("./.fable/fable-library.3.0.0/Reflection.js");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Shaders_vectorParams = "\r\nuniform vectorParams {\r\n  vec2 vec;\r\n  vec4 tipColor;\r\n  vec4 lineColor;\r\n  float lineWidth;\r\n};\r\n";
var Shaders_vector2dVertex = "#version 300 es\r\n#include camera-ubo\r\n#include vector-params\r\n#include model-params\r\n#include path-outvars\r\n#include vector2d\r\n\r\nvoid main() {\r\n  int vertexID = gl_VertexID % 9;\r\n  \r\n  float isTip;\r\n  vec2 vertex = vector2d(vec, lineWidth, vertexID, isTip);\r\n  vec4 position = modelToClip(vertex);\r\n\r\n  gl_Position = position;\r\n  v_fillColor = mix(lineColor, tipColor, isTip);\r\n}";
var Shaders_vector2dVertexKey = "vector2dVertex";
(0, _webgl_shader_utilsFs.addShaderInclude)("vector-params", Shaders_vectorParams);
(0, _webgl_shader_utilsFs.addVertexShaderSource)(Shaders_vector2dVertexKey, Shaders_vector2dVertex);

var VectorObject2D = /*#__PURE__*/function (_WebglObject) {
  _inherits(VectorObject2D, _WebglObject);

  var _super = _createSuper(VectorObject2D);

  function VectorObject2D(config, scene, vector, layer, name, linkTo, parallaxCam, parallaxDistance) {
    var _this;

    _classCallCheck(this, VectorObject2D);

    _this = _super.call(this, scene, function () {
      var props = (0, _List.ofArray)([new _webgl_builder_interfacesFs.GlObjProp(0, (0, _Option.defaultArg)(name, "")), new _webgl_builder_interfacesFs.GlObjProp(26, (0, _Option.defaultArg)(linkTo, "")), new _webgl_builder_interfacesFs.GlObjProp(17, (0, _Option.defaultArg)(parallaxCam, "")), new _webgl_builder_interfacesFs.GlObjProp(18, (0, _Option.defaultArg)(parallaxDistance, 1)), new _webgl_builder_interfacesFs.GlObjProp(19, (0, _Option.defaultArg)(layer, scene.DefaultLayer)), new _webgl_builder_interfacesFs.GlObjProp(3, 9), (0, _webgl_utilsFs.ubo)("vectorParams", (0, _List.ofArray)([(0, _webgl_utilsFs.u)("vec", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, (0, _vectorsFs.Vec2__get_Values)(vector)))), (0, _webgl_utilsFs.u)("tipColor", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, (0, _vectorsFs.Vec4__get_Values)((0, _glcanvasparamsFs.GlCanvasParams__get_StrokeColor)(config))))), (0, _webgl_utilsFs.u)("lineColor", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, (0, _vectorsFs.Vec4__get_Values)((0, _glcanvasparamsFs.GlCanvasParams__get_StrokeColor)(config))))), (0, _webgl_utilsFs.u)("lineWidth", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, (0, _glcanvasparamsFs.GlCanvasParams__get_LineWidth)(config) * scene.LineWidthScale)))]))]);
      return function (scene_1) {
        return (0, _webgl_utilsFs.globject)(Shaders_vector2dVertexKey, "simpleFragment2d", props, scene_1);
      };
    }());
    var o = new _Types.FSharpRef(null);
    _this.scene_1 = scene;
    o.contents = _assertThisInitialized(_this);
    var uniforms = (0, _Map.ofSeq)((0, _Seq.map)(function (u) {
      return [(0, _webgl_builder_interfacesFs.GlUniformData__get_Name)(u), u];
    }, (0, _webgl_builder_interfacesFs.GlCommon_allUniforms)((0, _webglobjectFs.WebglObject__get_ObjectDef)(o.contents))), {
      Compare: _Util.comparePrimitives
    });

    _this.getFloat = function (name_1) {
      return (0, _Map.FSharpMap__get_Item)(uniforms, name_1).Value[0];
    };

    _this.setFloat = function (name_3, value) {
      (0, _gluniformFs.setValue)(value, (0, _Map.FSharpMap__get_Item)(uniforms, name_3));
    };

    _this.getVec2 = function (name_5) {
      return (0, _vectorsFs.Vec2_$ctor_Z33A93963)((0, _Map.FSharpMap__get_Item)(uniforms, name_5).Value);
    };

    _this.setVec2 = function (name_7, value_2) {
      var data_2 = (0, _Map.FSharpMap__get_Item)(uniforms, name_7);
      (0, _gluniformFs.setValue)((0, _vectorsFs.Vec2__get_Values)(value_2), data_2);
    };

    _this.getVec4 = function (name_9) {
      return (0, _vectorsFs.Vec4_$ctor_Z14AF5965)((0, _Map.FSharpMap__get_Item)(uniforms, name_9).Value);
    };

    _this.setVec4 = function (name_11, value_5) {
      var data_3 = (0, _Map.FSharpMap__get_Item)(uniforms, name_11);
      (0, _gluniformFs.setValue)((0, _vectorsFs.Vec4__get_Values)(value_5), data_3);
    };

    _this["init@40-25"] = 1;
    return _this;
  }

  return VectorObject2D;
}(_webglobjectFs.WebglObject);

exports.VectorObject2D = VectorObject2D;

function VectorObject2D$reflection() {
  return (0, _Reflection.class_type)("Wil.Webgl.Objects.VectorObject2D", void 0, VectorObject2D, (0, _webglobjectFs.WebglObject$reflection)());
}

function VectorObject2D_$ctor_5F40A667(config, scene, vector, layer, name, linkTo, parallaxCam, parallaxDistance) {
  return new VectorObject2D(config, scene, vector, layer, name, linkTo, parallaxCam, parallaxDistance);
}

function VectorObject2D__get_Vector(_) {
  return _.getVec2("vec");
}

function VectorObject2D__set_Vector_Z66910A61(_, value) {
  _.setVec2("vec", value);
}

function VectorObject2D__get_TipColor(_) {
  return _.getVec4("tipColor");
}

function VectorObject2D__set_TipColor_Z66910A67(_, value) {
  _.setVec4("tipColor", value);
}

function VectorObject2D__get_LineColor(_) {
  return _.getVec4("lineColor");
}

function VectorObject2D__set_LineColor_Z66910A67(_, value) {
  _.setVec4("lineColor", value);
}

function VectorObject2D__get_LineWidth(_) {
  return _.getFloat("lineWidth") / _.scene_1.LineWidthScale;
}

function VectorObject2D__set_LineWidth_5E38073B(_, value) {
  _.setFloat("lineWidth", value * _.scene_1.LineWidthScale);
}
},{"./webgl_shader_utils.fs.js":"../src/webgl_shader_utils.fs.js","./.fable/fable-library.3.0.0/Types.js":"../src/.fable/fable-library.3.0.0/Types.js","./.fable/fable-library.3.0.0/Map.js":"../src/.fable/fable-library.3.0.0/Map.js","./.fable/fable-library.3.0.0/Seq.js":"../src/.fable/fable-library.3.0.0/Seq.js","./webgl_builder_interfaces.fs.js":"../src/webgl_builder_interfaces.fs.js","./webglobject.fs.js":"../src/webglobject.fs.js","./.fable/fable-library.3.0.0/Util.js":"../src/.fable/fable-library.3.0.0/Util.js","./gluniform.fs.js":"../src/gluniform.fs.js","./vectors.fs.js":"../src/vectors.fs.js","./.fable/fable-library.3.0.0/Option.js":"../src/.fable/fable-library.3.0.0/Option.js","./webgl_utils.fs.js":"../src/webgl_utils.fs.js","./.fable/fable-library.3.0.0/List.js":"../src/.fable/fable-library.3.0.0/List.js","./glcanvasparams.fs.js":"../src/glcanvasparams.fs.js","./.fable/fable-library.3.0.0/Reflection.js":"../src/.fable/fable-library.3.0.0/Reflection.js"}],"../src/lineobjects2d.fs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LineObjects2D$reflection = LineObjects2D$reflection;
exports.LineObjects2D_$ctor_36D5ADD8 = LineObjects2D_$ctor_36D5ADD8;
exports.LineObjects2D__get_P1 = LineObjects2D__get_P1;
exports.LineObjects2D__set_P1_Z66910A61 = LineObjects2D__set_P1_Z66910A61;
exports.LineObjects2D__get_P2 = LineObjects2D__get_P2;
exports.LineObjects2D__set_P2_Z66910A61 = LineObjects2D__set_P2_Z66910A61;
exports.LineObjects2D__get_StrokeColor = LineObjects2D__get_StrokeColor;
exports.LineObjects2D__set_StrokeColor_Z66910A67 = LineObjects2D__set_StrokeColor_Z66910A67;
exports.LineObjects2D__get_LineWidth = LineObjects2D__get_LineWidth;
exports.LineObjects2D__set_LineWidth_5E38073B = LineObjects2D__set_LineWidth_5E38073B;
exports.LineObjects2D__get_LineCap = LineObjects2D__get_LineCap;
exports.LineObjects2D__set_LineCap_7B1263D0 = LineObjects2D__set_LineCap_7B1263D0;
exports.LineObjects2D = void 0;

var _webgl_shader_utilsFs = require("./webgl_shader_utils.fs.js");

var _Types = require("./.fable/fable-library.3.0.0/Types.js");

var _Map = require("./.fable/fable-library.3.0.0/Map.js");

var _Seq = require("./.fable/fable-library.3.0.0/Seq.js");

var _webgl_builder_interfacesFs = require("./webgl_builder_interfaces.fs.js");

var _webglobjectFs = require("./webglobject.fs.js");

var _Util = require("./.fable/fable-library.3.0.0/Util.js");

var _gluniformFs = require("./gluniform.fs.js");

var _vectorsFs = require("./vectors.fs.js");

var _Option = require("./.fable/fable-library.3.0.0/Option.js");

var _glcapabilitiesFs = require("./glcapabilities.fs.js");

var _webgl_utilsFs = require("./webgl_utils.fs.js");

var _List = require("./.fable/fable-library.3.0.0/List.js");

var _glcanvasparamsFs = require("./glcanvasparams.fs.js");

var _Reflection = require("./.fable/fable-library.3.0.0/Reflection.js");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Shaders_line2dParams = "\r\nuniform line2dParams {\r\n  vec2 p1;\r\n  vec2 p2;\r\n  vec4 strokeColor;\r\n  float lineWidth;\r\n  int lineCap;\r\n};";
var Shaders_line2dVertex = "#version 300 es\r\n#include precision\r\n#include camera-ubo\r\n#include model-params\r\n#include line2d-params\r\n#include path-outvars\r\n#include circle-outvars\r\n#include lines2d-vertex\r\n#line 31\r\n\r\nvoid main() {\r\n  vec2 position = line2d(p1, p2, lineWidth, lineCap, gl_VertexID, v_isSemicircle, v_center, v_radiusDirection);\r\n\r\n  gl_Position = modelToClip(position);\r\n  v_fillColor = strokeColor;\r\n\r\n  if (gl_VertexID % 6 >= 3) v_fillColor = 1.0 - v_fillColor;\r\n}";
(0, _webgl_shader_utilsFs.addShaderInclude)("line2d-params", Shaders_line2dParams);
var Shaders_line2dVertexKey = "line2dVertex";
(0, _webgl_shader_utilsFs.addVertexShaderSource)(Shaders_line2dVertexKey, Shaders_line2dVertex);

var LineObjects2D = /*#__PURE__*/function (_WebglObject) {
  _inherits(LineObjects2D, _WebglObject);

  var _super = _createSuper(LineObjects2D);

  function LineObjects2D(config, scene, p1, p2, layer, name, linkTo, parallaxCam, parallaxDistance) {
    var _this;

    _classCallCheck(this, LineObjects2D);

    _this = _super.call(this, scene, function () {
      var props = (0, _List.ofArray)([new _webgl_builder_interfacesFs.GlObjProp(0, (0, _Option.defaultArg)(name, "")), new _webgl_builder_interfacesFs.GlObjProp(26, (0, _Option.defaultArg)(linkTo, "")), new _webgl_builder_interfacesFs.GlObjProp(17, (0, _Option.defaultArg)(parallaxCam, "")), new _webgl_builder_interfacesFs.GlObjProp(18, (0, _Option.defaultArg)(parallaxDistance, 1)), new _webgl_builder_interfacesFs.GlObjProp(19, (0, _Option.defaultArg)(layer, scene.DefaultLayer)), new _webgl_builder_interfacesFs.GlObjProp(3, 18), (0, _glcapabilitiesFs.blendFunc)(1, 771), (0, _webgl_utilsFs.ubo)("line2dParams", (0, _List.ofArray)([(0, _webgl_utilsFs.u)("p1", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, (0, _vectorsFs.Vec2__get_Values)(p1)))), (0, _webgl_utilsFs.u)("p2", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, (0, _vectorsFs.Vec2__get_Values)(p2)))), (0, _webgl_utilsFs.u)("strokeColor", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, (0, _vectorsFs.Vec4__get_Values)((0, _glcanvasparamsFs.GlCanvasParams__get_StrokeColor)(config))))), (0, _webgl_utilsFs.u)("lineWidth", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, (0, _glcanvasparamsFs.GlCanvasParams__get_LineWidth)(config) * scene.LineWidthScale))), (0, _webgl_utilsFs.u)("lineCap", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, (0, _glcanvasparamsFs.GlCanvasParams__get_LineCap)(config))))]))]);
      return function (scene_1) {
        return (0, _webgl_utilsFs.globject)(Shaders_line2dVertexKey, "semicircleFragment2d", props, scene_1);
      };
    }());
    var o = new _Types.FSharpRef(null);
    _this.scene_1 = scene;
    o.contents = _assertThisInitialized(_this);
    var uniforms = (0, _Map.ofSeq)((0, _Seq.map)(function (u) {
      return [(0, _webgl_builder_interfacesFs.GlUniformData__get_Name)(u), u];
    }, (0, _webgl_builder_interfacesFs.GlCommon_allUniforms)((0, _webglobjectFs.WebglObject__get_ObjectDef)(o.contents))), {
      Compare: _Util.comparePrimitives
    });

    _this.getInt = function (name_1) {
      return (0, _Map.FSharpMap__get_Item)(uniforms, name_1).Value[0];
    };

    _this.setInt = function (name_3, value) {
      (0, _gluniformFs.setValue)(value, (0, _Map.FSharpMap__get_Item)(uniforms, name_3));
    };

    _this.getFloat = function (name_5) {
      return (0, _Map.FSharpMap__get_Item)(uniforms, name_5).Value[0];
    };

    _this.setFloat = function (name_7, value_2) {
      (0, _gluniformFs.setValue)(value_2, (0, _Map.FSharpMap__get_Item)(uniforms, name_7));
    };

    _this.getVec2 = function (name_9) {
      return (0, _vectorsFs.Vec2_$ctor_Z33A93963)((0, _Map.FSharpMap__get_Item)(uniforms, name_9).Value);
    };

    _this.setVec2 = function (name_11, value_4) {
      var data_3 = (0, _Map.FSharpMap__get_Item)(uniforms, name_11);
      (0, _gluniformFs.setValue)((0, _vectorsFs.Vec2__get_Values)(value_4), data_3);
    };

    _this.getVec4 = function (name_13) {
      return (0, _vectorsFs.Vec4_$ctor_Z14AF5965)((0, _Map.FSharpMap__get_Item)(uniforms, name_13).Value);
    };

    _this.setVec4 = function (name_15, value_7) {
      var data_4 = (0, _Map.FSharpMap__get_Item)(uniforms, name_15);
      (0, _gluniformFs.setValue)((0, _vectorsFs.Vec4__get_Values)(value_7), data_4);
    };

    _this["init@43-22"] = 1;
    return _this;
  }

  return LineObjects2D;
}(_webglobjectFs.WebglObject);

exports.LineObjects2D = LineObjects2D;

function LineObjects2D$reflection() {
  return (0, _Reflection.class_type)("Wil.Webgl.Objects.LineObjects2D", void 0, LineObjects2D, (0, _webglobjectFs.WebglObject$reflection)());
}

function LineObjects2D_$ctor_36D5ADD8(config, scene, p1, p2, layer, name, linkTo, parallaxCam, parallaxDistance) {
  return new LineObjects2D(config, scene, p1, p2, layer, name, linkTo, parallaxCam, parallaxDistance);
}

function LineObjects2D__get_P1(_) {
  return _.getVec2("p1");
}

function LineObjects2D__set_P1_Z66910A61(_, value) {
  _.setVec2("p1", value);
}

function LineObjects2D__get_P2(_) {
  return _.getVec2("p2");
}

function LineObjects2D__set_P2_Z66910A61(_, value) {
  _.setVec2("p2", value);
}

function LineObjects2D__get_StrokeColor(_) {
  return _.getVec4("strokeColor");
}

function LineObjects2D__set_StrokeColor_Z66910A67(_, value) {
  _.setVec4("strokeColor", value);
}

function LineObjects2D__get_LineWidth(_) {
  return _.getFloat("lineWidth") / _.scene_1.LineWidthScale;
}

function LineObjects2D__set_LineWidth_5E38073B(_, value) {
  _.setFloat("lineWidth", value * _.scene_1.LineWidthScale);
}

function LineObjects2D__get_LineCap(_) {
  return _.getInt("lineCap");
}

function LineObjects2D__set_LineCap_7B1263D0(_, value) {
  _.setInt("lineCap", value);
}
},{"./webgl_shader_utils.fs.js":"../src/webgl_shader_utils.fs.js","./.fable/fable-library.3.0.0/Types.js":"../src/.fable/fable-library.3.0.0/Types.js","./.fable/fable-library.3.0.0/Map.js":"../src/.fable/fable-library.3.0.0/Map.js","./.fable/fable-library.3.0.0/Seq.js":"../src/.fable/fable-library.3.0.0/Seq.js","./webgl_builder_interfaces.fs.js":"../src/webgl_builder_interfaces.fs.js","./webglobject.fs.js":"../src/webglobject.fs.js","./.fable/fable-library.3.0.0/Util.js":"../src/.fable/fable-library.3.0.0/Util.js","./gluniform.fs.js":"../src/gluniform.fs.js","./vectors.fs.js":"../src/vectors.fs.js","./.fable/fable-library.3.0.0/Option.js":"../src/.fable/fable-library.3.0.0/Option.js","./glcapabilities.fs.js":"../src/glcapabilities.fs.js","./webgl_utils.fs.js":"../src/webgl_utils.fs.js","./.fable/fable-library.3.0.0/List.js":"../src/.fable/fable-library.3.0.0/List.js","./glcanvasparams.fs.js":"../src/glcanvasparams.fs.js","./.fable/fable-library.3.0.0/Reflection.js":"../src/.fable/fable-library.3.0.0/Reflection.js"}],"../src/linepathobject2d.fs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LinePathObject2D$reflection = LinePathObject2D$reflection;
exports.LinePathObject2D_$ctor_Z7D26523F = LinePathObject2D_$ctor_Z7D26523F;
exports.LinePathObject2D__get_StrokeColor = LinePathObject2D__get_StrokeColor;
exports.LinePathObject2D__set_StrokeColor_Z66910A67 = LinePathObject2D__set_StrokeColor_Z66910A67;
exports.LinePathObject2D__get_LineWidth = LinePathObject2D__get_LineWidth;
exports.LinePathObject2D__set_LineWidth_5E38073B = LinePathObject2D__set_LineWidth_5E38073B;
exports.LinePathObject2D__get_LineCap = LinePathObject2D__get_LineCap;
exports.LinePathObject2D__set_LineCap_7B1263D0 = LinePathObject2D__set_LineCap_7B1263D0;
exports.LinePathObject2D__get_LineJoin = LinePathObject2D__get_LineJoin;
exports.LinePathObject2D__set_LineJoin_Z229C3C20 = LinePathObject2D__set_LineJoin_Z229C3C20;
exports.LinePathObject2D__get_MiterFallback = LinePathObject2D__get_MiterFallback;
exports.LinePathObject2D__set_MiterFallback_Z229C3C20 = LinePathObject2D__set_MiterFallback_Z229C3C20;
exports.LinePathObject2D__get_MiterLimit = LinePathObject2D__get_MiterLimit;
exports.LinePathObject2D__set_MiterLimit_5E38073B = LinePathObject2D__set_MiterLimit_5E38073B;
exports.LinePathObject2D = void 0;

var _webgl_shader_utilsFs = require("./webgl_shader_utils.fs.js");

var _Types = require("./.fable/fable-library.3.0.0/Types.js");

var _Map = require("./.fable/fable-library.3.0.0/Map.js");

var _Seq = require("./.fable/fable-library.3.0.0/Seq.js");

var _webgl_builder_interfacesFs = require("./webgl_builder_interfaces.fs.js");

var _webglobjectFs = require("./webglobject.fs.js");

var _Util = require("./.fable/fable-library.3.0.0/Util.js");

var _gluniformFs = require("./gluniform.fs.js");

var _vectorsFs = require("./vectors.fs.js");

var _globjFs = require("./globj.fs.js");

var _Option = require("./.fable/fable-library.3.0.0/Option.js");

var _glcapabilitiesFs = require("./glcapabilities.fs.js");

var _webgl_utilsFs = require("./webgl_utils.fs.js");

var _Array = require("./.fable/fable-library.3.0.0/Array.js");

var _List = require("./.fable/fable-library.3.0.0/List.js");

var _glcanvasparamsFs = require("./glcanvasparams.fs.js");

var _Reflection = require("./.fable/fable-library.3.0.0/Reflection.js");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Shaders_linepathParams = "\r\nuniform linepathParams {\r\n  vec4 strokeColor;\r\n  float lineWidth;\r\n  int lineCap;\r\n  int lineJoin;\r\n  float miterLimit;\r\n  int miterFallback;\r\n  int instanceCount;\r\n};";
var Shaders_linePath2dVertex = "#version 300 es\r\n#include precision\r\n#include camera-ubo\r\n#include model-params\r\n#include linepath-params\r\n#include path-outvars\r\n#include circle-outvars\r\n#line 32\r\n#include lines2d-vertex\r\n\r\nin vec2 a;\r\nin vec2 b;\r\nin vec2 c;\r\n\r\nconst vec2 points[] = vec2[3](\r\n  vec2(-1.0, -1.0),\r\n  vec2( 0.5,  0.5),\r\n  vec2( 0.4, -1.0)\r\n);\r\n\r\nvoid main() {\r\n  // vec2 a = points[gl_InstanceID];\r\n  // vec2 b = points[gl_InstanceID + 1];\r\n  // vec2 c = gl_InstanceID == instanceCount - 1 ? vec2(0.0) : points[gl_InstanceID + 2];\r\n  vec2 p3 = gl_InstanceID == instanceCount - 1 ? vec2(0.0) : c;\r\n  vec2 position = linepath2d(a, b, p3, lineWidth, lineCap, lineJoin, miterLimit, miterFallback, gl_InstanceID, instanceCount, gl_VertexID, v_isSemicircle, v_center, v_radiusDirection);\r\n\r\n  gl_Position = modelToClip(position);\r\n  v_fillColor = strokeColor;\r\n\r\n  if (gl_VertexID % 6 >= 3) v_fillColor = vec4(vec3(1.0) - v_fillColor.xyz, 1.0);\r\n  if (gl_VertexID / 6 == 2 && gl_InstanceID != instanceCount - 1) {\r\n    if (gl_VertexID % 6 < 3)\r\n      v_fillColor = vec4(vec3(0.0), 1.0);\r\n    else\r\n      v_fillColor = vec4(0.0, 1.0, 0.0, 1.0);\r\n  }\r\n  // if (gl_VertexID / 6 != 2) gl_Position = vec4(0.0);\r\n}";
(0, _webgl_shader_utilsFs.addShaderInclude)("linepath-params", Shaders_linepathParams);
var Shaders_linePath2dVertexKey = "linePath2dVertex";
(0, _webgl_shader_utilsFs.addVertexShaderSource)(Shaders_linePath2dVertexKey, Shaders_linePath2dVertex);

var LinePathObject2D = /*#__PURE__*/function (_WebglObject) {
  _inherits(LinePathObject2D, _WebglObject);

  var _super = _createSuper(LinePathObject2D);

  function LinePathObject2D(config, scene, points, layer, name, linkTo, parallaxCam, parallaxDistance) {
    var _this;

    _classCallCheck(this, LinePathObject2D);

    _this = _super.call(this, scene, function () {
      var props = (0, _List.ofArray)([new _webgl_builder_interfacesFs.GlObjProp(0, (0, _Option.defaultArg)(name, "")), new _webgl_builder_interfacesFs.GlObjProp(26, (0, _Option.defaultArg)(linkTo, "")), new _webgl_builder_interfacesFs.GlObjProp(17, (0, _Option.defaultArg)(parallaxCam, "")), new _webgl_builder_interfacesFs.GlObjProp(18, (0, _Option.defaultArg)(parallaxDistance, 1)), new _webgl_builder_interfacesFs.GlObjProp(19, (0, _Option.defaultArg)(layer, scene.DefaultLayer)), new _webgl_builder_interfacesFs.GlObjProp(3, 18), new _webgl_builder_interfacesFs.GlObjProp(8, -1), _glcapabilitiesFs.cullBack, (0, _glcapabilitiesFs.blendFunc)(1, 771), (0, _webgl_utilsFs.interleave)("a", (0, _List.ofArray)([new _webgl_builder_interfacesFs.GlAttrProp(8), new _webgl_builder_interfacesFs.GlAttrProp(9, 1), new _webgl_builder_interfacesFs.GlAttrProp(4, (0, _Array.collect)(_vectorsFs.Vec2__get_Values, points, Float64Array)), (0, _webgl_utilsFs.child)("b", (0, _List.ofArray)([new _webgl_builder_interfacesFs.GlAttrProp(3, 8), new _webgl_builder_interfacesFs.GlAttrProp(9, 1)])), (0, _webgl_utilsFs.child)("c", (0, _List.ofArray)([new _webgl_builder_interfacesFs.GlAttrProp(3, 16), new _webgl_builder_interfacesFs.GlAttrProp(9, 1)]))])), (0, _webgl_utilsFs.ubo)("linepathParams", (0, _List.ofArray)([(0, _webgl_utilsFs.u)("strokeColor", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, (0, _vectorsFs.Vec4__get_Values)((0, _glcanvasparamsFs.GlCanvasParams__get_StrokeColor)(config))))), (0, _webgl_utilsFs.u)("lineWidth", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, (0, _glcanvasparamsFs.GlCanvasParams__get_LineWidth)(config) * scene.LineWidthScale))), (0, _webgl_utilsFs.u)("lineCap", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, (0, _glcanvasparamsFs.GlCanvasParams__get_LineCap)(config)))), (0, _webgl_utilsFs.u)("lineJoin", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, (0, _glcanvasparamsFs.GlCanvasParams__get_LineJoin)(config)))), (0, _webgl_utilsFs.u)("miterLimit", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, (0, _glcanvasparamsFs.GlCanvasParams__get_MiterLimit)(config) * scene.LineWidthScale))), (0, _webgl_utilsFs.u)("miterFallback", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, (0, _glcanvasparamsFs.GlCanvasParams__get_MiterFallback)(config)))), (0, _webgl_utilsFs.u)("instanceCount", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, 2)))]))]);
      return function (scene_1) {
        return (0, _webgl_utilsFs.globject)(Shaders_linePath2dVertexKey, "semicircleFragment2d", props, scene_1);
      };
    }());
    var o = new _Types.FSharpRef(null);
    _this.scene_1 = scene;
    o.contents = _assertThisInitialized(_this);
    var uniforms = (0, _Map.ofSeq)((0, _Seq.map)(function (u) {
      return [(0, _webgl_builder_interfacesFs.GlUniformData__get_Name)(u), u];
    }, (0, _webgl_builder_interfacesFs.GlCommon_allUniforms)((0, _webglobjectFs.WebglObject__get_ObjectDef)(o.contents))), {
      Compare: _Util.comparePrimitives
    });

    _this.getInt = function (name_1) {
      return (0, _Map.FSharpMap__get_Item)(uniforms, name_1).Value[0];
    };

    _this.setInt = function (name_3, value) {
      (0, _gluniformFs.setValue)(value, (0, _Map.FSharpMap__get_Item)(uniforms, name_3));
    };

    _this.getFloat = function (name_5) {
      return (0, _Map.FSharpMap__get_Item)(uniforms, name_5).Value[0];
    };

    _this.setFloat = function (name_7, value_2) {
      (0, _gluniformFs.setValue)(value_2, (0, _Map.FSharpMap__get_Item)(uniforms, name_7));
    };

    var getVec2 = function getVec2(name_9) {
      return (0, _vectorsFs.Vec2_$ctor_Z33A93963)((0, _Map.FSharpMap__get_Item)(uniforms, name_9).Value);
    };

    var setVec2 = function setVec2(name_11, value_4) {
      var data_3 = (0, _Map.FSharpMap__get_Item)(uniforms, name_11);
      (0, _gluniformFs.setValue)((0, _vectorsFs.Vec2__get_Values)(value_4), data_3);
    };

    _this.getVec4 = function (name_13) {
      return (0, _vectorsFs.Vec4_$ctor_Z14AF5965)((0, _Map.FSharpMap__get_Item)(uniforms, name_13).Value);
    };

    _this.setVec4 = function (name_15, value_7) {
      var data_4 = (0, _Map.FSharpMap__get_Item)(uniforms, name_15);
      (0, _gluniformFs.setValue)((0, _vectorsFs.Vec4__get_Values)(value_7), data_4);
    };

    _this.a = (0, _globjFs.getAttribute)("a")((0, _webglobjectFs.WebglObject__get_ObjectDef)(o.contents));
    _this["init@70-23"] = 1;
    LinePathObject2D__updateInstanceCount(_assertThisInitialized(_this));
    return _this;
  }

  return LinePathObject2D;
}(_webglobjectFs.WebglObject);

exports.LinePathObject2D = LinePathObject2D;

function LinePathObject2D$reflection() {
  return (0, _Reflection.class_type)("Wil.Webgl.Objects.LinePathObject2D", void 0, LinePathObject2D, (0, _webglobjectFs.WebglObject$reflection)());
}

function LinePathObject2D_$ctor_Z7D26523F(config, scene, points, layer, name, linkTo, parallaxCam, parallaxDistance) {
  return new LinePathObject2D(config, scene, points, layer, name, linkTo, parallaxCam, parallaxDistance);
}

function LinePathObject2D__get_StrokeColor(_) {
  return _.getVec4("strokeColor");
}

function LinePathObject2D__set_StrokeColor_Z66910A67(_, value) {
  _.setVec4("strokeColor", value);
}

function LinePathObject2D__get_LineWidth(_) {
  return _.getFloat("lineWidth") / _.scene_1.LineWidthScale;
}

function LinePathObject2D__set_LineWidth_5E38073B(_, value) {
  _.setFloat("lineWidth", value * _.scene_1.LineWidthScale);
}

function LinePathObject2D__get_LineCap(_) {
  return _.getInt("lineCap");
}

function LinePathObject2D__set_LineCap_7B1263D0(_, value) {
  _.setInt("lineCap", value);
}

function LinePathObject2D__get_LineJoin(_) {
  return _.getInt("lineJoin");
}

function LinePathObject2D__set_LineJoin_Z229C3C20(_, value) {
  _.setInt("lineJoin", value);
}

function LinePathObject2D__get_MiterFallback(_) {
  return _.getInt("miterFallback");
}

function LinePathObject2D__set_MiterFallback_Z229C3C20(_, value) {
  _.setInt("miterFallback", value);
}

function LinePathObject2D__get_MiterLimit(_) {
  return _.getFloat("miterLimit") / _.scene_1.LineWidthScale;
}

function LinePathObject2D__set_MiterLimit_5E38073B(_, value) {
  _.setFloat("miterLimit", value * _.scene_1.LineWidthScale);
}

function LinePathObject2D__calcInstanceCount(this$) {
  var aValues = this$.a.Values;
  return ~~(aValues.length / 2) - 1 | 0;
}

function LinePathObject2D__updateInstanceCount(this$) {
  this$.setInt("instanceCount", LinePathObject2D__calcInstanceCount(this$));
}
},{"./webgl_shader_utils.fs.js":"../src/webgl_shader_utils.fs.js","./.fable/fable-library.3.0.0/Types.js":"../src/.fable/fable-library.3.0.0/Types.js","./.fable/fable-library.3.0.0/Map.js":"../src/.fable/fable-library.3.0.0/Map.js","./.fable/fable-library.3.0.0/Seq.js":"../src/.fable/fable-library.3.0.0/Seq.js","./webgl_builder_interfaces.fs.js":"../src/webgl_builder_interfaces.fs.js","./webglobject.fs.js":"../src/webglobject.fs.js","./.fable/fable-library.3.0.0/Util.js":"../src/.fable/fable-library.3.0.0/Util.js","./gluniform.fs.js":"../src/gluniform.fs.js","./vectors.fs.js":"../src/vectors.fs.js","./globj.fs.js":"../src/globj.fs.js","./.fable/fable-library.3.0.0/Option.js":"../src/.fable/fable-library.3.0.0/Option.js","./glcapabilities.fs.js":"../src/glcapabilities.fs.js","./webgl_utils.fs.js":"../src/webgl_utils.fs.js","./.fable/fable-library.3.0.0/Array.js":"../src/.fable/fable-library.3.0.0/Array.js","./.fable/fable-library.3.0.0/List.js":"../src/.fable/fable-library.3.0.0/List.js","./glcanvasparams.fs.js":"../src/glcanvasparams.fs.js","./.fable/fable-library.3.0.0/Reflection.js":"../src/.fable/fable-library.3.0.0/Reflection.js"}],"../src/renderer.fs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GlRenderer$reflection = GlRenderer$reflection;
exports.GlRenderer_$ctor = GlRenderer_$ctor;
exports.GlRenderer__Grid2D_Z3C25B98C = GlRenderer__Grid2D_Z3C25B98C;
exports.GlRenderer__Vector2D_Z3C25B98C = GlRenderer__Vector2D_Z3C25B98C;
exports.GlRenderer__Line2D_3343692B = GlRenderer__Line2D_3343692B;
exports.GlRenderer__LinePath2D_Z183841EE = GlRenderer__LinePath2D_Z183841EE;
exports.GlRenderer = void 0;

var _Reflection = require("./.fable/fable-library.3.0.0/Reflection.js");

var _grid2dFs = require("./grid2d.fs.js");

var _vectorobject2dFs = require("./vectorobject2d.fs.js");

var _lineobjects2dFs = require("./lineobjects2d.fs.js");

var _linepathobject2dFs = require("./linepathobject2d.fs.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GlRenderer = function GlRenderer() {
  _classCallCheck(this, GlRenderer);
};

exports.GlRenderer = GlRenderer;

function GlRenderer$reflection() {
  return (0, _Reflection.class_type)("Wil.Webgl.Objects.GlRenderer", void 0, GlRenderer);
}

function GlRenderer_$ctor() {
  return new GlRenderer();
}

function GlRenderer__Grid2D_Z3C25B98C(_, scene, size, layer, name, linkTo, parallaxCam, parallaxDistance) {
  return (0, _grid2dFs.Grid2D_$ctor_5F40A667)(scene.Canvas.Params, scene, size, layer, name, linkTo, parallaxCam, parallaxDistance);
}

function GlRenderer__Vector2D_Z3C25B98C(_, scene, vector, layer, name, linkTo, parallaxCam, parallaxDistance) {
  return (0, _vectorobject2dFs.VectorObject2D_$ctor_5F40A667)(scene.Canvas.Params, scene, vector, layer, name, linkTo, parallaxCam, parallaxDistance);
}

function GlRenderer__Line2D_3343692B(_, scene, p1, p2, layer, name, linkTo, parallaxCam, parallaxDistance) {
  return (0, _lineobjects2dFs.LineObjects2D_$ctor_36D5ADD8)(scene.Canvas.Params, scene, p1, p2, layer, name, linkTo, parallaxCam, parallaxDistance);
}

function GlRenderer__LinePath2D_Z183841EE(_, scene, points, layer, name, linkTo, parallaxCam, parallaxDistance) {
  return (0, _linepathobject2dFs.LinePathObject2D_$ctor_Z7D26523F)(scene.Canvas.Params, scene, points, layer, name, linkTo, parallaxCam, parallaxDistance);
}
},{"./.fable/fable-library.3.0.0/Reflection.js":"../src/.fable/fable-library.3.0.0/Reflection.js","./grid2d.fs.js":"../src/grid2d.fs.js","./vectorobject2d.fs.js":"../src/vectorobject2d.fs.js","./lineobjects2d.fs.js":"../src/lineobjects2d.fs.js","./linepathobject2d.fs.js":"../src/linepathobject2d.fs.js"}],"../src/App.fs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.showMousePos = showMousePos;
exports.createTriangleData = createTriangleData;
exports.createInterleaveData = createInterleaveData;
exports.interleaveData = interleaveData;
exports.createInstanceData = createInstanceData;
exports.revTriangle = revTriangle;
exports.boundsToTriangles = boundsToTriangles;
exports.getUniforms = getUniforms;
exports.showUniforms = showUniforms;
exports.showUbos = showUbos;
exports.showAttributes = showAttributes;
exports.run = run;
exports.testc = testc;
exports.testw = testw;
exports.testScene = testScene;
exports.testCapabilities = testCapabilities;
exports.testCamera = testCamera;
exports.testTexture = testTexture;
exports.testWorld = testWorld;
exports.testGrid = testGrid;
exports.testGridObject = testGridObject;
exports.testParallax = testParallax;
exports.testLink = testLink;
exports.testLine = testLine;
exports.testLinePath = testLinePath;
exports.runTests = runTests;
exports.posData7 = exports.posData6 = exports.posData5 = exports.posData4 = exports.fillColor7 = exports.fillColor6 = exports.fillColor5 = exports.fillColor4 = exports.posData3 = exports.fillColor3 = exports.posData2 = exports.fillColor2 = exports.posData1 = exports.fillColor1 = exports.triangle8 = exports.triangle7 = exports.triangle6 = exports.triangle5 = exports.triangle4 = exports.triangle3 = exports.triangle2 = exports.triangle1 = exports.topRight = exports.right = exports.botRight = exports.botMid = exports.botLeft = exports.left = exports.topLeft = exports.topMid2 = exports.topMid1 = exports.topMid = exports.center = exports.mouse = exports.elMouse = exports.myCanvas = exports.star = void 0;

var _mouseFs = require("./mouse.fs.js");

var _String = require("./.fable/fable-library.3.0.0/String.js");

var _Seq = require("./.fable/fable-library.3.0.0/Seq.js");

var _vectorsFs = require("./vectors.fs.js");

var _boundsFs = require("./bounds.fs.js");

var _Array = require("./.fable/fable-library.3.0.0/Array.js");

var _Option = require("./.fable/fable-library.3.0.0/Option.js");

var _glsceneFs = require("./glscene.fs.js");

var _webgl_builder_interfacesFs = require("./webgl_builder_interfaces.fs.js");

var _glcanvasFs = require("./glcanvas.fs.js");

var _glcameraFs = require("./glcamera.fs.js");

var _optionexFs = require("./optionex.fs.js");

var _globjFs = require("./globj.fs.js");

var _Observable = require("./.fable/fable-library.3.0.0/Observable.js");

var _webgl_shader_utilsFs = require("./webgl_shader_utils.fs.js");

var _webgl_program_utilsFs = require("./webgl_program_utils.fs.js");

var _typedarray_utilsFs = require("./typedarray_utils.fs.js");

var _webgl_utilsFs = require("./webgl_utils.fs.js");

var _List = require("./.fable/fable-library.3.0.0/List.js");

var _Timer = _interopRequireDefault(require("./.fable/fable-library.3.0.0/Timer.js"));

var _gluniformFs = require("./gluniform.fs.js");

var _glattribFs = require("./glattrib.fs.js");

var _glcapabilitiesFs = require("./glcapabilities.fs.js");

var _matriciesFs = require("./matricies.fs.js");

var _gltextureFs = require("./gltexture.fs.js");

var _rendererFs = require("./renderer.fs.js");

var _grid2dFs = require("./grid2d.fs.js");

var _webglobjectFs = require("./webglobject.fs.js");

var _vectorobject2dFs = require("./vectorobject2d.fs.js");

var _lineobjects2dFs = require("./lineobjects2d.fs.js");

var _linepathobject2dFs = require("./linepathobject2d.fs.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var star = document.getElementById("star");
exports.star = star;
var myCanvas = document.getElementById("myCanvas");
exports.myCanvas = myCanvas;
myCanvas.width = 400;
myCanvas.height = 400;
var elMouse = document.getElementById("mouse");
exports.elMouse = elMouse;
var mouse = (0, _mouseFs.Mouse_$ctor_Z38C79397)(myCanvas);
exports.mouse = mouse;

function showMousePos(pos) {
  elMouse.textContent = (0, _String.toText)((0, _String.interpolate)("%P()", [pos]));
}

function createTriangleData(p1, p2, p3) {
  return new Float64Array([p1.values[0], p1.values[1], p2.values[0], p2.values[1], p3.values[0], p3.values[1]]);
}

function createInterleaveData(p1, p2, p3, col) {
  return new Float64Array([p1.values[0], p1.values[1], col[0], col[1], col[2], col[3], p2.values[0], p2.values[1], col[0], col[1], col[2], col[3], p3.values[0], p3.values[1], col[0], col[1], col[2], col[3]]);
}

function interleaveData(triangle, col) {
  return new Float64Array([triangle[0], triangle[1], col[0], col[1], col[2], col[3], triangle[2], triangle[3], col[0], col[1], col[2], col[3], triangle[4], triangle[5], col[0], col[1], col[2], col[3]]);
}

function createInstanceData(p1, p2, p3, col) {
  return new Float64Array([p1.values[0], p1.values[1], p2.values[0], p2.values[1], p3.values[0], p3.values[1], col[0], col[1], col[2], col[3]]);
}

function revTriangle(tri) {
  return new Float64Array([tri[0], tri[1], tri[4], tri[5], tri[2], tri[3]]);
}

function boundsToTriangles(b) {
  return [Float64Array.from((0, _Seq.delay)(function () {
    return (0, _Seq.append)((0, _vectorsFs.Vec2__get_Values)((0, _boundsFs.Bounds__get_MinLeft)(b)), (0, _Seq.delay)(function () {
      return (0, _Seq.append)((0, _vectorsFs.Vec2__get_Values)((0, _boundsFs.Bounds__get_MinRight)(b)), (0, _Seq.delay)(function () {
        return (0, _vectorsFs.Vec2__get_Values)((0, _boundsFs.Bounds__get_MaxRight)(b));
      }));
    }));
  })), Float64Array.from((0, _Seq.delay)(function () {
    return (0, _Seq.append)((0, _vectorsFs.Vec2__get_Values)((0, _boundsFs.Bounds__get_MinLeft)(b)), (0, _Seq.delay)(function () {
      return (0, _Seq.append)((0, _vectorsFs.Vec2__get_Values)((0, _boundsFs.Bounds__get_MaxRight)(b)), (0, _Seq.delay)(function () {
        return (0, _vectorsFs.Vec2__get_Values)((0, _boundsFs.Bounds__get_MaxLeft)(b));
      }));
    }));
  }))];
}

var center = (0, _vectorsFs.Vec2Module_vec2)(0, 0);
exports.center = center;
var topMid = (0, _vectorsFs.Vec2Module_vec2)(0, 1);
exports.topMid = topMid;
var topMid1 = (0, _vectorsFs.Vec2Module_vec2)(-0.5, 1);
exports.topMid1 = topMid1;
var topMid2 = (0, _vectorsFs.Vec2Module_vec2)(0.5, 1);
exports.topMid2 = topMid2;
var topLeft = (0, _vectorsFs.Vec2Module_vec2)(-1, 1);
exports.topLeft = topLeft;
var left = (0, _vectorsFs.Vec2Module_vec2)(-1, 0);
exports.left = left;
var botLeft = (0, _vectorsFs.Vec2Module_vec2)(-1, -1);
exports.botLeft = botLeft;
var botMid = (0, _vectorsFs.Vec2Module_vec2)(0, -1);
exports.botMid = botMid;
var botRight = (0, _vectorsFs.Vec2Module_vec2)(1, -1);
exports.botRight = botRight;
var right = (0, _vectorsFs.Vec2Module_vec2)(1, 0);
exports.right = right;
var topRight = (0, _vectorsFs.Vec2Module_vec2)(1, 1);
exports.topRight = topRight;
var triangle1 = createTriangleData(center, topMid, topLeft);
exports.triangle1 = triangle1;
var triangle2 = createTriangleData(center, topLeft, left);
exports.triangle2 = triangle2;
var triangle3 = createTriangleData(center, left, botLeft);
exports.triangle3 = triangle3;
var triangle4 = createTriangleData(center, botLeft, botMid);
exports.triangle4 = triangle4;
var triangle5 = createTriangleData(center, botMid, botRight);
exports.triangle5 = triangle5;
var triangle6 = createTriangleData(center, botRight, right);
exports.triangle6 = triangle6;
var triangle7 = createTriangleData(center, topRight, topMid2);
exports.triangle7 = triangle7;
var triangle8 = createTriangleData(center, topMid2, topMid);
exports.triangle8 = triangle8;
var fillColor1 = new Float64Array([1, 0, 0, 1]);
exports.fillColor1 = fillColor1;
var posData1 = createTriangleData(center, topMid, topLeft);
exports.posData1 = posData1;
var fillColor2 = new Float64Array([0, 1, 0, 1]);
exports.fillColor2 = fillColor2;
var posData2 = createInterleaveData(center, topLeft, left, fillColor2);
exports.posData2 = posData2;
var fillColor3 = new Float64Array([0, 0, 1, 1]);
exports.fillColor3 = fillColor3;
var posData3 = createTriangleData(center, left, botLeft);
exports.posData3 = posData3;
var fillColor4 = new Float64Array([1, 1, 0, 1]);
exports.fillColor4 = fillColor4;
var fillColor5 = new Float64Array([1, 0, 1, 1]);
exports.fillColor5 = fillColor5;
var fillColor6 = new Float64Array([0, 1, 1, 1]);
exports.fillColor6 = fillColor6;
var fillColor7 = new Float64Array([0.5, 0.5, 1, 1]);
exports.fillColor7 = fillColor7;

var posData4 = function () {
  var array2 = createInstanceData(center, botMid, botRight, fillColor5);
  return (0, _Array.append)(createInstanceData(center, botLeft, botMid, fillColor4), array2, Float64Array);
}();

exports.posData4 = posData4;
var posData5 = createTriangleData(center, botRight, right);
exports.posData5 = posData5;
var posData6 = createTriangleData(center, right, topRight);
exports.posData6 = posData6;
var posData7 = createTriangleData(center, topRight, topMid);
exports.posData7 = posData7;

function getUniforms(info) {
  return (0, _Seq.delay)(function () {
    return (0, _Seq.append)((0, _Seq.singleton)(info), (0, _Seq.delay)(function () {
      return info.Children.length > 0 ? (0, _Seq.concat)((0, _Array.map)(getUniforms, info.Children)) : (0, _Seq.empty)();
    }));
  });
}

function showUniforms(data) {
  var pinfo = data.ProgramInfo;
  console.table((0, _Option.some)(Array.from((0, _Seq.collect)(getUniforms, pinfo.Uniforms))));
}

function showUbos(data) {
  var pinfo = data.ProgramInfo;
  console.table((0, _Option.some)(Array.from((0, _Seq.collect)(function (u) {
    return u.Uniforms;
  }, pinfo.Ubos))));
}

function showAttributes(data) {
  var pinfo = data.ProgramInfo;
  console.table((0, _Option.some)(Array.from(pinfo.Attributes)));
}

function run(f) {
  var patternInput = f();
  var update = patternInput[1];
  var frames = patternInput[3] | 0;
  var canvas = patternInput[0];
  var animating = patternInput[2];
  var scene = canvas.Scenes[0];
  var cam = (0, _glsceneFs.getCamera)("cam")(scene);
  var tri1 = (0, _Seq.tryHead)((0, _webgl_builder_interfacesFs.GlCommon_objects)(scene));
  (0, _glcanvasFs.render)(canvas);
  var frame = 0;
  var dragButton = _mouseFs.MouseModule_leftButton | 0;
  var dragging = false;
  var dragOffset = (0, _vectorsFs.Vec3_Create)();

  var processMouse = function processMouse() {
    if ((0, _mouseFs.Mouse__IsDragStartEvent_Z524259A4)(mouse, dragButton)) {
      dragging = true;
      var origin = (0, _glcameraFs.toWorldO)((0, _mouseFs.Mouse__DragOrigin_Z524259A4)(mouse, dragButton), (0, _vectorsFs.Vec3_Create)(), cam);
      (0, _optionexFs.call)(function (tri1_1) {
        dragOffset = (0, _vectorsFs.Vec3_op_Subtraction_5E235CC0)(tri1_1.Position, origin);
      }, tri1);
    }

    if ((0, _mouseFs.Mouse__IsDragEvent_Z524259A4)(mouse, dragButton) ? dragging : false) {
      var worldPos = (0, _glcameraFs.toWorldO)((0, _mouseFs.Mouse__get_Position)(mouse), (0, _vectorsFs.Vec3_Create)(), cam);
      (0, _optionexFs.call)(function (tri1_2) {
        (0, _globjFs.setPosition)((0, _vectorsFs.Vec3_op_Addition_5E235CC0)(worldPos, dragOffset), tri1_2);
      }, tri1);
    }

    if ((0, _mouseFs.Mouse__IsDragEndEvent_Z524259A4)(mouse, dragButton)) {
      dragging = true;
    }

    if ((0, _mouseFs.Mouse__get_IsWheelEvent)(mouse)) {
      if ((0, _mouseFs.Mouse__get_WheelDelta)(mouse).values[1] !== 0) {
        var zoom = (0, _mouseFs.Mouse__get_WheelDelta)(mouse).values[1] > 0 ? 1.03 : 0.97;
        var worldPos_1 = (0, _glcameraFs.toWorldO)((0, _mouseFs.Mouse__get_Position)(mouse), (0, _vectorsFs.Vec3_Create)(), cam);
        (0, _glcameraFs.zoomToward)(worldPos_1, zoom, cam);
      }

      if ((0, _mouseFs.Mouse__get_WheelDelta)(mouse).values[0] !== 0) {
        var amount = (0, _mouseFs.Mouse__get_WheelDelta)(mouse).values[0] > 0 ? 10 : -10;
        (0, _glcameraFs.panByXY)(amount, 0, cam);
      }
    }
  };

  var render = function render(time) {
    frame = frame + 1;

    if (animating ? frame < frames : false) {
      var value = window.requestAnimationFrame(render);
      void value;
    }

    (0, _mouseFs.Mouse__Update)(mouse);
    showMousePos((0, _mouseFs.Mouse__get_Position)(mouse));
    processMouse();

    if (animating) {
      update(time / 1000);
    }

    (0, _glcanvasFs.render)(canvas);
  };

  var scheduleRender = function scheduleRender() {
    var value_1 = window.requestAnimationFrame(render);
    void value_1;
  };

  (0, _Observable.add)(scheduleRender, (0, _mouseFs.Mouse__get_Changed)(mouse));
  scheduleRender();
}

function testc() {
  var gl = myCanvas.getContext('2d');
  gl.fillStyle = "blue";
  gl.fillRect(0, 0, gl.canvas.width, gl.canvas.height);
}

function testw() {
  var vertex2d = "#version 300 es\n  in vec2 a_position;\n\n  void main() {\n    vec2 position = a_position;\n    gl_Position = vec4(position, 0.0, 1.0);\n  }";
  var fragment2d = "#version 300 es\n  precision mediump float;\n\n  uniform vec4 u_fillColor;\n  uniform float temp[3];\n  uniform bool tempBool;\n  out vec4 glFragColor;\n\n  void main() {\n    //glFragColor = vec4(1, 0, 0.5, 1);\n    // glFragColor = u_fillColor;\n    glFragColor = vec4(u_fillColor.x * temp[0], u_fillColor.y * temp[1], u_fillColor.z * temp[2], u_fillColor.w);\n    glFragColor *= float(tempBool);\n  }";
  var vertexInterleave = "#version 300 es\n  in vec2 a_position;\n  in vec4 a_fillColor;\n\n  out vec4 v_fillColor;\n\n  void main() {\n    gl_Position = vec4(a_position, 0.0, 1.0);\n    v_fillColor = a_fillColor;\n  }";
  var fragmentInterleave = "#version 300 es\n  precision mediump float;\n\n  in vec4 v_fillColor;\n\n  out vec4 glFragColor;\n\n  void main() {\n    glFragColor = v_fillColor;\n  }";
  var vertexInstance = "#version 300 es\n  in vec2 a_posA;\n  in vec2 a_posB;\n  in vec2 a_posC;\n  in vec4 a_fillColor;\n\n  out vec4 v_fillColor;\n\n  void main() {\n    switch (gl_VertexID) {\n      case 0:\n        gl_Position = vec4(a_posA, 0.0, 1.0);\n        break;\n      case 1:\n        gl_Position = vec4(a_posB, 0.0, 1.0);\n        break;\n      case 2:\n        gl_Position = vec4(a_posC, 0.0, 1.0);\n        break;\n    }\n\n    v_fillColor = a_fillColor;\n  }";
  var fragmentInstance = "#version 300 es\n  precision mediump float;\n\n  in vec4 v_fillColor;\n\n  out vec4 glFragColor;\n\n  void main() {\n    glFragColor = v_fillColor;\n  }";
  var vertexUbo = "#version 300 es\n  //layout (std140)\n\n  uniform perScene {\n    float value;\n    vec3 vector;\n    mat4 matrix;\n    float values[3];\n    bool boolean;\n    int integer;\n    mat3 matrix3;\n  \tvec4 color1;\n    mat3 mat3A[3];\n    vec4 color2;\n  };\n\n  uniform perModel {\n  \tvec4 color3;\n  };\n\n  in vec2 a_position;\n  uniform float flt;\n  out vec3 v_color;\n\n  void main() {\n    vec3 position = vec3(a_position, 0.0);\n    position = (matrix * vec4(position, 1.0)).xyz;\n    position *= matrix3;\n    // position *= mat3A[0];\n    // position *= mat3A[1];\n    gl_Position = vec4(position, 1.0);\n    v_color = color1.rgb + color2.rgb + color3.rgb + flt;\n    v_color *= value;\n    v_color *= float(boolean);\n    v_color *= float(integer);\n    v_color *= vector;\n    v_color *= vec3(values[0]);\n    v_color *= vec3(values[1]);\n    // v_color = vec3(1.0, 0.0, 0.0);\n    // v_color = vec3(mat3A[0][0][0], mat3A[0][0][1], mat3A[0][0][2]);\n    // v_color = vec3(mat3A[0][1][0], mat3A[0][1][1], mat3A[0][1][2]);\n    // v_color = vec3(mat3A[0][2][0], mat3A[0][2][1], mat3A[0][2][2]);\n\n    // v_color = vec3(mat3A[1][0][0], mat3A[1][0][1], mat3A[1][0][2]);\n    // v_color = vec3(mat3A[1][1][0], mat3A[1][1][1], mat3A[1][1][2]);\n    // v_color = vec3(mat3A[1][2][0], mat3A[1][2][1], mat3A[1][2][2]);\n\n    // v_color = vec3(mat3A[2][0][0], mat3A[2][0][1], mat3A[2][0][2]);\n    // v_color = vec3(mat3A[2][1][0], mat3A[2][1][1], mat3A[2][1][2]);\n    // v_color = vec3(mat3A[2][2][0], mat3A[2][2][1], mat3A[2][2][2]);\n  }\n  ";
  var fragmentUbo = "#version 300 es\n  precision mediump float;\n\n  in vec3 v_color;\n  out vec4 outColor;\n\n  void main() {\n  \toutColor = vec4(v_color, 1.0);\n  }\n  ";
  var vertexShared = "#version 300 es\n  // layout (std140)\n\n  uniform ubo1 {\n  \tvec4 red;\n  };\n\n  uniform ubo2 {\n    float temp[3];\n  \tvec4 green;\n  };\n\n  in vec2 a_position;\n  uniform vec4 blue;\n  out vec4 v_color;\n\n  void main() {\n    gl_Position = vec4(a_position, 0.0, 1.0);\n    v_color = red + green + blue;\n    // v_color = vec3(1.0, 0.0, 0.0);\n  }\n  ";
  var vertexShared2 = "#version 300 es\n  precision mediump sampler3D;\n\n  uniform ubo1 {\n  \tvec4 red;\n  };\n\n  uniform ubo2 {\n    float temp[3];\n  \tvec4 green;\n  };\n\n  uniform mat2x3 mat2x31;\n\n  in vec2 a_position;\n  uniform mat3 mat31;\n  uniform mat3 mat32[2];\n  uniform vec4 blue;\n  uniform bool yes;\n  uniform bool yesYes[2];\n  uniform bool no;\n  uniform bool noNo[2];\n  uniform int int1;\n  uniform int int2[2];\n  uniform uint uint1;\n  uniform uint uint2[2];\n  uniform vec2 v2;\n  uniform vec2 v22[2];\n  uniform vec3 v3;\n  uniform vec3 v32[2];\n  in vec2 s2;\n  uniform sampler2D s2d;\n  in vec3 s3;\n  uniform sampler3D s3d;\n  out vec4 v_color;\n\n  float add(vec2 v) { return v.x + v.y; }\n  float add(vec3 v) { return v.x + v.y + v.z; }\n  float add(vec4 v) { return v.x + v.y + v.z + v.w; }\n  float add0(vec4 v) { return v.x * 0.0 + v.y * 0.0 + v.z * 0.0 + v.w * 0.0; }\n\n  void main() {\n    vec3 position = vec3(a_position, 0.0);\n    position *= mat31;\n    position *= mat32[0];\n    position *= mat32[1];\n    vec2 b = position * mat2x31;\n    position += vec3(b, 0.0);\n    gl_Position = vec4(position, 1.0);\n    vec4 yy = vec4(float(yesYes[0]), float(yesYes[1]), 1.0, 1.0);\n    float sum = 1.0\n              + float(int1)\n              + float(int2[0]) + float(int2[1])\n              + float(no)\n              + float(noNo[0]) + float(noNo[1])\n              + add(v2)\n              + add(v22[0]) + add(v22[1])\n              + add(v3)\n              + add(v32[0]) + add(v32[1])\n              + add0(texture(s2d, s2))\n              + add0(texture(s3d, s3))\n              ;\n    v_color = red + green + blue;\n    v_color *= float(yes);\n    v_color *= yy;\n    v_color *= sum;\n    v_color *= float(uint1);\n    // v_color = texture(s2d, s2);\n  }\n  ";
  var fragmentShared = "#version 300 es\n  precision mediump float;\n\n  in vec4 v_color;\n  out vec4 outColor;\n\n  void main() {\n  \toutColor = v_color;\n  }\n  ";
  (0, _webgl_shader_utilsFs.addVertexShaderSource)("vertex2d", vertex2d);
  (0, _webgl_shader_utilsFs.addFragmentShaderSource)("fragment2d", fragment2d);
  (0, _webgl_shader_utilsFs.addVertexShaderSource)("vertexInterleave", vertexInterleave);
  (0, _webgl_shader_utilsFs.addFragmentShaderSource)("fragmentInterleave", fragmentInterleave);
  (0, _webgl_shader_utilsFs.addVertexShaderSource)("vertexInstance", vertexInstance);
  (0, _webgl_shader_utilsFs.addFragmentShaderSource)("fragmentInstance", fragmentInstance);
  (0, _webgl_shader_utilsFs.addVertexShaderSource)("vertexUbo", vertexUbo);
  (0, _webgl_shader_utilsFs.addFragmentShaderSource)("fragmentUbo", fragmentUbo);
  (0, _webgl_shader_utilsFs.addVertexShaderSource)("vertexShared", vertexShared);
  (0, _webgl_shader_utilsFs.addVertexShaderSource)("vertexShared2", vertexShared2);
  (0, _webgl_shader_utilsFs.addFragmentShaderSource)("fragmentShared", fragmentShared);

  var resetCanvas = function resetCanvas() {
    var gl = myCanvas.getContext("webgl2");
    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
    gl.clearColor(1, 1, 1, 1);
    gl.clear(gl.COLOR_BUFFER_BIT);
  };

  var run_1 = function run_1(f) {
    var patternInput = f();
    var tri = patternInput[0];
    var cam = patternInput[1];
    (0, _globjFs.render)(cam, tri);
    (0, _webgl_builder_interfacesFs.GlDebug_tableObjDef)(tri);
    var pinfo = tri.ProgramInfo;
    console.table((0, _Option.some)(Array.from((0, _Seq.collect)(getUniforms, pinfo.Uniforms))));
  };

  var manualArray = function manualArray() {
    var gl_1 = myCanvas.getContext("webgl2");
    var program = (0, _webgl_program_utilsFs.Utils_createProgram)(gl_1, vertex2d, fragment2d);
    gl_1.useProgram(program);
    var posLoc = gl_1.getAttribLocation(program, "a_position");
    var colorLoc = gl_1.getUniformLocation(program, "u_fillColor");
    var posBuffer = gl_1.createBuffer();
    gl_1.bindBuffer(gl_1.ARRAY_BUFFER, posBuffer);
    var pf = (0, _typedarray_utilsFs.toArrayBufferViewFloat32)(posData1);
    gl_1.bufferData(gl_1.ARRAY_BUFFER, pf, gl_1.STATIC_DRAW);
    gl_1.uniform4fv(colorLoc, (0, _typedarray_utilsFs.float32Array)(fillColor1));
    gl_1.enableVertexAttribArray(posLoc);
    gl_1.vertexAttribPointer(posLoc, 2, gl_1.FLOAT, false, 0, 0);
    gl_1.drawArrays(gl_1.TRIANGLES, 0, 3);
  };

  var manualArrayVao = function manualArrayVao() {
    var gl_2 = myCanvas.getContext("webgl2");
    var program_1 = (0, _webgl_program_utilsFs.Utils_createProgram)(gl_2, vertex2d, fragment2d);
    gl_2.useProgram(program_1);
    var posLoc_1 = gl_2.getAttribLocation(program_1, "a_position");
    var colorLoc_1 = gl_2.getUniformLocation(program_1, "u_fillColor");
    var posBuffer_1 = gl_2.createBuffer();
    gl_2.bindBuffer(gl_2.ARRAY_BUFFER, posBuffer_1);
    var pf_1 = (0, _typedarray_utilsFs.toArrayBufferViewFloat32)(posData1);
    gl_2.bufferData(gl_2.ARRAY_BUFFER, pf_1, gl_2.STATIC_DRAW);
    gl_2.uniform4fv(colorLoc_1, (0, _typedarray_utilsFs.float32Array)(fillColor1));
    var vao = gl_2.createVertexArray();
    gl_2.bindVertexArray(vao);
    gl_2.enableVertexAttribArray(posLoc_1);
    gl_2.vertexAttribPointer(posLoc_1, 2, gl_2.FLOAT, false, 0, 0);
    gl_2.drawArrays(gl_2.TRIANGLES, 0, 3);
  };

  var autoArray = function autoArray() {
    var canvas = (0, _webgl_utilsFs.glcanvas)("myCanvas", (0, _List.singleton)((0, _webgl_utilsFs.scene)((0, _List.singleton)((0, _webgl_utilsFs.object)("vertex2d", "fragment2d", (0, _List.ofArray)([new _webgl_builder_interfacesFs.GlObjProp(0, "tri"), (0, _webgl_utilsFs.uniform)("u_fillColor", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, fillColor1))), (0, _webgl_utilsFs.uniform)("tempBool", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, true))), (0, _webgl_utilsFs.uniform)("temp[0]", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, new Float64Array([1, 1, 1])))), (0, _webgl_utilsFs.attribute)("a_position", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlAttrProp(4, posData1)))]))))));
    var scene = canvas.Scenes[0];
    var cam_1 = (0, _List.head)(scene.Cameras);
    return [(0, _Seq.head)((0, _webgl_builder_interfacesFs.GlCommon_objects)(scene)), cam_1];
  };

  var manualInterleave = function manualInterleave() {
    var gl_3 = myCanvas.getContext("webgl2");
    var program_2 = (0, _webgl_program_utilsFs.Utils_createProgram)(gl_3, vertexInterleave, fragmentInterleave);
    gl_3.useProgram(program_2);
    var posLoc_2 = gl_3.getAttribLocation(program_2, "a_position");
    var colorLoc_2 = gl_3.getAttribLocation(program_2, "a_fillColor");
    var posBuffer_2 = gl_3.createBuffer();
    gl_3.bindBuffer(gl_3.ARRAY_BUFFER, posBuffer_2);
    var pf_2 = (0, _typedarray_utilsFs.toArrayBufferViewFloat32)(posData2);
    gl_3.bufferData(gl_3.ARRAY_BUFFER, pf_2, gl_3.STATIC_DRAW);
    gl_3.enableVertexAttribArray(posLoc_2);
    gl_3.vertexAttribPointer(posLoc_2, 2, gl_3.FLOAT, false, 24, 0);
    gl_3.enableVertexAttribArray(colorLoc_2);
    gl_3.vertexAttribPointer(colorLoc_2, 4, gl_3.FLOAT, false, 24, 8);
    gl_3.drawArrays(gl_3.TRIANGLES, 0, 3);
  };

  var manualInterleaveVao = function manualInterleaveVao() {
    var gl_4 = myCanvas.getContext("webgl2");
    var program_3 = (0, _webgl_program_utilsFs.Utils_createProgram)(gl_4, vertexInterleave, fragmentInterleave);
    gl_4.useProgram(program_3);
    var posLoc_3 = gl_4.getAttribLocation(program_3, "a_position");
    var colorLoc_3 = gl_4.getAttribLocation(program_3, "a_fillColor");
    var posBuffer_3 = gl_4.createBuffer();
    gl_4.bindBuffer(gl_4.ARRAY_BUFFER, posBuffer_3);
    var pf_3 = (0, _typedarray_utilsFs.toArrayBufferViewFloat32)(posData2);
    gl_4.bufferData(gl_4.ARRAY_BUFFER, pf_3, gl_4.STATIC_DRAW);
    var vao_1 = gl_4.createVertexArray();
    gl_4.bindVertexArray(vao_1);
    gl_4.enableVertexAttribArray(posLoc_3);
    gl_4.vertexAttribPointer(posLoc_3, 2, gl_4.FLOAT, false, 24, 0);
    gl_4.enableVertexAttribArray(colorLoc_3);
    gl_4.vertexAttribPointer(colorLoc_3, 4, gl_4.FLOAT, false, 24, 8);
    gl_4.drawArrays(gl_4.TRIANGLES, 0, 3);
  };

  var autoInterleave = function autoInterleave() {
    var canvas_1 = (0, _webgl_utilsFs.glcanvas)("myCanvas", (0, _List.singleton)((0, _webgl_utilsFs.scene)((0, _List.singleton)((0, _webgl_utilsFs.object)("vertexInterleave", "fragmentInterleave", (0, _List.ofArray)([new _webgl_builder_interfacesFs.GlObjProp(0, "tri1"), (0, _webgl_utilsFs.interleave)("a_position", (0, _List.ofArray)([new _webgl_builder_interfacesFs.GlAttrProp(4, posData2), (0, _webgl_utilsFs.child)("a_fillColor", (0, _List.ofArray)([new _webgl_builder_interfacesFs.GlAttrProp(7), new _webgl_builder_interfacesFs.GlAttrProp(0, 5121)]))]))]))))));
    var scene_1 = canvas_1.Scenes[0];
    var cam_2 = (0, _List.head)(scene_1.Cameras);
    return [(0, _Seq.head)((0, _webgl_builder_interfacesFs.GlCommon_objects)(scene_1)), cam_2];
  };

  var manualIndexed = function manualIndexed() {
    var gl_5 = myCanvas.getContext("webgl2");
    var program_4 = (0, _webgl_program_utilsFs.Utils_createProgram)(gl_5, vertex2d, fragment2d);
    gl_5.useProgram(program_4);
    var posLoc_4 = gl_5.getAttribLocation(program_4, "a_position");
    var colorLoc_4 = gl_5.getUniformLocation(program_4, "u_fillColor");
    var posBuffer_4 = gl_5.createBuffer();
    gl_5.bindBuffer(gl_5.ARRAY_BUFFER, posBuffer_4);
    var pf_4 = (0, _typedarray_utilsFs.toArrayBufferViewFloat32)(posData3);
    gl_5.bufferData(gl_5.ARRAY_BUFFER, pf_4, gl_5.STATIC_DRAW);
    var indicies = new Int32Array([0, 1, 2]);
    var pi = (0, _typedarray_utilsFs.toArrayBufferViewUint16)(indicies);
    var indexBuffer = gl_5.createBuffer();
    gl_5.bindBuffer(gl_5.ELEMENT_ARRAY_BUFFER, indexBuffer);
    gl_5.bufferData(gl_5.ELEMENT_ARRAY_BUFFER, pi, gl_5.STATIC_DRAW);
    gl_5.uniform4fv(colorLoc_4, (0, _typedarray_utilsFs.float32Array)(fillColor3));
    var vao_2 = gl_5.createVertexArray();
    gl_5.bindVertexArray(vao_2);
    gl_5.enableVertexAttribArray(posLoc_4);
    gl_5.vertexAttribPointer(posLoc_4, 2, gl_5.FLOAT, false, 0, 0);
    gl_5.drawElements(gl_5.TRIANGLES, 3, 5123, 0);
  };

  var manualIndexedVao = function manualIndexedVao() {
    var gl_6 = myCanvas.getContext("webgl2");
    var program_5 = (0, _webgl_program_utilsFs.Utils_createProgram)(gl_6, vertex2d, fragment2d);
    gl_6.useProgram(program_5);
    var posLoc_5 = gl_6.getAttribLocation(program_5, "a_position");
    var colorLoc_5 = gl_6.getUniformLocation(program_5, "u_fillColor");
    gl_6.uniform4fv(colorLoc_5, (0, _typedarray_utilsFs.float32Array)(fillColor3));
    var posBuffer_5 = gl_6.createBuffer();
    gl_6.bindBuffer(gl_6.ARRAY_BUFFER, posBuffer_5);
    var pf_5 = (0, _typedarray_utilsFs.toArrayBufferViewFloat32)(posData3);
    gl_6.bufferData(gl_6.ARRAY_BUFFER, pf_5, gl_6.STATIC_DRAW);
    var indices = new Int32Array([0, 1, 2]);
    var pi_1 = (0, _typedarray_utilsFs.toArrayBufferViewUint16)(indices);
    var indexBuffer_1 = gl_6.createBuffer();
    var vao_3 = gl_6.createVertexArray();
    gl_6.bindVertexArray(vao_3);
    gl_6.bindBuffer(gl_6.ELEMENT_ARRAY_BUFFER, indexBuffer_1);
    gl_6.bufferData(gl_6.ELEMENT_ARRAY_BUFFER, pi_1, gl_6.STATIC_DRAW);
    gl_6.enableVertexAttribArray(posLoc_5);
    gl_6.vertexAttribPointer(posLoc_5, 2, gl_6.FLOAT, false, 0, 0);
    gl_6.drawElements(gl_6.TRIANGLES, 3, 5123, 0);
  };

  var autoIndexed = function autoIndexed() {
    var canvas_2 = (0, _webgl_utilsFs.glcanvas)("myCanvas", (0, _List.singleton)((0, _webgl_utilsFs.scene)((0, _List.singleton)((0, _webgl_utilsFs.object)("vertex2d", "fragment2d", (0, _List.ofArray)([new _webgl_builder_interfacesFs.GlObjProp(0, "tri1"), (0, _webgl_utilsFs.uniform)("u_fillColor", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, fillColor3))), (0, _webgl_utilsFs.uniform)("temp[0]", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, new Float64Array([1, 1, 1])))), (0, _webgl_utilsFs.uniform)("tempBool", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, true))), (0, _webgl_utilsFs.attribute)("a_position", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlAttrProp(4, posData3))), (0, _webgl_utilsFs.indicies)((0, _List.singleton)(new _webgl_builder_interfacesFs.GlIndiciesProp(2, new Int32Array([0, 1, 2]))))]))))));
    var scene_2 = canvas_2.Scenes[0];
    var cam_3 = (0, _List.head)(scene_2.Cameras);
    return [(0, _Seq.head)((0, _webgl_builder_interfacesFs.GlCommon_objects)(scene_2)), cam_3];
  };

  var manualArrayInstanced = function manualArrayInstanced() {
    var gl_7 = myCanvas.getContext("webgl2");
    var program_6 = (0, _webgl_program_utilsFs.Utils_createProgram)(gl_7, vertexInstance, fragmentInstance);
    gl_7.useProgram(program_6);
    var posALoc = gl_7.getAttribLocation(program_6, "a_posA");
    var posBLoc = gl_7.getAttribLocation(program_6, "a_posB");
    var posCLoc = gl_7.getAttribLocation(program_6, "a_posC");
    var colorLoc_6 = gl_7.getAttribLocation(program_6, "a_fillColor");
    var posBuffer_6 = gl_7.createBuffer();
    gl_7.bindBuffer(gl_7.ARRAY_BUFFER, posBuffer_6);
    var pf_6 = (0, _typedarray_utilsFs.toArrayBufferViewFloat32)(posData4);
    gl_7.bufferData(gl_7.ARRAY_BUFFER, pf_6, gl_7.STATIC_DRAW);
    var vao_4 = gl_7.createVertexArray();
    gl_7.bindVertexArray(vao_4);
    gl_7.enableVertexAttribArray(posALoc);
    gl_7.vertexAttribPointer(posALoc, 2, gl_7.FLOAT, false, 40, 0);
    gl_7.vertexAttribDivisor(posALoc, 1);
    gl_7.enableVertexAttribArray(posBLoc);
    gl_7.vertexAttribPointer(posBLoc, 2, gl_7.FLOAT, false, 40, 8);
    gl_7.vertexAttribDivisor(posBLoc, 1);
    gl_7.enableVertexAttribArray(posCLoc);
    gl_7.vertexAttribPointer(posCLoc, 2, gl_7.FLOAT, false, 40, 16);
    gl_7.vertexAttribDivisor(posCLoc, 1);
    gl_7.enableVertexAttribArray(colorLoc_6);
    gl_7.vertexAttribPointer(colorLoc_6, 4, gl_7.FLOAT, false, 40, 24);
    gl_7.vertexAttribDivisor(colorLoc_6, 1);
    gl_7.drawArraysInstanced(gl_7.TRIANGLES, 0, 6, 2);
  };

  var manualArrayInstancedVao = function manualArrayInstancedVao() {
    var gl_8 = myCanvas.getContext("webgl2");
    var program_7 = (0, _webgl_program_utilsFs.Utils_createProgram)(gl_8, vertexInstance, fragmentInstance);
    gl_8.useProgram(program_7);
    var posALoc_1 = gl_8.getAttribLocation(program_7, "a_posA");
    var posBLoc_1 = gl_8.getAttribLocation(program_7, "a_posB");
    var posCLoc_1 = gl_8.getAttribLocation(program_7, "a_posC");
    var colorLoc_7 = gl_8.getAttribLocation(program_7, "a_fillColor");
    var posBuffer_7 = gl_8.createBuffer();
    gl_8.bindBuffer(gl_8.ARRAY_BUFFER, posBuffer_7);
    var pf_7 = (0, _typedarray_utilsFs.toArrayBufferViewFloat32)(posData4);
    gl_8.bufferData(gl_8.ARRAY_BUFFER, pf_7, gl_8.STATIC_DRAW);
    gl_8.enableVertexAttribArray(posALoc_1);
    gl_8.vertexAttribPointer(posALoc_1, 2, gl_8.FLOAT, false, 40, 0);
    gl_8.vertexAttribDivisor(posALoc_1, 1);
    gl_8.enableVertexAttribArray(posBLoc_1);
    gl_8.vertexAttribPointer(posBLoc_1, 2, gl_8.FLOAT, false, 40, 8);
    gl_8.vertexAttribDivisor(posBLoc_1, 1);
    gl_8.enableVertexAttribArray(posCLoc_1);
    gl_8.vertexAttribPointer(posCLoc_1, 2, gl_8.FLOAT, false, 40, 16);
    gl_8.vertexAttribDivisor(posCLoc_1, 1);
    gl_8.enableVertexAttribArray(colorLoc_7);
    gl_8.vertexAttribPointer(colorLoc_7, 4, gl_8.FLOAT, false, 40, 24);
    gl_8.vertexAttribDivisor(colorLoc_7, 1);
    gl_8.drawArraysInstanced(gl_8.TRIANGLES, 0, 6, 2);
  };

  var autoArrayInstanced = function autoArrayInstanced() {
    var canvas_3 = (0, _webgl_utilsFs.glcanvas)("myCanvas", (0, _List.singleton)((0, _webgl_utilsFs.scene)((0, _List.singleton)((0, _webgl_utilsFs.object)("vertexInstance", "fragmentInstance", (0, _List.ofArray)([new _webgl_builder_interfacesFs.GlObjProp(0, "tri1"), (0, _webgl_utilsFs.interleave)("a_posA", (0, _List.ofArray)([new _webgl_builder_interfacesFs.GlAttrProp(4, posData4), new _webgl_builder_interfacesFs.GlAttrProp(9, 1), new _webgl_builder_interfacesFs.GlAttrProp(7), new _webgl_builder_interfacesFs.GlAttrProp(8), (0, _webgl_utilsFs.child)("a_posB", (0, _List.ofArray)([new _webgl_builder_interfacesFs.GlAttrProp(9, 1), new _webgl_builder_interfacesFs.GlAttrProp(7)])), (0, _webgl_utilsFs.child)("a_posC", (0, _List.ofArray)([new _webgl_builder_interfacesFs.GlAttrProp(9, 1), new _webgl_builder_interfacesFs.GlAttrProp(7)])), (0, _webgl_utilsFs.child)("a_fillColor", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlAttrProp(9, 1)))]))]))))));
    var scene_3 = canvas_3.Scenes[0];
    var cam_4 = (0, _List.head)(scene_3.Cameras);
    return [(0, _Seq.head)((0, _webgl_builder_interfacesFs.GlCommon_objects)(scene_3)), cam_4];
  };

  var autoUbo = function autoUbo() {
    var canvas_4 = (0, _webgl_utilsFs.glcanvas)("myCanvas", (0, _List.singleton)((0, _webgl_utilsFs.scene)((0, _List.singleton)((0, _webgl_utilsFs.object)("vertexUbo", "fragmentUbo", (0, _List.ofArray)([new _webgl_builder_interfacesFs.GlObjProp(0, "tri1"), (0, _webgl_utilsFs.attribute)("a_position", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlAttrProp(4, posData5))), (0, _webgl_utilsFs.ubo)("perScene", (0, _List.ofArray)([(0, _webgl_utilsFs.u)("value", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, 1))), (0, _webgl_utilsFs.u)("vector", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, new Float64Array([1, 1, 1])))), (0, _webgl_utilsFs.u)("matrix", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, new Float64Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1])))), (0, _webgl_utilsFs.u)("values[0]", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, new Float64Array([1, 1, 2])))), (0, _webgl_utilsFs.u)("boolean", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, true))), (0, _webgl_utilsFs.u)("integer", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, 1))), (0, _webgl_utilsFs.u)("matrix3", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, new Float64Array([1, 0, 0, 0, 1, 0, 0, 0, 1])))), (0, _webgl_utilsFs.u)("color1", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, new Float64Array([0, 0, 0, 1])))), (0, _webgl_utilsFs.u)("mat3A[0]", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, new Float64Array([1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1])))), (0, _webgl_utilsFs.u)("color2", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, new Float64Array([0, 1, 0, 1]))))])), (0, _webgl_utilsFs.ubo)("perModel", (0, _List.singleton)((0, _webgl_utilsFs.u)("color3", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, new Float64Array([0, 0, 1, 1]))))))]))))));
    var scene_4 = canvas_4.Scenes[0];
    var cam_5 = (0, _List.head)(scene_4.Cameras);
    return [(0, _Seq.head)((0, _webgl_builder_interfacesFs.GlCommon_objects)(scene_4)), cam_5];
  };

  var autoShared = function autoShared() {
    var canvas_5 = (0, _webgl_utilsFs.glcanvas)("myCanvas", (0, _List.singleton)((0, _webgl_utilsFs.scene)((0, _List.ofArray)([(0, _webgl_utilsFs.shared)("vertexShared", "fragmentShared", (0, _List.ofArray)([(0, _webgl_utilsFs.uniform)("blue", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, new Float32Array([Math.fround(0), Math.fround(0), Math.fround(0.5), Math.fround(1)])))), (0, _webgl_utilsFs.attribute)("a_position", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlAttrProp(4, posData6))), (0, _webgl_utilsFs.ubo)("ubo1", (0, _List.ofArray)([new _webgl_builder_interfacesFs.GlUboProp(0, 3), (0, _webgl_utilsFs.u)("red", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, new Float64Array([0.5, 0, 0, 0]))))])), (0, _webgl_utilsFs.ubo)("ubo2", (0, _List.ofArray)([(0, _webgl_utilsFs.u)("temp[0]", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, new Float64Array([1, 1, 1])))), (0, _webgl_utilsFs.u)("green", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, new Float64Array([0, 0.5, 0, 0]))))]))])), (0, _webgl_utilsFs.object)("vertexShared", "fragmentShared", (0, _List.ofArray)([new _webgl_builder_interfacesFs.GlObjProp(0, "tri1"), (0, _webgl_utilsFs.ubo)("ubo2", (0, _List.singleton)((0, _webgl_utilsFs.u)("green", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, new Float64Array([0, 0.5, 0, 0]))))))])), (0, _webgl_utilsFs.object)("vertexShared2", "fragmentShared", (0, _List.ofArray)([new _webgl_builder_interfacesFs.GlObjProp(0, "tri2"), (0, _webgl_utilsFs.uniform)("mat31", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, new Float64Array([1, 0, 0, 0, 1, 0, 0, 0, 1])))), (0, _webgl_utilsFs.uniform)("mat32[0]", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, new Float64Array([1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1])))), (0, _webgl_utilsFs.uniform)("blue", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, new Float64Array([0, 0, 1, 1])))), (0, _webgl_utilsFs.uniform)("yes", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, true))), (0, _webgl_utilsFs.uniform)("yesYes[0]", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, [true, true]))), (0, _webgl_utilsFs.uniform)("s3d", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, 1))), (0, _webgl_utilsFs.uniform)("byte1", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, true))), (0, _webgl_utilsFs.uniform)("uint1", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, 1))), (0, _webgl_utilsFs.attribute)("a_position", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlAttrProp(4, posData7))), (0, _webgl_utilsFs.attribute)("s2", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlAttrProp(4, new Float64Array(2 * 3)))), (0, _webgl_utilsFs.attribute)("s3", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlAttrProp(4, new Float64Array(3 * 3))))]))]))));
    var scene_5 = canvas_5.Scenes[0];
    var cam_6 = (0, _List.head)(scene_5.Cameras);
    var tri1 = (0, _glsceneFs.getObject)("tri1")(scene_5);
    var tri2 = (0, _glsceneFs.getObject)("tri2")(scene_5);
    resetCanvas();
    (0, _globjFs.update)(cam_6, scene_5.Shared);
    (0, _globjFs.render)(cam_6, tri1);
    (0, _globjFs.render)(cam_6, tri2);
    (0, _webgl_builder_interfacesFs.GlDebug_tableObjDef)(tri2);
    resetCanvas();
    (0, _optionexFs.call)(function (data_5) {
      (0, _globjFs.update)(cam_6, data_5);
    }, scene_5.Shared);
    (0, _globjFs.render)(cam_6, tri1);
    (0, _globjFs.render)(cam_6, tri2);
    var pinfo_1 = tri2.ProgramInfo;
    console.table((0, _Option.some)(Array.from((0, _Seq.collect)(getUniforms, pinfo_1.Uniforms))));
    var uni = (0, _globjFs.getUniform)("blue")(tri1);
  };

  var doTest = function doTest() {
    run_1(autoArray);
    run_1(autoInterleave);
    run_1(autoIndexed);
    run_1(autoArrayInstanced);
  };

  var doTestVao = function doTestVao() {
    (0, _String.toConsole)((0, _String.printf)("autoShared"));
    autoShared();
  };

  resetCanvas();
  doTestVao();
}

function testScene() {
  var svertex2d = "#version 300 es\nprecision mediump float;\nin vec2 a_position;\nuniform float time;\n\nvoid main() {\n  gl_Position = vec4(0.0, 0.0, 0.0, 0.0);\n  vec2 position = a_position;\n  gl_Position = vec4(position, 0.0, 1.0);\n  gl_Position *= time / time;\n}";
  var sfragment2d = "#version 300 es\nprecision mediump float;\n\nuniform float time;\n\nout vec4 glFragColor;\n\nvoid main() {\n  glFragColor = vec4(0.0, 0.0, 0.0, 0.0);\n  glFragColor *= time;\n}";
  var vertex2d = "#version 300 es\nin vec2 a_position;\n\nvoid main() {\n  vec2 position = a_position;\n  gl_Position = vec4(position, 0.0, 1.0);\n}";
  var fragment2d = "#version 300 es\nprecision mediump float;\n\nuniform float time;\nuniform vec4 fillColor;\n\nout vec4 glFragColor;\n\nvoid main() {\n  glFragColor = fillColor;\n  glFragColor *= fract(time);\n}";
  var svertexInterleave = "#version 300 es\nprecision mediump float;\nin vec2 a_position;\nin vec4 fillColor;\nuniform float time;\n\nout vec4 v_fillColor;\n\nvoid main() {\n  gl_Position = vec4(0.0, 0.0, 0.0, 0.0);\n  vec2 position = a_position;\n  gl_Position = vec4(position, 0.0, 1.0);\n  gl_Position *= time / time;\n  v_fillColor = fillColor;\n}";
  var sfragmentInterleave = "#version 300 es\nprecision mediump float;\n\nuniform float time;\n\nin vec4 v_fillColor;\n\nout vec4 glFragColor;\n\nvoid main() {\n  glFragColor = v_fillColor;\n  glFragColor *= time;\n}";
  var vertexInterleave = "#version 300 es\nin vec2 a_position;\nin vec4 fillColor;\n\nout vec4 v_fillColor;\n\nvoid main() {\n  gl_Position = vec4(a_position, 0.0, 1.0);\n  v_fillColor = fillColor;\n}";
  var fragmentInterleave = "#version 300 es\nprecision mediump float;\n\nin vec4 v_fillColor;\n\nuniform float time;\n\nout vec4 glFragColor;\n\nvoid main() {\n  glFragColor = v_fillColor;\n  glFragColor *= fract(time);\n}";
  var svertexUbo = "#version 300 es\nprecision mediump float;\nin vec2 a_position;\n\nuniform uboShared {\n  uniform float time;\n  uniform vec4 fillColor;\n};\n\nout vec4 v_fillColor;\n\nvoid main() {\n  gl_Position = vec4(0.0, 0.0, 0.0, 0.0);\n  vec2 position = a_position;\n  gl_Position = vec4(position, 0.0, 1.0);\n  gl_Position *= time / time;\n}";
  var sfragmentUbo = "#version 300 es\nprecision mediump float;\n\nuniform uboShared {\n  uniform float time;\n  uniform vec4 fillColor;\n};\n\nout vec4 glFragColor;\n\nvoid main() {\n  glFragColor = fillColor;\n  glFragColor *= time;\n}";
  var vertexUbo = "#version 300 es\nin vec2 a_position;\n\nuniform uboShared {\n  uniform float time;\n  uniform vec4 fillColor;\n};\n\nvoid main() {\n  gl_Position = vec4(a_position, 0.0, 1.0);\n}";
  var fragmentUbo = "#version 300 es\nprecision highp float;\n// precision mediump uniform;\n\nuniform uboShared {\n  uniform float time;\n  uniform vec4 fillColor;\n};\n\nout vec4 glFragColor;\n\nvoid main() {\n  glFragColor = fillColor;\n  glFragColor *= fract(time);\n}";
  (0, _webgl_shader_utilsFs.addVertexShaderSource)("svertex2d", svertex2d);
  (0, _webgl_shader_utilsFs.addFragmentShaderSource)("sfragment2d", sfragment2d);
  (0, _webgl_shader_utilsFs.addVertexShaderSource)("vertex2d", vertex2d);
  (0, _webgl_shader_utilsFs.addFragmentShaderSource)("fragment2d", fragment2d);
  (0, _webgl_shader_utilsFs.addVertexShaderSource)("svertexInterleave", svertexInterleave);
  (0, _webgl_shader_utilsFs.addFragmentShaderSource)("sfragmentInterleave", sfragmentInterleave);
  (0, _webgl_shader_utilsFs.addVertexShaderSource)("vertexInterleave", vertexInterleave);
  (0, _webgl_shader_utilsFs.addFragmentShaderSource)("fragmentInterleave", fragmentInterleave);
  (0, _webgl_shader_utilsFs.addVertexShaderSource)("svertexUbo", svertexUbo);
  (0, _webgl_shader_utilsFs.addFragmentShaderSource)("sfragmentUbo", sfragmentUbo);
  (0, _webgl_shader_utilsFs.addVertexShaderSource)("vertexUbo", vertexUbo);
  (0, _webgl_shader_utilsFs.addFragmentShaderSource)("fragmentUbo", fragmentUbo);

  var run_1 = function run_1(f) {
    var patternInput = f();
    var update = patternInput[1];
    var glcanvas = patternInput[0];
    var tri1 = (0, _glsceneFs.tryGetObject)("tri1")(glcanvas.Scenes[0]);
    var tri2 = (0, _glsceneFs.tryGetObject)("tri2")(glcanvas.Scenes[0]);
    (0, _glcanvasFs.render)(glcanvas);
    (0, _optionexFs.call)(function (data) {
      (0, _webgl_builder_interfacesFs.GlDebug_tableObjDef)(data);
    }, glcanvas.Scenes[0].Shared);
    (0, _optionexFs.call)(function (data_1) {
      (0, _webgl_builder_interfacesFs.GlDebug_tableObjDef)(data_1);
    }, tri1);
    (0, _optionexFs.call)(function (data_2) {
      (0, _webgl_builder_interfacesFs.GlDebug_tableObjDef)(data_2);
    }, tri2);
    var pinfo;
    var gl = glcanvas.Context;
    var matchValue = glcanvas.Scenes[0].Shared;

    if (matchValue == null) {
      pinfo = (0, _optionexFs.executeDefault)((0, _webgl_program_utilsFs.emptyProgramInfo)(gl), function (x) {
        return x.ProgramInfo;
      }, tri1);
    } else {
      var shared = matchValue;
      pinfo = shared.ProgramInfo;
    }

    var doUpdate = function doUpdate(_arg1) {
      (0, _String.toConsole)((0, _String.printf)("** ========================================== **"));
      update();
      (0, _glcanvasFs.render)(glcanvas);
    };

    var t = new _Timer.default(2000);
    t.AutoReset = false;
    (0, _Observable.add)(doUpdate, t.Elapsed);
    t.Start();
  };

  var basic = function basic() {
    var canvas = (0, _webgl_utilsFs.glcanvas)("myCanvas", (0, _List.singleton)((0, _webgl_utilsFs.scene)((0, _List.ofArray)([new _webgl_builder_interfacesFs.GlSceneProp(3, (0, _vectorsFs.Vec4Module_vec4)(0, 0, 0, 1)), (0, _webgl_utilsFs.object)("vertex2d", "fragment2d", (0, _List.ofArray)([new _webgl_builder_interfacesFs.GlObjProp(0, "tri1"), (0, _webgl_utilsFs.uniform)("time", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, 0.99))), (0, _webgl_utilsFs.uniform)("fillColor", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, fillColor1))), (0, _webgl_utilsFs.attribute)("a_position", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlAttrProp(4, triangle1)))]))]))));
    return [function (canvasId) {
      return function (props) {
        return (0, _webgl_utilsFs.glcanvas)(canvasId, props);
      };
    }, function (value) {
      void value;
    }];
  };

  var sharedBasic = function sharedBasic() {
    var canvas_1 = (0, _webgl_utilsFs.glcanvas)("myCanvas", (0, _List.singleton)((0, _webgl_utilsFs.scene)((0, _List.ofArray)([(0, _webgl_utilsFs.shared)("svertex2d", "sfragment2d", (0, _List.ofArray)([(0, _webgl_utilsFs.uniform)("time", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, 0.99))), (0, _webgl_utilsFs.attribute)("a_position", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlAttrProp(4, triangle2)))])), (0, _webgl_utilsFs.object)("vertex2d", "fragment2d", (0, _List.ofArray)([new _webgl_builder_interfacesFs.GlObjProp(0, "tri1"), (0, _webgl_utilsFs.uniform)("fillColor", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, fillColor2)))])), (0, _webgl_utilsFs.object)("vertex2d", "fragment2d", (0, _List.ofArray)([new _webgl_builder_interfacesFs.GlObjProp(0, "tri2"), (0, _webgl_utilsFs.uniform)("time", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, 0.99))), (0, _webgl_utilsFs.uniform)("fillColor", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, fillColor3))), (0, _webgl_utilsFs.attribute)("a_position", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlAttrProp(4, triangle3)))]))]))));
    return [function (canvasId_1) {
      return function (props_1) {
        return (0, _webgl_utilsFs.glcanvas)(canvasId_1, props_1);
      };
    }, function () {
      var matchValue_1 = canvas_1.Scenes[0].Shared;

      if (matchValue_1 != null) {
        var shared_1 = matchValue_1;
        var time = (0, _globjFs.getUniform)("time")(shared_1);
        var tri2_1 = (0, _glsceneFs.getObject)("tri2")(canvas_1.Scenes[0]);
        var pos1 = (0, _globjFs.getAttribute)("a_position")(shared_1);
        var pos2 = (0, _globjFs.getAttribute)("a_position")(tri2_1);
        (0, _gluniformFs.setValue)(0.55, time);
        (0, _glattribFs.setValue)(2, (0, _vectorsFs.Vec2__get_Values)(botLeft), pos1);
        (0, _glattribFs.setValues)(triangle4, pos2);
      }
    }];
  };

  var interleaveShared = function interleaveShared() {
    var canvas_2 = (0, _webgl_utilsFs.glcanvas)("myCanvas", (0, _List.singleton)((0, _webgl_utilsFs.scene)((0, _List.ofArray)([(0, _webgl_utilsFs.shared)("svertexInterleave", "sfragmentInterleave", (0, _List.ofArray)([(0, _webgl_utilsFs.uniform)("time", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, 0.99))), (0, _webgl_utilsFs.interleave)("a_position", (0, _List.ofArray)([new _webgl_builder_interfacesFs.GlAttrProp(4, interleaveData(triangle5, fillColor4)), (0, _webgl_utilsFs.child)("fillColor", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlAttrProp(0, 5121)))]))])), (0, _webgl_utilsFs.object)("vertexInterleave", "fragmentInterleave", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlObjProp(0, "tri1"))), (0, _webgl_utilsFs.object)("vertexInterleave", "fragmentInterleave", (0, _List.ofArray)([new _webgl_builder_interfacesFs.GlObjProp(0, "tri2"), (0, _webgl_utilsFs.uniform)("time", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, 0.99))), (0, _webgl_utilsFs.interleave)("a_position", (0, _List.ofArray)([new _webgl_builder_interfacesFs.GlAttrProp(4, interleaveData(triangle6, fillColor5)), (0, _webgl_utilsFs.child)("fillColor", (0, _List.empty)())]))]))]))));
    return [function (canvasId_2) {
      return function (props_2) {
        return (0, _webgl_utilsFs.glcanvas)(canvasId_2, props_2);
      };
    }, function () {
      var matchValue_2 = canvas_2.Scenes[0].Shared;

      if (matchValue_2 != null) {
        var shared_2 = matchValue_2;
        var time_1 = (0, _globjFs.getUniform)("time")(shared_2);
        var tri2_2 = (0, _glsceneFs.getObject)("tri2")(canvas_2.Scenes[0]);
        var pos2_1 = (0, _globjFs.getAttribute)("a_position")(tri2_2);
        (0, _gluniformFs.setValue)(0.85, time_1);
        (0, _glattribFs.setValue)(2, (0, _vectorsFs.Vec2__get_Values)(topRight), pos2_1);
      }
    }];
  };

  var uboBasic = function uboBasic() {
    var canvas_3 = (0, _webgl_utilsFs.glcanvas)("myCanvas", (0, _List.singleton)((0, _webgl_utilsFs.scene)((0, _List.ofArray)([(0, _webgl_utilsFs.shared)("svertexUbo", "sfragmentUbo", (0, _List.ofArray)([(0, _webgl_utilsFs.ubo)("uboShared", (0, _List.ofArray)([(0, _webgl_utilsFs.u)("time", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, 0.99))), (0, _webgl_utilsFs.u)("fillColor", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, fillColor6)))])), (0, _webgl_utilsFs.attribute)("a_position", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlAttrProp(4, triangle7)))])), (0, _webgl_utilsFs.object)("vertexUbo", "fragmentUbo", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlObjProp(0, "tri1"))), (0, _webgl_utilsFs.object)("vertexUbo", "fragmentUbo", (0, _List.ofArray)([new _webgl_builder_interfacesFs.GlObjProp(0, "tri2"), (0, _webgl_utilsFs.ubo)("uboShared", (0, _List.ofArray)([(0, _webgl_utilsFs.u)("time", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, 0.99))), (0, _webgl_utilsFs.u)("fillColor", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, fillColor7)))])), (0, _webgl_utilsFs.attribute)("a_position", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlAttrProp(4, triangle8)))]))]))));
    return [canvas_3, function () {
      var matchValue_3 = canvas_3.Scenes[0].Shared;

      if (matchValue_3 != null) {
        var shared_3 = matchValue_3;
        var time1 = (0, _globjFs.getUniform)("time")(shared_3);
        var tri2_3 = (0, _glsceneFs.getObject)("tri2")(canvas_3.Scenes[0]);
        var pos1_1 = (0, _globjFs.getAttribute)("a_position")(shared_3);
        var pos2_2 = (0, _globjFs.getAttribute)("a_position")(tri2_3);
        var time2 = (0, _globjFs.getUniform)("time")(tri2_3);
        (0, _gluniformFs.setValue)(0.85, time1);
        (0, _gluniformFs.setValue)(0.75, time2);
        (0, _glattribFs.setValue)(2, new Float64Array([0.25, 0.5]), pos1_1);
        (0, _glattribFs.setValue)(2, new Float64Array([0, 0.5]), pos2_2);
      }
    }];
  };

  run_1(uboBasic);
}

function testCapabilities() {
  var svertex2d = "#version 300 es\nprecision mediump float;\nin vec2 a_position;\nuniform float time;\n\nvoid main() {\n  gl_Position = vec4(0.0, 0.0, 0.0, 0.0);\n  vec2 position = a_position;\n  gl_Position = vec4(position, 0.0, 1.0);\n  gl_Position *= time / time;\n}";
  var sfragment2d = "#version 300 es\nprecision mediump float;\n\nuniform float time;\n\nout vec4 glFragColor;\n\nvoid main() {\n  glFragColor = vec4(0.0, 0.0, 0.0, 0.0);\n  glFragColor *= time;\n}";
  var vertex2d = "#version 300 es\nin vec2 a_position;\n\nvoid main() {\n  vec2 position = a_position;\n  gl_Position = vec4(position, 0.0, 1.0);\n}";
  var fragment2d = "#version 300 es\nprecision mediump float;\n\nuniform float time;\nuniform vec4 fillColor;\n\nout vec4 glFragColor;\n\nvoid main() {\n  glFragColor = fillColor;\n  glFragColor *= fract(time);\n}";
  (0, _webgl_shader_utilsFs.addVertexShaderSource)("svertex2d", svertex2d);
  (0, _webgl_shader_utilsFs.addFragmentShaderSource)("sfragment2d", sfragment2d);
  (0, _webgl_shader_utilsFs.addVertexShaderSource)("vertex2d", vertex2d);
  (0, _webgl_shader_utilsFs.addFragmentShaderSource)("fragment2d", fragment2d);

  var run_1 = function run_1(f) {
    var patternInput = f();
    var update = patternInput[1];
    var glcanvas = patternInput[0];
    var tri1 = (0, _glsceneFs.tryGetObject)("tri1")(glcanvas.Scenes[0]);
    var tri2 = (0, _glsceneFs.tryGetObject)("tri2")(glcanvas.Scenes[0]);
    (0, _glcanvasFs.render)(glcanvas);
    (0, _optionexFs.call)(function (data) {
      (0, _webgl_builder_interfacesFs.GlDebug_tableObjDef)(data);
    }, glcanvas.Scenes[0].Shared);
    (0, _optionexFs.call)(function (data_1) {
      (0, _webgl_builder_interfacesFs.GlDebug_tableObjDef)(data_1);
    }, tri1);
    (0, _optionexFs.call)(function (data_2) {
      (0, _webgl_builder_interfacesFs.GlDebug_tableObjDef)(data_2);
    }, tri2);

    var doUpdate = function doUpdate(_arg1) {
      (0, _String.toConsole)((0, _String.printf)("** ========================================== **"));
      update();
      (0, _glcanvasFs.render)(glcanvas);
    };

    var t = new _Timer.default(2000);
    t.AutoReset = false;
    (0, _Observable.add)(doUpdate, t.Elapsed);
    t.Start();
  };

  var basic = function basic() {
    var canvas = (0, _webgl_utilsFs.glcanvas)("myCanvas", (0, _List.singleton)((0, _webgl_utilsFs.scene)((0, _List.ofArray)([new _webgl_builder_interfacesFs.GlSceneProp(3, (0, _vectorsFs.Vec4Module_vec4)(1, 1, 1, 1)), (0, _webgl_utilsFs.object)("vertex2d", "fragment2d", (0, _List.ofArray)([new _webgl_builder_interfacesFs.GlObjProp(0, "tri1"), (0, _webgl_utilsFs.uniform)("time", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, 0.99))), (0, _webgl_utilsFs.uniform)("fillColor", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, fillColor1))), (0, _webgl_utilsFs.attribute)("a_position", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlAttrProp(4, triangle1)))])), (0, _webgl_utilsFs.object)("vertex2d", "fragment2d", (0, _List.ofArray)([new _webgl_builder_interfacesFs.GlObjProp(0, "tri2"), _glcapabilitiesFs.cullFront, (0, _webgl_utilsFs.uniform)("time", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, 0.99))), (0, _webgl_utilsFs.uniform)("fillColor", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, fillColor2))), (0, _webgl_utilsFs.attribute)("a_position", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlAttrProp(4, revTriangle(triangle2))))]))]))));
    return [canvas, function (value) {
      void value;
    }];
  };

  run_1(basic);
}

function testCamera() {
  var svertex2d = "#version 300 es\nprecision mediump float;\n\nuniform camera {\n  mat4 projMat;\n  mat4 viewMat;\n};\n\nuniform float time;\n\nvoid main() {\n  gl_Position = projMat * viewMat * vec4(0.0, 0.0, 0.0, 0.0);\n  gl_Position *= time / time;\n}";
  var sfragment2d = "#version 300 es\nprecision mediump float;\n\nuniform float time;\n\nout vec4 glFragColor;\n\nvoid main() {\n  glFragColor = vec4(0.0, 0.0, 0.0, 0.0);\n  glFragColor *= time;\n}";
  var vertex2d = "#version 300 es\nuniform camera {\n  mat4 projMat;\n  mat4 viewMat;\n};\n\nin vec2 a_position;\n\nuniform mat4 modelMat;\n\nvoid main() {\n  vec2 pos = a_position;\n  // pos = vec2(pos.x, 400.0 - pos.y);\n  vec4 position = vec4(pos, 0.0, 1.0);\n  position = projMat * viewMat * modelMat * position;\n  // position = projMat * viewMat * position;\n  // position = projMat * position;\n  // position = viewMat * position;\n  gl_Position = position;\n}";
  var fragment2d = "#version 300 es\nprecision mediump float;\n\nuniform float time;\nuniform vec4 fillColor;\n\nout vec4 glFragColor;\n\nvoid main() {\n  glFragColor = fillColor;\n  glFragColor *= fract(time);\n}";
  (0, _webgl_shader_utilsFs.addVertexShaderSource)("svertex2d", svertex2d);
  (0, _webgl_shader_utilsFs.addFragmentShaderSource)("sfragment2d", sfragment2d);
  (0, _webgl_shader_utilsFs.addVertexShaderSource)("vertex2d", vertex2d);
  (0, _webgl_shader_utilsFs.addFragmentShaderSource)("fragment2d", fragment2d);
  var center_1 = (0, _vectorsFs.Vec2Module_vec2)(100, 100);
  var topMid_1 = (0, _vectorsFs.Vec2Module_vec2)(100, 0);
  var topMid1_1 = (0, _vectorsFs.Vec2Module_vec2)(-0.5, 1);
  var topMid2_1 = (0, _vectorsFs.Vec2Module_vec2)(0.5, 1);
  var topLeft_1 = (0, _vectorsFs.Vec2Module_vec2)(0, 0);
  var left_1 = (0, _vectorsFs.Vec2Module_vec2)(0, 100);
  var botLeft_1 = (0, _vectorsFs.Vec2Module_vec2)(-1, -1);
  var botMid_1 = (0, _vectorsFs.Vec2Module_vec2)(0, -1);
  var botRight_1 = (0, _vectorsFs.Vec2Module_vec2)(1, -1);
  var right_1 = (0, _vectorsFs.Vec2Module_vec2)(1, 0);
  var topRight_1 = (0, _vectorsFs.Vec2Module_vec2)(1, 1);
  var triangle1_1 = createTriangleData(center_1, topMid_1, topLeft_1);
  var triangle2_1 = createTriangleData(center_1, topLeft_1, left_1);

  var run_1 = function run_1(f) {
    var showUniforms_1 = function showUniforms_1(data) {
      var pinfo = data.ProgramInfo;
      console.table((0, _Option.some)(Array.from((0, _Seq.collect)(getUniforms, pinfo.Uniforms))));
    };

    var patternInput = f();
    var update = patternInput[1];
    var glcanvas = patternInput[0];
    var scene = glcanvas.Scenes[0];
    var tri1 = (0, _glsceneFs.tryGetObject)("tri1")(scene);
    var tri2 = (0, _glsceneFs.tryGetObject)("tri2")(scene);
    (0, _String.toConsole)((0, _String.interpolate)("%P()", [tri1.ProgramInfo.ShaderSet.VertexShaderId]));
    (0, _glcanvasFs.render)(glcanvas);
    (0, _optionexFs.call)(function (data_1) {
      (0, _webgl_builder_interfacesFs.GlDebug_tableObjDef)(data_1);
    }, scene.Shared);
    (0, _optionexFs.call)(function (data_2) {
      (0, _webgl_builder_interfacesFs.GlDebug_tableObjDef)(data_2);
    }, tri1);
    (0, _optionexFs.call)(function (data_3) {
      (0, _webgl_builder_interfacesFs.GlDebug_tableObjDef)(data_3);
    }, tri2);
    (0, _optionexFs.call)(showUniforms_1, scene.Shared);

    var doUpdate = function doUpdate(_arg1) {
      (0, _String.toConsole)((0, _String.printf)("** ========================================== **"));
      update();
      (0, _glcanvasFs.render)(glcanvas);
    };

    var t = new _Timer.default(2000);
    t.AutoReset = false;
    (0, _Observable.add)(doUpdate, t.Elapsed);
    t.Start();
  };

  var basic = function basic() {
    var canvas = (0, _webgl_utilsFs.glcanvas)("myCanvas", (0, _List.ofArray)([new _webgl_builder_interfacesFs.WebglProp(14), (0, _webgl_utilsFs.scene)((0, _List.ofArray)([(0, _webgl_utilsFs.shared)("svertex2d", "sfragment2d", (0, _List.singleton)((0, _webgl_utilsFs.ubo)("camera", (0, _List.ofArray)([(0, _webgl_utilsFs.u)("projMat", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, (0, _matriciesFs.Mat4__get_Values)((0, _matriciesFs.Mat4_Create)())))), (0, _webgl_utilsFs.u)("viewMat", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, (0, _matriciesFs.Mat4__get_Values)((0, _matriciesFs.Mat4_Create)()))))])))), (0, _webgl_utilsFs.object)("vertex2d", "fragment2d", (0, _List.ofArray)([new _webgl_builder_interfacesFs.GlObjProp(0, "tri1"), _glcapabilitiesFs.cullBack, (0, _webgl_utilsFs.uniform)("time", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, 0.99))), (0, _webgl_utilsFs.uniform)("fillColor", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, fillColor1))), (0, _webgl_utilsFs.attribute)("a_position", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlAttrProp(4, triangle1_1)))])), (0, _webgl_utilsFs.object)("vertex2d", "fragment2d", (0, _List.ofArray)([new _webgl_builder_interfacesFs.GlObjProp(0, "tri2"), (0, _webgl_utilsFs.uniform)("time", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, 0.99))), (0, _webgl_utilsFs.uniform)("fillColor", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, fillColor2))), (0, _webgl_utilsFs.attribute)("a_position", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlAttrProp(4, revTriangle(triangle2_1))))]))]))]));
    return [canvas, function () {
      var scene_1 = (0, _glcanvasFs.getScene)(0, canvas);
      var tri1_1 = (0, _glsceneFs.getObject)("tri1")(scene_1);
      var modelMatrix = tri1_1.ModelMatrix;
      (0, _matriciesFs.Mat4__TranslateM_8ED0A5D)(modelMatrix, 100, 100, 0);
      (0, _matriciesFs.Mat4__RotateZM_2F186313)(modelMatrix, -10 * 3.141592653589793 / 180);
      (0, _matriciesFs.Mat4__TranslateM_8ED0A5D)(modelMatrix, -100, -100, 0);
      (0, _webgl_builder_interfacesFs.GlCommon_dirtyObject)(tri1_1);
      (0, _String.toConsole)((0, _String.interpolate)("canvas isDirty %P()", [canvas.IsDirty]));
    }];
  };

  run_1(basic);
}

function testTexture() {
  var svertex2d = "#version 300 es\nprecision mediump float;\n\nuniform camera {\n  mat4 projMat;\n  mat4 viewMat;\n};\n\nin vec2 a_texcoords;\n\nuniform float time;\n\nvoid main() {\n  gl_Position = projMat * viewMat * vec4(0.0, 0.0, 0.0, 0.0);\n  gl_Position *= time / time;\n  gl_Position *= vec4(a_texcoords / a_texcoords, 1.0, 1.0);\n}";
  var sfragment2d = "#version 300 es\nprecision mediump float;\n\nuniform float time;\n\nout vec4 glFragColor;\n\nvoid main() {\n  glFragColor = vec4(0.0, 0.0, 0.0, 0.0);\n  glFragColor *= time;\n}";
  var vertex2d = "#version 300 es\nuniform camera {\n  mat4 projMat;\n  mat4 viewMat;\n};\n\nin vec2 a_position;\nin vec2 a_texcoords;\n\nuniform mat4 modelMat;\n\nout vec2 v_texcoords;\n\nvoid main() {\n  vec2 pos = a_position;\n  // pos = vec2(pos.x, 400.0 - pos.y);\n  vec4 position = vec4(pos, 0.0, 1.0);\n  position = projMat * viewMat * modelMat * position;\n  // position = projMat * viewMat * position;\n  // position = projMat * position;\n  // position = viewMat * position;\n  gl_Position = position;\n  v_texcoords = a_texcoords;\n}";
  var fragment2d = "#version 300 es\nprecision mediump float;\n\nuniform float time;\nuniform vec4 fillColor;\nuniform sampler2D u_texture1;\n\nin vec2 v_texcoords;\n\nout vec4 glFragColor;\n\nvoid main() {\n  glFragColor = fillColor;\n  glFragColor *= fract(time);\n  glFragColor = texture(u_texture1, v_texcoords);\n}";
  (0, _webgl_shader_utilsFs.addVertexShaderSource)("svertex2d", svertex2d);
  (0, _webgl_shader_utilsFs.addFragmentShaderSource)("sfragment2d", sfragment2d);
  (0, _webgl_shader_utilsFs.addVertexShaderSource)("vertex2d", vertex2d);
  (0, _webgl_shader_utilsFs.addFragmentShaderSource)("fragment2d", fragment2d);
  var center_1 = (0, _vectorsFs.Vec2Module_vec2)(100, 100);
  var topMid_1 = (0, _vectorsFs.Vec2Module_vec2)(100, 0);
  var topMid1_1 = (0, _vectorsFs.Vec2Module_vec2)(50, 0);
  var topMid2_1 = (0, _vectorsFs.Vec2Module_vec2)(150, 0);
  var topLeft_1 = (0, _vectorsFs.Vec2Module_vec2)(0, 0);
  var left_1 = (0, _vectorsFs.Vec2Module_vec2)(0, 100);
  var botLeft_1 = (0, _vectorsFs.Vec2Module_vec2)(0, 200);
  var botMid_1 = (0, _vectorsFs.Vec2Module_vec2)(100, 200);
  var botRight_1 = (0, _vectorsFs.Vec2Module_vec2)(200, 200);
  var right_1 = (0, _vectorsFs.Vec2Module_vec2)(200, 100);
  var topRight_1 = (0, _vectorsFs.Vec2Module_vec2)(1, 1);
  var triangle1_1 = createTriangleData(center_1, topMid_1, topLeft_1);
  var triangle2_1 = createTriangleData(center_1, topLeft_1, left_1);
  var triangle3_1 = createTriangleData(center_1, left_1, botLeft_1);
  var triangle4_1 = createTriangleData(center_1, botLeft_1, botMid_1);
  var triangle5_1 = createTriangleData(center_1, botMid_1, botRight_1);
  var triangle6_1 = createTriangleData(center_1, botRight_1, right_1);

  var run_1 = function run_1(f) {
    var showUniforms_1 = function showUniforms_1(data) {
      var pinfo = data.ProgramInfo;
      console.table((0, _Option.some)(Array.from((0, _Seq.collect)(getUniforms, pinfo.Uniforms))));
    };

    var patternInput = f();
    var update = patternInput[1];
    var glcanvas = patternInput[0];
    var scene = glcanvas.Scenes[0];
    var tri1 = (0, _glsceneFs.tryGetObject)("tri1")(scene);
    var tri2 = (0, _glsceneFs.tryGetObject)("tri2")(scene);
    (0, _glcanvasFs.render)(glcanvas);
    (0, _optionexFs.call)(function (data_1) {
      (0, _webgl_builder_interfacesFs.GlDebug_tableObjDef)(data_1);
    }, scene.Shared);
    (0, _optionexFs.call)(function (data_2) {
      (0, _webgl_builder_interfacesFs.GlDebug_tableObjDef)(data_2);
    }, tri1);
    (0, _optionexFs.call)(function (data_3) {
      (0, _webgl_builder_interfacesFs.GlDebug_tableObjDef)(data_3);
    }, tri2);
    (0, _optionexFs.call)(showUniforms_1, scene.Shared);

    var doUpdate = function doUpdate(_arg1) {
      (0, _String.toConsole)((0, _String.printf)("** ========================================== **"));
      update();
      (0, _glcanvasFs.render)(glcanvas);
    };

    var t = new _Timer.default(2000);
    t.AutoReset = false;
    (0, _Observable.add)(doUpdate, t.Elapsed);
    t.Start();
  };

  var basic = function basic() {
    var canvas = (0, _webgl_utilsFs.glcanvas)("myCanvas", (0, _List.ofArray)([new _webgl_builder_interfacesFs.WebglProp(14), new _webgl_builder_interfacesFs.WebglProp(6, new _webgl_builder_interfacesFs.GlPixelStorage(2)), (0, _webgl_utilsFs.scene)((0, _List.ofArray)([(0, _webgl_utilsFs.orthoCam2d)((0, _List.ofArray)([new _webgl_builder_interfacesFs.GlCamProp(0, "cam"), new _webgl_builder_interfacesFs.GlCamProp(2, (0, _vectorsFs.Vec4Module_vec4)(0, 0.4, 0.4, 0.1)), new _webgl_builder_interfacesFs.GlCamProp(7, 10)])), (0, _webgl_utilsFs.shared)("svertex2d", "sfragment2d", (0, _List.ofArray)([(0, _webgl_utilsFs.ubo)("camera", (0, _List.ofArray)([(0, _webgl_utilsFs.u)("projMat", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, (0, _matriciesFs.Mat4__get_Values)((0, _matriciesFs.Mat4_Create)())))), (0, _webgl_utilsFs.u)("viewMat", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, (0, _matriciesFs.Mat4__get_Values)((0, _matriciesFs.Mat4_Create)()))))])), (0, _webgl_utilsFs.attribute)("a_texcoords", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlAttrProp(4, new Float64Array([1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0]))))])), (0, _webgl_utilsFs.object)("vertex2d", "fragment2d", (0, _List.ofArray)([new _webgl_builder_interfacesFs.GlObjProp(0, "tri1"), _glcapabilitiesFs.cullBack, (0, _webgl_utilsFs.uniform)("time", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, 0.99))), (0, _webgl_utilsFs.uniform)("fillColor", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, fillColor1))), (0, _webgl_utilsFs.attribute)("a_position", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlAttrProp(4, (0, _Array.append)(triangle1_1, triangle2_1, Float64Array)))), (0, _webgl_utilsFs.texture)((0, _List.ofArray)([new _webgl_builder_interfacesFs.GlTextureProp(0, "tex1"), (0, _gltextureFs.pixelImageId)("star")]))])), (0, _webgl_utilsFs.object)("vertex2d", "fragment2d", (0, _List.ofArray)([new _webgl_builder_interfacesFs.GlObjProp(0, "tri2"), _glcapabilitiesFs.cullBack, (0, _webgl_utilsFs.uniform)("time", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, 0.99))), (0, _webgl_utilsFs.uniform)("fillColor", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, fillColor2))), (0, _webgl_utilsFs.attribute)("a_position", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlAttrProp(4, (0, _Array.append)(triangle3_1, triangle4_1, Float64Array)))), (0, _webgl_utilsFs.texture)((0, _List.ofArray)([new _webgl_builder_interfacesFs.GlTextureProp(0, "tex1"), new _webgl_builder_interfacesFs.GlTextureProp(5, 1), new _webgl_builder_interfacesFs.GlTextureProp(6, 1), (0, _gltextureFs.pixelDataUint8)(new Int32Array([255, 0, 0, 255]))]))])), (0, _webgl_utilsFs.object)("vertex2d", "fragment2d", (0, _List.ofArray)([new _webgl_builder_interfacesFs.GlObjProp(0, "tri3"), _glcapabilitiesFs.cullBack, (0, _webgl_utilsFs.uniform)("time", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, 0.99))), (0, _webgl_utilsFs.uniform)("fillColor", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, fillColor1))), (0, _webgl_utilsFs.attribute)("a_position", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlAttrProp(4, triangle5_1))), (0, _webgl_utilsFs.texture)((0, _List.singleton)(new _webgl_builder_interfacesFs.GlTextureProp(0, "tex1")))]))]))]));
    return [canvas, function () {
      var scene_1 = (0, _glcanvasFs.getScene)(0, canvas);
      var tri1_1 = (0, _glsceneFs.getObject)("tri1")(scene_1);
      var modelMatrix = tri1_1.ModelMatrix;
      (0, _matriciesFs.Mat4__TranslateM_8ED0A5D)(modelMatrix, 100, 100, 0);
      (0, _matriciesFs.Mat4__RotateZM_2F186313)(modelMatrix, -10 * 3.141592653589793 / 180);
      (0, _matriciesFs.Mat4__TranslateM_8ED0A5D)(modelMatrix, -100, -100, 0);
      (0, _globjFs.dirty)(tri1_1);
    }];
  };

  (0, _String.toConsole)((0, _String.printf)("testTexture.basic"));
  run_1(basic);
}

function testWorld() {
  var svertex2d = "#version 300 es\n#include precision\n#include camera-ubo\n#include vertex-texture2d0\n// #include time\n\nvoid main() {\n  gl_Position = projMat * viewMat * vec4(0.0, 0.0, 0.0, 0.0);\n// #include use-vertex-time\n#include use-vertex-texture2d0\n}";
  var sfragment2d = "#version 300 es\n#include precision\n#include fragment-texture2d0\n// #include time\n#include out-color\n\nvoid main() {\n  glFragColor = vec4(0.0, 0.0, 0.0, 0.0);\n// #include use-fragment-time\n#include use-fragment-texture2d0\n}";
  var vertex2d = "#version 300 es\n#include camera-ubo\n#include model-params\n#include vertex-texture2d0\n\nin vec2 a_position;\n\nvoid main() {\n  vec2 pos = a_position;\n  vec4 position = vec4(pos, 0.0, 1.0);\n  position = projMat * viewMat * modelMat * position;\n  gl_Position = position;\n  v_texCoords0 = a_texCoords0;\n}";
  var fragment2d = "#version 300 es\n#include precision\n#include out-color\n#include fragment-texture2d0\n\nvoid main() {\n  glFragColor = texture(u_texture0, v_texCoords0);\n}";
  (0, _webgl_shader_utilsFs.addVertexShaderSource)("svertex2d", svertex2d);
  (0, _webgl_shader_utilsFs.addFragmentShaderSource)("sfragment2d", sfragment2d);
  (0, _webgl_shader_utilsFs.addVertexShaderSource)("vertex2d", vertex2d);
  (0, _webgl_shader_utilsFs.addFragmentShaderSource)("fragment2d", fragment2d);
  var viewport = (0, _boundsFs.BoundsModule_boundsSize)(myCanvas.width, myCanvas.height);
  var worldBounds = (0, _boundsFs.BoundsModule_boundsCenter)(0, 0, (0, _boundsFs.Bounds__get_Width)(viewport), (0, _boundsFs.Bounds__get_Height)(viewport));
  var quad;
  var tupledArg = boundsToTriangles((0, _boundsFs.BoundsModule_boundsCenterV)((0, _vectorsFs.Vec2Module_vec2)(0, 0), (0, _boundsFs.Bounds__get_Size)(worldBounds)));
  quad = (0, _Array.append)(tupledArg[0], tupledArg[1], Float64Array);
  var quad2;
  var tupledArg_1 = boundsToTriangles((0, _boundsFs.BoundsModule_boundsCenterV)((0, _vectorsFs.Vec2Module_vec2)(0, 0), (0, _vectorsFs.Vec2_op_Multiply_Z668A51BC)((0, _boundsFs.Bounds__get_HalfSize)(worldBounds), 0.5)));
  quad2 = (0, _Array.append)(tupledArg_1[0], tupledArg_1[1], Float64Array);

  var basic = function basic() {
    var canvas = (0, _webgl_utilsFs.glcanvas)("myCanvas", (0, _List.ofArray)([new _webgl_builder_interfacesFs.WebglProp(2, 400), new _webgl_builder_interfacesFs.WebglProp(3, 400), new _webgl_builder_interfacesFs.WebglProp(14), new _webgl_builder_interfacesFs.WebglProp(6, new _webgl_builder_interfacesFs.GlPixelStorage(2)), (0, _webgl_utilsFs.scene)((0, _List.ofArray)([new _webgl_builder_interfacesFs.GlSceneProp(8, worldBounds), (0, _webgl_utilsFs.orthoCam2d)((0, _List.ofArray)([new _webgl_builder_interfacesFs.GlCamProp(0, "cam"), new _webgl_builder_interfacesFs.GlCamProp(2, (0, _vectorsFs.Vec4Module_vec4)(0, 0.4, 0.4, 0.1)), new _webgl_builder_interfacesFs.GlCamProp(7, 10)])), (0, _webgl_utilsFs.shared)("svertex2d", "sfragment2d", (0, _List.singleton)((0, _webgl_utilsFs.attribute)("a_texCoords0", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlAttrProp(4, new Float64Array([0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1])))))), (0, _webgl_utilsFs.object)("vertex2d", "fragment2d", (0, _List.ofArray)([new _webgl_builder_interfacesFs.GlObjProp(0, "tri1"), _glcapabilitiesFs.cullBack, (0, _globjFs.position2dv)((0, _boundsFs.Bounds__get_Center)(worldBounds)), (0, _webgl_utilsFs.attribute)("a_position", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlAttrProp(4, quad))), (0, _webgl_utilsFs.texture)((0, _List.ofArray)([new _webgl_builder_interfacesFs.GlTextureProp(0, "tex1"), (0, _gltextureFs.pixelImageId)("star")]))])), (0, _webgl_utilsFs.object)("vertex2d", "fragment2d", (0, _List.ofArray)([new _webgl_builder_interfacesFs.GlObjProp(0, "tri2"), _glcapabilitiesFs.cullBack, (0, _globjFs.position2dv)((0, _boundsFs.Bounds__get_Center)((0, _boundsFs.Bounds__get_Quadrant1)(worldBounds))), new _webgl_builder_interfacesFs.GlObjProp(25, 0.25), (0, _webgl_utilsFs.attribute)("a_position", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlAttrProp(11, "tri1.a_position"))), (0, _webgl_utilsFs.texture)((0, _List.ofArray)([new _webgl_builder_interfacesFs.GlTextureProp(22, "tri1.tex1"), new _webgl_builder_interfacesFs.GlTextureProp(12, 9729)]))]))]))]));

    var update = function update(_arg1) {};

    return [canvas, update, false, 60 * 5];
  };

  var grid = function grid() {
    var canvas_1 = (0, _webgl_utilsFs.glcanvas)("myCanvas", (0, _List.ofArray)([new _webgl_builder_interfacesFs.WebglProp(2, 400), new _webgl_builder_interfacesFs.WebglProp(3, 400), new _webgl_builder_interfacesFs.WebglProp(14), new _webgl_builder_interfacesFs.WebglProp(6, new _webgl_builder_interfacesFs.GlPixelStorage(2)), (0, _webgl_utilsFs.scene)((0, _List.ofArray)([new _webgl_builder_interfacesFs.GlSceneProp(8, worldBounds), (0, _webgl_utilsFs.orthoCam2d)((0, _List.ofArray)([new _webgl_builder_interfacesFs.GlCamProp(0, "cam"), new _webgl_builder_interfacesFs.GlCamProp(2, (0, _vectorsFs.Vec4Module_vec4)(0, 0.4, 0.4, 0.1)), new _webgl_builder_interfacesFs.GlCamProp(7, 10)])), (0, _webgl_utilsFs.shared)("svertex2d", "sfragment2d", (0, _List.singleton)((0, _webgl_utilsFs.attribute)("a_texCoords0", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlAttrProp(4, new Float64Array([0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1])))))), (0, _webgl_utilsFs.object)("vertex2d", "fragment2d", (0, _List.ofArray)([new _webgl_builder_interfacesFs.GlObjProp(0, "grid"), _glcapabilitiesFs.cullBack, (0, _globjFs.position2dv)((0, _boundsFs.Bounds__get_Center)(worldBounds)), (0, _webgl_utilsFs.attribute)("a_position", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlAttrProp(4, quad))), (0, _webgl_utilsFs.texture)((0, _List.empty)())]))]))]));

    var update_1 = function update_1(_arg2) {};

    return [canvas_1, update_1, false, 60 * 5];
  };

  (0, _String.toConsole)((0, _String.printf)("testWorld.basic"));
  run(basic);
  (0, _String.toConsole)((0, _String.printf)("testWorld.grid"));
  run(grid);
}

function testGrid() {
  var gridUbo = "\nuniform grid {\n  vec4 lineColor;\n  float lineWidth;\n  float axisLineWidth;\n  vec2 size;\n  ivec2 axisDim;\n};\n";
  var svertex2d = "#version 300 es\n#include precision\n#include camera-ubo\n// #include grid-ubo\n\nvoid main() {\n  gl_Position = projMat * viewMat * vec4(0.0, 0.0, 0.0, 0.0);\n}";
  var sfragment2d = "#version 300 es\n#include precision\n#include out-color\n\nvoid main() {\n  glFragColor = vec4(0.0, 0.0, 0.0, 0.0);\n}";
  var grid2Drect = "#version 300 es\n#include camera-ubo\n#include grid-ubo\n#include model-params\n#include vec2\n#include lines2d-vertex\n\n// x, y: point.  z, w: Adjustment (x, y) for line start point.\nconst vec4 cornerTemplate[] = vec4[4](\n  vec4(-0.5, -0.5, -0.5, 0.0),\n  vec4(0.5, -0.5, 0.0, -0.5),\n  vec4(0.5, 0.5, 0.5, 0.0),\n  vec4(-0.5, 0.5, 0.0, 0.5)\n);\n\nconst ivec2 abTemplate[] = ivec2[4](\n  ivec2(0, 1),\n  ivec2(1, 2),\n  ivec2(2, 3),\n  ivec2(3, 0)\n);\n\nout vec4 v_fillColor;\n\nvoid main() {\n  #line 1987\n  vec2 halfSize = size * 0.5;\n  vec2 cellSize = halfSize / vec2(axisDim);\n  ivec2 count = axisDim * 2;\n  int instanceCount = int(count.x * count.y);\n  vec2 start = -cellSize * 0.5 - vec2(axisDim - 1) * cellSize;\n\n  int cornerID = gl_VertexID / 6;\n  int vertexID = gl_VertexID % 6;\n  ivec2 colRow = ivec2(gl_InstanceID % count.x, gl_InstanceID / count.x);\n  vec2 center = start + vec2(colRow) * cellSize;\n  ivec2 ab = abTemplate[cornerID];\n  vec2 a = cornerTemplate[ab.x].xy * cellSize + cornerTemplate[ab.x].zw * lineWidth;\n  vec2 b = cornerTemplate[ab.y].xy * cellSize;\n  vec2 vertex = line2D(a, b, lineWidth, vertexID);\n  vertex += center;\n  vec4 position = vec4(vertex, 0.0, 1.0);\n\n  position = projMat * viewMat * modelMat * position;\n\n  gl_Position = position;\n  v_fillColor = lineColor;\n}";
  var grid2Dline = "#version 300 es\n#include camera-ubo\n#include grid-ubo\n#include model-params\n#include vec2\n#include lines2d-vertex\n\n// x, y: point a.  z, w: point b.\nconst vec4 edgeTemplate[] = vec4[2](\n  vec4(0.0, -0.5, 0.0, 0.5), // Vertical\n  vec4(-0.5, 0.0, 0.5, 0.0)  // Horizontal\n);\n\nconst vec2 offsetTemplate[] = vec2[2](\n  vec2(1.0, 0.0), // Vertical\n  vec2(0.0, 1.0)  // Horizontal\n);\n\nout vec4 v_fillColor;\n\nfloat isEqual(int value, int base) { return step(float(base), float(value)) * step(float(value), float(base)); }\n\nvoid main() {\n#line 2034\n  vec2 halfSize = size * 0.5;\n  vec2 cellSize = halfSize / vec2(axisDim);\n  ivec2 count = axisDim * 2 + 1;\n  int instanceCount = count.x + count.y;\n  vec2 start = -vec2(axisDim) * cellSize;\n  int edgeID = int(step(float(count.x), float(gl_InstanceID)));\n  vec4 edge = edgeTemplate[edgeID];\n  vec2 ofs = offsetTemplate[edgeID];\n\n  vec2 a = edge.xy * size;\n  vec2 b = edge.zw * size;\n\n  int vertexID = gl_VertexID % 6;\n  ivec2 colRow = ivec2(gl_InstanceID % count.x);\n  colRow.y = gl_InstanceID - count.x;\n  vec2 isAxisv = vec2(isEqual(colRow.x, axisDim.x), isEqual(colRow.y, axisDim.y));\n  vec2 center = start + vec2(colRow) * cellSize;\n  center *= ofs;\n  float isAxis = isAxisv.x * ofs.x + isAxisv.y * ofs.y;\n  float width = mix(lineWidth, axisLineWidth, isAxis);\n  vec2 vertex = line2D(a, b, width, vertexID);\n  vertex += center;\n  vec4 position = vec4(vertex, 0.0, 1.0);\n\n  position = projMat * viewMat * modelMat * position;\n\n  gl_Position = position;\n  v_fillColor = lineColor;\n}";
  var fragment2d = "#version 300 es\n#include precision\n#include out-color\n\nin vec4 v_fillColor;\n\nvoid main() {\n  glFragColor = v_fillColor;\n}";
  (0, _webgl_shader_utilsFs.addShaderInclude)("grid-ubo", gridUbo);
  (0, _webgl_shader_utilsFs.addVertexShaderSource)("svertex2d", svertex2d);
  (0, _webgl_shader_utilsFs.addFragmentShaderSource)("sfragment2d", sfragment2d);
  (0, _webgl_shader_utilsFs.addVertexShaderSource)("grid2Drect", grid2Drect);
  (0, _webgl_shader_utilsFs.addVertexShaderSource)("grid2Dline", grid2Dline);
  (0, _webgl_shader_utilsFs.addFragmentShaderSource)("fragment2d", fragment2d);
  var viewport = (0, _boundsFs.BoundsModule_boundsSize)(myCanvas.width, myCanvas.height);
  var worldBounds = (0, _boundsFs.BoundsModule_boundsCenter)(0, 0, (0, _boundsFs.Bounds__get_Width)(viewport), (0, _boundsFs.Bounds__get_Height)(viewport));
  var size = (0, _vectorsFs.Vec2_op_Multiply_5E235CE0)((0, _boundsFs.Bounds__get_Size)(worldBounds), (0, _vectorsFs.Vec2Module_vec2)(0.8, 0.8));
  var halfSize = (0, _vectorsFs.Vec2_op_Multiply_Z668A51BC)(size, 0.5);
  var sx = (0, _vectorsFs.Vec2_op_Division_5E235CE0)(halfSize, (0, _vectorsFs.Vec2_Create_7B00E9A0)(2, 2));
  var cellSize = sx;
  var halfCount = (0, _vectorsFs.Vec2Module_vec2)(Math.ceil(halfSize.values[0] / cellSize.values[0]), Math.ceil(halfSize.values[1] / cellSize.values[1]));
  var count = (0, _vectorsFs.Vec2_op_Multiply_Z668A51BC)(halfCount, 2);
  var colCount = ~~count.values[0] | 0;
  var rowCount = ~~count.values[1] | 0;
  var vertexCount = 24;
  var instanceCount = colCount * rowCount | 0;
  var lineVertexCount = 6;
  var lineInstanceCount = colCount + rowCount + 2 | 0;
  (0, _String.toConsole)((0, _String.interpolate)("cellSize: %P()", [cellSize]));
  (0, _String.toConsole)((0, _String.interpolate)("halfCount: %P()", [halfCount]));

  var grid = function grid() {
    var canvas = (0, _webgl_utilsFs.glcanvas)("myCanvas", (0, _List.ofArray)([new _webgl_builder_interfacesFs.WebglProp(5, worldBounds), new _webgl_builder_interfacesFs.WebglProp(14), new _webgl_builder_interfacesFs.WebglProp(6, new _webgl_builder_interfacesFs.GlPixelStorage(2)), (0, _webgl_utilsFs.scene)((0, _List.ofArray)([new _webgl_builder_interfacesFs.GlSceneProp(1, 2), new _webgl_builder_interfacesFs.GlSceneProp(2, 1), (0, _webgl_utilsFs.orthoCam2d)((0, _List.ofArray)([new _webgl_builder_interfacesFs.GlCamProp(0, "cam"), new _webgl_builder_interfacesFs.GlCamProp(2, (0, _vectorsFs.Vec4Module_vec4)(0, 0.4, 0.4, 0.1)), new _webgl_builder_interfacesFs.GlCamProp(7, 10)])), (0, _webgl_utilsFs.shared)("svertex2d", "sfragment2d", (0, _List.empty)()), (0, _webgl_utilsFs.object)("grid2Drect", "fragment2d", (0, _List.ofArray)([new _webgl_builder_interfacesFs.GlObjProp(0, "gridRect"), new _webgl_builder_interfacesFs.GlObjProp(19, 0), new _webgl_builder_interfacesFs.GlObjProp(3, vertexCount), new _webgl_builder_interfacesFs.GlObjProp(6, instanceCount), _glcapabilitiesFs.cullBack, (0, _webgl_utilsFs.ubo)("grid", (0, _List.ofArray)([(0, _webgl_utilsFs.u)("lineColor", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, (0, _vectorsFs.Vec4__get_Values)((0, _vectorsFs.Vec4Module_vec4)(0, 0, 1, 1))))), (0, _webgl_utilsFs.u)("lineWidth", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, 1))), (0, _webgl_utilsFs.u)("axisLineWidth", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, 3))), (0, _webgl_utilsFs.u)("size", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, (0, _vectorsFs.Vec2__get_Values)(size)))), (0, _webgl_utilsFs.u)("axisDim", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, new Int32Array([~~halfCount.values[0], ~~halfCount.values[1]]))))]))])), (0, _webgl_utilsFs.object)("grid2Dline", "fragment2d", (0, _List.ofArray)([new _webgl_builder_interfacesFs.GlObjProp(0, "gridLine"), new _webgl_builder_interfacesFs.GlObjProp(3, lineVertexCount), new _webgl_builder_interfacesFs.GlObjProp(6, lineInstanceCount), _glcapabilitiesFs.cullBack, (0, _webgl_utilsFs.ubo)("grid", (0, _List.ofArray)([(0, _webgl_utilsFs.u)("lineColor", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, (0, _vectorsFs.Vec4__get_Values)((0, _vectorsFs.Vec4Module_vec4)(0, 0, 0, 1))))), (0, _webgl_utilsFs.u)("lineWidth", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, 1))), (0, _webgl_utilsFs.u)("axisLineWidth", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, 3))), (0, _webgl_utilsFs.u)("size", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, (0, _vectorsFs.Vec2__get_Values)(size)))), (0, _webgl_utilsFs.u)("axisDim", (0, _List.singleton)(new _webgl_builder_interfacesFs.GlUniformProp(0, new Int32Array([~~halfCount.values[0], ~~halfCount.values[1]]))))]))]))]))]));

    var update = function update(_arg1) {};

    return [canvas, update, false, 2];
  };

  (0, _String.toConsole)((0, _String.printf)("testGrid.grid"));
  run(grid);
}

function testGridObject() {
  var viewport = (0, _boundsFs.BoundsModule_boundsSize)(myCanvas.width, myCanvas.height);
  var dim = 34;
  var worldBounds = (0, _boundsFs.BoundsModule_boundsCenterHalf)(0, 0, dim, dim);
  var worldScale = (0, _boundsFs.Bounds__get_HalfSize)(viewport).values[0] / dim;

  var grid_1 = function grid_1() {
    var canvas = (0, _webgl_utilsFs.glcanvas)("myCanvas", (0, _List.ofArray)([new _webgl_builder_interfacesFs.WebglProp(5, worldBounds), new _webgl_builder_interfacesFs.WebglProp(14), (0, _webgl_utilsFs.scene)((0, _List.ofArray)([new _webgl_builder_interfacesFs.GlSceneProp(10, worldScale), new _webgl_builder_interfacesFs.GlSceneProp(1, 3), new _webgl_builder_interfacesFs.GlSceneProp(2, 1), (0, _webgl_utilsFs.orthoCam2d)((0, _List.ofArray)([new _webgl_builder_interfacesFs.GlCamProp(0, "cam"), new _webgl_builder_interfacesFs.GlCamProp(2, (0, _vectorsFs.Vec4Module_vec4)(0, 0.4, 0.4, 0.1)), new _webgl_builder_interfacesFs.GlCamProp(7, 10)])), _webgl_utilsFs.sharedObjectWithCamera2d]))]));
    var renderer = (0, _rendererFs.GlRenderer_$ctor)();
    var scene = canvas.Scenes[0];
    var grid = (0, _rendererFs.GlRenderer__Grid2D_Z3C25B98C)(renderer, scene, (0, _vectorsFs.Vec2_op_Subtraction_Z668A51BC)((0, _boundsFs.Bounds__get_Size)(worldBounds), 4), 2);

    var update = function update(time) {
      (0, _grid2dFs.Grid2D__set_MinorTick_5E38073B)(grid, time % 5 + 1);
    };

    return [canvas, update, false, 60 * 2];
  };

  (0, _String.toConsole)((0, _String.printf)("testGridObject.grid"));
  run(grid_1);
}

function testParallax() {
  var viewport = (0, _boundsFs.BoundsModule_boundsSize)(myCanvas.width, myCanvas.height);
  var halfDim = 34;
  var dim = halfDim * 2;
  var worldBounds = (0, _boundsFs.BoundsModule_boundsCenterHalf)(0, 0, dim, dim);
  var worldScale = (0, _boundsFs.Bounds__get_HalfSize)(viewport).values[0] / halfDim;

  var basic = function basic() {
    var canvas = (0, _webgl_utilsFs.glcanvas)("myCanvas", (0, _List.ofArray)([new _webgl_builder_interfacesFs.WebglProp(5, worldBounds), new _webgl_builder_interfacesFs.WebglProp(14), (0, _webgl_utilsFs.scene)((0, _List.ofArray)([new _webgl_builder_interfacesFs.GlSceneProp(10, worldScale), new _webgl_builder_interfacesFs.GlSceneProp(1, 3), new _webgl_builder_interfacesFs.GlSceneProp(2, 1), (0, _webgl_utilsFs.orthoCam2d)((0, _List.ofArray)([new _webgl_builder_interfacesFs.GlCamProp(0, "cam"), new _webgl_builder_interfacesFs.GlCamProp(2, (0, _vectorsFs.Vec4Module_vec4)(0, 0.4, 0.4, 0.1)), new _webgl_builder_interfacesFs.GlCamProp(7, 10)])), (0, _webgl_utilsFs.orthoCam2d)((0, _List.ofArray)([new _webgl_builder_interfacesFs.GlCamProp(0, "cam2"), new _webgl_builder_interfacesFs.GlCamProp(14, (0, _boundsFs.Bounds__get_Quadrant1)(viewport)), new _webgl_builder_interfacesFs.GlCamProp(2, (0, _vectorsFs.Vec4Module_vec4)(0.4, 0.4, 0, 0.1)), new _webgl_builder_interfacesFs.GlCamProp(7, 10)])), _webgl_utilsFs.sharedObjectWithCamera2d]))]));
    var renderer = (0, _rendererFs.GlRenderer_$ctor)();
    var scene = canvas.Scenes[0];
    var cam = (0, _List.head)(scene.Cameras);
    var cam2 = (0, _glsceneFs.getCamera)("cam2")(scene);
    var grid = (0, _rendererFs.GlRenderer__Grid2D_Z3C25B98C)(renderer, scene, (0, _vectorsFs.Vec2_op_Subtraction_Z668A51BC)((0, _boundsFs.Bounds__get_Size)(worldBounds), 2), 2, "", "", "cam", 4.5);
    var v1 = (0, _rendererFs.GlRenderer__Vector2D_Z3C25B98C)(renderer, scene, (0, _vectorsFs.Vec2Module_vec2)(5, -10), -1, "v1", "", "cam", 2.1);
    var v2 = (0, _rendererFs.GlRenderer__Vector2D_Z3C25B98C)(renderer, scene, (0, _vectorsFs.Vec2Module_vec2)(10, 10), -1, "v2", "", "cam", 1);
    (0, _webglobjectFs.WebglObject__set_Position_Z66910A62)(v1, (0, _vectorsFs.Vec3_Create_39DFA7C2)((0, _vectorobject2dFs.VectorObject2D__get_Vector)(v2), 0));
    (0, _vectorobject2dFs.VectorObject2D__set_LineWidth_5E38073B)(v1, 8);
    (0, _vectorobject2dFs.VectorObject2D__set_LineWidth_5E38073B)(v2, 10);
    (0, _vectorobject2dFs.VectorObject2D__set_LineColor_Z66910A67)(v2, (0, _vectorsFs.Vec4Module_vec4)(0.3, 0, 0.5, 1));
    var angle = 0;

    var update = function update(time) {
      var maxView = (0, _vectorsFs.Vec2_op_Multiply_Z668A51BC)((0, _vectorsFs.Vec2_op_Subtraction_5E235CE0)((0, _boundsFs.Bounds__get_Size)(worldBounds), cam.ViewSize), 0.5);
      angle = angle + 3;

      if (angle > 360) {
        angle = angle - 360;
      }

      var sin = Math.sin(angle * (3.141592653589793 / 180));
      var x = sin * maxView.values[0];
      var data_1 = cam;
      (0, _glcameraFs.panToXYZ)(x, 0, data_1.LookAt.values[2], data_1);
    };

    return [canvas, update, true, 60 * 10];
  };

  (0, _String.toConsole)((0, _String.printf)("testParallax.basic"));
  run(basic);
}

function testLink() {
  var viewport = (0, _boundsFs.BoundsModule_boundsSize)(myCanvas.width, myCanvas.height);
  var halfDim = 16;
  var dim = halfDim * 2;
  var worldBounds = (0, _boundsFs.BoundsModule_boundsCenter)(0, 0, dim, dim);

  var basic = function basic() {
    var canvas = (0, _webgl_utilsFs.glcanvas)("myCanvas", (0, _List.ofArray)([new _webgl_builder_interfacesFs.WebglProp(5, worldBounds), new _webgl_builder_interfacesFs.WebglProp(14), (0, _webgl_utilsFs.scene)((0, _List.ofArray)([new _webgl_builder_interfacesFs.GlSceneProp(10, 5), new _webgl_builder_interfacesFs.GlSceneProp(1, 3), new _webgl_builder_interfacesFs.GlSceneProp(2, 1), (0, _webgl_utilsFs.orthoCam2d)((0, _List.ofArray)([new _webgl_builder_interfacesFs.GlCamProp(0, "cam"), new _webgl_builder_interfacesFs.GlCamProp(2, (0, _vectorsFs.Vec4Module_vec4)(0, 0.4, 0.4, 0.1)), new _webgl_builder_interfacesFs.GlCamProp(7, 10)])), _webgl_utilsFs.sharedObjectWithCamera2d]))]));
    var renderer = (0, _rendererFs.GlRenderer_$ctor)();
    var scene = canvas.Scenes[0];
    var cam = (0, _List.head)(scene.Cameras);
    var v1 = (0, _rendererFs.GlRenderer__Vector2D_Z3C25B98C)(renderer, scene, (0, _vectorsFs.Vec2Module_vec2)(5, 5), -1, "v1", "");
    var v2 = (0, _rendererFs.GlRenderer__Vector2D_Z3C25B98C)(renderer, scene, (0, _vectorsFs.Vec2Module_vec2)(5, -5), -1, "v2", "v1");
    var v3 = (0, _rendererFs.GlRenderer__Vector2D_Z3C25B98C)(renderer, scene, (0, _vectorsFs.Vec2Module_vec2)(5, 5), -1, "v3", "v2");
    (0, _vectorobject2dFs.VectorObject2D__set_LineWidth_5E38073B)(v1, 3);
    (0, _vectorobject2dFs.VectorObject2D__set_LineColor_Z66910A67)(v1, (0, _vectorsFs.Vec4Module_vec4)(0.3, 0, 0.5, 1));
    (0, _webglobjectFs.WebglObject__set_Position_Z66910A62)(v2, (0, _vectorsFs.Vec3_Create_39DFA7C2)((0, _vectorobject2dFs.VectorObject2D__get_Vector)(v1), 0));
    (0, _vectorobject2dFs.VectorObject2D__set_LineWidth_5E38073B)(v2, 3);
    (0, _webglobjectFs.WebglObject__set_Position_Z66910A62)(v3, (0, _vectorsFs.Vec3_Create_39DFA7C2)((0, _vectorobject2dFs.VectorObject2D__get_Vector)(v2), 0));
    (0, _vectorobject2dFs.VectorObject2D__set_LineWidth_5E38073B)(v3, 3);
    var angle = 0;

    var update = function update(time) {
      var maxView = (0, _vectorsFs.Vec2_op_Multiply_Z668A51BC)((0, _vectorsFs.Vec2_op_Subtraction_5E235CE0)((0, _boundsFs.Bounds__get_Size)(worldBounds), cam.ViewSize), 0.5);
      angle = angle + 3;

      if (angle > 360) {
        angle = angle - 360;
      }

      var sin = Math.sin(angle * (3.141592653589793 / 180));
      (0, _webglobjectFs.WebglObject__set_Scale_5E38073B)(v1, 0.3 + Math.abs(sin));
      (0, _webglobjectFs.WebglObject__set_AngleDegreesZ_2F2451A2)(v1, angle * 1);
      (0, _webglobjectFs.WebglObject__set_AngleDegreesZ_2F2451A2)(v2, sin * 360 * 1);
      (0, _webglobjectFs.WebglObject__set_Scale_5E38073B)(v3, 0.3 + Math.abs(1.6 - sin));
    };

    return [canvas, update, false, 60 * 10];
  };

  (0, _String.toConsole)((0, _String.printf)("testLink.basic"));
  run(basic);
}

function testLine() {
  var viewport = (0, _boundsFs.BoundsModule_boundsSize)(myCanvas.width, myCanvas.height);
  var ofs = 0;
  var ofs2 = ofs * 2;
  var viewport_1 = (0, _boundsFs.BoundsModule_bounds)(ofs, ofs, myCanvas.width - ofs2, myCanvas.height - ofs2);
  var halfDim = 3;
  var dim = halfDim * 2;
  var worldBounds = (0, _boundsFs.BoundsModule_boundsCenter)(0, 0, dim, dim);
  var worldScale = (0, _boundsFs.Bounds__get_HalfSize)(viewport_1).values[0] / halfDim;

  var basic = function basic() {
    var canvas = (0, _webgl_utilsFs.glcanvas)("myCanvas", (0, _List.ofArray)([new _webgl_builder_interfacesFs.WebglProp(5, worldBounds), new _webgl_builder_interfacesFs.WebglProp(14), (0, _webgl_utilsFs.scene)((0, _List.ofArray)([new _webgl_builder_interfacesFs.GlSceneProp(10, worldScale), new _webgl_builder_interfacesFs.GlSceneProp(1, 3), new _webgl_builder_interfacesFs.GlSceneProp(2, 1), (0, _webgl_utilsFs.orthoCam2d)((0, _List.ofArray)([new _webgl_builder_interfacesFs.GlCamProp(0, "cam"), new _webgl_builder_interfacesFs.GlCamProp(14, viewport_1), new _webgl_builder_interfacesFs.GlCamProp(2, (0, _vectorsFs.Vec4Module_vec4)(0, 0.4, 0.4, 0.1)), new _webgl_builder_interfacesFs.GlCamProp(7, 10)])), _webgl_utilsFs.sharedObjectWithCamera2d]))]));
    var renderer = (0, _rendererFs.GlRenderer_$ctor)();
    var scene = canvas.Scenes[0];
    var cam = (0, _List.head)(scene.Cameras);
    var grid = (0, _rendererFs.GlRenderer__Grid2D_Z3C25B98C)(renderer, scene, (0, _vectorsFs.Vec2_op_Subtraction_Z668A51BC)((0, _boundsFs.Bounds__get_Size)(worldBounds), 0), 2);
    var line1 = (0, _rendererFs.GlRenderer__Line2D_3343692B)(renderer, scene, (0, _vectorsFs.Vec2Module_vec2)(0, 0.5), (0, _vectorsFs.Vec2Module_vec2)(2, 1.5));
    var line2 = (0, _rendererFs.GlRenderer__Line2D_3343692B)(renderer, scene, (0, _vectorsFs.Vec2Module_vec2)(2, -2), (0, _vectorsFs.Vec2Module_vec2)(1, -1));
    var line3 = (0, _rendererFs.GlRenderer__Line2D_3343692B)(renderer, scene, (0, _vectorsFs.Vec2Module_vec2)(-1.5, -2), (0, _vectorsFs.Vec2Module_vec2)(-0.5, -1));
    (0, _lineobjects2dFs.LineObjects2D__set_LineWidth_5E38073B)(line1, worldScale);
    (0, _lineobjects2dFs.LineObjects2D__set_StrokeColor_Z66910A67)(line1, (0, _vectorsFs.Vec4Module_vec4)(0, 0, 1, 1));
    (0, _lineobjects2dFs.LineObjects2D__set_LineCap_7B1263D0)(line1, 1);
    (0, _lineobjects2dFs.LineObjects2D__set_LineWidth_5E38073B)(line2, worldScale * 0.5);
    (0, _lineobjects2dFs.LineObjects2D__set_LineCap_7B1263D0)(line2, 2);
    (0, _lineobjects2dFs.LineObjects2D__set_LineWidth_5E38073B)(line3, worldScale * 0.25);
    (0, _String.toConsole)((0, _String.interpolate)("worldScale %P()", [worldScale]));
    var angle = 0;

    var update = function update(time) {
      angle = angle + 3;

      if (angle > 360) {
        angle = angle - 360;
      }

      var sin = Math.sin(angle * (3.141592653589793 / 180));
    };

    return [canvas, update, false, 60 * 10];
  };

  (0, _String.toConsole)((0, _String.printf)("testLine.basic"));
  run(basic);
}

function testLinePath() {
  var viewport = (0, _boundsFs.BoundsModule_boundsSize)(myCanvas.width, myCanvas.height);
  var ofs = 0;
  var ofs2 = ofs * 2;
  var viewport_1 = (0, _boundsFs.BoundsModule_bounds)(ofs, ofs, myCanvas.width - ofs2, myCanvas.height - ofs2);
  var halfDim = 3;
  var dim = halfDim * 2;
  var worldBounds = (0, _boundsFs.BoundsModule_boundsCenter)(0, 0, dim, dim);
  var worldScale = (0, _boundsFs.Bounds__get_HalfSize)(viewport_1).values[0] / halfDim;

  var basic = function basic() {
    var canvas = (0, _webgl_utilsFs.glcanvas)("myCanvas", (0, _List.ofArray)([new _webgl_builder_interfacesFs.WebglProp(5, worldBounds), new _webgl_builder_interfacesFs.WebglProp(14), (0, _webgl_utilsFs.scene)((0, _List.ofArray)([new _webgl_builder_interfacesFs.GlSceneProp(10, worldScale), new _webgl_builder_interfacesFs.GlSceneProp(1, 3), new _webgl_builder_interfacesFs.GlSceneProp(2, 1), (0, _webgl_utilsFs.orthoCam2d)((0, _List.ofArray)([new _webgl_builder_interfacesFs.GlCamProp(0, "cam"), new _webgl_builder_interfacesFs.GlCamProp(14, viewport_1), new _webgl_builder_interfacesFs.GlCamProp(2, (0, _vectorsFs.Vec4Module_vec4)(0, 0.4, 0.4, 0.1)), new _webgl_builder_interfacesFs.GlCamProp(7, 10)])), _webgl_utilsFs.sharedObjectWithCamera2d]))]));
    var renderer = (0, _rendererFs.GlRenderer_$ctor)();
    var scene = canvas.Scenes[0];
    var cam = (0, _List.head)(scene.Cameras);
    var path1 = (0, _rendererFs.GlRenderer__LinePath2D_Z183841EE)(renderer, scene, [(0, _vectorsFs.Vec2Module_vec2)(-2, 0), (0, _vectorsFs.Vec2Module_vec2)(-0.5, 1.5), (0, _vectorsFs.Vec2Module_vec2)(-0.5, 1.5), (0, _vectorsFs.Vec2Module_vec2)(0.5, 0)], -1, "path1");
    (0, _linepathobject2dFs.LinePathObject2D__set_LineWidth_5E38073B)(path1, worldScale * 0.8);
    (0, _linepathobject2dFs.LinePathObject2D__set_StrokeColor_Z66910A67)(path1, (0, _vectorsFs.Vec4Module_vec4)(0, 0, 1, 1));
    (0, _linepathobject2dFs.LinePathObject2D__set_LineCap_7B1263D0)(path1, 1);
    (0, _linepathobject2dFs.LinePathObject2D__set_LineJoin_Z229C3C20)(path1, 4);
    (0, _linepathobject2dFs.LinePathObject2D__set_MiterLimit_5E38073B)(path1, 10 + 0.5 * (0, _linepathobject2dFs.LinePathObject2D__get_LineWidth)(path1));
    var angle = 0;

    var update = function update(time) {
      angle = angle + 3;

      if (angle > 360) {
        angle = angle - 360;
      }

      var sin = Math.sin(angle * (3.141592653589793 / 180));
    };

    return [canvas, update, false, 60 * 10];
  };

  (0, _String.toConsole)((0, _String.printf)("testLinePath.basic"));
  run(basic);
}

function runTests() {
  testLinePath();
}

if (star.complete) {
  runTests();
} else {
  star.onload = function (_arg1) {
    runTests();
  };
}
},{"./mouse.fs.js":"../src/mouse.fs.js","./.fable/fable-library.3.0.0/String.js":"../src/.fable/fable-library.3.0.0/String.js","./.fable/fable-library.3.0.0/Seq.js":"../src/.fable/fable-library.3.0.0/Seq.js","./vectors.fs.js":"../src/vectors.fs.js","./bounds.fs.js":"../src/bounds.fs.js","./.fable/fable-library.3.0.0/Array.js":"../src/.fable/fable-library.3.0.0/Array.js","./.fable/fable-library.3.0.0/Option.js":"../src/.fable/fable-library.3.0.0/Option.js","./glscene.fs.js":"../src/glscene.fs.js","./webgl_builder_interfaces.fs.js":"../src/webgl_builder_interfaces.fs.js","./glcanvas.fs.js":"../src/glcanvas.fs.js","./glcamera.fs.js":"../src/glcamera.fs.js","./optionex.fs.js":"../src/optionex.fs.js","./globj.fs.js":"../src/globj.fs.js","./.fable/fable-library.3.0.0/Observable.js":"../src/.fable/fable-library.3.0.0/Observable.js","./webgl_shader_utils.fs.js":"../src/webgl_shader_utils.fs.js","./webgl_program_utils.fs.js":"../src/webgl_program_utils.fs.js","./typedarray_utils.fs.js":"../src/typedarray_utils.fs.js","./webgl_utils.fs.js":"../src/webgl_utils.fs.js","./.fable/fable-library.3.0.0/List.js":"../src/.fable/fable-library.3.0.0/List.js","./.fable/fable-library.3.0.0/Timer.js":"../src/.fable/fable-library.3.0.0/Timer.js","./gluniform.fs.js":"../src/gluniform.fs.js","./glattrib.fs.js":"../src/glattrib.fs.js","./glcapabilities.fs.js":"../src/glcapabilities.fs.js","./matricies.fs.js":"../src/matricies.fs.js","./gltexture.fs.js":"../src/gltexture.fs.js","./renderer.fs.js":"../src/renderer.fs.js","./grid2d.fs.js":"../src/grid2d.fs.js","./webglobject.fs.js":"../src/webglobject.fs.js","./vectorobject2d.fs.js":"../src/vectorobject2d.fs.js","./lineobjects2d.fs.js":"../src/lineobjects2d.fs.js","./linepathobject2d.fs.js":"../src/linepathobject2d.fs.js"}],"C:/Users/Blaine/AppData/Roaming/npm/node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "57315" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

          if (didAccept) {
            handled = true;
          }
        }
      }); // Enable HMR for CSS by default.

      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });

      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }
}
},{}]},{},["C:/Users/Blaine/AppData/Roaming/npm/node_modules/parcel-bundler/src/builtins/hmr-runtime.js","../src/App.fs.js"], null)
//# sourceMappingURL=/App.fs.23f85c9c.js.map